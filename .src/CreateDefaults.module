' Gambas module file

' Author Westwood JustLostintime
'Released Under:
'  GNU GENERAL Public LICENSE
'  Version 3, 29 June 2007
'  See project license file.

Public Sub _call()

  With FMain

    If Not Exist(.AsmComputerDefinitions) Then
      Try Shell.MkDir(.AsmComputerDefinitions)
    Endif

    If Not Exist(.AsmComputerDefinitions &/ "Default") Then
      Dim Comp As New ComputerDef
      Comp.Name = "Default"
      Comp.Speed = 500
      Comp.AutoStart = &h0200
      Comp.AutoStartActive = True
      Comp["RamMemory"] = [&h0000, &h0E000, .AsmBinaryDirectory &/ "mytb.bin"]
      Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin"]
      Comp["TTYSIM"] = [&h0E000, 16, "Default Tiny Basic running with CTMON65 monitor"]
      Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3"]
      Comp["HaltButton"] = [0, 0, "Quit Button"]
      Comp["ShowMhz"] = [0, 0, "3000"]
      Comp.Save(.AsmComputerDefinitions)
    Endif

    If Not Exist(.AsmComputerDefinitions &/ "TwinScreen") Then
      Comp = New ComputerDef
      Comp.Name = "TwinScreen"
      Comp.Speed = 500
      Comp.AutoStart = &h0200
      Comp.AutoStartActive = True
      Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin"]
      Comp["RamMemory"] = [&h0000, &h0E000, .AsmBinaryDirectory &/ "mytb.bin"]
      Comp["TTYSIM"] = [&h0E000, 16, "Default Tiny Basic running with CTMON65 monitor"]
      Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3"]
      Comp["HaltButton"] = [0, 0, "Quit Button"]
      Comp["ShowMhz"] = [0, 0, "3000"]
      Comp["TTYSIM:1"] = [&h0E020, 16, "Tiny Basic Debug Console"]
      Comp.Save(.AsmComputerDefinitions)
    Endif

    If Not Exist(.AsmComputerDefinitions &/ "CTMON2Rams") Then
      Comp = New ComputerDef
      Comp.Name = "CTMON2Rams"
      Comp.Speed = 500
      Comp.AutoStart = &h0200
      Comp.AutoStartActive = True
      Comp["RamMemory"] = [&h0000, &h00200, ""]
      Comp["RamMemory:1"] = [&h0200, &h0DE00, .AsmBinaryDirectory &/ "mytb.bin"]
      Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin"]
      Comp["TTYSIM"] = [&h0E000, 16, "CTMON2Ram Tiny Basic running with CTMON65 monitor"]
      Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3"]
      Comp["HaltButton"] = [0, 0, "Quit Button"]
      Comp.Save(.AsmComputerDefinitions)
    Endif

    If Not Exist(.AsmComputerDefinitions &/ "CTMONMMU") Then
      Comp = New ComputerDef
      Comp.Name = "CTMONMMU"
      Comp.Speed = 500
      Comp.AutoStart = &h0200
      Comp.AutoStartActive = True
      Comp["RamMemory"] = [&h0000, &h0200, ""]
      Comp["MMU"] = [&h0200, &h0DE00, "&h0E030,20;" & .AsmBinaryDirectory &/ "mytb.bin"]
      Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin"]
      Comp["TTYSIM"] = [&h0E000, 16, "CTMONMMU Tiny Basic running with CTMON65 monitor"]
      Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3"]
      Comp["HaltButton"] = [0, 0, "Quit Button"]
      Comp.Save(.AsmComputerDefinitions)
    Endif

    If Not Exist(.AsmComputerDefinitions &/ "CTMON65") Then
      Comp = New ComputerDef
      Comp.Name = "CTMON65"
      Comp.Speed = 500
      Comp.AutoStart = -1
      Comp.AutoStartActive = True
      Comp["RamMemory"] = [&h0000, &h0E000, .AsmBinaryDirectory &/ "mytb.bin"]
      Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin"]
      Comp["TTYSIM"] = [&h0E000, 16, "CTMON65 Running with Basic Loaded  at $0200"]
      Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3"]
      Comp["ResetButton"] = [0, 0, "Reset button"]
      Comp["HaltButton"] = [0, 0, "Quit Button"]
      Comp.Save(.AsmComputerDefinitions)
    Endif

    If Not Exist(.AsmComputerDefinitions &/ "CTMONTIMER") Then
      Comp = New ComputerDef
      Comp.Name = "CTMONTIMER"
      Comp.Speed = 500
      Comp.AutoStart = &h0200
      Comp.AutoStartActive = True
      Comp["RamMemory"] = [&h0000, &h0E000, .AsmBinaryDirectory &/ "useirq.bin"]
      Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin"]
      Comp["TTYSIM"] = [&h0E000, 16, "CTMONTIMER CTMON65 Running with Timer at $E020"]
      Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3"]
      Comp["IrqTimer"] = [&h0E020, 5, "1000"]
      Comp["CycleTimer"] = [&h0E030, 5, "5000"]
      Comp["ResetButton"] = [0, 0, "Reset button"]
      Comp["HaltButton"] = [0, 0, "Quit Button"]
      Comp["NMIButton"] = [0, 0, "NMI Button"]
      Comp["IrqButton"] = [0, 0, "IRQ Button"]
      Comp["ShowMhz"] = [0, 0, "3000"]
      Comp.Save(.AsmComputerDefinitions)
    Endif

    If Not Exist(.AsmComputerDefinitions &/ "C-Example") Then
      Comp = New ComputerDef
      Comp.Name = "C-Example"
      Comp.Speed = 999
      Comp.AutoStart = &h0200
      Comp.AutoStartActive = True
      Comp["RamMemory"] = [&h0000, &h0E000, .AsmBinaryDirectory &/ "hello.raw"]
      Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin"]
      Comp["TTYSIM"] = [&h0E000, 16, "cc65 c program hello.c running with CTMON65 monitor"]
      Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3"]
      Comp["HaltButton"] = [0, 0, "Quit Button"]
      Comp["ShowMhz"] = [0, 0, "3000"]
      Comp.Save(.AsmComputerDefinitions)
    Endif

    If Not Exist(.AsmComputerDefinitions &/ "console") Then
      Comp = New ComputerDef
      Comp.Name = "console"
      Comp.Speed = 999
      Comp.AutoStart = &h0200
      Comp.AutoStartActive = True
      Comp["RamMemory"] = [&h0000, &h0E000, .AsmBinaryDirectory &/ "hello.raw"]
      Comp["RomMemory"] = [&h0F000, &h01000, .AsmBinaryDirectory &/ "ctmon65.bin"]
      Comp["Console"] = [&h0E000, 16, "TinyBasic and ctmon65 on the console only\n\rF2:Quit Emulator F3:RESET CPU F4:NMI"]
      Comp["PiaDisk"] = [&h0E010, 16, .AsmDrivesDirectory & ":disk0:disk1:disk2:disk3"]
      Comp.Save(.AsmComputerDefinitions)
    Endif

    copyDirectory("dev", .AsmDeviceDirectory)
    copyDirectory("asm", .AsmSourceDirectory)
    copyDirectory("cc65", .Cc65SourceDirectory)
    copyDirectory("lst", .AsmLstDirectory)
    copyDirectory("sym", .AsmSymDirectory)
    copyDirectory("map", .AsmMapDirectory)
    copyDirectory("bin", .AsmBinaryDirectory)
    copyDirectory("drives", .AsmDrivesDirectory)
    copyDirectory("doc", .ASMDocumentDirectory)

  End With

Catch
  Error ("Create Defaults Error: "); Error.text;; Error.where

End

Sub copyDirectory(path As String, topath As String)

  If Not Exist(toPath) Then
    If FMain.Verbose Then Error "" & ("Create Default :");; toPath;; "From";; path
    Try Shell.MkDir(ToPath)
    If Error Then
      If FMain.Verbose Then Error "" & ("Unable to make directory ");; topath;; Error.text
      Return
    Endif
  Endif

  For Each s As String In Dir(path, "*", gb.directory)
    If FMain.Verbose Then Error "Copy SubDirectory : ";; path &/ s
    copyDirectory(path &/ s, ToPath &/ s)
  Next

  Dim SourceFile As String
  Dim DestFile As String

  For Each s As String In Dir(path, "*", gb.file)
    If Right(s, 1) = "~" Then Continue
    If Not IsDir(Path &/ s) And If Exist(ToPath &/ s) Then
      If FMain.Verbose Then Error "" & ("Compare Files ");; Quote(Path) &/ Quote(s);; "to";; Quote(ToPath &/ s)
      Try SourceFile = File.Load(Path &/ s)
      If Error Then
        If FMain.Verbose Then Error "" & ("Warning: Unable to read file for copy compare/copy ");; Quote(Path) &/ Quote(s)
        Continue
      Endif
      Try DestFile = File.Load(ToPath &/ s)
      If Error Then
        If FMain.Verbose Then Error "" & ("Warning: Unable to read file for copy compare/copy ");; Quote(ToPath &/ s)
        Continue
      Endif
      If DestFile = SourceFile Then
        Continue
      Else
        Dim Response As Integer
        If CliInterface.UpdateDevNoPrompt = False Then
          Response = Message.warning(("An Update Is available for ") & s & " \n" & ("Would you like to update?"), ("Yes"), ("No"), ("Yes to All"))
        Else
          Response = 1
        Endif
        If CliInterface.UpdateDevNoPrompt Or If Response = 1 Or If Response = 3 Then
          If response = 3 Then CliInterface.UpdateDevNoPrompt = True
          If FMain.Verbose Then Error "" & ("Updating ");; s;; ("Current Version Dated ");; Stat(ToPath &/ s).time;; "," & (" Available Version Date ");; Stat(Path &/ s).time
          Kill ToPath &/ s
        Else
          Continue
        Endif
      Endif
    Endif

    If FMain.Verbose Then Error "" & ("Copy :");; s
    Try Copy path &/ s To ToPath &/ s
    If Error Then
      If FMain.Verbose Then Error "" & ("Unable to copy file ");; ToPath &/ s;; ("from");; path &/ s;; ":";; Error.text
    Endif
  Next

End


