' Gambas class file

' Author Westwood JustLostintime
'Released Under:
'  GNU GENERAL Public LICENSE
'  Version 3, 29 June 2007
'  See project license file.

Fast Unsafe

ItemsWatchedList As New Watchitem[]

' Restore any watched symobls use during the last debug session
Static Public Sub RestoreWatched()

  If Not Me.visible Then Me.Show()

  Dim addr As String
  Dim Symbol As String

  For Each sKey As String In Settings.Keys
    If sKey Like "WatchVar/*" Then
      Symbol = Split(skey, "/")[1]
      Try addr = Disassembler.SymbolsByName[Symbol]                                 ' look it up the address may have changed
      If Error Or addr = "10000" Then
        Try addr = Eval("&H" & symbol)
        If Error Then
          addr = "0000"
        Else
          addr = Hex$(addr, 4)
        Endif
      Endif                                                       ' if not found then ust ignore it
      WatchMem.NewWatch(Symbol, addr, Settings[sKey &/ "Length"])                              ' The Legth was saved with the symbol name
    Endif
  Next

End


Public Sub NewWatch(Symbol As String, StartAddress As String, Optional length As Integer = 2)

  Dim start As String = Right$("0000" & StartAddress, 4)

  Dim a As New Watchitem(Symbol, Start, ItemsWatchedList.count, length) As "memupdater"

  Settings["WatchVar/" & Symbol &/ "Length"] = length

  ItemsWatchedList.Add(a)

  WatchList.Rows.Count = ItemsWatchedList.count

  WatchMem.Refresh()

End


Public Sub memupdater_updaterow(rownumber As Integer, info As String)

  Try WatchList[rownumber, 2].text = info

End


Public Sub Form_Open()

  WatchList.Columns.count = 3
  WatchList.Columns[0].Width = Settings["WatchWindow/Col0", 40]
  WatchList.Columns[1].Width = Settings["WatchWindow/Col1", 20]
  WatchList.Columns[0].title = "Symbols"
  WatchList.Columns[1].title = "Address"
  WatchList.Columns[2].title = "Data"

  WatchMem.w = Settings["WatchWindow/w", 400]
  WatchMem.h = Settings["WatchWindow/h", 100]
  WatchMem.x = Settings["WatchWindow/x", 100]
  WatchMem.y = Settings["WatchWindow/y", 100]

  If FMain.MyComputer.MemoryUpdates <> True Then
    EnableDisableWatch.text = "Enable"
  Else
    EnableDisableWatch.text = "Disable"
  Endif

End

Public Sub Form_Close()

  Settings["WatchWindow/w"] = WatchMem.w
  Settings["WatchWindow/h"] = WatchMem.h
  Settings["WatchWindow/x"] = WatchMem.x
  Settings["WatchWindow/y"] = WatchMem.y
  Settings["WatchWindow/Col0"] = WatchList.Columns[0].Width
  Settings["WatchWindow/Col1"] = WatchList.Columns[1].Width

End

Public Sub Form_Resize()

  WatchList.w = Me.w - 8
  WatchList.h = Me.h - WatchList.y - 4 - WatchButtons.h
  WatchButtons.y = WatchList.y + WatchList.h + 2

End


Public Sub WatchList_Data(Row As Integer, Column As Integer)

  Select Case column
    Case 0
      WatchList.Data.text = ItemsWatchedList[Row].Symbol
    Case 1
      WatchList.Data.text = "$" & ItemsWatchedList[Row].Address
    Case 3
      WatchList.Data.text = ItemsWatchedList[Row].DisplayData
  End Select

End

Public Sub RemoveWatch_Click()

  Dim theselection As Integer[] = WatchList.Rows.Selection

  For i As Integer = theselection.max DownTo 0
    Settings.Clear("WatchVar" &/ ItemsWatchedList[theselection[i]].Symbol, True)
    ItemsWatchedList[theselection[i]].ShutDown()
    WatchList.Rows.Remove(theselection[i])
    ItemsWatchedList.Remove(theselection[i])
  Next

  For i = 0 To ItemsWatchedList.max
    ItemsWatchedList[i].DisplayRow = i
  Next

End

Public Sub ClearAll_Click()

  FMain.MyComputer.MemoryUpdates = False

  WatchList.Clear()
  WatchList.Rows.Count = 0
  For Each a As Watchitem In ItemsWatchedList
    a.ShutDown()
  Next

  ItemsWatchedList.Clear()

End

Public Sub EnableDisableWatch_Click()

  If FMain.MyComputer.MemoryUpdates = True Then
    FMain.MyComputer.MemoryUpdates = False
    EnableDisableWatch.text = "Enable"
    WatchMem.title = "Watch Memory location - Disabled"
  Else
    FMain.MyComputer.MemoryUpdates = True
    EnableDisableWatch.text = "Disable"
    WatchMem.title = "Watch Memory location - Enabled"
  Endif

End

Public Sub UpdateEnableStateDisplay()

  If FMain.MyComputer.MemoryUpdates <> True Then
    EnableDisableWatch.text = "Enable"
    WatchMem.title = "Watch Memory location - Disabled"
  Else
    EnableDisableWatch.text = "Disable"
    WatchMem.title = "Watch Memory location - Enabled"
  Endif

  WatchMem.Refresh()

End



Public Sub WatchList_Change()

  Print "changed"

End

Public Sub AddWatch_Click()

  If WatchAddValue.text = "" Then Return
  NewWatch(WatchAddValue.text, WatchAddValue.text)
  WatchAddValue.text = ""

End
