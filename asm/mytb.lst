------- FILE mytb.asm LEVEL 1 PASS 6
      1 U2f3f				   input      processor	6502
      2 U2f3f ????						;=====================================================
      3 U2f3f ????						; Concurrent Tiny Basic, no longer Tiny
      4 U2f3f ????						; Derived from Bob's Tiny Basic, and Lots of
      5 U2f3f ????						; Free Time. Now abiut 6K Full OS features.
      6 U2f3f ????						;
      7 U2f3f ????						; While working on the Corsham Technologies KIM Clone
      8 U2f3f ????						; project, I wanted to include a TINY BASIC since that
      9 U2f3f ????						; was a highly desirable feature of early computers.
     10 U2f3f ????						;
     11 U2f3f ????						; Rather than negotiating copyright issues for
     12 U2f3f ????						; existing BASICs, I decided to just write one from
     13 U2f3f ????						; scratch.
     14 U2f3f ????						;
     15 U2f3f ????						; 10/07/2017
     16 U2f3f ????						;
     17 U2f3f ????						; This implements a stripped down Tiny BASIC
     18 U2f3f ????						; interpreter using the Interpretive Language (IL)
     19 U2f3f ????						; method as described in the first few issues of
     20 U2f3f ????						; Dr Dobb's Journal.  The IL interpreter can be used
     21 U2f3f ????						; to write various languages simply by changing the
     22 U2f3f ????						; IL code rather than the interpreter itself.
     23 U2f3f ????						;
     24 U2f3f ????						; 10/15/2021 v0.4 - Bob Applegate
     25 U2f3f ????						;		* Fixed major bug in findLine that
     26 U2f3f ????						;		  caused corrupted lines, crashes, etc.
     27 U2f3f ????						;		* If no parameter given to RND, assume
     28 U2f3f ????						;		  32766.
     29 U2f3f ????						;		* No more error 5 when a program
     30 U2f3f ????						;		  reaches the end without an END.
     31 U2f3f ????						;
     32 U2f3f ????						; 02/15/2022 v0.5 JustLostInTime@gmail.com
     33 U2f3f ????						;		 * Unexpanded version to play with everything
     34 U2f3f ????						;		 * Add some usefull system level functions
     35 U2f3f ????						;		 * allow a larger number of tiny basic formats
     36 U2f3f ????						;		 * Add byte at start of line holding length
     37 U2f3f ????						;		   for faster execution of goto and gosub
     38 U2f3f ????						;		 * Re-added gosub
     39 U2f3f ????						;		 * allow ; or , at end if print stmt
     40 U2f3f ????						;		   without CRLF being added.
     41 U2f3f ????						;		 * Added extended function erase to
     42 U2f3f ????						;		   use the extended ctmon65 rm file
     43 U2f3f ????						;		 * Fix quoted text to not have to backtrack
     44 U2f3f ????						;		 * Add IRQ handler, Call Gosub and Iret at end
     45 U2f3f ????						;		 * Add concurrency features
     46 U2f3f ????						;
     47 U2f3f ????						; www.corshamtech.com
     48 U2f3f ????						; bob@corshamtech.com
     49 U2f3f ????						; JustLostInTime@gmail.com
     50 U2f3f ????						;
     51 U2f3f ????						;=====================================================
     52 U2f3f ????						;
     53 U2f3f ????						; Create TRUE and FALSE values for conditionals.
     54 U2f3f ????						;
     55 U2f3f ????
     56 U2f3f ????	       00 00	   FALSE      equ	0
     57 U2f3f ????	       ff ff ff ff TRUE       equ	~FALSE
     58 U2f3f ????						;
     59 U2f3f ????						;---------------------------------------------------------
     60 U2f3f ????						; One of these must be set to indicate which environment
     61 U2f3f ????						; Tiny BASIC will be running in.  Here are the current
     62 U2f3f ????						; environments:
     63 U2f3f ????						;
     64 U2f3f ????						; KIM - This is a bare KIM-1.	You'll need to add a few
     65 U2f3f ????						; more K of RAM.
     66 U2f3f ????						;
     67 U2f3f ????						; XKIM - The Corsham Technologies xKIM extended monitor,
     68 U2f3f ????						; which enhances, without replacing, the standard KIM
     69 U2f3f ????						; monitor.  It gives access to routines to save/load files
     70 U2f3f ????						; to a micro SD card.
     71 U2f3f ????						;
     72 U2f3f ????						; CTMON65 is a from-scratch monitor written for the
     73 U2f3f ????						; Corsham Tech SS-50 6502 CPU board, but the monitor can
     74 U2f3f ????						; easily be ported to other systems.  It has support for
     75 U2f3f ????						; using a micro SD card for file storage/retrieval.
     76 U2f3f ????						;
     77 U2f3f ????	       00 00	   KIM	      equ	FALSE	;Basic KIM-1, no extensions
     78 U2f3f ????	       00 00	   XKIM       equ	FALSE	;Corsham Tech xKIM monitor
     79 U2f3f ????	       ff ff ff ff CTMON65    equ	TRUE	;Corsham Tech CTMON65
     80 U2f3f ????
     81 U2f3f ????						;
     82 U2f3f ????						;   Need to define some macros for the dasm assembler
     83 U2f3f ????						;
     84 U2f3f ????				      MACRO	dw
     85 U2f3f ????				      .word	{0}
     86 U2f3f ????				      ENDM
     87 U2f3f ????
     88 U2f3f ????				      MACRO	db
     89 U2f3f ????				      .byte	{0}
     90 U2f3f ????				      ENDM
     91 U2f3f ????
     92 U2f3f ????						;
     93 U2f3f ????						; If set, include disk functions.
     94 U2f3f ????						;
     95 U2f3f ????	       ff ff ff ff DISK_ACCESS equ	TRUE
     96 U2f3f ????						;
     97 U2f3f ????						; If ILTRACE is set then dump out the address of every
     98 U2f3f ????						; IL opcode before executing it.
     99 U2f3f ????						; 0 = off, 7=IL trace, 6 = Basic Prog Trace, 7+6 = both
    100 U2f3f ????						;
    101 U2f3f ????	       00 00	   ILTRACE    equ	%00000000	;%0100000 = Basic STMT Trace, %10000000 = il trace etc
    102 U2f3f ????						;
    103 U2f3f ????						; If FIXED is set, put the IL code and the user
    104 U2f3f ????						; program space at fixed locations in memory.	This is
    105 U2f3f ????						; meant only for debugging.
    106 U2f3f ????						;
    107 U2f3f ????	       00 00	   FIXED      equ	FALSE
    108 U2f3f ????						;
    109 U2f3f ????						; Sets the arithmetic stack depth.  This is *TINY*
    110 U2f3f ????						; BASIC, so keep this small!
    111 U2f3f ????						;
    112 U2f3f ????	       00 14	   MATHSTACKSIZE equ	20	;number of entries in math stack
    113 U2f3f ????	       00 14	   ILSTACKSIZE equ	20	;number of entries in ilstack
    114 U2f3f ????	       00 10	   GOSUBSTACKSIZE equ	16	;Depth of gosub/For-Next nesting max is 64 times TASKTABLE LENGTH must < 256
    115 U2f3f ????	       00 1b	   VARIABLESSIZE equ	27	;26 variables + 1 for exit code
    116 U2f3f ????	       00 0a	   TASKCOUNT  equ	10	;Task Table count, up to 64 tasks
    117 U2f3f ????	       00 ff	   TASKCYCLESDEFAULT equ	255	;Default Task Switch 0-255 uses a single byte
    118 U2f3f ????	       00 02	   TASKCYCLESHIGH equ	2	;hi order count
    119 U2f3f ????	       00 10	   MESSAGESMAX equ	GOSUBSTACKSIZE	;Not used msg q and gosub grow towards each other and over flow when they meet
    120 U2f3f ????						;
    121 U2f3f ????						; Gosub entry types
    122 U2f3f ????
    123 U2f3f ????	       00 01	   GOSUB_RTN  equ	$01	; This is a simple gosub return
    124 U2f3f ????	       00 81	   GOSUB_RTN_VALUE equ	$81	; subroutine will return a value
    125 U2f3f ????	       00 02	   GOSUB_FOR  equ	2	; Jump point for a for function
    126 U2f3f ????	       00 03	   GOSUB_NEXT equ	3	; Next interation and jump point
    127 U2f3f ????	       00 04	   GOSUB_MSG  equ	4	; this identifies the entry as an IPC message
    128 U2f3f ????	       00 05	   GOSUB_STACK_FRAME equ	5	; used to contain the gosubs stackframe info when passing parameters
    129 U2f3f ????						; 0 byte is the original stack offset, byte 1 is the paameter count
    130 U2f3f ????						; 2 byte  is unused, 3 byte  is the type GOSUB_STACK_FRAME
    131 U2f3f ????	       00 06	   GOSUB_STACK_SAVE equ	6	; SAVES THE FULL MATH STACK INFORMATION
    132 U2f3f ????	       00 07	   GOSUB_SCRATCH_PAD equ	7	; Used when a work space is needed in il code
    133 U2f3f ????						;
    134 U2f3f ????						; Common ASCII constants
    135 U2f3f ????						;
    136 U2f3f ????	       00 07	   BEL	      equ	$07
    137 U2f3f ????	       00 08	   BS	      equ	$08
    138 U2f3f ????	       00 09	   TAB	      equ	$09
    139 U2f3f ????	       00 0a	   LF	      equ	$0A
    140 U2f3f ????	       00 0d	   CR	      equ	$0D
    141 U2f3f ????	       00 22	   quote      equ	$22
    142 U2f3f ????	       00 20	   SPACE      equ	$20
    143 U2f3f ????	       00 2c	   COMMA      equ	',
    144 U2f3f ????	       00 3b	   SEMICOLON  equ	';
    145 U2f3f ????	       00 3a	   COLON      equ	':
    146 U2f3f ????	       00 24	   DOLLAR     equ	'$
    147 U2f3f ????						;
    148 U2f3f ????						; These are error codes
    149 U2f3f ????						;
    150 U2f3f ????	       00 00	   ERR_NONE   equ	0	;No Errror
    151 U2f3f ????	       00 01	   ERR_EXPR   equ	1	;expression error
    152 U2f3f ????	       00 02	   ERR_UNDER  equ	2	;stack underflow
    153 U2f3f ????	       00 03	   ERR_OVER   equ	3	;stack overflow
    154 U2f3f ????	       00 04	   ERR_EXTRA_STUFF equ	4	;Stuff at end of line
    155 U2f3f ????	       00 05	   ERR_SYNTAX equ	5	;various syntax errors
    156 U2f3f ????	       00 06	   ERR_DIVIDE_ZERO equ	6	;divide by zero
    157 U2f3f ????	       00 07	   ERR_READ_FAIL equ	7	;error loading file
    158 U2f3f ????	       00 08	   ERR_WRITE_FAIL equ	8	;error saving file
    159 U2f3f ????	       00 09	   ERR_NO_FILENAME equ	9	;Forgot to include the file name
    160 U2f3f ????	       00 0a	   ERR_FILE_NOT_FOUND equ	10	;The file name provided not found
    161 U2f3f ????	       00 0b	   ERR_STACK_UNDER_FLOW equ	11	;the gosub stack underflow
    162 U2f3f ????	       00 0c	   ERR_STACK_OVER_FLOW equ	12	;Stack overflow
    163 U2f3f ????	       00 0d	   ERR_BAD_LINE_NUMBER equ	13	;Bad line number specified Not found
    164 U2f3f ????	       00 0e	   ERR_NO_EMPTY_TASK_SLOT equ	14	;Unable to create a new task no/slots
    165 U2f3f ????	       00 0f	   ERR_INDEX_OUT_OF_RANGE equ	15	;Subscript out of range
    166 U2f3f ????	       00 10	   ERR_INVALID_PID equ	16	;Invalid PID provided
    167 U2f3f ????	       00 11	   ERR_OUT_OF_MSG_SPACE equ	17	;Out of space for new messsages
    168 U2f3f ????	       00 12	   ERR_INVALID_STK_FRAME equ	18	;The stack frame was expected not found
    169 U2f3f ????	       00 13	   ERR_NO_RETURN_VALUE_PROVIDED equ	19	;No value returned by a gofn call
    170 U2f3f ????	       00 14	   ERR_LINE_NOT_FOUND equ	20	;Gosub/goto/gofn line number not found
    171 U2f3f ????	       00 15	   ERR_IL_STACK_OVER_FLOW equ	21	;The IL return stack has overflowed
    172 U2f3f ????						;
    173 U2f3f ????						;=====================================================
    174 U2f3f ????						; Zero page storage.
    175 U2f3f ????						;
    176 U00f6 ????				      SEG.U	ZEROPAGE
    177 U0040					      org	$0040
    178 U0040
    179 U0040		       00	   ILTrace    ds	1	;non-zero means tracing
    180 U0041
    181 U0041							; The context is used to locate a task switch
    182 U0041							; it copies from here till all task fields are saved/swapped
    183 U0041							; The max number of tasks is 256 / context length
    184 U0041							; All positions POS values are plus one task table incldues
    185 U0041							; a leading status byte .
    186 U0041							;
    187 U0041		       00 41	   CONTEXT    equ	*
    188 U0041
    189 U0041		       00 00	   VARIABLES  ds	2	; 2 bytes pointer to, 26 A-Z
    190 U0041		       00 02	   VARIABLEPOS equ	* - CONTEXT
    191 U0043
    192 U0043		       00 00	   ILPC       ds	2	; IL program counter
    193 U0045		       00 00	   ILSTACK    ds	2	; IL call stack
    194 U0047		       00	   ILSTACKPTR ds	1
    195 U0048
    196 U0048
    197 U0048		       00 00	   MATHSTACK  ds	2	; MATH Stack pointer
    198 U0048		       00 09	   MATHSTACKPOS equ	* - CONTEXT
    199 U004a
    200 U004a
    201 U004a		       00	   MATHSTACKPTR ds	1
    202 U004a		       00 0a	   MATHSTACKPTRPOS equ	* - CONTEXT
    203 U004b
    204 U004b		       00 00	   GOSUBSTACK ds	2	; pointer to gosub stack
    205 U004b		       00 0c	   GOSUBSTKPOS equ	* - CONTEXT	; Get the offset to the gosub/msg stack
    206 U004d
    207 U004d
    208 U004d		       00	   GOSUBSTACKPTR ds	1	; current offset in the stack, moved to task table
    209 U004d		       00 0d	   GOSUBPTRPOS equ	* - CONTEXT	; Pointer to gosub stack pointer
    210 U004e
    211 U004e
    212 U004e		       00	   MESSAGEPTR ds	1	; Pointer to active message, from bottom of gosub stack
    213 U004e		       00 0e	   MSGPTRPOS  equ	* - CONTEXT	; Pointer to the message counter
    214 U004f							;
    215 U004f							; CURPTR is a pointer to curent BASIC line being
    216 U004f							; executed.  Always points to start of line, CUROFF
    217 U004f							; is the offset to the current character.
    218 U004f							; The order of these fields is important
    219 U004f		       00 00	   CURPTR     ds	2	; Pointer to current Basic line
    220 U0051		       00	   CUROFF     ds	1	; Current offset in Basic Line
    221 U0052							;
    222 U0052							;The order of these fields in important
    223 U0052
    224 U0052							;
    225 U0052							; R0, R1 and MQ are used for arithmetic operations and
    226 U0052							; general use.
    227 U0052							;
    228 U0052		       00 52	   REGISTERS  equ	*	;IL MATH REGISTERS
    229 U0052		       00 00	   R0	      ds	2	;arithmetic register 0
    230 U0054		       00 00	   R1	      ds	2	;arithmetic register 1
    231 U0056		       00 00	   MQ	      ds	2	;used for some math
    232 U0058		       00	   R2	      ds	1	;General purpose work register(tasking)
    233 U0058		       00 59	   REGISTERSEND equ	*
    234 U0058		       00 07	   REGISTERSLEN equ	REGISTERSEND-REGISTERS
    235 U0059
    236 U0059		       00 59	   CONTEXTEND equ	*	; End of swap context
    237 U0059		       00 18	   CONTEXTLEN equ	CONTEXTEND - CONTEXT	; length of the context
    238 U0059
    239 U0059		       00 00	   dpl	      ds	2	;Used as a pointer to call il instructions
    240 U005b							;
    241 U005b							; This is zero if in immediate mode, or non-zero
    242 U005b							; if currently running a program.  Any input from
    243 U005b							; the main loop clears this, and the XFER IL
    244 U005b							; statement will set it.
    245 U005b							;
    246 U005b		       00	   RunMode    ds	1	;Basic program is running or stop
    247 U005c							;
    248 U005c							; Used for line insertion/removal.
    249 U005c							;
    250 U005c		       00 00	   FROM       ds	2	;Used for basic prog insert/remove
    251 U005e
    252 U005e							; THE ADDRESS USED BY THE PRINTER FUNCTION
    253 U005e							; TO PRINT A GENERIC STRING X,Y ADDRESS, Ac = TERMINATOR
    254 U005e							;
    255 U005e		       00 00	   PrtFrom    ds	2	; FROM
    256 U0060							;
    257 U0060							;=====================================================
    258 U0060							;Pointers for memory Management
    259 U0060							;Allocated block are not chained but can be followed for all memory by the associated length
    260 U0060							; Mem block format is
    261 U0060							;	 0-1   pointer to next block for free blocks
    262 U0060							;	 0-1   for allocated blocks
    263 U0060							;	   0   type of block, blob | array bytes, ints ,string | single type byte or integer
    264 U0060							;	   1   refrence counter ... lol only up to 256 but it is something
    265 U0060							;	 2-3   length constant for exevy type of memory block
    266 U0060							; Memory is recombined as it is released
    267 U0060							; The memory manager is not interupted durring allocation
    268 U0060							; or freeing of memory
    269 U0060							;====================================================
    270 U0060		       00 00	   MemFreeList ds	2	; list of free blocks of memory
    271 U0062		       00 00	   MemR0      ds	2	; source for copy/move/Init
    272 U0064		       00 00	   MemR1      ds	2	; Destination for copy/move
    273 U0066							;
    274 U0066							;=====================================================
    275 U0066							;
    276  2595 ????				      SEG	Code
    277  0200					      org	$0200
    278  0200							;
    279  0200							; Cold start is at $0200.  Warm start is at $0203.
    280  0200							;
    281  0200		       4c 06 02    TBasicCold jmp	cold2	;jump around vectors
    282  0203		       4c 93 02    warm       jmp	warm2	;Entry point for worm restart
    283  0206							;
    284  0206							; These are the user-supplied vectors to I/O routines.
    285  0206							; If you want, you can just patch these in the binary
    286  0206							; file, but it would be better to change the source
    287  0206							; code.
    288  0206							;
    289  0206				  -	      if	KIM
    290  0206				  -OUTCH      jmp	$1ea0	;output char in A
    291  0206				  -GETCH      jmp	$1e5a	;get char in A (blocks)
    292  0206				  -CRLF       jmp	$1e2f	;print CR/LF
    293  0206				  -OUTHEX     jmp	$1e3b	;print A as hex
    294  0206				  -MONITOR    jmp	$1c4f	;return to monitor
    295  0206					      endif
    296  0206				  -	      if	XKIM
    297  0206				  -	      include	"xkim.inc"
    298  0206				  -	      SEG	Code
    299  0206				  -OUTCH      jmp	$1ea0
    300  0206				  -GETCH      jmp	xkGETCH
    301  0206				  -CRLF       jmp	$1e2f	;print CR/LF
    302  0206				  -OUTHEX     jmp	xkPRTBYT
    303  0206				  -MONITOR    jmp	extKIM
    304  0206				  -puts       equ	putsil
    305  0206				  -BUFFER_SIZE equ	132
    306  0206					      endif
    307  0206
    308  0206					      if	CTMON65
------- FILE ctmon65.inc LEVEL 2 PASS 6
      0  0206					      include	"ctmon65.inc"
      1  0206							;*********************************************************
      2  0206							; FILE: ctmon65.inc
      3  0206							;
      4  0206							; Applications wishing to run under CTMON65 should include
      5  0206							; this file, as it defines vectors and other pieces of
      6  0206							; necessary data.
      7  0206							;*********************************************************
      8  0206							;
------- FILE config.inc LEVEL 3 PASS 6
      0  0206					      include	"config.inc"
      1  0206							;*********************************************************
      2  0206							; FILE: config.inc
      3  0206							;
      4  0206							; General configuration file for the Corsham Technologies
      5  0206							; CTMON65 monitor.
      6  0206							;*********************************************************
      7  0206							;
      8  0206							; Current version and revision
      9  0206							;
     10  0206		       00 00	   VERSION    equ	0
     11  0206		       00 01	   REVISION   equ	1
     12  0206							;
     13  0206							;FALSE		equ	0
     14  0206							;TRUE		equ	!FALSE
     15  0206							;
     16  0206							; SS-50 bus constants
     17  0206							;
     18  0206		       e0 00	   IO_BASE    equ	$e000
     19  0206		       00 10	   IO_SIZE    equ	16
     20  0206							;
     21  0206							; Memory usage
     22  0206							;
     23  0206		       00 f0	   ZERO_PAGE_START equ	$00f0
     24  0206		       f0 00	   ROM_START  equ	$f000
     25  0206		       df 00	   RAM_START  equ	$df00
     26  0206							;
     27  0206							; If enabled, turn on buffered input code.
     28  0206							;
     29  0206		       00 00	   BUFFERED_INPUT equ	FALSE
     30  0206							;
     31  0206		       00 05	   MAX_ARGC   equ	5
     32  0206							;
     33  0206							; If enabled, the debugger will display the flag register
     34  0206							; in ASCII.  Nice, but takes more code.
     35  0206							;
     36  0206		       ff ff ff ff FULL_STATUS equ	TRUE
     37  0206							;
     38  0206							; Enable EXTENDED_CMDS to allow linking external commands
     39  0206							; to the command handler.
     40  0206							;
     41  0206		       00 00	   EXTENDED_CMDS equ	FALSE
     42  0206							;
     43  0206							; Define to enable SD related functions
     44  0206							;
     45  0206		       ff ff ff ff SD_ENABLED equ	TRUE
     46  0206							;
     47  0206							; Size of the keyboard buffer
     48  0206							;
     49  0206		       00 84	   BUFFER_SIZE equ	132
     50  0206
------- FILE ctmon65.inc
     10  0206							; Zero-page data
     11  0206							;
     12  0206							;		zpage
     13 U0066					      seg.U	ZEROPAGE
     14 U00f0					      org	ZERO_PAGE_START
     15 U00f0		       00 00	   sptr       ds	2
     16 U00f2		       00	   INL	      ds	1
     17 U00f3		       00	   INH	      ds	1
     18 U00f4		       00 00	   putsp      ds	2
     19 U00f6							;
     20 Uf048 ????				      SEG.U	rom
     21 Uf000					      org	ROM_START
     22 Uf000							;
     23 Uf000							;=========================================================
     24 Uf000							; Jump table to common functions.  The entries in this
     25 Uf000							; table are used by external programs, so nothing can be
     26 Uf000							; moved or removed from this table.  New entries always
     27 Uf000							; go at the end.  Many of these are internal functions
     28 Uf000							; and I figured they might be handy for others.
     29 Uf000							;
     30 Uf000		       00 00 00    RESET      ds	3
     31 Uf003		       00 00 00    WARM       ds	3
     32 Uf006							;
     33 Uf006							; These are the major and minor revision numbers so that
     34 Uf006							; code can check to see which CTMON65 version is running.
     35 Uf006							;
     36 Uf006		       00	   CTMON65ver ds	1
     37 Uf007		       00	   CTMON65rev ds	1
     38 Uf008		       00		      ds	1	;unused
     39 Uf009							;
     40 Uf009							; Console related functions
     41 Uf009							;
     42 Uf009		       00 00 00    cin	      ds	3
     43 Uf00c		       00 00 00    cout       ds	3
     44 Uf00f		       00 00 00    cstatus    ds	3
     45 Uf012		       00 00 00    putsil     ds	3
     46 Uf015		       00 00 00    getline    ds	3
     47 Uf018		       00 00 00    crlf       ds	3
     48 Uf01b		       00 00 00    HexA       ds	3
     49 Uf01e							;
     50 Uf01e							; Low-level functions to access the SD card system
     51 Uf01e							;
     52 Uf01e					      if	SD_ENABLED	;SD ENABLED
     53 Uf01e		       00 00 00    xParInit   ds	3
     54 Uf021		       00 00 00    xParSetWrite ds	3
     55 Uf024		       00 00 00    xParSetRead ds	3
     56 Uf027		       00 00 00    xParWriteByte ds	3
     57 Uf02a		       00 00 00    xParReadByte ds	3
     58 Uf02d							;
     59 Uf02d							; Higher level SD card functions
     60 Uf02d							;
     61 Uf02d		       00 00 00    DiskPing   ds	3
     62 Uf030		       00 00 00    DiskDir    ds	3
     63 Uf033		       00 00 00    DiskDirNext ds	3
     64 Uf036		       00 00 00    DiskOpenRead ds	3
     65 Uf039		       00 00 00    DiskOpenWrite ds	3
     66 Uf03c		       00 00 00    DiskRead   ds	3
     67 Uf03f		       00 00 00    DiskWrite  ds	3
     68 Uf042		       00 00 00    DiskClose  ds	3
     69 Uf045		       00 00 00    DiskRmFile ds	3
     70 Uf048					      endif		;SD_ENABLED
     71 Uf048
     72 Uf048							;
     73 Udf8e ????				      SEG.U	Data
     74 Udf00					      org	RAM_START
     75 Udf00							;
     76 Udf00							; The use of memory starting from here will remain
     77 Udf00							; constant through different versions of CTMON65.
     78 Udf00							;
     79 Udf00		       00 00	   IRQvec     ds	2
     80 Udf02		       00 00	   NMIvec     ds	2
     81 Udf04							;
     82 Udf04							; Before a L(oad) command, these are set to $FF.
     83 Udf04							; After loading, if they are different, jump to
     84 Udf04							; that address.
     85 Udf04							;
     86 Udf04		       00 00	   AutoRun    ds	2
     87 Udf06							;
     88 Udf06							; Pointer to the subroutine that gets the next input
     89 Udf06							; character.  Used for doing disk/console input.
     90 Udf06							;
     91 Udf06		       00 00	   inputVector ds	2
     92 Udf08							;
     93 Udf08							; Same thing for output.
     94 Udf08							;
     95 Udf08		       00 00	   outputVector ds	2
     96 Udf0a							;
     97 Udf0a							; Buffer for GETLINE
     98 Udf0a							;
     99 Udf0a		       00 00 00 00*buffer     ds	BUFFER_SIZE
------- FILE mytb.asm
    310 Udf8e
    311  0206					      SEG	Code
    312  0206							;
    313  0206		       f0 0c	   OUTCH      equ	cout
    314  0206		       f0 09	   GETCH      equ	cin
    315  0206		       1e 2e	   CRLF       equ	tbcrlf
    316  0206		       14 08	   OUTHEX     equ	HexToOut
    317  0206		       f0 03	   MONITOR    equ	WARM
    318  0206		       f0 0f	   ISCHAR     equ	cstatus
    319  0206		       14 25	   puts       equ	tbputs
    320  0206					      endif
    321  0206							;
    322  0206		       20 62 1f    cold2      jsr	SetOutConsole
    323  0209		       20 6f 1f 	      jsr	SetInConsole
    324  020c		       20 25 14 	      jsr	puts
      0  020f					      db	CR,LF
      1  020f		       0d 0a		      .byte.b	CR,LF
      0  0211					      db	"Concurrent Tiny BASIC v1.0.4	IRQs/Tasks/Tokens"
      1  0211		       43 6f 6e 63*	      .byte.b	"Concurrent Tiny BASIC v1.0.4	IRQs/Tasks/Tokens"
      0  0240					      db	CR,LF,0
      1  0240		       0d 0a 00 	      .byte.b	CR,LF,0
    328  0243							;
    329  0243		       20 19 16 	      jsr	MemInit	;setup the free space available
    330  0246
    331  0246		       a9 01	   calcstack  lda	#1
    332  0248		       8d db 26 	      sta	taskCounter	; Initialize number of tasks to 1
    333  024b		       a9 80		      lda	#TASKACTIVE	; bit 7 is set
    334  024d		       8d dd 25 	      sta	taskTable	; mark the main task as active
    335  0250		       20 06 17 	      jsr	taskSetStacks	; setup all the task stacks/Variables
    336  0253		       a9 19		      lda	#IL&$ff
    337  0255		       85 43		      sta	ILPC
    338  0257		       a9 22		      lda	#IL>>8
    339  0259		       85 44		      sta	ILPC+1
    340  025b							;
    341  025b							;		  lda	  ProgramStart		     ; user prog
    342  025b							;		  sta	  ProgramEnd
    343  025b							;		  lda	  ProgramStart+1
    344  025b							;		  sta	  ProgramEnd+1
    345  025b							;
    346  025b
    347  025b							;  Init time slices defaults
    348  025b		       a9 02		      lda	#TASKCYCLESHIGH
    349  025d		       8d da 26 	      sta	taskResetValue+1
    350  0260		       a9 ff		      lda	#TASKCYCLESDEFAULT
    351  0262		       8d d9 26 	      sta	taskResetValue
    352  0265							;
    353  0265							; Initialize the pseudo-random number sequence...
    354  0265							;
    355  0265		       a9 5a		      lda	#$5a
    356  0267		       8d 25 2f 	      sta	rtemp1
    357  026a		       a9 9d		      lda	#%10011101
    358  026c		       8d 27 2f 	      sta	random
    359  026f		       a9 5b		      lda	#%01011011
    360  0271		       8d 28 2f 	      sta	random+1
    361  0274							;
    362  0274							;   Insert a Basic irq handler for the basic Language
    363  0274		       a9 81		      lda	#ServiceIrq&$ff
    364  0276		       8d 00 df 	      sta	IRQvec
    365  0279		       a9 02		      lda	#ServiceIrq>>8
    366  027b		       8d 01 df 	      sta	IRQvec+1
    367  027e		       4c a6 02 	      jmp	coldtwo
    368  0281
    369  0281							;
    370  0281							; This is the Basic IRQ handler
    371  0281		       48	   ServiceIrq pha
    372  0282		       ad d8 25 	      lda	IRQStatus
    373  0285		       f0 0a		      BEQ	RetIrq
    374  0287		       ad d9 25 	      lda	IRQPending
    375  028a		       d0 05		      bne	RetIrq
    376  028c		       a9 01		      lda	#1
    377  028e		       8d d9 25 	      sta	IRQPending
    378  0291		       68	   RetIrq     pla
    379  0292		       40		      rti
    380  0293							;
    381  0293							;
    382  0293							; This is the warm start entry point
    383  0293							;
    384  0293		       20 62 1f    warm2      jsr	SetOutConsole
    385  0296		       20 6f 1f 	      jsr	SetInConsole
    386  0299		       20 2e 1e 	      jsr	CRLF
    387  029c		       ad 22 2f 	      lda	errGoto
    388  029f		       85 43		      sta	ILPC
    389  02a1		       ad 23 2f 	      lda	errGoto+1
    390  02a4		       85 44		      sta	ILPC+1
    391  02a6							;
    392  02a6							; And continue with both starts here
    393  02a6							;
    394  02a6				   coldtwo
    395  02a6							;
    396  02a6							; The ILTrace flag is now run-time settable.
    397  02a6							;
    398  02a6		       a9 00		      lda	#ILTRACE&$ff
    399  02a8		       85 40		      sta	ILTrace
    400  02aa							;
    401  02aa
    402  02aa		       a9 00		      lda	#0
    403  02ac		       85 5b		      sta	RunMode
    404  02ae		       8d 98 2e 	      sta	LINBUF
    405  02b1
    406  02b1							; Clear everything from the stacks
    407  02b1
    408  02b1		       8d 33 2f 	      sta	taskIOPending	; No one waiting for io
    409  02b4		       8d 34 2f 	      sta	taskRDPending	; No one waiting for bg io
    410  02b7
    411  02b7		       20 79 17 	      jsr	taskReset
    412  02ba							;
    413  02ba		       a9 98		      lda	#LINBUF&$ff
    414  02bc		       85 4f		      sta	CURPTR
    415  02be		       a9 2e		      lda	#LINBUF>>8
    416  02c0		       85 50		      sta	CURPTR+1	;fall through...
    417  02c2
    418  02c2							;=====================================================
    419  02c2							; This is the top of the IL interpreter.  This fetches
    420  02c2							; and executes the instruction currently pointed to
    421  02c2							; by ILPC and adjusts ILPC to point to the next
    422  02c2							; instruction to execute.
    423  02c2							;
    424  02c2				   NextIL
    425  02c2		       ba		      tsx		; Get the stack pointer value
    426  02c3		       e0 ff		      cpx	#$FF	; Should be empty
    427  02c5		       d0 26		      bne	ILbad	; Halt and catch fire now!
    428  02c7
    429  02c7		       ce d7 26 	      dec	taskCurrentCycles
    430  02ca		       d0 03		      bne	NextIlNow
    431  02cc		       20 a2 17 	      jsr	iTaskSwitch	;check for a task switch
    432  02cf		       a5 40	   NextIlNow  lda	ILTrace	;Do we need to trace this
    433  02d1		       f0 03		      beq	NextIL2	;Skip if no bits set
    434  02d3
    435  02d3		       20 bf 1e 	      jsr	dbgLine	;Print the IL trace information
    436  02d6
    437  02d6		       a4 51	   NextIL2    ldy	CUROFF
    438  02d8							;		  jsr	  SkipSpaces
    439  02d8							;		  sty	  CUROFF
    440  02d8							;Task IO Management
    441  02d8		       ad 34 2f 	      lda	taskRDPending	; if it is zero then Nothing pending
    442  02db		       f0 08		      beq	NextILStr
    443  02dd		       20 67 1c 	      jsr	ReadLine	; else Pending and poll keyboard
    444  02e0		       90 03		      bcc	NextILStr	; if carry is clear then no end of line yet
    445  02e2		       ce 34 2f 	      dec	taskRDPending	; Carry is set if CR has been recieved
    446  02e5							;
    447  02e5		       20 ea 1a    NextILStr  jsr	getILByte
    448  02e8							;
    449  02e8							; When the handler is called, these are the conditions
    450  02e8							; of several important items:
    451  02e8							;
    452  02e8							;    (ILPC) will point to the byte AFTER the IL
    453  02e8							;    opcode being executed.
    454  02e8							;
    455  02e8							;    (CURPTR),CUROFF will point to the start of the
    456  02e8							;    next word in the input buffer.  Ie, the next word
    457  02e8							;    in the user program.
    458  02e8							;
    459  02e8		       0a		      asl
    460  02e9		       c9 da		      cmp	#ILTBLend-ILTBL+2
    461  02eb		       90 33		      bcc	ILgood
    462  02ed							;
    463  02ed							; This handles an illegal IL opcode.  This is serious
    464  02ed							; and there's no way to recover.
    465  02ed							;
    466  02ed		       20 25 14    ILbad      jsr	puts
      0  02f0					      db	CR,LF
      1  02f0		       0d 0a		      .byte.b	CR,LF
      0  02f2					      db	"Illegal IL "
      1  02f2		       49 6c 6c 65*	      .byte.b	"Illegal IL "
      0  02fd					      db	0
      1  02fd		       00		      .byte.b	0
    470  02fe							;
    471  02fe							; Well this is awkward, we need to back up the IL
    472  02fe							; by one since it no longer points to the current
    473  02fe							; opcode.
    474  02fe							;
    475  02fe		       20 f7 1a 	      jsr	decIL
    476  0301							;
    477  0301		       a0 00		      ldy	#0
    478  0303		       b1 43		      lda	(ILPC),y
    479  0305		       20 08 14 	      jsr	OUTHEX
    480  0308		       20 25 14 	      jsr	puts
      0  030b					      db	" at ",0
      1  030b		       20 61 74 20*	      .byte.b	" at ",0
    482  0310		       a5 44		      lda	ILPC+1
    483  0312		       20 08 14 	      jsr	OUTHEX
    484  0315		       a5 43		      lda	ILPC
    485  0317		       20 08 14 	      jsr	OUTHEX
    486  031a		       20 2e 1e 	      jsr	CRLF
    487  031d		       4c 03 f0 	      jmp	MONITOR
    488  0320							;
    489  0320							; Just jump to the address (ILPC),y.  Have to do
    490  0320							; some goofy stuff.
    491  0320							;
    492  0320		       a8	   ILgood     tay		;move index into Y
    493  0321		       b9 2e 03 	      lda	ILTBL,y
    494  0324		       85 59		      sta	dpl
    495  0326		       b9 2f 03 	      lda	ILTBL+1,y
    496  0329		       85 5a		      sta	dpl+1
    497  032b		       6c 59 00 	      jmp	(dpl)	;go to handler
    498  032e							;
    499  032e							;=====================================================
    500  032e							; This is the IL jump table.  The IL opcode is
    501  032e							; mulitplied by two, then looked-up in this table.
    502  032e							; There is absolutely nothing special about the order
    503  032e							; of entries here... they all decode at exactly the
    504  032e							; same speed.	However the entry number must match the
    505  032e							; values in IL.inc.
    506  032e							;
    507  032e				   ILTBL
------- FILE ilvectortable.asm LEVEL 2 PASS 6
      0  032e					      include	"ilvectortable.asm"
      1  032e					      seg	Code
      2  032e
      0  032e					      dw	iXINIT	;0
      1  032e		       3e 04		      .word.w	iXINIT
      0  0330					      dw	iDONE	;1
      1  0330		       59 04		      .word.w	iDONE
      0  0332					      dw	iPRS	;2
      1  0332		       70 04		      .word.w	iPRS
      0  0334					      dw	iPRN	;3
      1  0334		       78 04		      .word.w	iPRN
      0  0336					      dw	iSPC	;4
      1  0336		       81 04		      .word.w	iSPC
      0  0338					      dw	iNLINE	;5
      1  0338		       2c 09		      .word.w	iNLINE
      0  033a					      dw	iNXT	;6
      1  033a		       89 04		      .word.w	iNXT
      0  033c					      dw	iXFER	;7
      1  033c		       cb 04		      .word.w	iXFER
      0  033e					      dw	iSAV	;8
      1  033e		       e9 04		      .word.w	iSAV
      0  0340					      dw	iRSTR	;9
      1  0340		       2f 05		      .word.w	iRSTR
      0  0342					      dw	iCMPR	;10
      1  0342		       7d 05		      .word.w	iCMPR
      0  0344					      dw	iINNUM	;11
      1  0344		       fc 05		      .word.w	iINNUM
      0  0346					      dw	iFIN	;12
      1  0346		       34 06		      .word.w	iFIN
      0  0348					      dw	iERR	;13
      1  0348		       48 06		      .word.w	iERR
      0  034a					      dw	iADD	;14
      1  034a		       c2 06		      .word.w	iADD
      0  034c					      dw	iSUB	;15
      1  034c		       d8 06		      .word.w	iSUB
      0  034e					      dw	iNEG	;16
      1  034e		       ee 06		      .word.w	iNEG
      0  0350					      dw	iMUL	;17
      1  0350		       06 07		      .word.w	iMUL
      0  0352					      dw	iDIV	;18
      1  0352		       46 07		      .word.w	iDIV
      0  0354					      dw	iSTORE	;19
      1  0354		       9c 07		      .word.w	iSTORE
      0  0356					      dw	iIND	;20
      1  0356		       b4 07		      .word.w	iIND
      0  0358					      dw	iLST	;21
      1  0358		       22 08		      .word.w	iLST
      0  035a					      dw	iINIT	;22
      1  035a		       06 04		      .word.w	iINIT
      0  035c					      dw	iGETLINE	;23
      1  035c		       58 08		      .word.w	iGETLINE
      0  035e					      dw	iINSRT	;24
      1  035e		       75 08		      .word.w	iINSRT
      0  0360					      dw	iRTN	;25
      1  0360		       26 09		      .word.w	iRTN
      0  0362					      dw	MONITOR	;26
      1  0362		       03 f0		      .word.w	MONITOR
      0  0364					      dw	iLIT	;27
      1  0364		       4c 09		      .word.w	iLIT
      0  0366					      dw	iCALL	;28
      1  0366		       32 09		      .word.w	iCALL
      0  0368					      dw	iJMP	;29
      1  0368		       3a 09		      .word.w	iJMP
      0  036a					      dw	iVINIT	;30
      1  036a		       69 09		      .word.w	iVINIT
      0  036c					      dw	iERRGOTO	;31
      1  036c		       72 09		      .word.w	iERRGOTO
      0  036e					      dw	iTST	;32
      1  036e		       7e 09		      .word.w	iTST
      0  0370					      dw	iTSTV	;33
      1  0370		       a3 0a		      .word.w	iTSTV
      0  0372					      dw	iTSTL	;34
      1  0372		       1a 0b		      .word.w	iTSTL
      0  0374					      dw	iTSTN	;35
      1  0374		       35 0b		      .word.w	iTSTN
      0  0376					      dw	iFREE	;36
      1  0376		       e6 0b		      .word.w	iFREE
      0  0378					      dw	iRANDOM	;37
      1  0378		       ef 0b		      .word.w	iRANDOM
      0  037a					      dw	iABS	;38
      1  037a		       c0 0c		      .word.w	iABS
     42  037c							;
     43  037c							; Disk functions.  There must be pointers
     44  037c							; to functions even if no disk is supported.
     45  037c							; Makes things easier in IL.inc.
     46  037c							;
     47  037c					      if	DISK_ACCESS
      0  037c					      dw	iOPENREAD	;39
      1  037c		       73 20		      .word.w	iOPENREAD
      0  037e					      dw	iOPENWRITE	;40
      1  037e		       d4 20		      .word.w	iOPENWRITE
      0  0380					      dw	iDCLOSE	;41
      1  0380		       58 21		      .word.w	iDCLOSE
      0  0382					      dw	iDGETLINE	;42 Life, universe, everything(hitch hiker)
      1  0382		       e6 20		      .word.w	iDGETLINE
      0  0384					      dw	iDLIST	;43 Did you remember your towel?
      1  0384		       52 21		      .word.w	iDLIST
      0  0386					      dw	iDDIR	;44
      1  0386		       2d 21		      .word.w	iDDIR
      0  0388					      dw	iRMFILE	;45
      1  0388		       c2 20		      .word.w	iRMFILE
     55  038a				  -	      else
     56  038a				  -	      dw	NextIL	;39
     57  038a				  -	      dw	NextIL	;40
     58  038a				  -	      dw	NextIL	;41
     59  038a				  -	      dw	NextIL	;42
     60  038a				  -	      dw	NextIL	;43
     61  038a				  -	      dw	NextIL	;44
     62  038a				  -	      dw	NextIL	;45
     63  038a					      endif
     64  038a							;
      0  038a					      dw	iCLEARSCREEN	;46
      1  038a		       82 1f		      .word.w	iCLEARSCREEN
      0  038c					      dw	iPOKEMEMORY	;47
      1  038c		       4d 0c		      .word.w	iPOKEMEMORY
      0  038e					      dw	iPEEKMEMORY	;48
      1  038e		       62 0c		      .word.w	iPEEKMEMORY
      0  0390					      dw	iTSTLET	;49	   Test if the let with no LET keyword
      1  0390		       c5 09		      .word.w	iTSTLET
      0  0392					      dw	iTSTDONE	;50	   Test if we are at the end of a line
      1  0392		       4a 0a		      .word.w	iTSTDONE
      0  0394					      dw	iGETCHAR	;51	   Get a character from the terminal
      1  0394		       8f 0c		      .word.w	iGETCHAR
      0  0396					      dw	iPUTCHAR	;52	   Put a char to the terminal
      1  0396		       a3 0c		      .word.w	iPUTCHAR
      0  0398					      dw	iCallFunc	;53	   call a machine rtn accumulator
      1  0398		       78 0c		      .word.w	iCallFunc
      0  039a					      dw	iBranch	;54	   if value on stack is 0 then next line, else next instuction
      1  039a		       ca 05		      .word.w	iBranch
      0  039c					      dw	iTSTStr	;55	   Test Specifically for the start of a quoted string
      1  039c		       a8 09		      .word.w	iTSTStr
      0  039e					      dw	iSetIrq	;56	   sets the irq handler
      1  039e		       3d 0d		      .word.w	iSetIrq
      0  03a0					      dw	iTstIrq	;57	   test if irq is pending
      1  03a0		       ac 0b		      .word.w	iTstIrq
      0  03a2					      dw	iRET	;58	   return from interupt
      1  03a2		       1d 05		      .word.w	iRET
      0  03a4					      dw	iINSTR	;59	   read a string return first char on top of stack
      1  03a4		       15 06		      .word.w	iINSTR
      0  03a6					      dw	iMOD	;60	   returns remainder of division
      1  03a6		       4f 07		      .word.w	iMOD
      0  03a8					      dw	iTaskSet	;61	   sets a line number for the start of a task
      1  03a8		       f6 17		      .word.w	iTaskSet
      0  03aa					      dw	iETask	;62	   Terminates a task
      1  03aa		       33 19		      .word.w	iETask
      0  03ac					      dw	iNTask	;63	   goto next task
      1  03ac		       e6 18		      .word.w	iNTask
      0  03ae					      dw	iArray	;64	   Allow Variable to have a subscript
      1  03ae		       c9 07		      .word.w	iArray
      0  03b0					      dw	iTaskKill	;65	   kill a running task
      1  03b0		       de 18		      .word.w	iTaskKill
      0  03b2					      dw	iTaskStat	;66	   return the state of a task PID
      1  03b2		       b2 18		      .word.w	iTaskStat
      0  03b4					      dw	iHexOut	;67	   output the value on the stack as a hex string
      1  03b4		       ae 0c		      .word.w	iHexOut
      0  03b6					      dw	iReadComplete	;68	   Called after a background read completes
      1  03b6		       e6 05		      .word.w	iReadComplete
      0  03b8					      dw	iReadStart	;69	   Called to start a background read request
      1  03b8		       dc 05		      .word.w	iReadStart
      0  03ba					      dw	iStartIO	;70	   Lock task until io complete
      1  03ba		       16 19		      .word.w	iStartIO
      0  03bc					      dw	iEndIO	;71	   release task lock for io
      1  03bc		       1c 19		      .word.w	iEndIO
      0  03be					      dw	iLogNot	;72	   Logical not
      1  03be		       19 0d		      .word.w	iLogNot
      0  03c0					      dw	iLogOr	;73	   Logical Or
      1  03c0		       ef 0c		      .word.w	iLogOr
      0  03c2					      dw	iLogAnd	;74	   Logical And
      1  03c2		       da 0c		      .word.w	iLogAnd
      0  03c4					      dw	iLogXor	;75	   Logical Xor
      1  03c4		       04 0d		      .word.w	iLogXor
      0  03c6					      dw	iWTASK	;76	   Wait for a task or set of tasks to complete
      1  03c6		       f1 18		      .word.w	iWTASK
      0  03c8					      dw	iTASKPID	;77	   Returns the TASK PID
      1  03c8		       27 19		      .word.w	iTASKPID
      0  03ca					      dw	iTRACEPROG	;78	   Turn on and off il trace, bit 6 = basic trace on,  bit 7 = il trace on
      1  03ca		       7b 0d		      .word.w	iTRACEPROG
      0  03cc					      dw	idbgBasic	;79	   Interactive basic debugging
      1  03cc		       3b 1e		      .word.w	idbgBasic
      0  03ce					      dw	iIPCS	;80	   Sending a msg to a task
      1  03ce		       e9 19		      .word.w	iIPCS
      0  03d0					      dw	iIPCR	;81	   Recieve a message from a task
      1  03d0		       00 1a		      .word.w	iIPCR
      0  03d2					      dw	iIPCC	;82	   Check if any message available for task
      1  03d2		       14 1a		      .word.w	iIPCC
      0  03d4					      dw	iIPCIO	;83	   Check if ips queue is empty, suspend task if empty
      1  03d4		       21 1a		      .word.w	iIPCIO
      0  03d6					      dw	iPushMathStack	;84	   Push the match stack frame pointer and create parameter count
      1  03d6		       6e 16		      .word.w	iPushMathStack
      0  03d8					      dw	iPopMathStack	;85	   Restore the Math Stack frame after parameters have been passed
      1  03d8		       9e 16		      .word.w	iPopMathStack
      0  03da					      dw	iSaveMathStack	;86	   Save all math info
      1  03da		       bb 16		      .word.w	iSaveMathStack
      0  03dc					      dw	iRestoreMathStack	;87	Restore the math stack info
      1  03dc		       da 16		      .word.w	iRestoreMathStack
      0  03de					      dw	iIncParmCount	;88	   Increment the parameter counter
      1  03de		       8b 16		      .word.w	iIncParmCount
      0  03e0					      dw	iTaskGetMathStack	;89   get another tasks stack pointers
      1  03e0		       53 19		      .word.w	iTaskGetMathStack
      0  03e2					      dw	iTaskEnable	;90	   enable a suspended task
      1  03e2		       80 18		      .word.w	iTaskEnable
      0  03e4					      dw	iTaskSuspend	;91	   Suspend a running task
      1  03e4		       9a 18		      .word.w	iTaskSuspend
      0  03e6					      dw	iTaskPutMathPtr	;92	  updates the tasks stack pointer
      1  03e6		       6d 19		      .word.w	iTaskPutMathPtr
      0  03e8					      dw	iTSTVT	;93	   test for another tasks variable
      1  03e8		       9a 0a		      .word.w	iTSTVT
      0  03ea					      dw	iSetR2	;94
      1  03ea		       44 09		      .word.w	iSetR2
      0  03ec					      dw	iStk2Tmp	;95	   Move top of stack to temp
      1  03ec		       fb 04		      .word.w	iStk2Tmp
      0  03ee					      dw	iTmp2Stk	;96	   Move Temp to stack
      1  03ee		       0c 05		      .word.w	iTmp2Stk
      0  03f0					      dw	iTSTBYTE	;97	   Test byte and branch if true
      1  03f0		       e6 09		      .word.w	iTSTBYTE
      0  03f2					      dw	iINCVAR	;98	   Increment variable
      1  03f2		       6c 0a		      .word.w	iINCVAR
      0  03f4					      dw	iDECVAR	;99	   Decrement variable
      1  03f4		       84 0a		      .word.w	iDECVAR
      0  03f6					      dw	iSLICE	;100	   set the time slice for tasks
      1  03f6		       7c 19		      .word.w	iSLICE
      0  03f8					      dw	iTSTB	;101	   Test if byte equals
      1  03f8		       05 0a		      .word.w	iTSTB
      0  03fa					      dw	iTSTW	;102	   Test If word equals
      1  03fa		       20 0a		      .word.w	iTSTW
      0  03fc					      dw	iOnGoto	;103	   Branch to table entry based upon buffer value
      1  03fc		       bc 12		      .word.w	iOnGoto
      0  03fe					      dw	iTSTRELOP	;104	   Test relop, push mask onto stack if true, branch otherwise
      1  03fe		       ed 12		      .word.w	iTSTRELOP
      0  0400					      dw	iRepeatLine	;105	   Repeat the same line again, start execution from beginning of the same line
      1  0400		       af 04		      .word.w	iRepeatLine
      0  0402					      dw	iTSTBRANCH	;106	   Test for compiled branch, take branch is is, skip two bytes and following integer value(line number) goto, gosub, gofn
      1  0402		       14 13		      .word.w	iTSTBRANCH
      0  0404					      dw	iFastXfer	;107	   move top of stack to curptr
      1  0404		       b6 04		      .word.w	iFastXfer
    127  0406
------- FILE mytb.asm
    509  0406		       04 06	   ILTBLend   equ	*
    510  0406							;
    511  0406							;=====================================================
    512  0406							;=====================================================
    513  0406							;=====================================================
    514  0406							; This marks the start of the handlers for IL opcodes.
    515  0406							;=====================================================
    516  0406							;=====================================================
    517  0406							;=====================================================
    518  0406							;
    519  0406							;
    520  0406		       a9 00	   iINIT      lda	#0	; clear IL stack pointer,gosub stack
    521  0408		       85 47		      sta	ILSTACKPTR
    522  040a		       85 4a		      sta	MATHSTACKPTR
    523  040c		       85 4d		      sta	GOSUBSTACKPTR
    524  040e		       a9 38		      lda	#[[GOSUBSTACKSIZE - 2] * 4]	; Reserve two entries for gosubs
    525  0410		       85 4e		      sta	MESSAGEPTR	; message ptr is bottom stack space
    526  0412							;
    527  0412		       ad 35 2f 	      lda	ProgramStart	; user prog
    528  0415		       85 4f		      sta	CURPTR
    529  0417		       8d de 25 	      sta	taskTable+1
    530  041a		       8d 37 2f 	      sta	ProgramEnd
    531  041d		       ad 36 2f 	      lda	ProgramStart+1
    532  0420		       85 50		      sta	CURPTR+1
    533  0422		       8d df 25 	      sta	taskTable+2
    534  0425		       8d 38 2f 	      sta	ProgramEnd+1
    535  0428		       a9 80		      lda	#TASKACTIVE
    536  042a		       8d dd 25 	      sta	taskTable	;Mark the first slot as active
    537  042d		       a9 01		      lda	#1
    538  042f		       8d db 26 	      sta	taskCounter	;there is always one task / Main task
    539  0432		       ad d9 26 	      lda	taskResetValue
    540  0435		       8d d7 26 	      sta	taskCurrentCycles	; set up the task switch counts
    541  0438		       ad da 26 	      lda	taskResetValue+1
    542  043b		       8d d8 26 	      sta	taskCurrentCycles+1
    543  043e							;
    544  043e							; fall into XINIT...
    545  043e							;
    546  043e							;=====================================================
    547  043e							; This initializes for the start of the next line of
    548  043e							; BASIC text.
    549  043e							;
    550  043e		       78	   iXINIT     sei		;ensure interupts are off
    551  043f		       20 79 17 	      jsr	taskReset	;Clear the task table
    552  0442		       8d d9 25 	      sta	IRQPending	; reset the irq pending
    553  0445		       8d d8 25 	      sta	IRQStatus	; Make sure irqs are off
    554  0448
    555  0448		       4c c2 02    goodExit   jmp	NextIL
    556  044b							;
    557  044b							;=====================================================
    558  044b							; This check if the escape key has been entered
    559  044b							; then changes out of run mode. z Set if esc found
    560  044b				   BreakSet
    561  044b		       20 0f f0 	      jsr	ISCHAR
    562  044e		       f0 06		      beq	BreakNo
    563  0450		       20 7f 1f 	      jsr	VGETCH
    564  0453		       c9 1b		      cmp	#$1B
    565  0455		       60		      rts
    566  0456				   BreakNo
    567  0456		       a9 01		      lda	#1
    568  0458		       60		      rts
    569  0459
    570  0459							;
    571  0459
    572  0459							;=====================================================
    573  0459							; Verify there is nothing else on this input line.
    574  0459							; If there is, generate an error.
    575  0459							;
    576  0459		       a4 51	   iDONE      ldy	CUROFF
    577  045b		       b1 4f		      lda	(CURPTR),y
    578  045d		       f0 0e		      beq	doneadv
    579  045f		       c9 e6		      cmp	#oColon	; is it a  ':' or eol
    580  0461		       d0 03		      bne	idoneErr
    581  0463							;		  sty	  CUROFF
    582  0463		       4c c2 02 	      jmp	NextIL	; continue on this line
    583  0466
    584  0466				   idoneErr
    585  0466		       a2 04		      ldx	#ERR_EXTRA_STUFF
    586  0468		       a9 00		      lda	#0
    587  046a		       4c a7 06 	      jmp	iErr2
    588  046d							;
    589  046d							; Advance to the next line
    590  046d							;
    591  046d				   doneadv
    592  046d		       4c c2 02 	      jmp	NextIL
    593  0470							;
    594  0470							;=====================================================
    595  0470							; Print the string until a closing quote
    596  0470							;
    597  0470				   iPRS
    598  0470		       20 48 14 	      jsr	PrtQuoted
    599  0473		       84 51		      sty	CUROFF
    600  0475		       4c c2 02 	      jmp	NextIL
    601  0478							;
    602  0478							;=====================================================
    603  0478							; Pop the top off the stack and print it as a signed
    604  0478							; decimal number.
    605  0478							;
    606  0478				   iPRN
    607  0478		       20 75 1d 	      jsr	popR0
    608  047b		       20 56 13 	      jsr	PrintDecimal
    609  047e		       4c c2 02 	      jmp	NextIL
    610  0481							;
    611  0481							;=====================================================
    612  0481							; Space to next zone.	Currently the code does not
    613  0481							; keep track of which column the output is on, so
    614  0481							; just print a tab.
    615  0481							;
    616  0481				   iSPC
    617  0481		       a9 09		      lda	#TAB
    618  0483		       20 7c 1f 	      jsr	VOUTCH
    619  0486		       4c c2 02 	      jmp	NextIL
    620  0489							;
    621  0489							;=====================================================
    622  0489							; If in immediate mode, jump to the address following
    623  0489							; the NXT instruction.  Else move to the next line of
    624  0489							; user code and continue.
    625  0489							;
    626  0489		       a5 5b	   iNXT       lda	RunMode
    627  048b		       d0 03		      bne	iNxtRun	;in run mode
    628  048d							;
    629  048d							; Get address and jump to it.
    630  048d							;
    631  048d		       4c 3a 09 	      jmp	iJMP
    632  0490							;
    633  0490				   iNxtRun
    634  0490		       a4 51		      ldy	CUROFF
    635  0492		       b1 4f		      lda	(CURPTR),y
    636  0494		       c9 e6		      cmp	#oColon
    637  0496		       d0 06		      bne	iNxtRunGo
    638  0498		       c8		      iny
    639  0499		       84 51		      sty	CUROFF
    640  049b		       4c a9 04 	      jmp	iNxtRun2
    641  049e
    642  049e				   iNxtRunGo
    643  049e		       20 74 1b 	      jsr	FindNextLine
    644  04a1		       20 88 1b 	      jsr	AtEnd
    645  04a4		       d0 03		      bne	iNxtRun2	;not at end
    646  04a6							;
    647  04a6							; At the end of the program.  Pretend an END statement
    648  04a6							; was found.
    649  04a6							;
    650  04a6		       4c 34 06    iFINv      jmp	iFIN
    651  04a9							;
    652  04a9		       20 e6 1a    iNxtRun2   jsr	getILWord	;ignore next word
    653  04ac		       4c c2 02 	      jmp	NextIL
    654  04af							;=====================================================
    655  04af							;Repeat the same line against
    656  04af		       a0 03	   iRepeatLine ldy	#3
    657  04b1		       84 51		      sty	CUROFF
    658  04b3		       4c c2 02 	      jmp	NextIL
    659  04b6							;
    660  04b6							;=====================================================
    661  04b6							; XFER takes the number on top of the stack and looks
    662  04b6							; for that line in the program, or the next line
    663  04b6							; higher.  Ie, if it's 1 but there is no line 1, then
    664  04b6							; find the next one after that.
    665  04b6							;
    666  04b6				   iFastXfer
    667  04b6		       20 8d 1d 	      jsr	popR1	; get type of transfer
    668  04b9		       a5 54		      lda	R1
    669  04bb		       f0 0e		      beq	iXFER
    670  04bd
    671  04bd		       20 75 1d 	      jsr	popR0	; get where to transfer
    672  04c0		       a5 52		      lda	R0
    673  04c2		       85 4f		      sta	CURPTR
    674  04c4		       a5 53		      lda	R0+1
    675  04c6		       85 50		      sta	CURPTR+1
    676  04c8		       4c d1 04 	      jmp	iXFER2
    677  04cb
    678  04cb				   iXFER
    679  04cb		       20 75 1d 	      jsr	popR0
    680  04ce		       20 2f 1b 	      jsr	findLine
    681  04d1
    682  04d1				   iXFER2
    683  04d1		       20 88 1b 	      jsr	AtEnd	;at end of user program?
    684  04d4		       f0 d0		      beq	iFINv
    685  04d6
    686  04d6		       a0 03		      ldy	#3	;Change: 2->3 to skip length byte, point to start of text
    687  04d8		       84 51		      sty	CUROFF
    688  04da
    689  04da							;		  lda	  #$ff
    690  04da							;		  sta	  RunMode
    691  04da							;
    692  04da							; Transfer IL to STMT.  I don't like having this
    693  04da							; hard-coded; fix it.
    694  04da							;
    695  04da							;		  lda	  #STMT&$ff
    696  04da							;		  sta	  ILPC
    697  04da							;		  lda	  #STMT>>8
    698  04da							;		  sta	  ILPC+1
    699  04da							;		  jmp	  NextIL
    700  04da							;
    701  04da							; Run
    702  04da							;
    703  04da				   iXferok
    704  04da		       a9 ff		      lda	#$ff
    705  04dc		       85 5b		      sta	RunMode	;we're running
    706  04de							;
    707  04de							; Need a more elegant way to do this
    708  04de							;
    709  04de		       a9 27		      lda	#STMT&$ff
    710  04e0		       85 43		      sta	ILPC
    711  04e2		       a9 22		      lda	#STMT>>8
    712  04e4		       85 44		      sta	ILPC+1
    713  04e6		       4c c2 02 	      jmp	NextIL
    714  04e9							;
    715  04e9							;=====================================================
    716  04e9							; Save the pointer to the next line to the call stack.
    717  04e9							;
    718  04e9		       20 ea 1a    iSAV       jsr	getILByte	; load type of gosub
    719  04ec		       20 fd 1c 	      jsr	pushLN	; Type passed in A
    720  04ef		       b0 03		      bcs	iSAVErr
    721  04f1		       4c c2 02 	      jmp	NextIL
    722  04f4
    723  04f4		       a2 0c	   iSAVErr    ldx	#ERR_STACK_OVER_FLOW
    724  04f6		       a9 00	   iSAVErr2   lda	#0
    725  04f8		       4c a7 06 	      jmp	iErr2
    726  04fb							;====================================================
    727  04fb							; Move stack top to and from temp area
    728  04fb				   iStk2Tmp
    729  04fb		       20 75 1d 	      jsr	popR0
    730  04fe		       a5 52		      lda	R0
    731  0500		       a0 34		      ldy	#TASKEXITCODE	; can also be used as temp
    732  0502		       91 41		      sta	(VARIABLES),y
    733  0504		       c8		      iny
    734  0505		       a5 53		      lda	R0+1
    735  0507		       91 41		      sta	(VARIABLES),y
    736  0509		       4c c2 02 	      jmp	NextIL
    737  050c
    738  050c		       a0 34	   iTmp2Stk   ldy	#TASKEXITCODE
    739  050e		       b1 41		      lda	(VARIABLES),y
    740  0510		       85 52		      sta	R0
    741  0512		       c8		      iny
    742  0513		       b1 41		      lda	(VARIABLES),y
    743  0515		       85 53		      sta	R0+1
    744  0517		       20 e3 1c 	      jsr	pushR0
    745  051a		       4c c2 02 	      jmp	NextIL
    746  051d							;
    747  051d							;=====================================================
    748  051d							; Pop the next line from the call stack.
    749  051d							;
    750  051d		       20 26 1d    iRET       jsr	popLN
    751  0520		       b0 d2		      bcs	iSAVErr
    752  0522		       a0 03		      ldy	#3
    753  0524		       84 51		      sty	CUROFF
    754  0526		       a9 00		      lda	#0
    755  0528		       8d d9 25 	      sta	IRQPending
    756  052b		       58		      cli
    757  052c		       4c c2 02 	      jmp	NextIL
    758  052f							;
    759  052f							;=====================================================
    760  052f							; On entry il, branch to if function
    761  052f							;	    il+1, value to be returned or not true or false
    762  052f							;
    763  052f							; Return from GOSUB function
    764  052f							;
    765  052f		       20 ea 1a    iRSTR      jsr	getILByte	; get where to go if gosub is a fucntion
    766  0532		       8d 31 2f 	      sta	offset
    767  0535		       20 cd 1c 	      jsr	saveIL	; for later jump if needed
    768  0538
    769  0538		       20 26 1d 	      jsr	popLN	; get the next item from the stack into curptr and curroff, returns call type func or stmt
    770  053b		       85 54		      sta	R1	; keep the type of call returning from
    771  053d		       b0 2a		      bcs	iRSTRErr	; stack underflow error possible
    772  053f
    773  053f		       20 ea 1a 	      jsr	getILByte	; get if a value is being returned
    774  0542		       48		      pha		; save if a value was passed to be returned
    775  0543		       c9 00		      cmp	#0	; yes attemping to return a value
    776  0545		       f0 03		      beq	iRSTRPOP	; no value to return
    777  0547		       20 75 1d 	      jsr	popR0	; Get the value from the stack save if needed
    778  054a				   iRSTRPOP
    779  054a		       20 a4 16 	      jsr	PopMathStackNow	; adjust the stack frame from the call
    780  054d		       a5 54		      lda	R1	; called as a statement ?
    781  054f		       c9 01		      cmp	#GOSUB_RTN	; Called as a statement
    782  0551		       f0 12		      beq	iRSTRExit
    783  0553		       68		      pla		; get back if value returned or not
    784  0554		       c9 01		      cmp	#1	; we have a value to return
    785  0556		       f0 04		      beq	iRSTRVALUE
    786  0558
    787  0558		       a2 13		      ldx	#ERR_NO_RETURN_VALUE_PROVIDED	; well no value provided and we need one
    788  055a		       d0 9a		      bne	iSAVErr2
    789  055c
    790  055c				   iRSTRVALUE
    791  055c		       20 e3 1c 	      jsr	pushR0	; return value back to top of stack
    792  055f		       20 d8 1c 	      jsr	restoreIL	; get the correct il
    793  0562		       4c 8d 0b 	      jmp	tstBranch	; And called as a function
    794  0565
    795  0565				   iRSTRExit
    796  0565		       68		      pla		; throw away the return value if provided
    797  0566		       4c c2 02 	      jmp	NextIL
    798  0569
    799  0569				   iRSTRNORETURNVALUE
    800  0569
    801  0569
    802  0569		       ad dc 25    iRSTRErr   lda	taskPtr	; Check if this is task zero
    803  056c		       f0 0a		      beq	taskZeroEnd	; this is task zero just stop with error
    804  056e		       a5 56		      lda	MQ
    805  0570		       d0 03		      bne	taskRet
    806  0572		       20 97 1f 	      jsr	pushFalse	; the result code by default is 0
    807  0575				   taskRet
    808  0575		       4c 33 19 	      jmp	iETask	; not task zero then do a task end instead
    809  0578				   taskZeroEnd
    810  0578		       a2 0b		      ldx	#ERR_STACK_UNDER_FLOW
    811  057a		       4c f6 04 	      jmp	iSAVErr2
    812  057d							;
    813  057d							;=====================================================
    814  057d							; Compare items on stack.  Okay, so on input there are
    815  057d							; three things on the stack
    816  057d							;
    817  057d							;    EXPR2 <- Top of stack
    818  057d							;    OP    <- relational operator, next on stack
    819  057d							;    EXPR1 <- last item on stack
    820  057d							;
    821  057d							; Comparison is: EXPR1 <operator> EXPR2
    822  057d							;
    823  057d							; Operator is one of...
    824  057d							;
    825  057d							;    2 is =
    826  057d							;    1 is <
    827  057d							;    3 is <=
    828  057d							;    5 is <>
    829  057d							;    4 is >
    830  057d							;    6 is >=
    831  057d							;
    832  057d							; Those are bit-mapped:
    833  057d							;
    834  057d							;    xxxxxGEL
    835  057d							;
    836  057d							;    G = Greater than
    837  057d							;    E = Equal
    838  057d							;    L = Less than
    839  057d							;
    840  057d							; If the comparison is false, do a NXT, ie, move to the
    841  057d							; next line and continue.  If true, continue executing
    842  057d							; on this line.
    843  057d							;
    844  057d		       00 01	   REL_LT     equ	%001
    845  057d		       00 02	   REL_EQUAL  equ	%010
    846  057d		       00 04	   REL_GT     equ	%100
    847  057d							;
    848  057d		       20 8d 1d    iCMPR      jsr	popR1
    849  0580		       20 a4 1d 	      jsr	popMQ	;operator in MQ
    850  0583		       20 75 1d 	      jsr	popR0
    851  0586		       20 8f 05 	      jsr	iCMPRsub
    852  0589		       20 e3 1c 	      jsr	pushR0
    853  058c		       4c c2 02 	      jmp	NextIL
    854  058f							;
    855  058f							; See if they are equal or not
    856  058f							;
    857  058f				   iCMPRsub		; Called by internal functions
    858  058f
    859  058f		       a5 52		      lda	R0
    860  0591		       c5 54		      cmp	R1
    861  0593		       d0 0a		      bne	iCMPRnoteq	;try not equal
    862  0595		       a5 53		      lda	R0+1
    863  0597		       c5 55		      cmp	R1+1
    864  0599		       d0 04		      bne	iCMPRnoteq
    865  059b							;
    866  059b							; Equal, set the flag in MQ+1
    867  059b							;
    868  059b		       a9 02		      lda	#REL_EQUAL	;They Are Equal
    869  059d		       d0 14		      bne	iCMPcom	;Exit it is equal
    870  059f							;
    871  059f							; See if EXPR1 (R0) < EXPR2 (R1)
    872  059f							; See www.6502.org/tutorials/compare_beyond.html
    873  059f							;
    874  059f				   iCMPRnoteq
    875  059f		       a5 52		      lda	R0
    876  05a1		       c5 54		      cmp	R1	; Sets the carry flag
    877  05a3		       a5 53		      lda	R0+1
    878  05a5		       e5 55		      sbc	R1+1
    879  05a7
    880  05a7		       50 02		      bvc	iCMPR_2	; branch if N eor V
    881  05a9		       49 80		      eor	#$80
    882  05ab
    883  05ab		       30 04	   iCMPR_2    bmi	iCMPlt
    884  05ad		       a9 04		      lda	#REL_GT
    885  05af		       d0 02		      bne	iCMPcom
    886  05b1
    887  05b1		       a9 01	   iCMPlt     lda	#REL_LT	; R0 < R1
    888  05b3
    889  05b3				   iCMPcom		;ora	    MQ+1	 ; or with original mask MQ+1 is always zero
    890  05b3							;
    891  05b3							; Now compare the end result with what the caller
    892  05b3							; was looking for.
    893  05b3							;
    894  05b3		       25 56		      and	MQ
    895  05b5		       f0 0c		      beq	iCMPno	; no match
    896  05b7		       a9 ff		      lda	#$FF	; true is $ffff
    897  05b9		       85 52		      sta	R0
    898  05bb		       85 53		      sta	R0+1
    899  05bd		       d0 0a		      bne	iCMPDone
    900  05bf							;
    901  05bf							; R0 > R1
    902  05bf							;
    903  05bf		       a9 04	   iCMPgt     lda	#REL_GT
    904  05c1		       d0 f0		      bne	iCMPcom
    905  05c3				   iCMPno
    906  05c3		       a9 00		      lda	#0
    907  05c5		       85 52		      sta	R0
    908  05c7		       85 53		      sta	R0+1
    909  05c9
    910  05c9				   iCMPDone
    911  05c9		       60		      rts
    912  05ca
    913  05ca							;
    914  05ca							; if Not a match, so jump to the next line of code.
    915  05ca							; Branches based upon value on top of the stack
    916  05ca				   iBranch
    917  05ca		       20 75 1d 	      jsr	popR0
    918  05cd		       a5 52		      lda	R0
    919  05cf		       05 53		      ora	R0+1
    920  05d1		       f0 03		      beq	iBranchFalse	; not true
    921  05d3		       4c c2 02 	      jmp	NextIL	; It is true if any value not zero
    922  05d6							;
    923  05d6				   iBranchFalse
    924  05d6		       20 74 1b 	      jsr	FindNextLine
    925  05d9		       4c d1 04 	      jmp	iXFER2
    926  05dc							;
    927  05dc							;=====================================================
    928  05dc							; Start a read of data in background
    929  05dc				   iReadStart
    930  05dc		       a9 3f		      lda	#'?	; Prompt with question mark
    931  05de		       a6 01		      ldx	1	; Indicate to start read in background
    932  05e0		       20 00 1c 	      jsr	GetLine	; Call the getline to start read
    933  05e3		       4c c2 02 	      jmp	NextIL	; next instruction
    934  05e6							;
    935  05e6							;=====================================================
    936  05e6							; Complete the read and return the curptr, curoff pointing to data
    937  05e6				   iReadComplete
    938  05e6		       a9 01		      lda	#GOSUB_RTN
    939  05e8		       20 fd 1c 	      jsr	pushLN
    940  05eb		       90 03		      bcc	iReadOk
    941  05ed		       4c df 0b    iReadErr   jmp	ErrStkOver	; Check if there was an error
    942  05f0				   iReadOk
    943  05f0		       20 20 1c 	      jsr	ReadComplete
    944  05f3		       4c c2 02 	      jmp	NextIL
    945  05f6		       20 26 1d 	      jsr	popLN
    946  05f9		       4c c2 02 	      jmp	NextIL
    947  05fc							;=====================================================
    948  05fc							; Get a line of text from the user, convert to a
    949  05fc							; number, leave on top of stack.
    950  05fc							;
    951  05fc				   iINNUM
    952  05fc		       a9 01		      lda	#GOSUB_RTN
    953  05fe		       20 fd 1c 	      jsr	pushLN
    954  0601		       b0 ea		      bcs	iReadErr	; Stack over flow error
    955  0603							;
    956  0603		       a9 3f		      lda	#'?
    957  0605		       a2 00		      ldx	#0	;Wait for complete
    958  0607		       20 00 1c 	      jsr	GetLine
    959  060a		       20 95 1b 	      jsr	getDecimal
    960  060d		       20 e3 1c 	      jsr	pushR0	;put onto stack
    961  0610		       b0 db		      bcs	iReadErr	;StackOverflow error
    962  0612							;
    963  0612		       4c 2e 06 	      jmp	ExitIn
    964  0615							;
    965  0615							;=====================================================
    966  0615							; Get a line of text from the user, convert to a
    967  0615							; character value , leave on top of stack. up to 2 characters
    968  0615							;
    969  0615				   iINSTR
    970  0615		       a9 01		      lda	#GOSUB_RTN
    971  0617		       20 fd 1c 	      jsr	pushLN
    972  061a		       b0 d1		      bcs	iReadErr	; Stack overflow error
    973  061c		       a9 3f		      lda	#'?
    974  061e		       a2 00		      ldx	#0	;wait for read complete
    975  0620		       20 00 1c 	      jsr	GetLine
    976  0623		       b1 4f		      lda	(CURPTR),y
    977  0625		       85 52		      sta	R0
    978  0627		       a9 00		      lda	#0
    979  0629		       85 53		      sta	R0+1
    980  062b		       20 e3 1c 	      jsr	pushR0	;put onto stack
    981  062e				   ExitIn
    982  062e		       20 26 1d 	      jsr	popLN
    983  0631		       4c c2 02 	      jmp	NextIL
    984  0634							;
    985  0634							;
    986  0634							;=====================================================
    987  0634							; Stop the currently running program.	Actually very
    988  0634							; simple to do... clear the RunMode flag, then set the
    989  0634							; ILPC to the standard handler and continue running.
    990  0634							;
    991  0634		       a9 00	   iFIN       lda	#0
    992  0636		       85 5b		      sta	RunMode
    993  0638		       20 79 17 	      jsr	taskReset
    994  063b							;
    995  063b		       ad 22 2f 	      lda	errGoto
    996  063e		       85 43		      sta	ILPC
    997  0640		       ad 23 2f 	      lda	errGoto+1
    998  0643		       85 44		      sta	ILPC+1
    999  0645		       4c c2 02 	      jmp	NextIL
   1000  0648							;
   1001  0648							;=====================================================
   1002  0648							; Handle the ERR opcode.  Following the instruction is
   1003  0648							; a 16 bit error number.  Print an error message, and
   1004  0648							; if we're in run mode, print the line number.  Stop
   1005  0648							; program execution and return to the initial state.
   1006  0648							;
   1007  0648		       20 e6 1a    iERR       jsr	getILWord	;get err code
   1008  064b		       20 51 06 	      jsr	DisplayError
   1009  064e		       4c aa 06 	      jmp	iErrComplete
   1010  0651							;
   1011  0651							; Enter here with the error code in X (LSB) and A (MSB).
   1012  0651							;
   1013  0651				   DisplayError
   1014  0651		       86 52		      stx	R0
   1015  0653		       85 53		      sta	R0+1
   1016  0655							;
   1017  0655		       20 25 14 	      jsr	puts
      0  0658					      db	CR,LF,"Error ",0
      1  0658		       0d 0a 45 72*	      .byte.b	CR,LF,"Error ",0
   1019  0661		       20 56 13 	      jsr	PrintDecimal
   1020  0664							;
   1021  0664		       a5 5b		      lda	RunMode	;running?
   1022  0666		       f0 3b		      beq	iERR3	;nope
   1023  0668		       20 25 14 	      jsr	puts
      0  066b					      db	" at line ",0
      1  066b		       20 61 74 20*	      .byte.b	" at line ",0
   1025  0675		       a0 01		      ldy	#1	;Changed: Skip the leading length byte
   1026  0677				   iErr2a
   1027  0677		       b1 4f		      lda	(CURPTR),y
   1028  0679		       85 52		      sta	R0
   1029  067b		       c8		      iny
   1030  067c		       b1 4f		      lda	(CURPTR),y
   1031  067e		       85 53		      sta	R0+1
   1032  0680		       20 56 13 	      jsr	PrintDecimal
   1033  0683		       20 25 14 	      jsr	puts
      0  0686					      db	":",0
      1  0686		       3a 00		      .byte.b	":",0
   1035  0688		       a9 00		      lda	#0
   1036  068a		       85 53		      sta	R0+1
   1037  068c		       a5 51		      lda	CUROFF
   1038  068e		       18		      clc
   1039  068f		       e9 03		      sbc	#3
   1040  0691		       85 52		      sta	R0
   1041  0693		       20 56 13 	      jsr	PrintDecimal
   1042  0696		       20 25 14 	      jsr	puts
      0  0699					      db	":",0
      1  0699		       3a 00		      .byte.b	":",0
   1044  069b		       ad dc 25 	      lda	taskPtr
   1045  069e		       85 52		      sta	R0
   1046  06a0		       20 56 13 	      jsr	PrintDecimal
   1047  06a3							;
   1048  06a3				   iERR3
   1049  06a3		       20 2e 1e 	      jsr	CRLF
   1050  06a6		       60		      rts
   1051  06a7
   1052  06a7				   iErr2
   1053  06a7		       20 51 06 	      jsr	DisplayError
   1054  06aa
   1055  06aa				   iErrComplete
   1056  06aa		       20 71 17 	      jsr	taskResetStacks	; some error may cause the main task to point to wrong math stack
   1057  06ad		       a9 00		      lda	#0
   1058  06af		       85 5b		      sta	RunMode	;fall through...
   1059  06b1							;
   1060  06b1							;=====================================================
   1061  06b1							; Reset the IL to be back at the idle loop.  Does not
   1062  06b1							; clear variables so the user can see what state
   1063  06b1							; the program is in.
   1064  06b1							;
   1065  06b1		       a9 00	   ResetIL    lda	#0
   1066  06b3		       85 47		      sta	ILSTACKPTR
   1067  06b5		       ad 22 2f 	      lda	errGoto
   1068  06b8		       85 43		      sta	ILPC
   1069  06ba		       ad 23 2f 	      lda	errGoto+1
   1070  06bd		       85 44		      sta	ILPC+1
   1071  06bf		       4c c2 02 	      jmp	NextIL
   1072  06c2
   1073  06c2							;
   1074  06c2							;=====================================================
   1075  06c2							; Pop two items off stack, add them, then place the
   1076  06c2							; result back onto the stack.
   1077  06c2							;
   1078  06c2		       20 75 1d    iADD       jsr	popR0
   1079  06c5		       20 8d 1d 	      jsr	popR1
   1080  06c8				   iADDfast
   1081  06c8		       18		      clc
   1082  06c9		       a5 52		      lda	R0
   1083  06cb		       65 54		      adc	R1
   1084  06cd		       85 52		      sta	R0
   1085  06cf		       a5 53		      lda	R0+1
   1086  06d1		       65 55		      adc	R1+1
   1087  06d3		       85 53		      sta	R0+1
   1088  06d5		       4c 40 07 	      jmp	pushR0nextIl
   1089  06d8							;
   1090  06d8							;=====================================================
   1091  06d8							; Pop two items off the stack.  Subtract the top of
   1092  06d8							; stack from the lower entry.
   1093  06d8							;
   1094  06d8		       20 8d 1d    iSUB       jsr	popR1
   1095  06db		       20 75 1d 	      jsr	popR0
   1096  06de		       38		      sec
   1097  06df		       a5 52		      lda	R0
   1098  06e1		       e5 54		      sbc	R1
   1099  06e3		       85 52		      sta	R0
   1100  06e5		       a5 53		      lda	R0+1
   1101  06e7		       e5 55		      sbc	R1+1
   1102  06e9		       85 53		      sta	R0+1
   1103  06eb		       4c 40 07 	      jmp	pushR0nextIl
   1104  06ee							;
   1105  06ee							;=====================================================
   1106  06ee							; Negate the top of stack.
   1107  06ee							;
   1108  06ee		       20 75 1d    iNEG       jsr	popR0
   1109  06f1		       a5 52		      lda	R0
   1110  06f3		       49 ff		      eor	#$ff
   1111  06f5		       85 52		      sta	R0
   1112  06f7		       a5 53		      lda	R0+1
   1113  06f9		       49 ff		      eor	#$ff
   1114  06fb		       85 53		      sta	R0+1
   1115  06fd		       e6 52		      inc	R0
   1116  06ff		       d0 02		      bne	iNEG2
   1117  0701		       e6 53		      inc	R0+1
   1118  0703		       4c 40 07    iNEG2      jmp	pushR0nextIl
   1119  0706							;
   1120  0706							;=====================================================
   1121  0706							; Multiply top two items on the stack, put the results
   1122  0706							; on top.  This uses the algorithm documented on page
   1123  0706							; 115 of "Microprocessor Programming for Computer
   1124  0706							; Hobbyists" by Neill Graham.
   1125  0706							;
   1126  0706		       20 0c 07    iMUL       jsr	iMultiply
   1127  0709		       4c c2 02 	      jmp	NextIL
   1128  070c
   1129  070c				   iMultiply
   1130  070c		       20 75 1d 	      jsr	popR0	;AC
   1131  070f		       20 8d 1d 	      jsr	popR1	;OP
   1132  0712							;
   1133  0712		       a5 52		      lda	R0
   1134  0714		       85 56		      sta	MQ
   1135  0716		       a5 53		      lda	R0+1
   1136  0718		       85 57		      sta	MQ+1
   1137  071a		       a9 00		      lda	#0	;clear result
   1138  071c		       85 52		      sta	R0
   1139  071e		       85 53		      sta	R0+1
   1140  0720							;
   1141  0720		       a2 10		      ldx	#16	;number of bits in value
   1142  0722		       06 52	   multloop   asl	R0
   1143  0724		       26 53		      rol	R0+1
   1144  0726		       06 56		      asl	MQ
   1145  0728		       26 57		      rol	MQ+1
   1146  072a		       90 0d		      bcc	multno	;skip add if no carry
   1147  072c							;
   1148  072c							; Add R1 back into R0
   1149  072c							;
   1150  072c		       18		      clc
   1151  072d		       a5 52		      lda	R0
   1152  072f		       65 54		      adc	R1
   1153  0731		       85 52		      sta	R0
   1154  0733		       a5 53		      lda	R0+1
   1155  0735		       65 55		      adc	R1+1
   1156  0737		       85 53		      sta	R0+1
   1157  0739							;
   1158  0739		       ca	   multno     dex		;did all bits yet?
   1159  073a		       d0 e6		      bne	multloop
   1160  073c		       20 e3 1c 	      jsr	pushR0	;OP
   1161  073f		       60		      rts
   1162  0740							;
   1163  0740				   pushR0nextIl
   1164  0740		       20 e3 1c 	      jsr	pushR0	;OP
   1165  0743		       4c c2 02 	      jmp	NextIL
   1166  0746							;
   1167  0746							;=====================================================
   1168  0746							; Divide the top of stack into the next to top item.
   1169  0746							; Leave results on stack.  Taken from:
   1170  0746							; http://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
   1171  0746							;
   1172  0746							; R0 = R0 / R1
   1173  0746							; Remainder is in MQ
   1174  0746							;
   1175  0746		       20 60 07    iDIV       jsr	iDoDiv
   1176  0749		       20 f6 1d 	      jsr	RestoreSigns
   1177  074c		       4c 40 07 	      jmp	pushR0nextIl
   1178  074f
   1179  074f		       20 60 07    iMOD       jsr	iDoDiv
   1180  0752		       20 f6 1d 	      jsr	RestoreSigns
   1181  0755		       a5 56		      lda	MQ
   1182  0757		       85 52		      sta	R0
   1183  0759		       a5 57		      lda	MQ+1
   1184  075b		       85 53		      sta	R0+1
   1185  075d		       4c 40 07 	      jmp	pushR0nextIl
   1186  0760
   1187  0760				   iDoDiv
   1188  0760		       20 8d 1d 	      jsr	popR1
   1189  0763		       20 75 1d 	      jsr	popR0
   1190  0766							;
   1191  0766							; Check for divide by zero
   1192  0766							;
   1193  0766
   1194  0766				   iDivNoPop
   1195  0766		       a5 54		      lda	R1
   1196  0768		       05 55		      ora	R1+1
   1197  076a		       f0 29		      beq	divby0
   1198  076c							;
   1199  076c		       20 bb 1d 	      jsr	SaveSigns
   1200  076f		       a9 00		      lda	#0	;preset remainder to 0
   1201  0771		       85 56		      sta	MQ
   1202  0773		       85 57		      sta	MQ+1
   1203  0775		       a2 10		      ldx	#16	;repeat for each bit: ...
   1204  0777				   divloop
   1205  0777		       06 52		      asl	R0	;dividend lb & hb*2, msb -> Carry
   1206  0779		       26 53		      rol	R0+1
   1207  077b		       26 56		      rol	MQ	;remainder lb & hb * 2 + msb from carry
   1208  077d		       26 57		      rol	MQ+1
   1209  077f		       a5 56		      lda	MQ
   1210  0781		       38		      sec
   1211  0782		       e5 54		      sbc	R1	;substract divisor to see if it fits in
   1212  0784		       a8		      tay		;lb result -> Y, for we may need it later
   1213  0785		       a5 57		      lda	MQ+1
   1214  0787		       e5 55		      sbc	R1+1
   1215  0789		       90 06		      bcc	skip	;if carry=0 then divisor didn't fit in yet
   1216  078b
   1217  078b		       85 57		      sta	MQ+1	;else save substraction result as new remainder,
   1218  078d		       84 56		      sty	MQ
   1219  078f		       e6 52		      inc	R0	;and INCrement result cause divisor fit in 1 times
   1220  0791
   1221  0791		       ca	   skip       dex
   1222  0792		       d0 e3		      bne	divloop
   1223  0794		       60		      rts
   1224  0795							;
   1225  0795							; Indicate divide-by-zero error
   1226  0795							;
   1227  0795		       a2 06	   divby0     ldx	#ERR_DIVIDE_ZERO
   1228  0797		       a9 00		      lda	#0
   1229  0799		       4c a7 06 	      jmp	iErr2
   1230  079c							;
   1231  079c							;=====================================================
   1232  079c							; This pops the top two items off the stack.  The top
   1233  079c							; item is a data value and the other is an ABSOLUTE address.
   1234  079c							;Save the value into that address.
   1235  079c							;
   1236  079c		       98	   iSTORE     tya
   1237  079d		       48		      pha
   1238  079e		       20 75 1d 	      jsr	popR0	;data
   1239  07a1		       20 8d 1d 	      jsr	popR1	;Storage location
   1240  07a4		       a0 00		      ldy	#0
   1241  07a6		       a5 52		      lda	R0
   1242  07a8		       91 54		      sta	(R1),y
   1243  07aa		       a5 53		      lda	R0+1
   1244  07ac		       c8		      iny
   1245  07ad		       91 54		      sta	(R1),y
   1246  07af		       68		      pla
   1247  07b0		       a8		      tay
   1248  07b1		       4c c2 02 	      jmp	NextIL
   1249  07b4							;
   1250  07b4							;=====================================================
   1251  07b4							; Replaces the top of stack with the Value
   1252  07b4							; of the variable  whose absolute address it represents.
   1253  07b4							;
   1254  07b4		       98	   iIND       tya
   1255  07b5		       48		      pha
   1256  07b6		       20 8d 1d 	      jsr	popR1
   1257  07b9		       a0 00		      ldy	#0
   1258  07bb		       b1 54		      lda	(R1),y
   1259  07bd		       85 52		      sta	R0
   1260  07bf		       c8		      iny
   1261  07c0		       b1 54		      lda	(R1),y
   1262  07c2		       85 53		      sta	R0+1
   1263  07c4		       68		      pla
   1264  07c5		       a8		      tay
   1265  07c6		       4c 40 07 	      jmp	pushR0nextIl
   1266  07c9							;
   1267  07c9							;=====================================================
   1268  07c9							; Get the array index from top of stack get Current variable
   1269  07c9							; address from next on stack, add the offset
   1270  07c9							; push the result back onto the stack
   1271  07c9				   iArray
   1272  07c9		       20 75 1d 	      jsr	popR0	; Get the array index
   1273  07cc		       20 8d 1d 	      jsr	popR1	; Get the Variable address
   1274  07cf
   1275  07cf		       18		      clc		; Multiplythe value by 2
   1276  07d0		       26 52		      rol	R0	; Do the multiply
   1277  07d2		       26 53		      rol	R0+1	; Indexes can by up to max memory
   1278  07d4		       18		      clc
   1279  07d5		       a5 54		      lda	R1	; Add the index onto the variable pointer
   1280  07d7		       65 52		      adc	R0
   1281  07d9		       85 52		      sta	R0
   1282  07db		       a5 55		      lda	R1+1
   1283  07dd		       65 53		      adc	R0+1
   1284  07df		       85 53		      sta	R0+1	; the new Variable Addressis  stored in R0
   1285  07e1		       20 e3 1c 	      jsr	pushR0	; Push R0 assume it is correct
   1286  07e4
   1287  07e4		       a5 54		      lda	R1	; Check if we are processing a VARIABLE A-Z
   1288  07e6		       c5 41		      cmp	VARIABLES	; So is this the @ pointer
   1289  07e8		       d0 22		      bne	iArrayAtTest	; if they want to use the memory then good luck
   1290  07ea		       a5 55		      lda	R1+1
   1291  07ec		       c5 42		      cmp	VARIABLES+1
   1292  07ee		       d0 1c		      bne	iArrayAtTest
   1293  07f0		       18		      clc
   1294  07f1		       a9 34		      lda	#52	; add the max offset that is valid
   1295  07f3		       65 54		      adc	R1	; update to be the largest offset that is valid
   1296  07f5		       85 54		      sta	R1
   1297  07f7		       a9 00		      lda	#0
   1298  07f9		       65 55		      adc	R1+1
   1299  07fb		       85 55		      sta	R1+1
   1300  07fd				   iArrayVerify 		; try to enforce some sanity to using arrays
   1301  07fd		       a5 53		      lda	R0+1
   1302  07ff		       c5 55		      cmp	R1+1
   1303  0801		       d0 04		      bne	iArrayDecide
   1304  0803		       a5 52		      lda	R0
   1305  0805		       c5 54		      cmp	R1
   1306  0807				   iArrayDecide
   1307  0807		       b0 0f		      bcs	iArrayError	; is the new value greater than the end
   1308  0809		       4c c2 02 	      jmp	NextIL
   1309  080c
   1310  080c				   iArrayAtTest
   1311  080c		       ad 39 2f 	      lda	HighMem
   1312  080f		       85 54		      sta	R1
   1313  0811		       ad 3a 2f 	      lda	HighMem+1
   1314  0814		       85 55		      sta	R1+1
   1315  0816		       d0 e5		      bne	iArrayVerify	; The high byte of address is never 0
   1316  0818
   1317  0818							; Get here if array index is out of range
   1318  0818		       20 75 1d    iArrayError jsr	popR0
   1319  081b		       a9 00		      lda	#0
   1320  081d		       a2 0f		      ldx	#ERR_INDEX_OUT_OF_RANGE
   1321  081f		       4c a7 06 	      jmp	iErr2
   1322  0822							;
   1323  0822							;=====================================================
   1324  0822							; List the current BASIC program in memory.  Uses R0,
   1325  0822							; tempIly, and dpl.
   1326  0822							;
   1327  0822		       20 62 1f    iLST       jsr	SetOutConsole
   1328  0825		       ad 35 2f    iLST2      lda	ProgramStart
   1329  0828		       85 59		      sta	dpl
   1330  082a		       ad 36 2f 	      lda	ProgramStart+1
   1331  082d		       85 5a		      sta	dpl+1
   1332  082f							;
   1333  082f							; dpl/dph point to the current line.  See if we're at
   1334  082f							; the end of the program.
   1335  082f							;
   1336  082f		       a5 59	   iLSTloop   lda	dpl
   1337  0831		       cd 37 2f 	      cmp	ProgramEnd
   1338  0834		       d0 07		      bne	iLstNotEnd
   1339  0836		       a5 5a		      lda	dpl+1
   1340  0838		       cd 38 2f 	      cmp	ProgramEnd+1
   1341  083b		       f0 15		      beq	iLstdone
   1342  083d							;
   1343  083d		       20 bd 14    iLstNotEnd jsr	PrintProgramLine
   1344  0840							;		  ldy	  #1		  ;Change:  Skip first byte length
   1345  0840							;		  lda	  (dpl),y	  ;line number LSB
   1346  0840							;		  sta	  R0
   1347  0840							;		  iny
   1348  0840							;		  lda	  (dpl),y		 ;line number MSB
   1349  0840							;		  sta	  R0+1
   1350  0840							;		  iny
   1351  0840							;		  sty	  tempIlY
   1352  0840							;		  jsr	  PrintDecimal
   1353  0840							;		  lda	  #SPACE
   1354  0840							;		  jsr	  VOUTCH
   1355  0840							;		  ldy	  tempIlY
   1356  0840							;iLSTl2	  lda	  (dpl),y
   1357  0840							;		  beq	  iLST3 	  ;end of this line 0 value
   1358  0840							;		  sty	  tempIlY
   1359  0840							;		  jsr	  VOUTCH
   1360  0840							;		  ldy	  tempIlY
   1361  0840							;		  iny
   1362  0840							;		  bne	  iLSTl2	  ;do next char
   1363  0840							;
   1364  0840							; End of this line.  Print CR/LF, then move to the
   1365  0840							; next line.
   1366  0840							;
   1367  0840		       a0 00	   iLST3      ldy	#0	;Move to next line
   1368  0842		       b1 59		      lda	(dpl),y	;Current line length
   1369  0844		       18		      clc		;Clear the carry flag
   1370  0845							;		  tya
   1371  0845		       65 59		      adc	dpl	;Add the offset to the pointer
   1372  0847		       85 59		      sta	dpl	;Save the new value
   1373  0849		       a5 5a		      lda	dpl+1	;Next byte
   1374  084b		       69 00		      adc	#0	;ad in the carry if any
   1375  084d		       85 5a		      sta	dpl+1	;Save it
   1376  084f							;
   1377  084f							; Have to manually do CR/LF so it uses the vectored
   1378  084f							; output function.
   1379  084f							;
   1380  084f							;		  lda	  #CR
   1381  084f							;		  jsr	  VOUTCH
   1382  084f							;		  lda	  #LF
   1383  084f							;		  jsr	  VOUTCH
   1384  084f		       4c 2f 08 	      jmp	iLSTloop	;do next line
   1385  0852							;
   1386  0852		       20 62 1f    iLstdone   jsr	SetOutConsole
   1387  0855		       4c c2 02 	      jmp	NextIL
   1388  0858							;
   1389  0858							;=====================================================
   1390  0858							; Get a line of text into LINBUF.  Terminate with a
   1391  0858							; null byte.
   1392  0858							;
   1393  0858				   iGETLINE
   1394  0858		       a9 3e		      lda	#'>	;prompt character
   1395  085a		       a6 00		      ldx	0	;Wait for read to complete
   1396  085c		       20 00 1c 	      jsr	GetLine
   1397  085f							;
   1398  085f		       a9 00		      lda	#0
   1399  0861		       85 5b		      sta	RunMode
   1400  0863				   iGetParseLine
   1401  0863							; lda	   CUROFF
   1402  0863							; pha
   1403  0863		       20 c6 10 	      jsr	ParseInputLine
   1404  0866							; pla
   1405  0866							;  sta     CUROFF
   1406  0866		       a9 c3		      lda	#TOKENBUFFER&$FF
   1407  0868		       85 4f		      sta	CURPTR
   1408  086a		       a9 0f		      lda	#TOKENBUFFER>>8
   1409  086c		       85 50		      sta	CURPTR+1
   1410  086e		       a9 01		      lda	#1
   1411  0870		       85 51		      sta	CUROFF
   1412  0872		       4c c2 02 	      jmp	NextIL
   1413  0875							;
   1414  0875							;=====================================================
   1415  0875							; This is called when the input buffer contains a line
   1416  0875							; typed in by the user that starts with a line number.
   1417  0875							; Insert the line into the program or delete the line
   1418  0875							; if there is nothing after the line number,
   1419  0875							;
   1420  0875				   iINSRT		; On entry here the TOKEBUFFER contains the Parsed input line completely
   1421  0875		       ad c4 0f 	      lda	TOKENBUFFER+1	; Get the first byte of the line number
   1422  0878		       85 52		      sta	R0	; place the number into R0
   1423  087a		       ad c5 0f 	      lda	TOKENBUFFER+2	; Get hi byte of line number
   1424  087d		       85 53		      STA	R0+1	; Place it into
   1425  087f							;
   1426  087f							; Now find the line OR the next higher line OR the
   1427  087f							; end of the program.
   1428  087f							;
   1429  087f		       20 2f 1b 	      jsr	findLine	; Look for the line number in the current program
   1430  0882							; Returns Z and curptr point to the line if found
   1431  0882							; Returns C and curptr at next higher line if not found and there is a higher line
   1432  0882							; Returns ZC clear and curptr to end of program if higher than all other lines
   1433  0882							;
   1434  0882							; If the line exists, it needs to be removed.
   1435  0882							;
   1436  0882		       d0 44		      bne	insert2	;jump if no line found higer or a higher line number found, at end of program curptr points to program end
   1437  0884							;
   1438  0884							; Get length of line to be removed, we fall thru to here if we find a matching line
   1439  0884							;
   1440  0884							;		 jsr	 getCURPTRLength ;results in Y , curptr is pointing to point we need to insert the line
   1441  0884		       a0 00		      ldy	#0
   1442  0886		       b1 4f		      lda	(CURPTR),y	;Change the length is now at beginning of the line
   1443  0888		       a8		      tay
   1444  0889							;If it is equal we delete the line and replace it, get length
   1445  0889							;then adjust all program line after up or down depending on len of line
   1446  0889							;If next higher then just move everythimg down by length bytes
   1447  0889							;This call will return how many bytes in the line we found
   1448  0889		       8c 32 2f 	      sty	lineLength	;Save the length of the line we found
   1449  088c							;
   1450  088c							; Compute the new end of the program first.
   1451  088c							;
   1452  088c		       38		      sec		;Set the carry bit
   1453  088d		       ad 37 2f 	      lda	ProgramEnd	;Get low byte of program end
   1454  0890		       ed 32 2f 	      sbc	lineLength	;Subtract the length of the current line
   1455  0893		       8d 37 2f 	      sta	ProgramEnd	;save it
   1456  0896		       ad 38 2f 	      lda	ProgramEnd+1
   1457  0899		       e9 00		      sbc	#0	;Process the carry
   1458  089b		       8d 38 2f 	      sta	ProgramEnd+1	;We now have the new end of program with the line removed
   1459  089e							;
   1460  089e							; Copy CURPTR into R1 for working
   1461  089e							;
   1462  089e		       a5 4f		      lda	CURPTR	;Save the current position to r1 copy destination
   1463  08a0		       85 54		      sta	R1
   1464  08a2		       a5 50		      lda	CURPTR+1
   1465  08a4		       85 55		      sta	R1+1
   1466  08a6							;
   1467  08a6							; See if we're at the end.
   1468  08a6							;
   1469  08a6		       a5 54	   InsDelChk  lda	R1	;Compare the copy dest to end of memory to check if we are finished copy
   1470  08a8		       cd 37 2f 	      cmp	ProgramEnd
   1471  08ab		       d0 07		      bne	InsDelLoop
   1472  08ad		       a5 55		      lda	R1+1
   1473  08af		       cd 38 2f 	      cmp	ProgramEnd+1
   1474  08b2		       f0 14		      beq	insert2	;Now the existing line was removed lets go insert the new line
   1475  08b4							;
   1476  08b4							; Move one byte, move to next location.
   1477  08b4							;
   1478  08b4		       ac 32 2f    InsDelLoop ldy	lineLength	;Move a byte up to remove the space
   1479  08b7		       f0 0f		      beq	insert2	;if this is zero it is a big oops
   1480  08b9		       b1 54		      lda	(R1),y
   1481  08bb		       a0 00		      ldy	#0
   1482  08bd		       91 54		      sta	(R1),y
   1483  08bf		       e6 54		      inc	R1
   1484  08c1		       d0 e3		      bne	InsDelChk
   1485  08c3		       e6 55		      inc	R1+1
   1486  08c5		       4c a6 08 	      jmp	InsDelChk	; Check if we have moved the last byte
   1487  08c8							;
   1488  08c8							; Deletion is done.
   1489  08c8							; If the new line is empty we're done.  Now we have to open a space for the line we are inserting
   1490  08c8							;
   1491  08c8				   insert2		; ldy	   offset		; get back ptr	Get the current offset
   1492  08c8		       ad c3 0f 	      lda	TOKENBUFFER	; Get the length
   1493  08cb		       c9 04		      cmp	#4	; empty lines only have 4 bytes { len(1), linenum(2) ,null(1) }
   1494  08cd							;		 lda	 LINBUF,y	      ;next byte     Get the next byte to be stored
   1495  08cd		       f0 54		      beq	mvUpFini	;empty line	if there is a null then we were deleting a line, no content
   1496  08cf							;
   1497  08cf							; CURPTR points to where the line will be inserted.
   1498  08cf							;
   1499  08cf							;		 jsr	 getLineLength	 ;get bytes needed Reload the number of bytes required for the new line
   1500  08cf		       ae c3 0f 	      ldx	TOKENBUFFER
   1501  08d2		       8e 32 2f 	      stx	lineLength	; So update, the TOKENBUFFER already has the line length
   1502  08d5							;
   1503  08d5		       ad 37 2f 	      lda	ProgramEnd	;Load the start address for the copy
   1504  08d8							;At this point curptr still contains the location we will insert data
   1505  08d8		       85 5c		      sta	FROM
   1506  08da		       ad 38 2f 	      lda	ProgramEnd+1
   1507  08dd		       85 5d		      sta	FROM+1
   1508  08df							;
   1509  08df		       a0 00	   mvup1      ldy	#0	;always zero from From copy position to use indirect addressing
   1510  08e1		       b1 5c		      lda	(FROM),y
   1511  08e3		       ac 32 2f 	      ldy	lineLength	;Now load y with new offset downward to store the byte
   1512  08e6		       91 5c		      sta	(FROM),y	;Save the new byte
   1513  08e8							;
   1514  08e8		       a5 5c		      lda	FROM	;Check if we have copied the last byte
   1515  08ea		       c5 4f		      cmp	CURPTR
   1516  08ec		       d0 06		      bne	mvUpMore
   1517  08ee		       a5 5d		      lda	FROM+1
   1518  08f0		       c5 50		      cmp	CURPTR+1
   1519  08f2		       f0 0b		      beq	mvUpDone	; yes from now equals curptr where we insert the new line
   1520  08f4							;
   1521  08f4							; Not done yet
   1522  08f4							;
   1523  08f4		       a5 5c	   mvUpMore   lda	FROM	;decrement FROM to copy the next byte
   1524  08f6		       d0 02		      bne	mvUpMore2
   1525  08f8		       c6 5d		      dec	FROM+1
   1526  08fa		       c6 5c	   mvUpMore2  dec	FROM
   1527  08fc		       4c df 08 	      jmp	mvup1	;Loop until everything is moved
   1528  08ff							;
   1529  08ff							; All done with copy.
   1530  08ff							;
   1531  08ff				   mvUpDone
   1532  08ff		       18		      clc		;Ok, We are now ready to copy the new line to the program
   1533  0900		       ad 32 2f 	      lda	lineLength	;Number of bytes to copy from line buff
   1534  0903		       6d 37 2f 	      adc	ProgramEnd	;Now pdate the end of program address for space we just opened
   1535  0906		       8d 37 2f 	      sta	ProgramEnd
   1536  0909		       ad 38 2f 	      lda	ProgramEnd+1
   1537  090c		       69 00		      adc	#0
   1538  090e		       8d 38 2f 	      sta	ProgramEnd+1	;Program end now points to the correct enpty space
   1539  0911							;
   1540  0911							;===================jlit use length before line newline
   1541  0911
   1542  0911		       a0 00		      ldy	#0	;Set offset of copy
   1543  0913							;		  lda	  lineLength	  ;We will insert the actual length of the line first
   1544  0913							;		  sta	  (CURPTR),y	  ;Store the length
   1545  0913							;		  iny
   1546  0913							;		  lda	  R0		  ;Store the line number next
   1547  0913							;		  sta	  (CURPTR),y
   1548  0913							;		  iny
   1549  0913							;		  lda	  R0+1
   1550  0913							;		  sta	  (CURPTR),y
   1551  0913							;		  iny
   1552  0913							;
   1553  0913							;		  ldx	  offset	 ; Load the offset into line buffer in page zero
   1554  0913		       a2 00		      ldx	#0	; the token buffer is ready to copy
   1555  0915				   mvUpLoop2
   1556  0915							;		  lda	  LINBUF,x	 ;get a byte
   1557  0915		       bd c3 0f 	      lda	TOKENBUFFER,x	;get a byte
   1558  0918		       91 4f		      sta	(CURPTR),y	;Store into Space opened, copies the closing null as well
   1559  091a
   1560  091a		       e8		      inx
   1561  091b		       ec c3 0f 	      cpx	TOKENBUFFER	; Check if we have copied all that we need to
   1562  091e		       b0 03		      bcs	mvUpFini	;hit the null at end of line then we are done
   1563  0920		       c8		      iny
   1564  0921		       d0 f2		      bne	mvUpLoop2	;in case y wraps past 256 bytes stop
   1565  0923							;
   1566  0923		       4c c2 02    mvUpFini   jmp	NextIL
   1567  0926							;
   1568  0926							;=====================================================
   1569  0926							; Pops the top value of the ILPC stack and stores it
   1570  0926							; in ILPC.  Ie, return from an IL subroutine.
   1571  0926							;
   1572  0926		       20 1d 1b    iRTN       jsr	popILPC
   1573  0929		       4c c2 02 	      jmp	NextIL
   1574  092c							;
   1575  092c							;=====================================================
   1576  092c							; NLINE print a newline
   1577  092c							;
   1578  092c		       20 2e 1e    iNLINE     jsr	CRLF	;user supplied sub
   1579  092f		       4c c2 02 	      jmp	NextIL
   1580  0932							;
   1581  0932							;=====================================================
   1582  0932							; This saves the current ILPC value on the stack, then
   1583  0932							; jumps to the address specified by the next two bytes.
   1584  0932							;
   1585  0932		       20 00 1b    iCALL      jsr	pushILPC	;save ILPC
   1586  0935		       90 03		      bcc	iJMP
   1587  0937		       4c df 0b 	      jmp	ErrStkOver	; Check if there was an error
   1588  093a							;
   1589  093a							; Jmp to a specific location in the IL code.  The new
   1590  093a							; address immediately follows the opcode.
   1591  093a							;
   1592  093a		       20 e6 1a    iJMP       jsr	getILWord
   1593  093d		       86 43		      stx	ILPC
   1594  093f		       85 44		      sta	ILPC+1
   1595  0941		       4c c2 02 	      jmp	NextIL
   1596  0944
   1597  0944
   1598  0944							;
   1599  0944							;=====================================================
   1600  0944							; Push the next two bytes onto the arithmetic stack.
   1601  0944							;
   1602  0944		       20 ea 1a    iSetR2     jsr	getILByte
   1603  0947		       85 58		      sta	R2
   1604  0949		       4c c2 02 	      jmp	NextIL
   1605  094c							;
   1606  094c							;=====================================================
   1607  094c							; Push the next two bytes onto the arithmetic stack.
   1608  094c							;
   1609  094c		       20 e6 1a    iLIT       jsr	getILWord
   1610  094f		       86 52		      stx	R0
   1611  0951		       85 53		      sta	R0+1
   1612  0953		       20 e3 1c 	      jsr	pushR0
   1613  0956		       4c c2 02 	      jmp	NextIL
   1614  0959							;
   1615  0959							;=====================================================
   1616  0959							; Initialize all variables for a single task.	Ie, set to zero.
   1617  0959							;
   1618  0959		       98	   subVINIT   tya
   1619  095a		       48		      pha
   1620  095b
   1621  095b		       a9 00		      lda	#0
   1622  095d		       a0 00		      ldy	#0
   1623  095f		       91 41	   Vinit2     sta	(VARIABLES),y
   1624  0961		       c8		      iny
   1625  0962		       c0 34		      cpy	#[[VARIABLESSIZE * 2] - 2]	; skip the old exit code
   1626  0964		       90 f9		      bcc	Vinit2
   1627  0966
   1628  0966		       68		      pla
   1629  0967		       a8		      tay
   1630  0968		       60		      rts
   1631  0969
   1632  0969		       20 85 0d    iVINIT     jsr	Compile	; compile line numbers to memory pointers
   1633  096c		       20 59 09 	      jsr	subVINIT
   1634  096f		       4c c2 02 	      jmp	NextIL
   1635  0972							;
   1636  0972							;=====================================================
   1637  0972							; Set the address of the error handler.  After any
   1638  0972							; error, set to the ILPC to the specified location.
   1639  0972							;
   1640  0972		       20 e6 1a    iERRGOTO   jsr	getILWord
   1641  0975		       8e 22 2f 	      stx	errGoto
   1642  0978		       8d 23 2f 	      sta	errGoto+1
   1643  097b		       4c c2 02 	      jmp	NextIL
   1644  097e							;
   1645  097e							;=====================================================
   1646  097e							; TST is followed by an 8 bit signed offset, then a
   1647  097e							; null terminated string.  Compare the string against
   1648  097e							; the string starting at (CURPTR),CUROFF.  If the
   1649  097e							; strings match, continue executing the next IL
   1650  097e							; opcode.  Else, add the offset to ILPC.
   1651  097e							;
   1652  097e		       20 ea 1a    iTST       jsr	getILByte	;Get the relative jump address
   1653  0981		       8d 31 2f 	      sta	offset	;save it to use if test faile
   1654  0984		       20 cd 1c 	      jsr	saveIL	;in case of failure, to restore before jump calculation
   1655  0987
   1656  0987		       a4 51		      ldy	CUROFF
   1657  0989		       84 59		      sty	dpl	;save for later
   1658  098b							;
   1659  098b		       20 ea 1a    iTSTloop   jsr	getILByte	;get next char
   1660  098e		       f0 11		      beq	iTSTm	;match!
   1661  0990		       a4 59		      ldy	dpl
   1662  0992		       d1 4f		      cmp	(CURPTR),y
   1663  0994		       f0 06		      beq	iTSTUpper	; JLIT added 02/08/2022
   1664  0996		       09 20		      ora	#$20	; lets allow lowercase as well
   1665  0998		       d1 4f		      cmp	(CURPTR),y
   1666  099a		       d0 23		      bne	iTSTfail	;mismatch
   1667  099c		       c8	   iTSTUpper  iny
   1668  099d		       84 59		      sty	dpl
   1669  099f		       d0 ea		      bne	iTSTloop
   1670  09a1							;
   1671  09a1							; It's a match!  Clean up a bit.
   1672  09a1							;
   1673  09a1		       a4 59	   iTSTm      ldy	dpl
   1674  09a3		       84 51		      sty	CUROFF
   1675  09a5		       4c c2 02 	      jmp	NextIL
   1676  09a8
   1677  09a8							; Test for a single quote string
   1678  09a8		       20 ea 1a    iTSTStr    jsr	getILByte
   1679  09ab		       8d 31 2f 	      sta	offset
   1680  09ae		       20 cd 1c 	      jsr	saveIL
   1681  09b1		       a4 51		      ldy	CUROFF
   1682  09b3		       a9 22		      lda	#'"
   1683  09b5		       d1 4f		      cmp	(CURPTR),y
   1684  09b7		       d0 06		      bne	iTSTfail
   1685  09b9		       c8		      iny
   1686  09ba		       84 51		      sty	CUROFF
   1687  09bc		       4c e5 02 	      jmp	NextILStr
   1688  09bf							;
   1689  09bf							; Not a match, reset ILPC and then move to the
   1690  09bf							; offset.
   1691  09bf							;
   1692  09bf		       20 d8 1c    iTSTfail   jsr	restoreIL
   1693  09c2		       4c 8d 0b 	      jmp	tstBranch
   1694  09c5							;
   1695  09c5							;=================================================JLIT=
   1696  09c5							; Test if we have a let statement without the let keyword
   1697  09c5		       20 ea 1a    iTSTLET    jsr	getILByte	; Get the relative offset byte
   1698  09c8		       8d 31 2f 	      sta	offset	; Save the jump offset for fails
   1699  09cb		       20 cd 1c 	      jsr	saveIL	; save to restore when done if fail
   1700  09ce
   1701  09ce		       a4 51		      ldy	CUROFF	; Get the current offset into the buffer
   1702  09d0		       b1 4f		      lda	(CURPTR),y	; Get the byte
   1703  09d2		       c9 01		      cmp	#kLet	; Is it a let keyword
   1704  09d4		       f0 0a		      beq	iTSTLETGOOD	; We have a good let statement
   1705  09d6		       c9 80		      cmp	#tVa	; lets check for a variable
   1706  09d8		       90 e5		      bcc	iTSTfail	; Less than variable range
   1707  09da		       c9 9e		      cmp	#tVat+1	; Test if it is greater that the last variable
   1708  09dc		       90 05		      bcc	iTSTGOODVAR	; No it failed get out Fast
   1709  09de		       b0 df		      bcs	iTSTfail	; return it failed
   1710  09e0
   1711  09e0				   iTSTLETGOOD
   1712  09e0		       c8		      iny
   1713  09e1		       84 51		      sty	CUROFF	; If it was a let then inc past the let word
   1714  09e3				   iTSTGOODVAR
   1715  09e3		       4c c2 02 	      jmp	NextIL	; Then next instruction
   1716  09e6
   1717  09e6							;=================================================JLIT=
   1718  09e6							; Test a byte at an indirect address
   1719  09e6							; fails if byte is not equal to the value at the address
   1720  09e6							; The tests an indirect byte and branches if true
   1721  09e6		       20 ea 1a    iTSTBYTE   jsr	getILByte	; Get the relative offset byte
   1722  09e9		       8d 31 2f 	      sta	offset	; Save the jump offset for fails
   1723  09ec		       20 cd 1c 	      jsr	saveIL	; save to restore when done if fail
   1724  09ef		       20 e6 1a 	      jsr	getILWord	; Get a word into RO
   1725  09f2		       86 52		      stx	R0
   1726  09f4		       85 53		      sta	R0+1
   1727  09f6		       20 ea 1a 	      jsr	getILByte	; Get byte into A
   1728  09f9		       a0 00		      ldy	#0
   1729  09fb		       d1 52		      cmp	(R0),y
   1730  09fd		       d0 03		      bne	iTSTByteNotEqual
   1731  09ff		       4c bf 09 	      jmp	iTSTfail
   1732  0a02
   1733  0a02				   iTSTByteNotEqual
   1734  0a02		       4c c2 02 	      jmp	NextIL	; Then next instruction
   1735  0a05
   1736  0a05							;=================================================JLIT=
   1737  0a05							; Test a byte	branch if it fails
   1738  0a05		       20 ea 1a    iTSTB      jsr	getILByte	; Get the relative offset byte
   1739  0a08		       8d 31 2f 	      sta	offset	; Save the jump offset for fails
   1740  0a0b		       20 cd 1c 	      jsr	saveIL	; save to restore when done if fail
   1741  0a0e		       20 ea 1a 	      jsr	getILByte	; Get a word into RO
   1742  0a11		       a4 51		      ldy	CUROFF	; Get offset in the stream
   1743  0a13		       d1 4f		      cmp	(CURPTR),y
   1744  0a15		       f0 03		      beq	iTSTBMatch	; Yes it matched move on
   1745  0a17		       4c bf 09 	      jmp	iTSTfail	; REcover and move on to next test
   1746  0a1a
   1747  0a1a				   iTSTBMatch
   1748  0a1a		       c8		      iny
   1749  0a1b		       84 51		      sty	CUROFF	; Point to the next byte
   1750  0a1d		       4c c2 02 	      jmp	NextIL	; Then next instruction
   1751  0a20
   1752  0a20							;=================================================JLIT=
   1753  0a20							; Test a byte	branch if it fails
   1754  0a20		       20 ea 1a    iTSTW      jsr	getILByte	; Get the relative offset byte
   1755  0a23		       8d 31 2f 	      sta	offset	; Save the jump offset for fails
   1756  0a26		       20 cd 1c 	      jsr	saveIL	; save to restore when done if fail
   1757  0a29		       20 e6 1a 	      jsr	getILWord	; Get a word into RO
   1758  0a2c		       86 52		      stx	R0
   1759  0a2e		       85 53		      sta	R0+1
   1760  0a30		       a4 51		      ldy	CUROFF	; Get offset in the stream
   1761  0a32		       8a		      txa
   1762  0a33		       d1 4f		      cmp	(CURPTR),y	; Test if low order byte matches
   1763  0a35		       f0 e3		      beq	iTSTBMatch	; Yes it matched move on
   1764  0a37		       4c bf 09 	      jmp	iTSTfail	; REcover and move on to next test
   1765  0a3a		       c8	   iTSTWM1    iny
   1766  0a3b		       a5 53		      lda	R0+1
   1767  0a3d		       d1 4f		      cmp	(CURPTR),y	; Check high order byte
   1768  0a3f		       f0 03		      beq	iTSTWMatch
   1769  0a41		       4c bf 09 	      jmp	iTSTfail
   1770  0a44
   1771  0a44				   iTSTWMatch
   1772  0a44		       c8		      iny
   1773  0a45		       84 51		      sty	CUROFF
   1774  0a47		       4c c2 02 	      jmp	NextIL	; Then next instruction
   1775  0a4a
   1776  0a4a							;================================================jLIT=
   1777  0a4a							;Test for end of line
   1778  0a4a							;
   1779  0a4a				   iTSTDONE
   1780  0a4a		       20 ea 1a 	      jsr	getILByte
   1781  0a4d		       8d 31 2f 	      sta	offset
   1782  0a50		       20 cd 1c 	      jsr	saveIL
   1783  0a53		       a4 51		      ldy	CUROFF
   1784  0a55		       84 59		      sty	dpl
   1785  0a57		       b1 4f		      lda	(CURPTR),y
   1786  0a59		       f0 0b		      beq	iTSTDONEtrue
   1787  0a5b		       c9 e6		      cmp	#oColon
   1788  0a5d		       f0 07		      beq	iTSTDONEtrue
   1789  0a5f		       a4 59		      ldy	dpl
   1790  0a61		       84 51		      sty	CUROFF
   1791  0a63		       4c bf 09 	      jmp	iTSTfail
   1792  0a66							;
   1793  0a66							; Advance to the next line
   1794  0a66							;
   1795  0a66				   iTSTDONEtrue
   1796  0a66		       4c c2 02 	      jmp	NextIL
   1797  0a69
   1798  0a69		       4c 8d 0b    tstBranchLink jmp	tstBranch
   1799  0a6c							;
   1800  0a6c							;=====================================================
   1801  0a6c							; Inc and dec a variable , faster than a = a + 1
   1802  0a6c				   iINCVAR
   1803  0a6c		       20 75 1d 	      jsr	popR0
   1804  0a6f		       a0 00		      ldy	#0
   1805  0a71		       18		      clc
   1806  0a72		       a9 01		      lda	#1
   1807  0a74		       71 52		      adc	(R0),y
   1808  0a76		       91 52		      sta	(R0),y
   1809  0a78		       90 07		      bcc	iINCDONE
   1810  0a7a		       c8		      iny
   1811  0a7b		       a9 00		      lda	#0
   1812  0a7d		       71 52		      adc	(R0),y
   1813  0a7f		       91 52		      sta	(R0),y
   1814  0a81				   iINCDONE
   1815  0a81		       4c c2 02 	      jmp	NextIL
   1816  0a84
   1817  0a84				   iDECVAR
   1818  0a84		       20 75 1d 	      jsr	popR0
   1819  0a87		       a0 00		      ldy	#0
   1820  0a89		       38		      sec
   1821  0a8a		       b1 52		      lda	(R0),y
   1822  0a8c		       e9 01		      sbc	#1
   1823  0a8e		       91 52		      sta	(R0),y
   1824  0a90		       c8		      iny
   1825  0a91		       b1 52		      lda	(R0),y
   1826  0a93		       e9 00		      sbc	#0
   1827  0a95		       91 52		      sta	(R0),y
   1828  0a97		       4c c2 02 	      jmp	NextIL
   1829  0a9a
   1830  0a9a
   1831  0a9a							;
   1832  0a9a							;=====================================================
   1833  0a9a							; TSTV is followed by an 8 bit signed offset.	If the
   1834  0a9a							; value at (CURPTR),CUROFF appears to be a variable
   1835  0a9a							; name, move to the next IL statement.  Else, add the
   1836  0a9a							; offset to ILPC. Converted to use actual absolute memory addresses
   1837  0a9a							; TSTVT Looks for the task context
   1838  0a9a							;
   1839  0a9a		       20 8d 1d    iTSTVT     jsr	popR1	; The task top has the context id(PID)
   1840  0a9d		       a9 00		      lda	#0
   1841  0a9f		       85 58		      sta	R2
   1842  0aa1		       f0 04		      beq	iTSTVV
   1843  0aa3
   1844  0aa3		       a9 01	   iTSTV      lda	#1	; set a process Flag
   1845  0aa5		       85 58		      sta	R2
   1846  0aa7
   1847  0aa7		       20 ea 1a    iTSTVV     jsr	getILByte	;offset
   1848  0aaa		       8d 31 2f 	      sta	offset
   1849  0aad							;
   1850  0aad		       a4 51		      ldy	CUROFF	; Get the pointer into the program
   1851  0aaf		       b1 4f		      lda	(CURPTR),y	; Get the next byte to process
   1852  0ab1		       d0 03		      bne	iTSTVnext	; if is not null then process it
   1853  0ab3		       4c 69 0a 	      jmp	tstBranchLink	; if we are at the end of line just get out with error
   1854  0ab6							;
   1855  0ab6				   iTSTVnext
   1856  0ab6		       c9 9d		      cmp	#tVat	; allow access to all unused memory as an array or integers
   1857  0ab8		       f0 42		      beq	iTSTVat	; Setup to do a pointer to unused memory
   1858  0aba
   1859  0aba		       c9 9c		      cmp	#tVhash	; parameters passed to this task
   1860  0abc		       f0 4e		      beq	iTSTVParm
   1861  0abe
   1862  0abe		       c9 9b		      cmp	#tVhat	; task exit code
   1863  0ac0		       d0 04		      bne	iTSTV_A2Z
   1864  0ac2		       a9 34		      lda	#TASKEXITCODE
   1865  0ac4		       d0 0b		      bne	iTSTVContinue
   1866  0ac6
   1867  0ac6				   iTSTV_A2Z
   1868  0ac6
   1869  0ac6		       c9 80		      cmp	#tVa
   1870  0ac8		       90 9f		      bcc	tstBranchLink
   1871  0aca		       c9 9a		      cmp	#tVz+1
   1872  0acc		       b0 9b		      bcs	tstBranchLink
   1873  0ace
   1874  0ace
   1875  0ace							;
   1876  0ace							; The condition is true, so convert to an index, push
   1877  0ace							; it onto the stack and continue running.
   1878  0ace							;
   1879  0ace		       29 7f		      and	#%01111111	; Mask off the high bit
   1880  0ad0		       0a		      asl		; multiply by two
   1881  0ad1
   1882  0ad1				   iTSTVContinue
   1883  0ad1		       c8		      iny
   1884  0ad2		       84 51		      sty	CUROFF	; it is a valid variable
   1885  0ad4		       48		      pha		; save the last variable pointer value
   1886  0ad5		       a5 58		      lda	R2
   1887  0ad7		       d0 11		      bne	iTSTVLocalValue	; Value local to this task
   1888  0ad9
   1889  0ad9		       20 cd 1a 	      jsr	ipc_getcontext	; Get the other tasks variables
   1890  0adc		       a0 02		      ldy	#VARIABLEPOS
   1891  0ade		       b1 56		      lda	(MQ),y
   1892  0ae0		       85 52		      sta	R0
   1893  0ae2		       c8		      iny
   1894  0ae3		       b1 56		      lda	(MQ),y
   1895  0ae5		       85 53		      sta	R0+1
   1896  0ae7		       4c f2 0a 	      jmp	iTSTVAddOffset
   1897  0aea
   1898  0aea				   iTSTVLocalValue
   1899  0aea		       a5 41		      lda	VARIABLES	; Get the local tasks variables
   1900  0aec		       85 52		      sta	R0
   1901  0aee		       a5 42		      lda	VARIABLES+1
   1902  0af0		       85 53		      sta	R0+1
   1903  0af2
   1904  0af2				   iTSTVAddOffset
   1905  0af2		       68		      pla
   1906  0af3		       85 54		      sta	R1
   1907  0af5		       a9 00		      lda	#0
   1908  0af7		       85 55		      sta	R1+1
   1909  0af9
   1910  0af9				   iTSTVcontinue
   1911  0af9
   1912  0af9		       4c c8 06 	      jmp	iADDfast	; Fast add for value/place on stack
   1913  0afc
   1914  0afc							; When we get here then we are using the root address of the Lowest addresses free bytes as
   1915  0afc							; an array of integer values
   1916  0afc				   iTSTVat
   1917  0afc		       c8		      iny
   1918  0afd		       84 51		      sty	CUROFF	;it is a valid variable
   1919  0aff		       ad 37 2f 	      lda	ProgramEnd	;set flag to let evaluator to use PROGRAMEND as the root
   1920  0b02		       85 52		      sta	R0
   1921  0b04		       ad 38 2f 	      lda	ProgramEnd+1
   1922  0b07		       85 53		      sta	R0+1
   1923  0b09		       4c 40 07 	      jmp	pushR0nextIl	;place this onto the stack
   1924  0b0c
   1925  0b0c							; When we get parameters passed we can access them using the # variable with[]
   1926  0b0c							; example #[0] #[1] etc, we dont check yet if there is too many
   1927  0b0c				   iTSTVParm
   1928  0b0c		       c8		      iny
   1929  0b0d		       84 51		      sty	CUROFF	;it is a valid variable
   1930  0b0f		       a5 48		      lda	MATHSTACK
   1931  0b11		       85 52		      sta	R0
   1932  0b13		       a5 49		      lda	MATHSTACK+1
   1933  0b15		       85 53		      sta	R0+1
   1934  0b17		       4c 40 07 	      jmp	pushR0nextIl
   1935  0b1a
   1936  0b1a							;
   1937  0b1a							;=====================================================
   1938  0b1a							; TSTL seems basically the same as TSTN, but leave the
   1939  0b1a							; value in R0 instead of pushing onto stack.
   1940  0b1a							; This tests for a valid line number
   1941  0b1a							;
   1942  0b1a		       20 ea 1a    iTSTL      jsr	getILByte
   1943  0b1d		       8d 31 2f 	      sta	offset
   1944  0b20							;
   1945  0b20		       a4 51		      ldy	CUROFF
   1946  0b22		       b1 4f		      lda	(CURPTR),y
   1947  0b24		       c8		      iny
   1948  0b25		       11 4f		      ora	(CURPTR),y
   1949  0b27		       f0 06		      beq	iTSTLNotLineNo
   1950  0b29
   1951  0b29
   1952  0b29							; In Both cases we need to point to the first usefull byte to process.
   1953  0b29		       c8		      iny
   1954  0b2a		       84 51		      sty	CUROFF
   1955  0b2c		       4c c2 02 	      jmp	NextIL
   1956  0b2f				   iTSTLNotLineNo
   1957  0b2f		       c8		      iny
   1958  0b30		       84 51		      sty	CUROFF
   1959  0b32		       4c 8d 0b 	      jmp	tstBranch
   1960  0b35
   1961  0b35							;
   1962  0b35							;=====================================================
   1963  0b35							; TSTN checks for a number.  This is very simplistic;
   1964  0b35							; if the character is a digit, assume it's a number.
   1965  0b35							; Convert to a number and push it onto the stack.
   1966  0b35							;
   1967  0b35		       20 ea 1a    iTSTN      jsr	getILByte
   1968  0b38		       8d 31 2f 	      sta	offset
   1969  0b3b							;
   1970  0b3b		       a9 00		      lda	#0
   1971  0b3d		       85 59		      sta	dpl
   1972  0b3f		       a4 51		      ldy	CUROFF
   1973  0b41				   chkType
   1974  0b41		       b1 4f		      lda	(CURPTR),y
   1975  0b43		       c9 a2		      cmp	#tByte
   1976  0b45		       f0 0e		      beq	chkByte
   1977  0b47		       c9 a1		      cmp	#tInteger
   1978  0b49		       f0 16		      beq	chkInteger
   1979  0b4b		       c9 eb		      cmp	#oMinus
   1980  0b4d		       d0 3e		      bne	tstBranch
   1981  0b4f		       e6 59		      inc	dpl
   1982  0b51		       c8		      iny
   1983  0b52		       4c 41 0b 	      jmp	chkType
   1984  0b55
   1985  0b55				   chkByte
   1986  0b55		       a9 00		      lda	#0
   1987  0b57		       85 53		      sta	R0+1
   1988  0b59		       c8		      iny
   1989  0b5a		       b1 4f		      lda	(CURPTR),y
   1990  0b5c		       85 52		      sta	R0
   1991  0b5e		       c8		      iny
   1992  0b5f		       d0 0b		      bne	iTSTN_1
   1993  0b61
   1994  0b61				   chkInteger
   1995  0b61		       c8		      iny
   1996  0b62		       b1 4f		      lda	(CURPTR),y
   1997  0b64		       85 52		      sta	R0
   1998  0b66		       c8		      iny
   1999  0b67		       b1 4f		      lda	(CURPTR),y
   2000  0b69		       85 53		      sta	R0+1
   2001  0b6b		       c8		      iny
   2002  0b6c							;
   2003  0b6c							; Check if it is negative and make it so
   2004  0b6c							;
   2005  0b6c				   iTSTN_1
   2006  0b6c		       84 51		      sty	CUROFF
   2007  0b6e
   2008  0b6e		       a5 59		      lda	dpl
   2009  0b70		       f0 18		      beq	iTSTN_2	;positive
   2010  0b72							;
   2011  0b72		       a5 52		      lda	R0
   2012  0b74		       05 53		      ora	R0+1
   2013  0b76		       f0 12		      beq	iTSTN_2	;zero
   2014  0b78
   2015  0b78							; Invert all the bits, then add one.
   2016  0b78							;
   2017  0b78		       a5 52		      lda	R0
   2018  0b7a		       49 ff		      eor	#$ff
   2019  0b7c		       85 52		      sta	R0
   2020  0b7e		       a5 53		      lda	R0+1
   2021  0b80		       49 ff		      eor	#$ff
   2022  0b82		       85 53		      sta	R0+1
   2023  0b84							;
   2024  0b84		       e6 52		      inc	R0
   2025  0b86		       d0 02		      bne	iTSTN_2
   2026  0b88		       e6 53		      inc	R0+1
   2027  0b8a				   iTSTN_2
   2028  0b8a		       4c 40 07 	      jmp	pushR0nextIl	;save onto stack
   2029  0b8d
   2030  0b8d							;
   2031  0b8d							; Common jump point for all TSTx instructions that
   2032  0b8d							; fail to meet the requirements.  This takes the
   2033  0b8d							; offset and adds/subtracts to/from ILPC.
   2034  0b8d							;
   2035  0b8d		       ad 31 2f    tstBranch  lda	offset	;get signed offset
   2036  0b90		       10 0e		      bpl	tstPositive
   2037  0b92							;
   2038  0b92							; Do negative branch.	Do sign extension.
   2039  0b92							;
   2040  0b92		       18	   tstNegative clc
   2041  0b93		       65 43		      adc	ILPC
   2042  0b95		       85 43		      sta	ILPC
   2043  0b97							;		  bcc	  tstBothDone
   2044  0b97							;		  dec	  ILPC+1
   2045  0b97							;		  jmp	  NextIL
   2046  0b97
   2047  0b97		       a5 44		      lda	ILPC+1
   2048  0b99		       69 ff		      adc	#$ff
   2049  0b9b		       85 44		      sta	ILPC+1
   2050  0b9d		       4c c2 02 	      jmp	NextIL	;keep going
   2051  0ba0							;
   2052  0ba0		       18	   tstPositive clc
   2053  0ba1		       65 43		      adc	ILPC
   2054  0ba3		       85 43		      sta	ILPC
   2055  0ba5		       90 02		      bcc	tstBothDone
   2056  0ba7		       e6 44		      inc	ILPC+1
   2057  0ba9				   tstBothDone
   2058  0ba9		       4c c2 02 	      jmp	NextIL
   2059  0bac
   2060  0bac							;
   2061  0bac							;====================================================
   2062  0bac							; Test for IRQ pending, and test if a break key pressed
   2063  0bac							; Yes I know but this handles all sorts of irq/break issues
   2064  0bac							;
   2065  0bac		       20 ea 1a    iTstIrq    jsr	getILByte	; get the offset to next instruction when not in irq
   2066  0baf		       8d 31 2f 	      sta	offset	; Store the not true jump address offset
   2067  0bb2		       20 4b 04 	      jsr	BreakSet	; Check if the escape key was pressed
   2068  0bb5		       d0 03		      bne	irqNo	; z not set of no break found
   2069  0bb7		       4c 34 06 	      jmp	iFIN	; Exit out of run mode
   2070  0bba		       ad d9 25    irqNo      lda	IRQPending
   2071  0bbd		       f0 ce		      beq	tstBranch
   2072  0bbf		       c9 01		      cmp	#1	; only do this if set to first time
   2073  0bc1		       d0 ca		      bne	tstBranch
   2074  0bc3		       78		      sei		; disable the interupt until ireturn resets it
   2075  0bc4		       ee d9 25    irqbrk     inc	IRQPending	; Set the pending to 2, so this ignores it, iret sets it to 0
   2076  0bc7		       a9 01		      lda	#GOSUB_RTN	; Save as gosub
   2077  0bc9		       20 fd 1c 	      jsr	pushLN	; Push the next line to be executed
   2078  0bcc		       b0 11		      bcs	ErrStkOver	; Check if there was an error
   2079  0bce		       ad da 25 	      lda	IRQEntry	; Get the line number to branch to
   2080  0bd1		       85 4f		      sta	CURPTR	; put line number into r0
   2081  0bd3		       ad db 25 	      lda	IRQEntry+1
   2082  0bd6		       85 50		      sta	CURPTR+1
   2083  0bd8		       a9 03		      lda	#3	; Point to first byte of program text
   2084  0bda		       85 51		      sta	CUROFF
   2085  0bdc		       4c c2 02 	      jmp	NextIL	; Execute the next instruction should jmp statement
   2086  0bdf
   2087  0bdf		       a2 0c	   ErrStkOver ldx	#ERR_STACK_OVER_FLOW	; Flag any error in line number
   2088  0be1		       a9 00		      lda	#0	; stop the execution
   2089  0be3		       4c a7 06 	      jmp	iErr2
   2090  0be6							;
   2091  0be6
   2092  0be6							;=====================================================
   2093  0be6							; This places the number of free bytes on top of the
   2094  0be6							; stack.
   2095  0be6							;
   2096  0be6		       20 3e 16    iFREE      jsr	MemFree
   2097  0be9		       20 e3 1c 	      jsr	pushR0
   2098  0bec		       4c c2 02 	      jmp	NextIL
   2099  0bef							;
   2100  0bef							;=====================================================
   2101  0bef							; Generate a random number from 0-FFFF and then MOD
   2102  0bef							; it with the value on top of stack.  Leaves number on
   2103  0bef							; stack
   2104  0bef							;
   2105  0bef		       20 8d 1d    iRANDOM    jsr	popR1	;mod value
   2106  0bf2							;
   2107  0bf2							; If the value is zero, just return a one.
   2108  0bf2							;
   2109  0bf2		       a5 54		      lda	R1
   2110  0bf4		       05 55		      ora	R1+1
   2111  0bf6		       f0 4a		      beq	irandom1
   2112  0bf8							;
   2113  0bf8		       ad 28 2f 	      lda	random+1
   2114  0bfb		       8d 25 2f 	      sta	rtemp1
   2115  0bfe		       ad 27 2f 	      lda	random
   2116  0c01		       0a		      asl
   2117  0c02		       2e 25 2f 	      rol	rtemp1
   2118  0c05		       0a		      asl
   2119  0c06		       2e 25 2f 	      rol	rtemp1
   2120  0c09		       18		      clc
   2121  0c0a		       6d 27 2f 	      adc	random
   2122  0c0d
   2123  0c0d		       48		      pha
   2124  0c0e
   2125  0c0e		       ad 25 2f 	      lda	rtemp1
   2126  0c11		       6d 28 2f 	      adc	random+1
   2127  0c14		       8d 28 2f 	      sta	random+1
   2128  0c17
   2129  0c17		       68		      pla
   2130  0c18
   2131  0c18		       69 11		      adc	#$11
   2132  0c1a		       8d 27 2f 	      sta	random
   2133  0c1d		       ad 28 2f 	      lda	random+1
   2134  0c20		       69 36		      adc	#$36
   2135  0c22		       8d 28 2f 	      sta	random+1
   2136  0c25
   2137  0c25		       ad 27 2f 	      lda	random
   2138  0c28		       85 52		      sta	R0
   2139  0c2a		       ad 28 2f 	      lda	random+1
   2140  0c2d		       29 7f		      and	#$7f	;make positive
   2141  0c2f		       85 53		      sta	R0+1
   2142  0c31							;
   2143  0c31							; R0 contains the number and R1 contains the max value.
   2144  0c31							;
   2145  0c31		       20 66 07 	      jsr	iDivNoPop
   2146  0c34		       20 f6 1d 	      jsr	RestoreSigns
   2147  0c37		       a5 56		      lda	MQ
   2148  0c39		       85 52		      sta	R0
   2149  0c3b		       a5 57		      lda	MQ+1
   2150  0c3d		       85 53		      sta	R0+1
   2151  0c3f		       4c 40 07 	      jmp	pushR0nextIl
   2152  0c42				   irandom1
   2153  0c42		       a9 00		      lda	#0
   2154  0c44		       85 53		      sta	R0+1
   2155  0c46		       a9 01		      lda	#1
   2156  0c48		       85 52		      sta	R0
   2157  0c4a		       4c 40 07 	      jmp	pushR0nextIl
   2158  0c4d
   2159  0c4d							; The following replaced by call to division/modulo
   2160  0c4d							;iRANDOM_2	lda	R0
   2161  0c4d							;		cmp	R1
   2162  0c4d							;		bne	iRANDOM_1
   2163  0c4d							;		lda	R0+1
   2164  0c4d							;		cmp	R1+1
   2165  0c4d							;		bne	iRANDOM_1	;need to subtract
   2166  0c4d							;
   2167  0c4d							; Subtract R1 from R0
   2168  0c4d							;
   2169  0c4d							;iRANDOM_sub	sec
   2170  0c4d							;		lda	R0
   2171  0c4d							;		sbc	R1
   2172  0c4d							;		sta	R0
   2173  0c4d							;		lda	R0+1
   2174  0c4d							;		sbc	R1+1
   2175  0c4d							;		sta	R0+1
   2176  0c4d							;		jmp	iRANDOM_2
   2177  0c4d							;
   2178  0c4d							; See if R1 > R0.  If so, branch to subtract.
   2179  0c4d							;
   2180  0c4d							;iRANDOM_1	lda	R0
   2181  0c4d							;		cmp	R1
   2182  0c4d							;		lda	R0+1
   2183  0c4d							;		sbc	R1+1
   2184  0c4d							;		bvc	iRANDOM_4
   2185  0c4d							;		eor	#$80
   2186  0c4d							;iRANDOM_4	bpl	iRANDOM_sub
   2187  0c4d							;
   2188  0c4d							; All done.  Almost.  Add one, then push the result.
   2189  0c4d							;
   2190  0c4d							;irandom1	inc	R0
   2191  0c4d							;		bne	iRANDOM_3
   2192  0c4d							;		inc	R0+1
   2193  0c4d							;iRANDOM_3
   2194  0c4d							;		  jsr	pushR0	;return value
   2195  0c4d							;		jmp	NextIL
   2196  0c4d							;
   2197  0c4d							; Poke a value into a memory location
   2198  0c4d		       8c 2d 2f    iPOKEMEMORY sty	tempy
   2199  0c50		       20 75 1d 	      jsr	popR0
   2200  0c53		       20 8d 1d 	      jsr	popR1
   2201  0c56		       a0 00		      ldy	#0
   2202  0c58		       a5 52		      lda	R0
   2203  0c5a		       91 54		      sta	(R1),y
   2204  0c5c		       ac 2d 2f 	      ldy	tempy
   2205  0c5f		       4c c2 02 	      jmp	NextIL
   2206  0c62							;
   2207  0c62							; Get a value from a memory location
   2208  0c62							;
   2209  0c62		       8c 2d 2f    iPEEKMEMORY sty	tempy
   2210  0c65		       20 75 1d 	      jsr	popR0
   2211  0c68		       a0 00		      ldy	#0
   2212  0c6a		       b1 52		      lda	(R0),y
   2213  0c6c		       ac 2d 2f 	      ldy	tempy
   2214  0c6f		       85 52		      sta	R0
   2215  0c71		       a9 00		      lda	#0
   2216  0c73		       85 53		      sta	R0+1
   2217  0c75		       4c 40 07 	      jmp	pushR0nextIl
   2218  0c78							;
   2219  0c78							; Call to address return what ever is in a to the stack
   2220  0c78							; func2 will load a value into a before the call
   2221  0c78		       20 8d 1d    iCallFunc  jsr	popR1
   2222  0c7b		       a5 54		      lda	R1
   2223  0c7d		       20 89 0c 	      jsr	iCallRtn
   2224  0c80		       85 52		      sta	R0
   2225  0c82		       a9 00		      lda	#0
   2226  0c84		       85 53		      sta	R0+1
   2227  0c86		       20 40 07 	      jsr	pushR0nextIl
   2228  0c89				   iCallRtn
   2229  0c89		       20 75 1d 	      jsr	popR0
   2230  0c8c		       6c 52 00 	      jmp	(R0)
   2231  0c8f
   2232  0c8f
   2233  0c8f							;===========================================jlit======
   2234  0c8f							;Get a character from the terminal convert to value
   2235  0c8f							;leave the number on top of the stack
   2236  0c8f							;
   2237  0c8f				   iGETCHAR
   2238  0c8f		       20 7f 1f 	      jsr	VGETCH
   2239  0c92					      if	CTMON65
   2240  0c92		       48		      pha
   2241  0c93		       20 7c 1f 	      jsr	VOUTCH	;echo echo echo
   2242  0c96		       68		      pla
   2243  0c97					      endif
   2244  0c97		       85 52		      sta	R0
   2245  0c99		       a9 00		      lda	#0
   2246  0c9b		       85 53		      sta	R0+1
   2247  0c9d		       20 e3 1c 	      jsr	pushR0
   2248  0ca0							;
   2249  0ca0		       4c c2 02 	      jmp	NextIL
   2250  0ca3							;===========================================jusilostintim======
   2251  0ca3							;Put a character to the terminal convert to
   2252  0ca3							;
   2253  0ca3		       20 75 1d    iPUTCHAR   jsr	popR0
   2254  0ca6		       a5 52		      lda	R0
   2255  0ca8		       20 7c 1f 	      jsr	VOUTCH
   2256  0cab		       4c c2 02 	      jmp	NextIL
   2257  0cae							;=====================================================
   2258  0cae							; Put the number on the stack out as hex, suppress leading 0
   2259  0cae				   iHexOut
   2260  0cae		       20 75 1d 	      jsr	popR0
   2261  0cb1		       a5 53		      lda	R0+1
   2262  0cb3		       f0 03		      beq	iHexSecondByte
   2263  0cb5		       20 08 14 	      jsr	OUTHEX
   2264  0cb8				   iHexSecondByte
   2265  0cb8		       a5 52		      lda	R0
   2266  0cba		       20 08 14 	      jsr	OUTHEX
   2267  0cbd		       4c c2 02 	      jmp	NextIL
   2268  0cc0							;
   2269  0cc0							;=====================================================
   2270  0cc0							; Replace TOS with its absolute value.
   2271  0cc0							;
   2272  0cc0		       20 75 1d    iABS       jsr	popR0
   2273  0cc3		       a5 53		      lda	R0+1
   2274  0cc5		       10 10		      bpl	iABS_1	;already positive
   2275  0cc7		       49 ff		      eor	#$ff
   2276  0cc9		       85 53		      sta	R0+1
   2277  0ccb		       a5 52		      lda	R0
   2278  0ccd		       49 ff		      eor	#$ff
   2279  0ccf		       85 52		      sta	R0
   2280  0cd1		       e6 52		      inc	R0
   2281  0cd3		       d0 02		      bne	iABS_1
   2282  0cd5		       e6 53		      inc	R0+1
   2283  0cd7		       4c 40 07    iABS_1     jmp	pushR0nextIl
   2284  0cda
   2285  0cda							;
   2286  0cda							;================================================================
   2287  0cda							; The set of logical operators
   2288  0cda				   iLogAnd
   2289  0cda		       20 75 1d 	      jsr	popR0
   2290  0cdd		       20 8d 1d 	      jsr	popR1
   2291  0ce0		       a5 52		      lda	R0
   2292  0ce2		       25 54		      and	R1
   2293  0ce4		       85 52		      sta	R0
   2294  0ce6		       a5 53		      lda	R0+1
   2295  0ce8		       25 55		      and	R1+1
   2296  0cea		       85 53		      sta	R0+1
   2297  0cec		       4c 40 07 	      jmp	pushR0nextIl
   2298  0cef				   iLogOr
   2299  0cef		       20 75 1d 	      jsr	popR0
   2300  0cf2		       20 8d 1d 	      jsr	popR1
   2301  0cf5		       a5 52		      lda	R0
   2302  0cf7		       05 54		      ora	R1
   2303  0cf9		       85 52		      sta	R0
   2304  0cfb		       a5 53		      lda	R0+1
   2305  0cfd		       05 55		      ora	R1+1
   2306  0cff		       85 53		      sta	R0+1
   2307  0d01		       4c 40 07 	      jmp	pushR0nextIl
   2308  0d04				   iLogXor
   2309  0d04		       20 75 1d 	      jsr	popR0
   2310  0d07		       20 8d 1d 	      jsr	popR1
   2311  0d0a		       a5 52		      lda	R0
   2312  0d0c		       45 54		      eor	R1
   2313  0d0e		       85 52		      sta	R0
   2314  0d10		       a5 53		      lda	R0+1
   2315  0d12		       45 55		      eor	R1+1
   2316  0d14		       85 53		      sta	R0+1
   2317  0d16		       4c 40 07 	      jmp	pushR0nextIl
   2318  0d19				   iLogNot
   2319  0d19		       20 75 1d 	      jsr	popR0
   2320  0d1c		       a5 52		      lda	R0
   2321  0d1e		       49 ff		      eor	#$FF
   2322  0d20		       85 52		      sta	R0
   2323  0d22		       a5 53		      lda	R0+1
   2324  0d24		       49 ff		      eor	#$FF
   2325  0d26		       85 53		      sta	R0+1
   2326  0d28		       4c 40 07 	      jmp	pushR0nextIl
   2327  0d2b
   2328  0d2b				   iTruth
   2329  0d2b		       a9 ff		      lda	#$FF
   2330  0d2d		       85 52		      sta	R0
   2331  0d2f		       85 53		      sta	R0+1
   2332  0d31		       4c 40 07 	      jmp	pushR0nextIl
   2333  0d34				   iFalse
   2334  0d34		       a9 00		      lda	#$00
   2335  0d36		       85 52		      sta	R0
   2336  0d38		       85 53		      sta	R0+1
   2337  0d3a		       4c 40 07 	      jmp	pushR0nextIl
   2338  0d3d
   2339  0d3d							;================================================================
   2340  0d3d							;Set the IRQ service rtn line number
   2341  0d3d							;
   2342  0d3d		       78	   iSetIrq    sei		; disable the interupts
   2343  0d3e		       a9 00		      lda	#0	; Zero the Status flag
   2344  0d40		       8d d8 25 	      sta	IRQStatus
   2345  0d43		       20 75 1d 	      jsr	popR0	; get the line number
   2346  0d46		       a5 52		      lda	R0
   2347  0d48		       05 53		      ora	R0+1
   2348  0d4a		       f0 22		      beq	iSetExt	; if it is zero disable all
   2349  0d4c		       a9 01		      lda	#GOSUB_RTN	; default push type
   2350  0d4e		       20 fd 1c 	      jsr	pushLN	; Save the current line pointer
   2351  0d51		       90 03		      bcc	iSetIrqOk	; Check if there was an error
   2352  0d53		       4c df 0b 	      jmp	ErrStkOver	; Check if there was an error
   2353  0d56				   iSetIrqOk
   2354  0d56		       20 2f 1b 	      jsr	findLine	; Find the IRQ func Line Pointer
   2355  0d59		       d0 16		      bne	iSetIrqErr	; Error if exact line not found
   2356  0d5b		       a5 50		      lda	CURPTR+1	; Copy it to the Entry pointer
   2357  0d5d		       8d db 25 	      sta	IRQEntry+1
   2358  0d60		       a5 4f		      lda	CURPTR
   2359  0d62		       8d da 25 	      sta	IRQEntry
   2360  0d65		       a9 01		      lda	#1	; Indicate there is an irq gosub
   2361  0d67		       8d d8 25 	      sta	IRQStatus
   2362  0d6a		       20 26 1d 	      jsr	popLN	; Restore the old line number
   2363  0d6d		       58		      cli		; Enable the interupts
   2364  0d6e		       4c c2 02    iSetExt    jmp	NextIL
   2365  0d71
   2366  0d71		       20 26 1d    iSetIrqErr jsr	popLN
   2367  0d74		       a2 0d		      ldx	#ERR_BAD_LINE_NUMBER
   2368  0d76		       a9 00		      lda	#0
   2369  0d78		       4c a7 06 	      jmp	iErr2
   2370  0d7b							;
   2371  0d7b		       20 75 1d    iTRACEPROG jsr	popR0
   2372  0d7e		       a5 52		      lda	R0
   2373  0d80		       85 40		      sta	ILTrace
   2374  0d82		       4c c2 02 	      jmp	NextIL
   2375  0d85
   2376  0d85							;=====================================================
   2377  0d85							; Define start of non page zero data
   2378 U2f3f ????				      seg.u	TBData
   2379 U2595					      org	PROGEND
   2380 U2595							;=================================================================
   2381 U2595							;
------- FILE compile.asm LEVEL 2 PASS 6
      0 U2595					      include	"compile.asm"
      1  0d85					      Seg	Code
      2  0d85							;
      3  0d85							;=====================================================================
      4  0d85							; Scan the loaded program just before running and insert memory locations of each
      5  0d85							; line number branched to. goto gosub, gofn
      6  0d85							; These have the format  in memory  example 81{key word token} 0000{pointer to memory location} A1{number type} 92 00{byte or integer value}
      7  0d85				   Compile
      8  0d85		       a9 00		      lda	#0
      9  0d87		       85 52		      sta	R0	; keep track of how many errors we find
     10  0d89		       a5 5b		      lda	RunMode
     11  0d8b		       48		      pha
     12  0d8c		       e6 5b		      inc	RunMode	; force run mode for error reporting
     13  0d8e		       a5 4f		      lda	CURPTR
     14  0d90		       48		      pha
     15  0d91		       a5 50		      lda	CURPTR+1
     16  0d93		       48		      pha
     17  0d94		       a5 51		      lda	CUROFF
     18  0d96		       48		      pha
     19  0d97		       ad 35 2f 	      lda	ProgramStart
     20  0d9a		       85 59		      sta	dpl
     21  0d9c		       ad 36 2f 	      lda	ProgramStart+1
     22  0d9f		       85 5a		      sta	dpl+1
     23  0da1
     24  0da1				   CompileLineStart
     25  0da1		       a5 59		      lda	dpl
     26  0da3		       cd 37 2f 	      cmp	ProgramEnd
     27  0da6		       d0 07		      bne	CompileContinue
     28  0da8		       a5 5a		      lda	dpl+1
     29  0daa		       cd 38 2f 	      cmp	ProgramEnd+1
     30  0dad		       f0 3f		      beq	CompileComplete
     31  0daf
     32  0daf				   CompileContinue
     33  0daf		       a0 03		      ldy	#3	; first real character in the line
     34  0db1
     35  0db1				   CompileLoop
     36  0db1		       b1 59		      lda	(dpl),y	; get the byte
     37  0db3		       f0 27		      beq	CompileEndOfLine	; End of line, so goto next line for scan
     38  0db5		       c8		      iny		; Pass this byte
     39  0db6		       c9 07		      cmp	#kGoto
     40  0db8		       f0 58		      beq	CompileField	; Will update the memory address and move pointer to next value
     41  0dba		       c9 08		      cmp	#kGosub
     42  0dbc		       f0 54		      beq	CompileField	; Will update the memory address and move pointer to next value
     43  0dbe		       c9 31		      cmp	#kGofn
     44  0dc0		       f0 50		      beq	CompileField	; Will update the memory address and move pointer to next value
     45  0dc2		       c9 29		      cmp	#kTask
     46  0dc4		       f0 4c		      beq	CompileField
     47  0dc6		       c9 0a		      cmp	#kRem
     48  0dc8		       f0 12		      beq	CompileRem	; Skip until end of line
     49  0dca		       c9 a0		      cmp	#tString
     50  0dcc		       f0 2f		      beq	CompileString
     51  0dce		       c9 a1		      cmp	#tInteger
     52  0dd0		       f0 06		      beq	CompileInteger
     53  0dd2		       c9 a2		      cmp	#tByte
     54  0dd4		       f0 03		      beq	CompileByte
     55  0dd6		       d0 d9		      bne	CompileLoop	; Next character
     56  0dd8
     57  0dd8				   CompileInteger
     58  0dd8		       c8		      iny
     59  0dd9				   CompileByte
     60  0dd9		       c8		      iny
     61  0dda		       d0 d5		      bne	CompileLoop
     62  0ddc				   CompileRem
     63  0ddc				   CompileEndOfLine
     64  0ddc		       a0 00		      ldy	#0
     65  0dde		       b1 59		      lda	(dpl),y
     66  0de0		       18		      clc
     67  0de1		       65 59		      adc	dpl
     68  0de3		       85 59		      sta	dpl
     69  0de5		       a9 00		      lda	#0
     70  0de7		       65 5a		      adc	dpl+1
     71  0de9		       85 5a		      sta	dpl+1
     72  0deb
     73  0deb		       4c a1 0d 	      jmp	CompileLineStart
     74  0dee
     75  0dee				   CompileComplete
     76  0dee		       68		      pla
     77  0def		       85 51		      sta	CUROFF
     78  0df1		       68		      pla
     79  0df2		       85 50		      sta	CURPTR+1
     80  0df4		       68		      pla
     81  0df5		       85 4f		      sta	CURPTR
     82  0df7		       68		      pla
     83  0df8		       85 5b		      sta	RunMode
     84  0dfa		       a5 52		      lda	R0	; returning the number of errors
     85  0dfc		       60		      rts
     86  0dfd
     87  0dfd
     88  0dfd				   CompileString
     89  0dfd		       c8		      iny		; point past first "
     90  0dfe				   CompileStringLoop
     91  0dfe		       b1 59		      lda	(dpl),y
     92  0e00		       f0 0d		      beq	CompileStrDone2
     93  0e02		       c9 22		      cmp	#'"	; end of string
     94  0e04		       f0 08		      beq	CompileStrDone
     95  0e06		       c9 5c		      cmp	#'\	; escape character
     96  0e08		       d0 01		      bne	CompileStrNext
     97  0e0a		       c8		      iny
     98  0e0b				   CompileStrNext
     99  0e0b		       c8		      iny		; Next character
    100  0e0c		       d0 f0		      bne	CompileStringLoop	; test for end
    101  0e0e				   CompileStrDone
    102  0e0e		       c8		      iny
    103  0e0f				   CompileStrDone2
    104  0e0f		       4c b1 0d 	      Jmp	CompileLoop
    105  0e12							;
    106  0e12							;===============================================================
    107  0e12							; on entry y points to storage location y+2 points to line number
    108  0e12							; on exit y points to line number type
    109  0e12
    110  0e12		       85 52	   CompileField sta	R0
    111  0e14		       98		      tya		; save the y pointer to store the memory value
    112  0e15		       48		      pha
    113  0e16		       c8		      iny		; Skip over the memory vector
    114  0e17		       c8		      iny
    115  0e18		       a5 52		      lda	R0
    116  0e1a		       c9 29		      cmp	#kTask	; for a task it is the next byte after a bracket
    117  0e1c		       d0 07		      bne	CompNoBracket
    118  0e1e
    119  0e1e		       b1 59		      lda	(dpl),y	; Lets make sure it is a
    120  0e20		       c9 e0		      cmp	#oLeftBracket
    121  0e22		       d0 01		      bne	CompNoBracket	; in case of error
    122  0e24		       c8		      iny		; skip the bracket
    123  0e25
    124  0e25				   CompNoBracket
    125  0e25		       a9 00		      lda	#0	; In case the value is a byte
    126  0e27		       85 53		      sta	R0+1
    127  0e29
    128  0e29		       b1 59		      lda	(dpl),Y	; get the type of the next byte t something or other
    129  0e2b		       c9 a2		      cmp	#tByte
    130  0e2d		       f0 15		      beq	CompByteLoad
    131  0e2f		       c9 a1		      cmp	#tInteger
    132  0e31		       f0 04		      beq	CompIntLoad	; If it is not a number then get out of here
    133  0e33		       68		      pla
    134  0e34		       4c b1 0d 	      jmp	CompileLoop	; Ignore the saved stack
    135  0e37				   CompIntLoad
    136  0e37		       c8		      iny
    137  0e38		       b1 59		      lda	(dpl),y
    138  0e3a		       85 52		      sta	R0
    139  0e3c		       c8		      iny
    140  0e3d		       b1 59		      lda	(dpl),y
    141  0e3f		       85 53		      sta	R0+1
    142  0e41		       4c 49 0e 	      jmp	CompFindLine
    143  0e44				   CompByteLoad
    144  0e44		       c8		      iny
    145  0e45		       b1 59		      lda	(dpl),y
    146  0e47		       85 52		      sta	R0
    147  0e49				   CompFindLine
    148  0e49		       20 2f 1b 	      jsr	findLine
    149  0e4c		       f0 1d		      beq	CompFoundLine
    150  0e4e		       e6 52		      inc	R0	; number of errors
    151  0e50
    152  0e50		       a5 59		      lda	dpl
    153  0e52		       85 4f		      sta	CURPTR
    154  0e54		       a5 5a		      lda	dpl+1
    155  0e56		       85 50		      sta	CURPTR+1
    156  0e58		       84 51		      sty	CUROFF
    157  0e5a
    158  0e5a		       a2 14		      ldx	#ERR_LINE_NOT_FOUND
    159  0e5c		       a9 00		      lda	#0
    160  0e5e
    161  0e5e		       20 51 06 	      jsr	DisplayError
    162  0e61		       20 bd 14 	      jsr	PrintProgramLine
    163  0e64
    164  0e64		       68		      pla
    165  0e65		       a8		      tay
    166  0e66		       c8		      iny
    167  0e67		       c8		      iny
    168  0e68		       4c b1 0d 	      jmp	CompileLoop
    169  0e6b
    170  0e6b				   CompFoundLine
    171  0e6b		       68		      pla
    172  0e6c		       a8		      tay
    173  0e6d		       a5 4f		      lda	CURPTR
    174  0e6f		       91 59		      sta	(dpl),y
    175  0e71		       c8		      iny
    176  0e72		       a5 50		      lda	CURPTR+1
    177  0e74		       91 59		      sta	(dpl),y
    178  0e76		       c8		      iny
    179  0e77		       4c b1 0d 	      jmp	CompileLoop
    180  0e7a
    181  0e7a
    182  0e7a
    183  0e7a
    184  0e7a
    185  0e7a
    186  0e7a
    187  0e7a
    188  0e7a
    189  0e7a
    190  0e7a
    191  0e7a
    192  0e7a
    193  0e7a
    194  0e7a
    195  0e7a
    196  0e7a
    197  0e7a
    198  0e7a
    199  0e7a
    200  0e7a
    201  0e7a
    202  0e7a
    203  0e7a
    204  0e7a
    205  0e7a
    206  0e7a
    207  0e7a
    208  0e7a
    209  0e7a
    210  0e7a
    211  0e7a
    212  0e7a
    213  0e7a
    214  0e7a
    215  0e7a
    216  0e7a
    217  0e7a
    218  0e7a
    219  0e7a
    220  0e7a
------- FILE mytb.asm
------- FILE tokenizer.asm LEVEL 2 PASS 6
      0  0e7a					      include	"tokenizer.asm"
      1  0e7a					      seg	Code
      2  0e7a		       00 00	   DEBUGPARSER equ	FALSE	; Print debugging information
      3  0e7a
      4  0e7a							; Define the types of tokens found, and identifiers
      5  0e7a		       00 7f	   KeywordsMax equ	$7F	; Allow to be range  1 to 127	key words, high order bit must be 0 for it to be a key word
      6  0e7a		       00 80	   tVa	      equ	$80	; Variable A = 1, .... Z = 26	 ^ = 27
      7  0e7a		       00 81	   tVb	      equ	$81	; Variables 128 - 157	$80-$9D
      8  0e7a		       00 99	   tVz	      equ	tVa+25	; Value of the last variable
      9  0e7a
     10  0e7a		       00 9b	   tVhat      equ	$9B	; Variable ^
     11  0e7a		       00 9c	   tVhash     equ	$9C	; Variable #
     12  0e7a		       00 9d	   tVat       equ	$9D	; Variable @ = 0
     13  0e7a
     14  0e7a
     15  0e7a		       00 a0	   tString    equ	$A0	; Strings all start with this byte and end with  byte value 0 strings can be accessed with array slicing
     16  0e7a		       00 a1	   tInteger   equ	$A1	; all tokenized integers start with 251 as first byte
     17  0e7a		       00 a2	   tByte      equ	$A2	; Unsigned byte value
     18  0e7a		       00 a3	   tArray     equ	$A3	; Identifies Array Type, the byte following defines the length of each element
     19  0e7a							; Arrays of string are arrays of pointers 2 bytes
     20  0e7a		       00 a4	   tPointer   equ	$A4	; Pointer to another variable
     21  0e7a		       00 a6	   tIndirect  equ	$A6	; Points to an address that points to the data
     22  0e7a
     23  0e7a		       3c 3e	   Operators  BYTE.b	"<>"
     24  0e7c		       3c 3d		      BYTE.b	"<="
     25  0e7e		       3e 3d		      BYTE.b	">="
     26  0e80		       3c 00		      BYTE.b	"<",0
     27  0e82		       3d 00		      BYTE.b	"=",0
     28  0e84		       3e 00		      BYTE.b	">",0
     29  0e86		       2b 00		      BYTE.b	"+",0
     30  0e88		       2d 00		      BYTE.b	"-",0
     31  0e8a		       2f 00		      BYTE.b	"/",0
     32  0e8c		       25 00		      BYTE.b	"%",0
     33  0e8e		       2a 00		      BYTE.b	"*",0
     34  0e90		       28 00		      BYTE.b	"(",0
     35  0e92		       29 00		      BYTE.b	")",0
     36  0e94		       2c 00		      BYTE.b	",",0
     37  0e96		       3b 00		      BYTE.b	";",0
     38  0e98		       5b 00		      BYTE.b	"[",0
     39  0e9a		       5d 00		      BYTE.b	"]",0
     40  0e9c		       3a 00		      BYTE.b	":",0
     41  0e9e		       24 00		      BYTE.b	"$",0
     42  0ea0		       21 00		      BYTE.b	"!",0
     43  0ea2		       3f 00		      BYTE.b	"?",0
     44  0ea4		       2e 00		      BYTE.b	".",0
     45  0ea6		       00 00		      BYTE.b	0,0
     46  0ea8
     47  0ea8		       f5 f3 f6 f1*OperValues BYTE.b	oNotEqual,oLessEqual,oGreaterEqual,oLess,oEqual,oGreater
     48  0eae		       ea eb ec ed*	      BYTE.b	oPlus, oMinus, oDivide, oModulo, oMultiply
     49  0eb3		       e0 e1 e2 e3*	      BYTE.b	oLeftBracket, oRightBracket, oComma, oSemiColon, oLeftSQBracket, oRightSQBracket
     50  0eb9		       e6 e7 e8 0b*	      BYTE.b	oColon, oDollar, oBang, oQuestion, oPeriod
     51  0ebe
     52  0ebe		       00 0b	   oQuestion  equ	kPrint
     53  0ebe							;    2 is =
     54  0ebe							;    1 is <
     55  0ebe							;    3 is <=
     56  0ebe							;    5 is <>
     57  0ebe							;    4 is >
     58  0ebe							;    6 is >=
     59  0ebe		       00 f1	   oLess      equ	$F1
     60  0ebe		       00 f2	   oEqual     equ	$F2
     61  0ebe		       00 f3	   oLessEqual equ	$F3
     62  0ebe		       00 f4	   oGreater   equ	$F4
     63  0ebe		       00 f5	   oNotEqual  equ	$F5
     64  0ebe		       00 f6	   oGreaterEqual equ	$F6
     65  0ebe
     66  0ebe		       00 e0	   oLeftBracket equ	$E0
     67  0ebe		       00 e1	   oRightBracket equ	$E1
     68  0ebe		       00 e2	   oComma     equ	$E2
     69  0ebe		       00 e3	   oSemiColon equ	$E3
     70  0ebe		       00 e4	   oLeftSQBracket equ	$E4
     71  0ebe		       00 e5	   oRightSQBracket equ	$E5
     72  0ebe		       00 e6	   oColon     equ	$E6
     73  0ebe		       00 e7	   oDollar    equ	$E7
     74  0ebe		       00 e8	   oBang      equ	$E8
     75  0ebe		       00 e9	   oPeriod    equ	$E9
     76  0ebe
     77  0ebe
     78  0ebe		       00 ea	   oPlus      equ	$EA
     79  0ebe		       00 eb	   oMinus     equ	$EB
     80  0ebe		       00 ec	   oDivide    equ	$EC
     81  0ebe		       00 ed	   oModulo    equ	$ED
     82  0ebe		       00 ee	   oMultiply  equ	$EE
     83  0ebe
     84  0ebe		       00 ed	   oPercent   equ	oModulo
     85  0ebe
     86  0ebe		       00 f0	   tOperatorX equ	$F0	;+ operator Value  ; stores the value used to do the relational operator compare
     87  0ebe
     88  0ebe		       00 ff	   tError     equ	$FF	; Error should never happen
     89  0ebe							;============================================================================================
     90  0ebe							; Keyword and seperator values
     91  0ebe				   '
     92  0ebe		       00 01	   kBeginKey  equ	kLet
     93  0ebe							;
     94  0ebe		       00 01	   kLet       equ	1
     95  0ebe		       00 02	   kInc       equ	kLet+1
     96  0ebe		       00 03	   kDec       equ	kInc+1
     97  0ebe		       00 04	   kIreturn   equ	kDec+1
     98  0ebe		       00 05	   kIf	      equ	kIreturn+1
     99  0ebe		       00 06	   kThen      equ	kIf+1
    100  0ebe		       00 07	   kGoto      equ	kThen+1
    101  0ebe		       00 08	   kGosub     equ	kGoto+1
    102  0ebe		       00 09	   kReturn    equ	kGosub+1
    103  0ebe		       00 0a	   kRem       equ	kReturn+1
    104  0ebe		       00 0b	   kPrint     equ	kRem+1
    105  0ebe		       00 0c	   kTaske     equ	kPrint+1
    106  0ebe		       00 0d	   kTaskn     equ	kTaske+1
    107  0ebe		       00 0e	   kTaskw     equ	kTaskn+1
    108  0ebe		       00 0f	   kPoke      equ	kTaskw+1
    109  0ebe		       00 10	   kPutch     equ	kPoke+1
    110  0ebe		       00 11	   kCls       equ	kPutch+1
    111  0ebe		       00 12	   kInput     equ	kCls+1
    112  0ebe		       00 13	   kEnd       equ	kInput+1
    113  0ebe		       00 14	   kIrq       equ	kEnd+1
    114  0ebe		       00 15	   kKill      equ	kIrq+1
    115  0ebe		       00 16	   kList      equ	kKill+1
    116  0ebe		       00 17	   kRun       equ	kList+1
    117  0ebe		       00 18	   kNew       equ	kRun+1
    118  0ebe		       00 19	   kSlice     equ	kNew+1
    119  0ebe		       00 1a	   kTrace     equ	kSlice+1
    120  0ebe		       00 1b	   kExit      equ	kTrace+1
    121  0ebe		       00 1c	   kSave      equ	kExit+1
    122  0ebe		       00 1d	   kLoad      equ	kSave+1
    123  0ebe		       00 1e	   kErase     equ	kLoad+1
    124  0ebe		       00 1f	   kDir       equ	kErase+1
    125  0ebe							;
    126  0ebe							; End of actual key words
    127  0ebe							;
    128  0ebe		       00 1e	   kKeyCount  equ	kDir-kBeginKey
    129  0ebe							;
    130  0ebe							; Logical operators
    131  0ebe							;
    132  0ebe		       00 20	   kNot       equ	kDir+1
    133  0ebe		       00 21	   kOr	      equ	kNot+1
    134  0ebe		       00 22	   kXor       equ	kOr+1
    135  0ebe		       00 23	   kAnd       equ	kXor+1
    136  0ebe
    137  0ebe							; numeric functions
    138  0ebe							;
    139  0ebe		       00 24	   kBeginFunc equ	kTrue
    140  0ebe							;
    141  0ebe							; Truth operators
    142  0ebe							;
    143  0ebe		       00 24	   kTrue      equ	kAnd+1
    144  0ebe		       00 25	   kFalse     equ	kTrue+1
    145  0ebe							; Functions
    146  0ebe		       00 26	   kFree      equ	kFalse+1
    147  0ebe		       00 27	   kGetch     equ	kFree+1
    148  0ebe		       00 28	   kPeek      equ	kGetch+1
    149  0ebe		       00 29	   kTask      equ	kPeek+1
    150  0ebe		       00 2a	   kIpcc      equ	kTask+1
    151  0ebe		       00 2b	   kIpcs      equ	kIpcc+1
    152  0ebe		       00 2c	   kIpcr      equ	kIpcs+1
    153  0ebe		       00 2d	   kRnd       equ	kIpcr+1
    154  0ebe		       00 2e	   kStat      equ	kRnd+1
    155  0ebe		       00 2f	   kAbs       equ	kStat+1
    156  0ebe		       00 30	   kCall      equ	kAbs+1
    157  0ebe		       00 31	   kGofn      equ	kCall+1
    158  0ebe		       00 32	   kPid       equ	kGofn+1
    159  0ebe							;
    160  0ebe		       00 0f	   kFuncCount equ	((kPid - kBeginFunc) + 1)
    161  0ebe
    162  0ebe							;
    163  0ebe							; Keyword table contains 49 keywords
    164  0ebe				   KeyWordTable
      0  0ebe					      db	kLet,"leT"	; 1, we only have 0 at end of program or line
      1  0ebe		       01 6c 65 54	      .byte.b	kLet,"leT"
      0  0ec2					      db	kInc,"inC"
      1  0ec2		       02 69 6e 43	      .byte.b	kInc,"inC"
      0  0ec6					      db	kDec,"deC"
      1  0ec6		       03 64 65 43	      .byte.b	kDec,"deC"
      0  0eca					      db	kIreturn,"ireturN"
      1  0eca		       04 69 72 65*	      .byte.b	kIreturn,"ireturN"
      0  0ed2					      db	kIf,"iF"
      1  0ed2		       05 69 46 	      .byte.b	kIf,"iF"
      0  0ed5					      db	kThen,"theN"
      1  0ed5		       06 74 68 65*	      .byte.b	kThen,"theN"
      0  0eda					      db	kGoto,"gotO"
      1  0eda		       07 67 6f 74*	      .byte.b	kGoto,"gotO"
      0  0edf					      db	kGosub,"gosuB"
      1  0edf		       08 67 6f 73*	      .byte.b	kGosub,"gosuB"
      0  0ee5					      db	kReturn,"returN"
      1  0ee5		       09 72 65 74*	      .byte.b	kReturn,"returN"
      0  0eec					      db	kRem,"reM"
      1  0eec		       0a 72 65 4d	      .byte.b	kRem,"reM"
      0  0ef0					      db	kPrint,"prinT"
      1  0ef0		       0b 70 72 69*	      .byte.b	kPrint,"prinT"
      0  0ef6					      db	kTaske,"taskE"
      1  0ef6		       0c 74 61 73*	      .byte.b	kTaske,"taskE"
      0  0efc					      db	kTaskn,"taskN"
      1  0efc		       0d 74 61 73*	      .byte.b	kTaskn,"taskN"
      0  0f02					      db	kTaskw,"taskW"
      1  0f02		       0e 74 61 73*	      .byte.b	kTaskw,"taskW"
      0  0f08					      db	kPoke,"pokE"
      1  0f08		       0f 70 6f 6b*	      .byte.b	kPoke,"pokE"
      0  0f0d					      db	kPutch,"putcH"
      1  0f0d		       10 70 75 74*	      .byte.b	kPutch,"putcH"
      0  0f13					      db	kCls,"clS"
      1  0f13		       11 63 6c 53	      .byte.b	kCls,"clS"
      0  0f17					      db	kInput,"inpuT"
      1  0f17		       12 69 6e 70*	      .byte.b	kInput,"inpuT"
      0  0f1d					      db	kEnd,"enD"
      1  0f1d		       13 65 6e 44	      .byte.b	kEnd,"enD"
      0  0f21					      db	kIrq,"irQ"
      1  0f21		       14 69 72 51	      .byte.b	kIrq,"irQ"
      0  0f25					      db	kKill,"kilL"
      1  0f25		       15 6b 69 6c*	      .byte.b	kKill,"kilL"
      0  0f2a					      db	kList,"lisT"
      1  0f2a		       16 6c 69 73*	      .byte.b	kList,"lisT"
      0  0f2f					      db	kRun,"ruN"
      1  0f2f		       17 72 75 4e	      .byte.b	kRun,"ruN"
      0  0f33					      db	kNew,"neW"
      1  0f33		       18 6e 65 57	      .byte.b	kNew,"neW"
      0  0f37					      db	kSlice,"slicE"
      1  0f37		       19 73 6c 69*	      .byte.b	kSlice,"slicE"
      0  0f3d					      db	kTrace,"tracE"
      1  0f3d		       1a 74 72 61*	      .byte.b	kTrace,"tracE"
      0  0f43					      db	kExit,"exiT"
      1  0f43		       1b 65 78 69*	      .byte.b	kExit,"exiT"
      0  0f48					      db	kSave,"savE"
      1  0f48		       1c 73 61 76*	      .byte.b	kSave,"savE"
      0  0f4d					      db	kLoad,"loaD"
      1  0f4d		       1d 6c 6f 61*	      .byte.b	kLoad,"loaD"
      0  0f52					      db	kErase,"erasE"
      1  0f52		       1e 65 72 61*	      .byte.b	kErase,"erasE"
      0  0f58					      db	kDir,"diR"
      1  0f58		       1f 64 69 52	      .byte.b	kDir,"diR"
    196  0f5c							;Short form for statements:
      0  0f5c					      db	kIreturn,"ireT"
      1  0f5c		       04 69 72 65*	      .byte.b	kIreturn,"ireT"
      0  0f61					      db	kReturn,"reT"
      1  0f61		       09 72 65 54	      .byte.b	kReturn,"reT"
      0  0f65					      db	kPrint,"pR"	; some dialects of tiny basic use this for print
      1  0f65		       0b 70 52 	      .byte.b	kPrint,"pR"
    200  0f68
    201  0f68							;Logical and truth operators
      0  0f68					      db	kNot,"noT"
      1  0f68		       20 6e 6f 54	      .byte.b	kNot,"noT"
      0  0f6c					      db	kOr,"oR"
      1  0f6c		       21 6f 52 	      .byte.b	kOr,"oR"
      0  0f6f					      db	kXor,"xoR"
      1  0f6f		       22 78 6f 52	      .byte.b	kXor,"xoR"
      0  0f73					      db	kAnd,"anD"
      1  0f73		       23 61 6e 44	      .byte.b	kAnd,"anD"
    206  0f77							; Truth values
      0  0f77					      db	kTrue,"truE"
      1  0f77		       24 74 72 75*	      .byte.b	kTrue,"truE"
      0  0f7c					      db	kFalse,"falsE"
      1  0f7c		       25 66 61 6c*	      .byte.b	kFalse,"falsE"
    209  0f82
    210  0f82							;functions returning values
    211  0f82
      0  0f82					      db	kFree,"freE"
      1  0f82		       26 66 72 65*	      .byte.b	kFree,"freE"
      0  0f87					      db	kGetch,"getcH"
      1  0f87		       27 67 65 74*	      .byte.b	kGetch,"getcH"
      0  0f8d					      db	kPeek,"peeK"
      1  0f8d		       28 70 65 65*	      .byte.b	kPeek,"peeK"
      0  0f92					      db	kTask,"tasK"
      1  0f92		       29 74 61 73*	      .byte.b	kTask,"tasK"
      0  0f97					      db	kIpcc,"ipcC"
      1  0f97		       2a 69 70 63*	      .byte.b	kIpcc,"ipcC"
      0  0f9c					      db	kIpcs,"ipcS"
      1  0f9c		       2b 69 70 63*	      .byte.b	kIpcs,"ipcS"
      0  0fa1					      db	kIpcr,"ipcR"
      1  0fa1		       2c 69 70 63*	      .byte.b	kIpcr,"ipcR"
      0  0fa6					      db	kRnd,"rnD"
      1  0fa6		       2d 72 6e 44	      .byte.b	kRnd,"rnD"
      0  0faa					      db	kStat,"staT"
      1  0faa		       2e 73 74 61*	      .byte.b	kStat,"staT"
      0  0faf					      db	kAbs,"abS"
      1  0faf		       2f 61 62 53	      .byte.b	kAbs,"abS"
      0  0fb3					      db	kCall,"calL"
      1  0fb3		       30 63 61 6c*	      .byte.b	kCall,"calL"
      0  0fb8					      db	kGofn,"gofN"
      1  0fb8		       31 67 6f 66*	      .byte.b	kGofn,"gofN"
      0  0fbd					      db	kPid,"piD"
      1  0fbd		       32 70 69 44	      .byte.b	kPid,"piD"
      0  0fc1					      db	0,0
      1  0fc1		       00 00		      .byte.b	0,0
    226  0fc3
    227  0fc3		       0f c3	   KeyWordTableEnd equ	*
    228  0fc3		       01 05	   KeyWordTableLength equ	* - KeyWordTable
    229  0fc3		       00 00 00 00*TOKENBUFFER ds	256	; placed here as temp for testing the Code
    230  10c3		       00 00 00    printStorage ds	3
    231  10c6							;==================================================================================================================
    232  10c6							; Read accross the inputline and output to TOKENBUFFER
    233  10c6							; Format   byte      Description
    234  10c6							;	     0	      length of line 1-255
    235  10c6							;	    0-1       Line Number
    236  10c6							;	    Tokens and litteral values encoded into the line
    237  10c6							;
    238  10c6							;  First test for numbers    for numbers insert type byte plus value 1 or 2 byte, byte, integer, string(pointers)
    239  10c6							;  if fails then test for keywords
    240  10c6							;  if fails then test for variables and arrays
    241  10c6							;  if fails check for operators/seperators  + - < > = % / * () [] , ; :
    242  10c6
    243  10c6				   ParseInputLine
    244  10c6				  -	      if	DEBUGPARSER
    245  10c6				  -	      jsr	SetOutDebug
    246  10c6				  -	      jsr	DebugClearBuffer
    247  10c6					      endif
    248  10c6		       a5 51		      lda	CUROFF
    249  10c8		       48		      pha
    250  10c9		       8a		      txa
    251  10ca		       48		      pha
    252  10cb		       98		      tya
    253  10cc		       48		      pha
    254  10cd		       a2 01		      ldx	#1	; point to beginning of Token buffer + 1 reserve space for length byte
    255  10cf		       20 95 1b 	      jsr	getDecimal	; Check for a line number, none is ok too
    256  10d2		       84 51		      sty	CUROFF
    257  10d4		       20 92 12 	      jsr	R02TOKEN	; Move R0 to token buffer
    258  10d7
    259  10d7				   ParseInputLoop
    260  10d7		       a4 51		      ldy	CUROFF
    261  10d9		       20 25 1e 	      jsr	SkipSpaces	; Skip any spaces
    262  10dc		       84 51		      sty	CUROFF	; Even if it fails at least remove the spaces
    263  10de		       b9 98 2e 	      lda	LINBUF,y	; Check for end of line
    264  10e1		       f0 25		      beq	ParseComplete	; Finish token buffer and return
    265  10e3
    266  10e3				   ParseForNumber
    267  10e3		       20 e6 11 	      jsr	ParseNumeric	; Check for a numeric value
    268  10e6		       90 ef		      bcc	ParseInputLoop	; Go Back for next element
    269  10e8
    270  10e8				   ParseForString
    271  10e8		       20 bc 11 	      jsr	ParseString	; Check for a string
    272  10eb		       90 ea		      bcc	ParseInputLoop	; It was a string
    273  10ed
    274  10ed				   ParseForOp
    275  10ed		       20 24 12 	      jsr	ParseForOperator	; Check for operator or punctuation
    276  10f0		       90 e5		      bcc	ParseInputLoop	; it was an operator/punctuation
    277  10f2
    278  10f2				   ParseForKey
    279  10f2		       20 19 11 	      jsr	ParseLookupKey	; Check for a keyword value
    280  10f5		       90 e0		      bcc	ParseInputLoop	; Go back for next token, we are not syntax checking
    281  10f7
    282  10f7				   ParseForVar
    283  10f7		       20 5b 12 	      jsr	ParseForVariable	; Check for variable and convert to Index, as task centric
    284  10fa		       90 db		      bcc	ParseInputLoop
    285  10fc
    286  10fc				   ParseKeepChar		; if it does not parse just keep it safe
    287  10fc		       b9 98 2e 	      lda	LINBUF,y
    288  10ff		       9d c3 0f 	      sta	TOKENBUFFER,x
    289  1102		       e8		      inx
    290  1103		       c8		      iny
    291  1104		       84 51		      sty	CUROFF
    292  1106		       d0 cf		      bne	ParseInputLoop
    293  1108
    294  1108				   ParseComplete
    295  1108		       a9 00		      lda	#0
    296  110a		       9d c3 0f 	      sta	TOKENBUFFER,x	; null terminate the line of tokens
    297  110d		       e8		      inx
    298  110e		       8e c3 0f 	      stx	TOKENBUFFER	; Place size including null into buffer start
    299  1111
    300  1111		       68		      pla
    301  1112		       a8		      tay
    302  1113		       68		      pla
    303  1114		       aa		      tax
    304  1115		       68		      pla
    305  1116		       85 51		      sta	CUROFF
    306  1118
    307  1118				  -	      if	DEBUGPARSER
    308  1118				  -
    309  1118				  -	      jsr	printTokenBuffer
    310  1118				  -			;jsr	  DebugPrintProgramLine
    311  1118				  -	      jsr	SetOutDebugEnd
    312  1118				  -
    313  1118					      endif
    314  1118		       60		      rts
    315  1119
    316  1119							;==================================================================================================================
    317  1119							; Look at curptr, curpos and check for a valid KeyWord
    318  1119							; A contains the index value. c is clear
    319  1119							;		     not found c set  A undefined
    320  1119							; X is prerserved
    321  1119							;
    322  1119				   ParseLookupKey
    323  1119		       86 58		      stx	R2
    324  111b		       a0 00		      ldy	#0
    325  111d		       a9 be		      lda	#KeyWordTable&$FF	; Key Table longer than 256 bytes
    326  111f		       85 54		      sta	R1
    327  1121		       a9 0e		      lda	#KeyWordTable>>8
    328  1123		       85 55		      sta	R1+1	; R1 points to first entry in keyword table
    329  1125		       b1 54		      lda	(R1),y	; Get the Key Token value for first keyword
    330  1127		       85 52		      sta	R0	; Save until next keyword
    331  1129		       c8		      iny		; Point to first character of keyword
    332  112a		       a6 51		      ldx	CUROFF	; X points to the character in the input buffer
    333  112c
    334  112c				  -	      if	DEBUGPARSER
    335  112c				  -			;    jsr DebugKeyword
    336  112c					      endif
    337  112c
    338  112c				   ParseLookupLoop
    339  112c		       b1 54		      lda	(R1),y	; Get the first character of the keyword
    340  112e		       29 df		      and	#%11011111	; Force Keyword to upper case
    341  1130		       dd 98 2e 	      cmp	LINBUF,x	; Check the input buffer
    342  1133		       f0 07		      beq	ParseNextLetter	; If it equals then do next letter
    343  1135		       09 20		      ora	#%00100000	; Force Keyword to lowercase
    344  1137		       dd 98 2e 	      cmp	LINBUF,x	; Compare value to upercase
    345  113a		       d0 34		      bne	ParseNextEntry	; Not equal then move to next entry in the keyword table
    346  113c
    347  113c				   ParseNextLetter
    348  113c		       b1 54		      lda	(R1),y	; Check if we just processed the last letter is upper
    349  113e		       29 20		      and	#%00100000	; if this bit not set then end of keyword, Last char is always uppercase
    350  1140		       f0 0b		      beq	ParseKeyFound	; If we are at end of keyword and all match then we found the key
    351  1142		       e8		      inx		; Point to next char in the input buffer
    352  1143		       c8		      iny		; Point to the next character in the Keyword table
    353  1144		       a9 00		      lda	#0	; Check if we are at the end of the input buffer
    354  1146		       dd 98 2e 	      cmp	LINBUF,x	; Check if we are at the end of the input buffer
    355  1149		       f0 25		      beq	ParseNextEntry	; End of buffer but no keyword, ext keyword entry
    356  114b		       d0 df		      bne	ParseLookupLoop	; Go back and check the next characters
    357  114d
    358  114d				   ParseKeyFound
    359  114d		       a5 52		      lda	R0	; get the keyword index
    360  114f
    361  114f				   ParseKeyDone
    362  114f		       e8		      inx		; point past the last character
    363  1150		       86 51		      stx	CUROFF	; update to point to next character in the input buffer
    364  1152		       a6 58		      ldx	R2	; Restore the original x pointer
    365  1154		       9d c3 0f 	      sta	TOKENBUFFER,x	; store the Token into the compiled buffer
    366  1157		       e8		      inx		; Point to next position in the output buffer
    367  1158		       86 58		      stx	R2	; Save next position in buffer
    368  115a		       c9 0a		      cmp	#kRem	; remark statement
    369  115c		       f0 3a		      beq	ParseMoveLine	; Move everything until the end of line to the token buffer
    370  115e		       c9 07		      cmp	#kGoto
    371  1160		       f0 4a		      beq	ParseHandleBranches	; Jump allow space for memory address in token buffer
    372  1162		       c9 08		      cmp	#kGosub
    373  1164		       f0 46		      beq	ParseHandleBranches	; Handle the gosub branch address
    374  1166		       c9 31		      cmp	#kGofn
    375  1168		       f0 42		      beq	ParseHandleBranches	; Handle the gosub branch address
    376  116a		       c9 29		      cmp	#kTask
    377  116c		       f0 3e		      beq	ParseHandleBranches	; We may have the ability to also compile task vectors Bracket between the space and the value
    378  116e
    379  116e		       18		      clc		; C flag clear, we found it
    380  116f		       60		      rts
    381  1170
    382  1170							; Move forward to the next entry in table
    383  1170				   ParseNextEntry
    384  1170		       b1 54		      lda	(R1),y	; Get the next character in the token
    385  1172		       29 20		      and	#%00100000	; Is it the last character
    386  1174		       f0 03		      beq	ParseEndOfEntry	; Yes then end of this entry found
    387  1176		       c8		      iny		; Point to next char in the entry
    388  1177		       d0 f7		      bne	ParseNextEntry	; loop until we find the end character
    389  1179
    390  1179				   ParseEndOfEntry
    391  1179		       c8		      iny		; Point to the byte after the last character
    392  117a		       98		      tya		; Move into a as we must add this to the pointer in R1, more that 256 keyword characters in table
    393  117b		       18		      clc		; table May be longer than 256 so increment r1 to next entry
    394  117c		       65 54		      adc	R1
    395  117e		       85 54		      sta	R1
    396  1180		       a5 55		      lda	R1+1
    397  1182		       69 00		      adc	#0
    398  1184		       85 55		      sta	R1+1	; Now pointing to start of next entry in the table
    399  1186		       a0 00		      ldy	#0	; Reset the index back to zero
    400  1188		       b1 54		      lda	(R1),y	; get keyword value
    401  118a		       f0 08		      beq	ParseNoneFound	; Check for end of the table -> 0
    402  118c		       85 52		      sta	R0	; save the next token value
    403  118e		       c8		      iny		; Inc past token value
    404  118f
    405  118f				  -	      if	DEBUGPARSER
    406  118f				  -			;    jsr DebugKeyword
    407  118f					      endif
    408  118f		       a6 51		      ldx	CUROFF	; Restore x to last position in the input buffer
    409  1191		       4c 2c 11 	      jmp	ParseLookupLoop	; branch back for next key word
    410  1194
    411  1194				   ParseNoneFound
    412  1194		       a6 58		      ldx	R2	; it did not find one, restore x to position in output buffer
    413  1196		       38		      sec		; c clear, not found
    414  1197		       60		      rts
    415  1198
    416  1198							;===============================================================================
    417  1198							; Move everything from current position until the end of line into the token buffer
    418  1198							;
    419  1198		       a4 51	   ParseMoveLine ldy	CUROFF	; next byte to parse
    420  119a		       a6 58		      ldx	R2	; where to place in the buffer
    421  119c				   ParseMoveLoop
    422  119c		       b9 98 2e 	      lda	LINBUF,y	; get the next byte
    423  119f		       f0 07		      beq	ParseMoveDone	; if we load a zero then done
    424  11a1		       9d c3 0f 	      sta	TOKENBUFFER,x	; save the byte
    425  11a4		       c8		      iny
    426  11a5		       e8		      inx
    427  11a6		       d0 f4		      bne	ParseMoveLoop
    428  11a8				   ParseMoveDone
    429  11a8		       84 51		      sty	CUROFF
    430  11aa		       18		      clc
    431  11ab		       60		      rts
    432  11ac							;================================================================================================
    433  11ac							; Add two bytes after the gosub and goto to allow the "compiler" to place mem address, to directly
    434  11ac							; transfer to a memory address
    435  11ac				   ParseHandleBranches
    436  11ac		       a6 58		      ldx	R2
    437  11ae		       a9 00		      lda	#0
    438  11b0		       9d c3 0f 	      sta	TOKENBUFFER,x
    439  11b3		       e8		      inx
    440  11b4		       9d c3 0f 	      sta	TOKENBUFFER,x
    441  11b7		       e8		      inx
    442  11b8		       86 58		      stx	R2
    443  11ba		       18		      clc
    444  11bb		       60		      rts
    445  11bc
    446  11bc							;=========================================================================================================
    447  11bc							;ParseString Parse a quotes string
    448  11bc							; on input X = outbuf position
    449  11bc							; y = inbuf position
    450  11bc							; Copies string to output buffer, updates x and y
    451  11bc				   ParseString
    452  11bc		       a4 51		      ldy	CUROFF
    453  11be		       a9 a0		      lda	#tString
    454  11c0		       9d c3 0f 	      sta	TOKENBUFFER,X
    455  11c3		       b9 98 2e 	      lda	LINBUF,y
    456  11c6		       c9 22		      cmp	#'"
    457  11c8		       d0 1a		      bne	ParseStringInvalid
    458  11ca		       e8		      inx
    459  11cb		       9d c3 0f 	      sta	TOKENBUFFER,x
    460  11ce		       e8		      inx
    461  11cf		       c8		      iny
    462  11d0
    463  11d0				   ParseStringLoop
    464  11d0		       b9 98 2e 	      lda	LINBUF,y
    465  11d3		       9d c3 0f 	      sta	TOKENBUFFER,x
    466  11d6		       c9 22		      cmp	#'"
    467  11d8		       f0 04		      beq	ParseStringDone
    468  11da		       c8		      iny
    469  11db		       e8		      inx
    470  11dc		       d0 f2		      bne	ParseStringLoop
    471  11de
    472  11de				   ParseStringDone
    473  11de		       e8		      inx
    474  11df		       c8		      iny
    475  11e0		       84 51		      sty	CUROFF
    476  11e2		       18		      clc
    477  11e3		       60		      rts
    478  11e4
    479  11e4				   ParseStringInvalid
    480  11e4		       38		      sec
    481  11e5		       60		      rts
    482  11e6
    483  11e6							;=========================================================================================================
    484  11e6							; Get numeric values and return value in RO and type in a
    485  11e6							;
    486  11e6				   ParseNumeric
    487  11e6		       a4 51		      ldy	CUROFF
    488  11e8		       b9 98 2e 	      lda	LINBUF,y
    489  11eb		       c9 30		      cmp	#'0
    490  11ed		       90 33		      bcc	ParseNumInvalid
    491  11ef		       c9 3a		      cmp	#'9+1
    492  11f1		       b0 2f		      bcs	ParseNumInvalid
    493  11f3		       86 58		      stx	R2
    494  11f5		       20 95 1b 	      jsr	getDecimal
    495  11f8		       a6 58		      ldx	R2
    496  11fa		       84 51		      sty	CUROFF
    497  11fc		       a5 53		      lda	R0+1
    498  11fe		       f0 14		      beq	ParseByteValue
    499  1200
    500  1200				   ParseIntegerValue
    501  1200		       a9 a1		      lda	#tInteger
    502  1202		       9d c3 0f 	      sta	TOKENBUFFER,x
    503  1205		       e8		      inx
    504  1206		       a5 52		      lda	R0
    505  1208		       9d c3 0f 	      sta	TOKENBUFFER,x
    506  120b		       e8		      inx
    507  120c		       a5 53		      lda	R0+1
    508  120e		       9d c3 0f 	      sta	TOKENBUFFER,X
    509  1211		       e8		      inx
    510  1212		       18		      clc
    511  1213		       60		      rts
    512  1214
    513  1214				   ParseByteValue
    514  1214		       a9 a2		      lda	#tByte
    515  1216		       9d c3 0f 	      sta	TOKENBUFFER,x
    516  1219		       e8		      inx
    517  121a		       a5 52		      lda	R0
    518  121c		       9d c3 0f 	      sta	TOKENBUFFER,x
    519  121f		       e8		      inx
    520  1220		       18		      clc
    521  1221		       60		      rts
    522  1222
    523  1222				   ParseNumInvalid		;Not a valid Numeric
    524  1222		       38		      sec
    525  1223		       60		      rts
    526  1224
    527  1224							;=========================================================================================================
    528  1224							;Parse for operators and seperators
    529  1224							; on exit the A has the oper code, c is clear
    530  1224							;		 not found then c is set
    531  1224							;	x is preserved
    532  1224							;
    533  1224				   ParseForOperator
    534  1224		       86 58		      stx	R2
    535  1226		       a4 51		      ldy	CUROFF
    536  1228		       a2 00		      ldx	#0
    537  122a				  -	      if	DEBUGPARSER
    538  122a				  -			;	jsr    DebugPrintOP
    539  122a					      endif
    540  122a
    541  122a				   ParseOpLoop
    542  122a		       bd 7a 0e 	      lda	Operators,x	; First byte of operator
    543  122d		       f0 28		      beq	ParseOpNotFound	; Last entry os 0,0
    544  122f
    545  122f		       d9 98 2e 	      cmp	LINBUF,y	; Check the first byte
    546  1232		       d0 1c		      bne	ParseOpNext
    547  1234
    548  1234		       c8		      iny
    549  1235
    550  1235		       bd 7b 0e 	      lda	Operators+1,x
    551  1238		       f0 06		      beq	ParseOpFoundSingle	; Single Character op
    552  123a
    553  123a		       d9 98 2e 	      cmp	LINBUF,y
    554  123d		       d0 11		      bne	ParseOpNext
    555  123f
    556  123f				   ParseOpFound
    557  123f		       c8		      iny
    558  1240
    559  1240				   ParseOpFoundSingle
    560  1240		       84 51		      sty	CUROFF
    561  1242
    562  1242		       8a		      txa
    563  1243		       4a		      lsr
    564  1244		       aa		      tax
    565  1245		       bd a8 0e 	      lda	OperValues,x
    566  1248		       a6 58		      ldx	R2
    567  124a		       9d c3 0f 	      sta	TOKENBUFFER,x
    568  124d		       e8		      inx
    569  124e		       18		      clc
    570  124f		       60		      rts
    571  1250
    572  1250				   ParseOpNext
    573  1250		       e8		      inx
    574  1251		       e8		      inx
    575  1252
    576  1252				  -	      if	DEBUGPARSER
    577  1252				  -			;	 jsr	DebugPrintOP
    578  1252					      endif
    579  1252		       a4 51		      ldy	CUROFF	; reset the y pointer to beginning
    580  1254		       4c 2a 12 	      jmp	ParseOpLoop
    581  1257
    582  1257				   ParseOpNotFound
    583  1257		       a6 58		      ldx	R2
    584  1259		       38		      sec
    585  125a		       60		      rts
    586  125b							;=========================================================================================================
    587  125b				  -	      if	DEBUGPARSER
    588  125b				  -			;Print the text of a keyword
    589  125b				  -			;Input R1    = offset into table
    590  125b				  -DebugKeyword
    591  125b				  -	      tya
    592  125b				  -	      pha
    593  125b				  -	      ldy	#1
    594  125b				  -DebugKeyLoop
    595  125b				  -	      lda	(R1),y
    596  125b				  -	      jsr	VOUTCH
    597  125b				  -	      and	#%00100000
    598  125b				  -	      beq	DebugKeyDone
    599  125b				  -	      iny
    600  125b				  -	      bne	DebugKeyLoop
    601  125b				  -
    602  125b				  -DebugKeyDone
    603  125b				  -	      jsr	CRLF
    604  125b				  -	      pla
    605  125b				  -	      tay
    606  125b				  -	      rts
    607  125b				  -			;========================================
    608  125b				  -DebugPrintOP
    609  125b				  -	      pha
    610  125b				  -	      lda	Operators,x
    611  125b				  -	      jsr	VOUTCH
    612  125b				  -	      lda	Operators+1,x
    613  125b				  -	      beq	DbgPrtOpDone
    614  125b				  -	      jsr	VOUTCH
    615  125b				  -
    616  125b				  -DbgPrtOpDone
    617  125b				  -	      jsr	CRLF
    618  125b				  -	      pla
    619  125b				  -	      rts
    620  125b				  -			;=======================================
    621  125b				  -DebugClearBuffer
    622  125b				  -	      txa
    623  125b				  -	      pha
    624  125b				  -	      ldx	#$FF
    625  125b				  -	      lda	#0
    626  125b				  -DebugClrLoop
    627  125b				  -	      sta	TOKENBUFFER,x
    628  125b				  -	      dex
    629  125b				  -	      bne	DebugClrLoop
    630  125b				  -	      sta	TOKENBUFFER,x
    631  125b				  -	      pla
    632  125b				  -	      tax
    633  125b				  -	      rts
    634  125b				  -
    635  125b				  -			;=====================================================
    636  125b				  -			; Print the parser buffer as hex values
    637  125b				  -printTokenBuffer
    638  125b				  -	      stx	printStorage
    639  125b				  -	      sty	printStorage+1
    640  125b				  -	      sta	printStorage+2
    641  125b				  -
    642  125b				  -	      ldx	TOKENBUFFER	; get the length of the buffer
    643  125b				  -	      inx		; we want to show the last zero byte
    644  125b				  -	      ldy	#0
    645  125b				  -
    646  125b				  -printHexLoop
    647  125b				  -	      lda	TOKENBUFFER,y	; get the character
    648  125b				  -	      jsr	HexToOut	; print it
    649  125b				  -	      lda	#$20
    650  125b				  -	      jsr	VOUTCH
    651  125b				  -	      iny
    652  125b				  -	      dex
    653  125b				  -	      cpx	#0
    654  125b				  -	      bne	printHexLoop
    655  125b				  -	      jsr	CRLF
    656  125b				  -
    657  125b				  -	      ldy	printStorage+1
    658  125b				  -	      ldx	printStorage
    659  125b				  -	      lda	printStorage+2
    660  125b				  -printHexDone
    661  125b				  -	      clc
    662  125b				  -	      rts
    663  125b					      endif
    664  125b
    665  125b
    666  125b							;=========================================================================================================
    667  125b							; Parse for variables A-Z @, ^  x!x x[op]
    668  125b				   ParseForVariable
    669  125b		       a4 51		      ldy	CUROFF
    670  125d		       b9 98 2e 	      lda	LINBUF,y
    671  1260		       c9 5e		      cmp	#'^	; is it an exit code
    672  1262		       d0 04		      bne	ParseVarMem
    673  1264		       a9 9b		      lda	#tVhat	; Mark the index as 27th slot
    674  1266		       d0 1f		      bne	ParseVarSpecial
    675  1268
    676  1268				   ParseVarMem
    677  1268		       c9 40		      cmp	#'@	; are we indirect through program end eg. @[0] ..
    678  126a		       d0 04		      bne	ParseVarStack
    679  126c		       a9 9d		      lda	#tVat
    680  126e		       d0 17		      bne	ParseVarSpecial
    681  1270
    682  1270				   ParseVarStack
    683  1270		       c9 23		      cmp	#'#	; Indirect var through top of stack eg. #[0]
    684  1272		       d0 04		      bne	ParseVarLetters
    685  1274		       a9 9c		      lda	#tVhash
    686  1276		       d0 0f		      bne	ParseVarSpecial
    687  1278
    688  1278				   ParseVarLetters
    689  1278		       29 df		      and	#%11011111	; Force upper case
    690  127a		       c9 41		      cmp	#'A
    691  127c		       90 12		      bcc	ParseVarInvalid
    692  127e		       c9 5b		      cmp	#'Z+1
    693  1280		       b0 0e		      bcs	ParseVarInvalid
    694  1282							;
    695  1282							; The condition is true, so convert to an index, push
    696  1282							; it onto the stack and continue running.
    697  1282							;
    698  1282		       38		      sec
    699  1283		       e9 41		      sbc	#'A	;index is zero based
    700  1285		       09 80		      ora	#$80
    701  1287
    702  1287				   ParseVarSpecial
    703  1287		       9d c3 0f 	      sta	TOKENBUFFER,x
    704  128a		       e8		      inx
    705  128b		       c8		      iny
    706  128c		       84 51		      sty	CUROFF
    707  128e		       18		      clc
    708  128f		       60		      rts
    709  1290
    710  1290				   ParseVarInvalid
    711  1290		       38		      sec
    712  1291		       60		      rts
    713  1292
    714  1292
    715  1292							;=========================================================================================================
    716  1292							; Transfer R0 to the TOKENBUFFER
    717  1292							;
    718  1292				   R02TOKEN
    719  1292		       a5 52		      lda	R0
    720  1294		       9d c3 0f 	      sta	TOKENBUFFER,x
    721  1297		       e8		      inx
    722  1298		       a5 53		      lda	R0+1
    723  129a		       9d c3 0f 	      sta	TOKENBUFFER,x
    724  129d		       e8		      inx
    725  129e		       18		      clc
    726  129f		       60		      rts
    727  12a0							;=========================================================================
    728  12a0							; Transfer word in Token Buffer to R0
    729  12a0				   TOKEN2R0
    730  12a0		       b9 c3 0f 	      lda	TOKENBUFFER,y
    731  12a3		       85 52		      sta	R0
    732  12a5		       c8		      iny
    733  12a6		       ca		      dex
    734  12a7		       b9 c3 0f 	      lda	TOKENBUFFER,y
    735  12aa		       c8		      iny
    736  12ab		       ca		      dex
    737  12ac		       85 53		      sta	R0+1
    738  12ae		       60		      rts
    739  12af							;==========================================================================
    740  12af							; Transfer	Display Buffer position to R0
    741  12af							;
    742  12af				   DPL2R0
    743  12af		       b1 59		      lda	(dpl),y
    744  12b1		       85 52		      sta	R0
    745  12b3		       c8		      iny
    746  12b4		       ca		      dex
    747  12b5		       b1 59		      lda	(dpl),y
    748  12b7		       c8		      iny
    749  12b8		       ca		      dex
    750  12b9		       85 53		      sta	R0+1
    751  12bb		       60		      rts
    752  12bc
    753  12bc
    754  12bc							;=========================================================================
    755  12bc							; Read an IL byte lookit up in the table, of words
    756  12bc							; set the next ilpc to point to that address
    757  12bc							; if not found then do ussual filter stuff
    758  12bc							; ongoto ilvectortable, not found address
    759  12bc		       20 e6 1a    iOnGoto    jsr	getILWord	; places the word into r0, pointer to table
    760  12bf		       86 52		      stx	R0
    761  12c1		       85 53		      sta	R0+1
    762  12c3
    763  12c3		       a4 51		      ldy	CUROFF
    764  12c5		       b1 4f		      lda	(CURPTR),y	; get the operation byte
    765  12c7		       a0 00		      ldy	#0
    766  12c9		       38		      sec
    767  12ca		       f1 52		      sbc	(R0),y	; Subract the base value
    768  12cc		       c8		      iny
    769  12cd		       d1 52		      cmp	(R0),y	; Check if we are in range
    770  12cf		       b0 12		      bcs	iOnGotoInvalid
    771  12d1		       e6 51		      inc	CUROFF	; Save the offset
    772  12d3
    773  12d3		       0a		      asl
    774  12d4		       a8		      tay		; Turn into vector
    775  12d5		       c8		      iny		; Inc must include the table base and entry count
    776  12d6		       c8		      iny
    777  12d7
    778  12d7		       b1 52		      lda	(R0),y
    779  12d9		       85 43		      sta	ILPC
    780  12db		       c8		      iny
    781  12dc		       b1 52		      lda	(R0),y
    782  12de		       85 44		      sta	ILPC+1
    783  12e0		       4c c2 02 	      jmp	NextIL
    784  12e3
    785  12e3				   iOnGotoInvalid
    786  12e3		       20 e6 1a 	      jsr	getILWord
    787  12e6		       86 43		      stx	ILPC
    788  12e8		       85 44		      sta	ILPC+1
    789  12ea		       4c c2 02 	      jmp	NextIL
    790  12ed							;
    791  12ed							;==========================================================================================
    792  12ed							; Test the token for relop and push the value onto the stack if true
    793  12ed							;
    794  12ed				   iTSTRELOP
    795  12ed		       20 ea 1a 	      jsr	getILByte
    796  12f0		       8d 31 2f 	      sta	offset
    797  12f3
    798  12f3		       a4 51		      ldy	CUROFF
    799  12f5		       b1 4f		      lda	(CURPTR),y
    800  12f7		       48		      pha
    801  12f8		       29 f0		      and	#$F0
    802  12fa		       c9 f0		      cmp	#$F0
    803  12fc		       d0 12		      bne	iTSTRELOPNOT
    804  12fe		       68		      pla
    805  12ff		       29 0f		      and	#$0F	; get the actual value
    806  1301		       85 52		      sta	R0	; save it for later
    807  1303		       a9 00		      lda	#0
    808  1305		       85 53		      sta	R0+1
    809  1307		       20 e3 1c 	      jsr	pushR0
    810  130a		       c8		      iny
    811  130b		       84 51		      sty	CUROFF	; save the y pointer
    812  130d		       4c c2 02 	      jmp	NextIL
    813  1310
    814  1310				   iTSTRELOPNOT
    815  1310		       68		      pla
    816  1311		       4c 8d 0b 	      jmp	tstBranch
    817  1314
    818  1314							;
    819  1314							;===================================================================================================
    820  1314							; Test the token and following info for precompiled address information
    821  1314							; skip it if zero, transfer and skip next integer value if not zero
    822  1314							; used by both gosub, goto and gofN
    823  1314							;
    824  1314				   iTSTBRANCH
    825  1314		       20 ea 1a 	      jsr	getILByte	; Get jump address if vector is valid
    826  1317		       8d 31 2f 	      sta	offset	; Mark offset for later if vector found
    827  131a		       a4 51		      ldy	CUROFF	; get offset of first byte of compiled value
    828  131c		       88		      dey		; point back to the type of branch
    829  131d		       b1 4f		      lda	(CURPTR),y	; get the actual instructions
    830  131f		       48		      pha		; Save till needed
    831  1320		       c8		      iny		; back to memory vectors
    832  1321				   ITSTBRANCHCont
    833  1321		       b1 4f		      lda	(CURPTR),y	; Get first byte of compiled value
    834  1323		       85 52		      sta	R0	; R0 will contain mem pointer of present
    835  1325		       c8		      iny		; Point to next byte of mem vector
    836  1326		       b1 4f		      lda	(CURPTR),y	; It was compiled so get the hi byte value
    837  1328		       85 53		      sta	R0+1	; Move it into R0, R0 now contains vector address
    838  132a		       c8		      iny		; Point to the byte past memory vector
    839  132b		       84 51		      sty	CUROFF	; At least point past the memory vector built in
    840  132d
    841  132d		       05 52		      ora	R0	; Get the second byte of the mem
    842  132f		       f0 21		      BEQ	iTSTBRANCHNoCompile	; If both are zero then not compiled
    843  1331		       68		      pla
    844  1332		       c9 29		      cmp	#kTask	; Task defied with Task() so bypass the first bracket
    845  1334		       d0 07		      bne	iTSTBRANCHCont
    846  1336		       b1 4f		      lda	(CURPTR),y
    847  1338		       c9 e0		      cmp	#oLeftBracket
    848  133a		       d0 17		      bne	iTSTBRANCHErr	; Well in that case something is very wrong
    849  133c		       c8		      iny		; Increment past the bracket
    850  133d				   iTSTBRANCHCont
    851  133d		       b1 4f		      lda	(CURPTR),y	; We should get a datatype, if not memvector is invalid
    852  133f		       c9 a2		      cmp	#tByte	; A byte value is valid
    853  1341		       f0 05		      beq	ITSTBRANCHBYTE	; Skip the byte
    854  1343		       c9 a1		      cmp	#tInteger	; An integer value is valid
    855  1345		       d0 0c		      bne	iTSTBRANCHErr	; If not then we can not use the memory vector
    856  1347		       c8		      iny		; skip type indicator for
    857  1348				   ITSTBRANCHBYTE
    858  1348		       c8		      iny		; skip first byte of value line number
    859  1349		       c8		      iny		; Skip second byte of line number
    860  134a
    861  134a				   iTSTBRANCHVALID
    862  134a		       84 51		      sty	CUROFF
    863  134c		       20 e3 1c 	      jsr	pushR0	; place transfer address on top of stack
    864  134f		       4c 8d 0b 	      jmp	tstBranch
    865  1352
    866  1352				   iTSTBRANCHNoCompile
    867  1352		       68		      pla
    868  1353				   iTSTBRANCHErr
    869  1353		       4c c2 02 	      jmp	NextIL
    870  1356
    871  1356
    872  1356
    873  1356
    874  1356
    875  1356
    876  1356
    877  1356
    878  1356
    879  1356
------- FILE mytb.asm
------- FILE print.asm LEVEL 2 PASS 6
      0  1356					      include	"print.asm"
      1  1356					      Seg	Code
      2  1356							;---------------------------
      3  1356							; Print 24-bit decimal number or  16bit unsigned
      4  1356							; ---------------------------
      5  1356							; On entry, R0=number to print
      6  1356							;	     Defaults to pad=0 , y=21 default
      7  1356							;	     R2 = 1 unsigned 16 bit
      8  1356							;	     R2 = 0 Signed   16 bit
      9  1356
     10  1356							; On entry at PrintDecPadded:
     11  1356							;	     X = padding, Y=(number of digits)*3-3, eg 21 for 8 digits
     12  1356
     13  1356							; On exit,  A,X,Y,num,pad corrupted
     14  1356							; Size      129 bytes, Table 24 bytes	--- total 153
     15  1356							; -----------------------------------------------------------------
     16  1356
     17  1356				   PrintDecimal
     18  1356		       8a		      TXA
     19  1357		       48		      pha
     20  1358		       98		      tya
     21  1359		       48		      pha
     22  135a		       a9 00		      lda	#0
     23  135c		       8d ef 13 	      sta	pad
     24  135f		       a0 15		      LDY	#21	; Offset to powers of ten
     25  1361		       4c 67 13 	      JMP	PrintDo
     26  1364
     27  1364				   PrintDecPadded
     28  1364		       8e ef 13 	      stx	pad
     29  1367
     30  1367				   PrintDo
     31  1367		       a9 00		      lda	#0
     32  1369		       85 54		      sta	R1
     33  136b
     34  136b		       a5 58		      lda	R2
     35  136d		       d0 29		      bne	PrintPos
     36  136f
     37  136f		       a5 53		      lda	R0+1	;MSB has sign
     38  1371		       10 25		      bpl	PrintPos	;it's a positive number;
     39  1373
     40  1373
     41  1373							; Negative numbers need more work.  Invert all the bits,
     42  1373							; then add one.
     43  1373
     44  1373		       a9 2d		      lda	#'-
     45  1375		       20 7c 1f 	      jsr	VOUTCH	;print the negative sign
     46  1378
     47  1378		       a9 ff		      lda	#$FF
     48  137a		       85 54		      sta	R1
     49  137c		       a5 52		      lda	R0	;invert bits
     50  137e		       49 ff		      eor	#$ff
     51  1380		       85 52		      sta	R0
     52  1382		       a5 53		      lda	R0+1
     53  1384		       49 ff		      eor	#$ff
     54  1386		       85 53		      sta	R0+1
     55  1388		       a5 54		      lda	R1
     56  138a		       49 ff		      eor	#$ff
     57  138c		       85 54		      sta	R1
     58  138e		       e6 52		      inc	R0	;add one
     59  1390		       d0 06		      bne	PrintPos
     60  1392		       e6 53		      inc	R0+1
     61  1394		       d0 02		      bne	PrintPos
     62  1396		       e6 54		      inc	R1
     63  1398				   PrintPos
     64  1398
     65  1398				   PrDec24Lp1
     66  1398		       a2 ff		      LDX	#$FF
     67  139a		       38		      SEC		; Start with digit=-1
     68  139b				   PrDec24Lp2
     69  139b		       a5 52		      LDA	R0+0
     70  139d		       f9 f0 13 	      SBC	PrDec24Tens+0,Y
     71  13a0		       85 52		      STA	R0+0	; Subtract current tens
     72  13a2		       a5 53		      LDA	R0+1
     73  13a4		       f9 f1 13 	      SBC	PrDec24Tens+1,Y
     74  13a7		       85 53		      STA	R0+1
     75  13a9		       a5 54		      LDA	R0+2
     76  13ab		       f9 f2 13 	      SBC	PrDec24Tens+2,Y
     77  13ae		       85 54		      STA	R0+2
     78  13b0		       e8		      INX
     79  13b1		       b0 e8		      BCS	PrDec24Lp2	; Loop until <0
     80  13b3		       a5 52		      LDA	R0+0
     81  13b5		       79 f0 13 	      ADC	PrDec24Tens+0,Y
     82  13b8		       85 52		      STA	R0+0	; Add current tens back in
     83  13ba		       a5 53		      LDA	R0+1
     84  13bc		       79 f1 13 	      ADC	PrDec24Tens+1,Y
     85  13bf		       85 53		      STA	R0+1
     86  13c1		       a5 54		      LDA	R0+2
     87  13c3		       79 f2 13 	      ADC	PrDec24Tens+2,Y
     88  13c6		       85 54		      STA	R0+2
     89  13c8		       8a		      TXA
     90  13c9		       d0 07		      BNE	PrDec24Digit	; Not zero, print it
     91  13cb		       ad ef 13 	      LDA	pad
     92  13ce		       d0 09		      BNE	PrDec24Print
     93  13d0		       f0 0a		      BEQ	PrDec24Next	; pad<>0, use it
     94  13d2				   PrDec24Digit
     95  13d2		       a2 30		      LDX	#'0
     96  13d4		       8e ef 13 	      STX	pad	; No more zero padding
     97  13d7		       09 30		      ORA	#'0	; Print this digit
     98  13d9				   PrDec24Print
     99  13d9		       20 7c 1f 	      JSR	VOUTCH
    100  13dc				   PrDec24Next
    101  13dc		       88		      DEY
    102  13dd		       88		      DEY
    103  13de		       88		      DEY
    104  13df		       f0 07		      beq	PrDec24LastDigit
    105  13e1		       10 b5		      BPL	PrDec24Lp1	; Loop for next digit
    106  13e3		       68		      pla
    107  13e4		       a8		      tay
    108  13e5		       68		      pla
    109  13e6		       aa		      tax
    110  13e7		       60		      RTS
    111  13e8				   PrDec24LastDigit
    112  13e8		       a2 30		      LDX	#'0
    113  13ea		       8e ef 13 	      STX	pad	; No more zero padding
    114  13ed		       d0 a9		      BNE	PrDec24Lp1	; Loop for last digit
    115  13ef
      0  13ef				   pad	      db	0
      1  13ef		       00		      .byte.b	0
    117  13f0
    118  13f0				   PrDec24Tens
      0  13f0					      dw	1
      1  13f0		       01 00		      .word.w	1
      0  13f2					      db	(1 / 65536)
      1  13f2		       00		      .byte.b	(1 / 65536)
      0  13f3					      dw	10
      1  13f3		       0a 00		      .word.w	10
      0  13f5					      db	(10 / 65536)
      1  13f5		       00		      .byte.b	(10 / 65536)
      0  13f6					      dw	100
      1  13f6		       64 00		      .word.w	100
      0  13f8					      db	(100 / 65536)
      1  13f8		       00		      .byte.b	(100 / 65536)
      0  13f9					      dw	1000
      1  13f9		       e8 03		      .word.w	1000
      0  13fb					      db	(1000 / 65536)
      1  13fb		       00		      .byte.b	(1000 / 65536)
      0  13fc					      dw	10000
      1  13fc		       10 27		      .word.w	10000
      0  13fe					      db	(10000 / 65536)
      1  13fe		       00		      .byte.b	(10000 / 65536)
      0  13ff					      dw	100000
      1  13ff		       a0 86		      .word.w	100000
      0  1401					      db	(100000 / 65536)
      1  1401		       01		      .byte.b	(100000 / 65536)
      0  1402					      dw	1000000
      1  1402		       40 42		      .word.w	1000000
      0  1404					      db	(1000000 / 65536)
      1  1404		       0f		      .byte.b	(1000000 / 65536)
      0  1405					      dw	10000000
      1  1405		       80 96		      .word.w	10000000
      0  1407					      db	(10000000 / 65536)
      1  1407		       98		      .byte.b	(10000000 / 65536)
    135  1408							;=====================================================
    136  1408							; Print character in A as two hex digits to the Console
    137  1408
    138  1408		       48	   HexToOut   pha		;save return value
    139  1409		       48		      pha
    140  140a		       4a		      lsr		;a  ;move top nibble to bottom
    141  140b		       4a		      lsr		;a
    142  140c		       4a		      lsr		;a
    143  140d		       4a		      lsr		;a
    144  140e		       20 17 14 	      jsr	hexta	;output nibble
    145  1411		       68		      pla
    146  1412		       20 17 14 	      jsr	hexta
    147  1415		       68		      pla		;restore
    148  1416		       60		      rts
    149  1417							;
    150  1417		       29 0f	   hexta      and	#%0001111
    151  1419		       c9 0a		      cmp	#$0a
    152  141b		       18		      clc
    153  141c		       30 02		      bmi	hexta1
    154  141e		       69 07		      adc	#7
    155  1420		       69 30	   hexta1     adc	#'0	;then fall into...
    156  1422		       4c 7c 1f 	      jmp	VOUTCH
    157  1425							;
    158  1425							;=====================================================
    159  1425							; Print the string that immediately follows the JSR to
    160  1425							; this function.  Stops when a null byte is found,
    161  1425							; then returns to the instruction immediately
    162  1425							; following the null.
    163  1425							;
    164  1425							; Thanks to Ross Archer for this code.
    165  1425							; http://www.6502.org/source/io/primm.htm
    166  1425							;
    167  1425
    168  1425		       68	   tbputs     pla		;Get the low part of "return" address
    169  1426							;(data start address)
    170  1426		       85 5e		      sta	PrtFrom
    171  1428		       68		      pla
    172  1429		       85 5f		      sta	PrtFrom+1	;Get the high part of "return" address
    173  142b							;(data start address)
    174  142b							;Note: actually we're pointing one short
    175  142b		       a0 01	   PSINB      ldy	#1
    176  142d		       b1 5e		      lda	(PrtFrom),y	;Get the next string character
    177  142f		       e6 5e		      inc	PrtFrom	;update the pointer
    178  1431		       d0 02		      bne	PSICHO	;if not, we're pointing to next character
    179  1433		       e6 5f		      inc	PrtFrom+1	;account for page crossing
    180  1435		       09 00	   PSICHO     ora	#0	;Set flags according to contents of
    181  1437							;   Accumulator
    182  1437		       f0 06		      beq	PSIX1	;don't print the final NULL
    183  1439		       20 7c 1f 	      jsr	VOUTCH	;write it out
    184  143c		       4c 2b 14 	      jmp	PSINB	;back around
    185  143f		       e6 5e	   PSIX1      inc	PrtFrom
    186  1441		       d0 02		      bne	PSIX2
    187  1443		       e6 5f		      inc	PrtFrom+1	;account for page crossing
    188  1445		       6c 5e 00    PSIX2      jmp	(PrtFrom)	;return to byte following final NULL
    189  1448
    190  1448							;+
    191  1448							;====================================================
    192  1448		       2f 2d	   PrtTerm    equ	tempy
    193  1448
    194  1448							; on exit Print Y has the offset to use
    195  1448							; input y =	 addr low
    196  1448							;	 x =	 addr high
    197  1448							;	 a =	 termination string
    198  1448
    199  1448
    200  1448				   PrtQuoted		; Print a quoted string from the current program space
    201  1448		       a9 22		      lda	#'"
    202  144a		       a4 51		      ldy	CUROFF
    203  144c		       d1 4f		      cmp	(CURPTR),y	; the opening quote, can to " or ' so long as they match
    204  144e		       d0 03		      bne	PrtNoInc
    205  1450		       c8		      iny
    206  1451		       84 51		      sty	CUROFF
    207  1453				   PrtNoInc
    208  1453		       8d 2d 2f 	      sta	PrtTerm
    209  1456
    210  1456				   PrtPrgString 		; Print a terminated string from the static program space
    211  1456		       a4 51		      ldy	CUROFF
    212  1458		       a5 4f		      lda	CURPTR
    213  145a		       85 5e		      sta	PrtFrom
    214  145c		       a5 50		      lda	CURPTR+1
    215  145e		       85 5f		      sta	PrtFrom+1
    216  1460		       4c 6c 14 	      jmp	PrtLoop
    217  1463
    218  1463							; Print a string pointed to by x= h, y=l terminated by a
    219  1463							; Return y as the length
    220  1463
    221  1463		       86 5f	   PrtStr     stx	PrtFrom+1
    222  1465		       84 5e		      sty	PrtFrom
    223  1467		       8d 2d 2f 	      sta	PrtTerm
    224  146a		       a0 00		      ldy	#0
    225  146c							;
    226  146c							; On entry here ptrfrom and prtterm point to area to print
    227  146c							;
    228  146c		       b1 5e	   PrtLoop    lda	(PrtFrom),y
    229  146e		       cd 2d 2f 	      cmp	PrtTerm
    230  1471		       f0 0b		      beq	PrtEnd
    231  1473		       c9 00		      cmp	#0	; always end if 0 is found
    232  1475		       f0 07		      beq	PrtEnd
    233  1477		       20 7c 1f 	      jsr	VOUTCH
    234  147a		       c8		      iny
    235  147b		       4c 6c 14 	      jmp	PrtLoop
    236  147e		       c8	   PrtEnd     iny		;return byte after the copy
    237  147f		       60		      rts
    238  1480
    239  1480							;
    240  1480							;=======================================================
    241  1480							; Print all Variables
    242  1480				   PrintAllVars
    243  1480		       a0 00		      ldy	#0
    244  1482		       a9 41		      lda	#'A
    245  1484				   PrintAllVarsLoop
    246  1484		       48		      pha
    247  1485		       b1 41		      lda	(VARIABLES),y
    248  1487		       85 52		      sta	R0
    249  1489		       c8		      iny
    250  148a		       b1 41		      lda	(VARIABLES),y
    251  148c		       85 53		      sta	R0+1
    252  148e
    253  148e		       68		      pla		;get the current letter
    254  148f		       48		      pha
    255  1490		       20 7c 1f 	      jsr	VOUTCH
    256  1493		       20 25 14 	      jsr	puts
      0  1496					      db	"=",0
      1  1496		       3d 00		      .byte.b	"=",0
    258  1498		       68		      pla
    259  1499		       aa		      tax
    260  149a		       e8		      inx
    261  149b		       8a		      txa
    262  149c		       48		      pha		;
    263  149d
    264  149d		       98		      tya
    265  149e		       48		      pha
    266  149f		       20 56 13 	      jsr	PrintDecimal
    267  14a2		       20 25 14 	      jsr	puts
      0  14a5					      db	" ",0
      1  14a5		       20 00		      .byte.b	" ",0
    269  14a7		       68		      pla
    270  14a8		       a8		      tay
    271  14a9		       c8		      iny
    272  14aa		       c0 34		      cpy	#26<<1	; A-Z 2 bytes each
    273  14ac		       90 d6		      bcc	PrintAllVarsLoop
    274  14ae		       20 2e 1e 	      jsr	CRLF
    275  14b1
    276  14b1		       68		      pla
    277  14b2		       60		      rts
    278  14b3							;==========================================================================================================
    279  14b3							;Debug   Print a Program Line from compile buffer
    280  14b3							;
    281  14b3				   DebugPrintProgramLine
    282  14b3		       48		      pha
    283  14b4		       a9 c3		      lda	#TOKENBUFFER&$FF
    284  14b6		       85 59		      sta	dpl
    285  14b8		       a9 0f		      lda	#TOKENBUFFER>>8
    286  14ba		       85 5a		      sta	dpl+1
    287  14bc		       68		      pla
    288  14bd
    289  14bd							; Decode and print a line of program text
    290  14bd							; on entry	 dpl points to line of code to print
    291  14bd							; on exit	 no change in reg or dpl
    292  14bd							;
    293  14bd				   PrintProgramLine
    294  14bd
    295  14bd		       8e c3 10 	      stx	printStorage
    296  14c0		       8c c4 10 	      sty	printStorage+1
    297  14c3		       48		      pha
    298  14c4
    299  14c4		       a0 01		      ldy	#1	; index into the token buffer
    300  14c6		       84 58		      sty	R2	; print unsigned decimal
    301  14c8		       a0 00		      ldy	#0
    302  14ca		       b1 59		      lda	(dpl),y	; get number of bytes
    303  14cc		       aa		      tax		; place pointer into x
    304  14cd		       c8		      iny
    305  14ce		       ca		      dex		; Deduct the length byte
    306  14cf		       20 af 12 	      jsr	DPL2R0	; Print the line number
    307  14d2		       20 56 13 	      jsr	PrintDecimal
    308  14d5		       a9 20		      lda	#$20
    309  14d7		       20 7c 1f 	      jsr	VOUTCH
    310  14da
    311  14da				   PrintProgLoop
    312  14da		       b1 59		      lda	(dpl),y	; Get a character
    313  14dc		       f0 4a		      beq	PrintProgramComplete	; If zero then at end of line
    314  14de		       29 80		      and	#%10000000	; check for Keyword or Variable/operator
    315  14e0		       f0 76		      beq	PrintKeyword	; It uses the index in a to find a keyword
    316  14e2
    317  14e2				   PrintProgVars
    318  14e2		       b1 59		      lda	(dpl),y
    319  14e4		       29 e0		      and	#$E0	; Check for operators and punctuation
    320  14e6		       c9 e0		      cmp	#$E0
    321  14e8		       f0 6b		      beq	PrintProgOperatorVect
    322  14ea
    323  14ea		       b1 59		      lda	(dpl),y	; Get char back again and check for var
    324  14ec		       c9 9e		      cmp	#$9D+1
    325  14ee		       90 62		      bcc	PrintProgVariableVec
    326  14f0		       29 a0		      and	#$A0	; Check for a valid datatype
    327  14f2		       c9 a0		      cmp	#$A0
    328  14f4		       f0 06		      beq	PrintDataType	; if not just print the character
    329  14f6		       b1 59		      lda	(dpl),y	; Get char back again and check for data type
    330  14f8		       ca		      dex		; Ok we are processing it
    331  14f9		       c8		      iny
    332  14fa		       d0 25		      bne	PrintContinue	; Print and do the next character
    333  14fc
    334  14fc				   PrintDataType
    335  14fc		       b1 59		      lda	(dpl),y	; Get char back again and check for data type
    336  14fe		       c9 a0		      cmp	#tString
    337  1500		       f0 31		      beq	PrintStringVariable
    338  1502
    339  1502				   PrintProgNumber
    340  1502		       c8		      iny		; we have a numerical integer value
    341  1503		       ca		      dex
    342  1504		       48		      pha
    343  1505		       a9 00		      lda	#0
    344  1507		       85 53		      sta	R0+1
    345  1509		       85 58		      sta	R2	; Set to print signed number
    346  150b		       b1 59		      lda	(dpl),y
    347  150d		       85 52		      sta	R0
    348  150f		       68		      pla
    349  1510		       c9 a1		      cmp	#tInteger
    350  1512		       d0 06		      bne	PrintProgNumDone
    351  1514		       c8		      iny
    352  1515		       ca		      dex
    353  1516		       b1 59		      lda	(dpl),y
    354  1518		       85 53		      sta	R0+1
    355  151a
    356  151a				   PrintProgNumDone
    357  151a		       c8		      iny
    358  151b		       ca		      dex
    359  151c		       20 56 13 	      jsr	PrintDecimal
    360  151f
    361  151f				   PrintProgNext
    362  151f		       a9 20		      lda	#$20
    363  1521				   PrintContinue
    364  1521		       20 7c 1f 	      jsr	VOUTCH
    365  1524				   PrintProgSkipSpace
    366  1524		       e0 00		      cpx	#0
    367  1526		       d0 b2		      bne	PrintProgLoop
    368  1528				   PrintProgramComplete
    369  1528		       20 2e 1e 	      jsr	CRLF
    370  152b
    371  152b		       ae c3 10 	      ldx	printStorage
    372  152e		       ac c4 10 	      ldy	printStorage+1
    373  1531		       68		      pla
    374  1532
    375  1532		       60		      rts
    376  1533							;=================================================================================================================
    377  1533							; Print a string variable including the quotes
    378  1533							; On Input	 y is offset into buffer
    379  1533							; On Exit	 y is updated to new offset
    380  1533
    381  1533				   PrintStringVariable
    382  1533		       c8		      iny
    383  1534		       a9 22		      lda	#'"
    384  1536		       20 7c 1f 	      jsr	VOUTCH
    385  1539		       c8		      iny
    386  153a		       a5 59		      lda	dpl
    387  153c		       85 5e		      sta	PrtFrom
    388  153e		       a5 5a		      lda	dpl+1
    389  1540		       85 5f		      sta	PrtFrom+1
    390  1542		       a9 22		      lda	#'"
    391  1544		       8d 2d 2f 	      sta	PrtTerm
    392  1547		       20 6c 14 	      jsr	PrtLoop
    393  154a		       a9 22		      lda	#'"
    394  154c		       20 7c 1f 	      jsr	VOUTCH
    395  154f		       4c 1f 15 	      jmp	PrintProgNext
    396  1552
    397  1552				   PrintProgVariableVec
    398  1552		       4c f2 15 	      jmp	PrintProgVariable
    399  1555
    400  1555				   PrintProgOperatorVect
    401  1555		       4c c9 15 	      jmp	PrintProgOperator
    402  1558							;===============================================================================================================
    403  1558							; On entry dpl points to the buffer we are printing from
    404  1558							;	    y	current offset into the dpl buffer
    405  1558							; all registers preserved
    406  1558							;
    407  1558				   PrintKeyword
    408  1558
    409  1558		       b1 59		      lda	(dpl),y	; Get the Keyword token to lookup
    410  155a		       85 52		      sta	R0	; The value we are looking for
    411  155c		       c9 07		      cmp	#kGoto	; Test if we must skip an extra two bytes for branch type instructions
    412  155e		       f0 0c		      beq	PrintKeyBranch
    413  1560		       c9 08		      cmp	#kGosub
    414  1562		       f0 08		      beq	PrintKeyBranch
    415  1564		       c9 29		      cmp	#kTask
    416  1566		       f0 04		      beq	PrintKeyBranch
    417  1568		       c9 31		      cmp	#kGofn
    418  156a		       d0 04		      bne	PrintKeySkipped
    419  156c				   PrintKeyBranch
    420  156c		       c8		      iny		; Skip the compiled memory address
    421  156d		       c8		      iny
    422  156e		       ca		      dex		; Change number of bytes to print
    423  156f		       ca		      dex		; Remove the bytes to print
    424  1570
    425  1570				   PrintKeySkipped
    426  1570		       c8		      iny		; Inc y to point to the next char to be printed
    427  1571		       ca		      dex		; Reduce number of bytes to print
    428  1572		       98		      tya		; Save y and x for the return
    429  1573		       48		      pha
    430  1574		       8a		      txa
    431  1575		       48		      pha
    432  1576
    433  1576		       a9 be		      lda	#KeyWordTable&$FF	; R1 to point to the entry in the keyword table
    434  1578		       85 54		      sta	R1
    435  157a		       a9 0e		      lda	#KeyWordTable>>8
    436  157c		       85 55		      sta	R1+1
    437  157e
    438  157e
    439  157e				   PrintKeyLoop
    440  157e		       a0 00		      ldy	#0	; Index into the keyword entry
    441  1580		       b1 54		      lda	(R1),y	; Get token value for this entry
    442  1582		       c8		      iny		; Point to first byte of key
    443  1583		       c5 52		      cmp	R0	; Compare to the token we are looking for
    444  1585		       f0 16		      Beq	PrintKeyFound	; We have the correct Token, now print it
    445  1587
    446  1587				   PrintKeyNext
    447  1587		       b1 54		      lda	(R1),y	; Get key letter
    448  1589		       c8		      iny		; Point to next byte always
    449  158a		       29 20		      and	#%00100000	; Check for last character in key work
    450  158c		       d0 f9		      bne	PrintKeyNext	; If it is not set then get next character
    451  158e
    452  158e		       98		      tya		; Trabsfer y to a for the addition
    453  158f		       18		      clc		; Table > 256 bytes
    454  1590		       65 54		      adc	R1
    455  1592		       85 54		      sta	R1
    456  1594		       a9 00		      lda	#0
    457  1596		       65 55		      adc	R1+1
    458  1598		       85 55		      sta	R1+1
    459  159a		       4c 7e 15 	      jmp	PrintKeyLoop
    460  159d
    461  159d				   PrintKeyFound
    462  159d		       b1 54		      lda	(R1),y	; letter from key table
    463  159f		       48		      pha		; Save it for later check
    464  15a0		       09 20		      ora	#%00100000	; Force it to lower case
    465  15a2		       20 7c 1f 	      jsr	VOUTCH	; Print it out
    466  15a5		       c8		      iny		; Point to next character
    467  15a6		       68		      pla		; Restore the value
    468  15a7		       29 20		      and	#%00100000	; Check if it was last char in keyword
    469  15a9		       d0 f2		      bne	PrintKeyFound	; Yes, then goto all done printing
    470  15ab
    471  15ab		       68		      pla		; Restore the x and y values
    472  15ac		       aa		      tax
    473  15ad		       68		      pla
    474  15ae		       a8		      tay
    475  15af
    476  15af				   PrintChkRem
    477  15af		       a9 0a		      lda	#kRem
    478  15b1		       c5 52		      cmp	R0
    479  15b3		       d0 11		      bne	PrintKeyDone
    480  15b5				   PrintKeyRem
    481  15b5		       a5 59		      lda	dpl	; if it is a rem then we must print the entire line
    482  15b7		       85 5e		      sta	PrtFrom
    483  15b9		       a5 5a		      lda	dpl+1
    484  15bb		       85 5f		      sta	PrtFrom+1
    485  15bd		       a9 00		      lda	#0
    486  15bf		       8d 2d 2f 	      sta	PrtTerm
    487  15c2		       20 6c 14 	      jsr	PrtLoop
    488  15c5		       88		      dey		; point back to the terminating null value
    489  15c6				   PrintKeyDone
    490  15c6		       4c 1f 15 	      jmp	PrintProgNext
    491  15c9							;==================================================================================================================
    492  15c9							;Print Variable, number or operator
    493  15c9				   PrintProgOperator
    494  15c9		       b1 59		      lda	(dpl),y
    495  15cb		       c8		      iny
    496  15cc		       ca		      dex
    497  15cd		       8e c5 10 	      stx	printStorage+2
    498  15d0		       a2 00		      ldx	#0
    499  15d2				   PrintOprLoop
    500  15d2		       dd a8 0e 	      cmp	OperValues,x
    501  15d5		       f0 03		      beq	PrintOprFound
    502  15d7		       e8		      inx
    503  15d8		       d0 f8		      bne	PrintOprLoop
    504  15da				   PrintOprFound
    505  15da		       8a		      txa
    506  15db		       0a		      asl
    507  15dc		       aa		      tax
    508  15dd		       bd 7a 0e 	      lda	Operators,x
    509  15e0		       20 7c 1f 	      jsr	VOUTCH
    510  15e3		       e8		      inx
    511  15e4		       bd 7a 0e 	      lda	Operators,x
    512  15e7		       f0 03		      beq	PrintOprDone
    513  15e9		       20 7c 1f 	      jsr	VOUTCH
    514  15ec				   PrintOprDone
    515  15ec		       ae c5 10 	      ldx	printStorage+2
    516  15ef		       4c 1f 15 	      jmp	PrintProgNext
    517  15f2
    518  15f2							;=================================================================================================================
    519  15f2							;KeywordsMax	    equ     128 		   ; Allow to be range	1 to 127  key words, high order bit must be 0 for it to be a key word
    520  15f2							;tVa		    equ     128 		   ; Variable A = 1, .... Z = 26   ^ = 27
    521  15f2							;tVb		    equ     130 		   ; Variables 128 - 157  $80-$9D
    522  15f2							;tVhat 	    equ     155 		   ; Variable ^
    523  15f2							;tVhash	    equ     156 		   ; Variable #
    524  15f2							;tVat		    equ     157 		   ; Variable @ = 0
    525  15f2				   PrintProgVariable
    526  15f2		       b1 59		      lda	(dpl),y
    527  15f4		       c8		      iny
    528  15f5		       ca		      dex
    529  15f6		       c9 9b		      cmp	#tVhat
    530  15f8		       d0 04		      bne	PrintProgChkHash
    531  15fa		       a9 5e		      lda	#'^
    532  15fc		       d0 15		      bne	PrintTheVar
    533  15fe				   PrintProgChkHash
    534  15fe		       c9 9c		      cmp	#tVhash
    535  1600		       d0 04		      bne	PrintProgChkAt
    536  1602		       a9 23		      lda	#'#
    537  1604		       d0 0d		      bne	PrintTheVar
    538  1606				   PrintProgChkAt
    539  1606		       c9 9d		      cmp	#tVat
    540  1608		       d0 04		      bne	PrintProgVarLetter
    541  160a		       a9 40		      lda	#'@
    542  160c		       d0 05		      bne	PrintTheVar
    543  160e				   PrintProgVarLetter
    544  160e		       29 7f		      and	#%01111111
    545  1610		       18		      clc
    546  1611		       69 41		      adc	#'A
    547  1613				   PrintTheVar
    548  1613		       20 7c 1f 	      jsr	VOUTCH
    549  1616		       4c 1f 15 	      jmp	PrintProgNext
    550  1619
    551  1619
    552  1619							;==================================================================================================
    553  1619							; Size of print functions
    554  1619		       02 c3	   PrintFunctionsSize equ	* - PrintDecimal	; should use label of first fuction in file
------- FILE mytb.asm
------- FILE mem.asm LEVEL 2 PASS 6
      0  1619					      include	"mem.asm"
      1  1619							;===================================================================
      2  1619							;This file contains the memory allocation and free functions
      3  1619							;in herant in this is the management of free memory in the system
      4  1619							; the interface to these functions
      5  1619							; a,x returns or provides the low hi bytes of the managed addresses
      6  1619							; This uses the programend, to memory end as the area to manage
      7  1619							;===================================================================
      8  1619					      Seg	Code
      9  1619							;=====================================================
     10  1619							;Pointers for memory Management
     11  1619							;Allocated block are not chained but can be followed for all memory by the associated length
     12  1619							; Mem block format is
     13  1619							;	 0-1   pointer to next block for free blocks
     14  1619							;	 0-1   for allocated blocks
     15  1619							;	   0   type of block, blob | array bytes, ints ,string | single type byte or integer
     16  1619							;	   1   refrence counter ... lol only up to 256 but it is something
     17  1619							;	 2-3   length constant for exevy type of memory block
     18  1619							; Memory is recombined as it is released
     19  1619							; The memory manager is not interupted durring allocation
     20  1619							; or freeing of memory
     21  1619							; Memory is allocated from the highest memory address towards
     22  1619							; the lowest memory address. meeting the Basic program end.
     23  1619							;====================================================
     24  1619							;MemFreeList		 ds	  2		    ; list of free blocks of memory, points to first block
     25  1619							;MemR0 		 ds	  2		    ; source for copy/move/Init
     26  1619							;MemR1 		 ds	  2		    ; Destination for copy/move
     27  1619							;=====================================================
     28  1619				   MemInit
     29  1619		       a9 3f		      lda	#FreeMemStart&$FF
     30  161b		       8d 35 2f 	      sta	ProgramStart
     31  161e		       8d 37 2f 	      sta	ProgramEnd
     32  1621		       a9 2f		      lda	#FreeMemStart>>8
     33  1623		       8d 36 2f 	      sta	ProgramStart+1
     34  1626		       8d 38 2f 	      sta	ProgramEnd+1
     35  1629
     36  1629		       20 33 16 	      jsr	GetSizes
     37  162c		       20 3e 16 	      jsr	MemFree
     38  162f		       20 56 16 	      jsr	MemUsed
     39  1632				   MemInitEnd
     40  1632		       60		      rts
     41  1633
     42  1633
     43  1633							;
     44  1633							;=====================================================
     45  1633							; This function might go away eventually, but was
     46  1633							; added to provide data for other pieces of code.
     47  1633							; It has some ties to the operating environment that
     48  1633							; will need to be customized for the target system.
     49  1633							;
     50  1633				   GetSizes
     51  1633							;
     52  1633							; Here is machine specific code to get the highest
     53  1633							; memory location that can be used by BASIC.
     54  1633							;
     55  1633				  -	      if	ProgramStart < $2000
     56  1633				  -	      lda	#$ff
     57  1633				  -	      sta	HighMem	;$13ff for KIM-1
     58  1633				  -	      sta	MemFreeList
     59  1633				  -	      lda	#$DE	;#$13
     60  1633				  -	      sta	HighMem+1
     61  1633				  -	      sta	MemFreeList+1
     62  1633					      else
     63  1633		       a9 ff		      lda	#$ff
     64  1635		       8d 39 2f 	      sta	HighMem	;$CFFF otherwise
     65  1638		       a9 cf		      lda	#$cf
     66  163a		       8d 3a 2f 	      sta	HighMem+1
     67  163d					      endif
     68  163d		       60		      rts
     69  163e							;
     70  163e							; This computes the available memory remaining.
     71  163e							;
     72  163e				   MemFree
     73  163e		       38		      sec
     74  163f		       ad 39 2f 	      lda	HighMem
     75  1642		       ed 37 2f 	      sbc	ProgramEnd
     76  1645		       8d 3d 2f 	      sta	FreeMem
     77  1648		       85 52		      sta	R0
     78  164a		       ad 3a 2f 	      lda	HighMem+1
     79  164d		       ed 38 2f 	      sbc	ProgramEnd+1
     80  1650		       8d 3e 2f 	      sta	FreeMem+1
     81  1653		       85 53		      sta	R0+1
     82  1655		       60		      rts
     83  1656							;
     84  1656							; This computes the size of the current user program.
     85  1656							;
     86  1656				   MemUsed
     87  1656		       38		      sec
     88  1657		       ad 37 2f 	      lda	ProgramEnd
     89  165a		       ed 35 2f 	      sbc	ProgramStart
     90  165d		       8d 3b 2f 	      sta	UsedMem
     91  1660		       85 52		      sta	R0
     92  1662		       ad 38 2f 	      lda	ProgramEnd+1
     93  1665		       ed 36 2f 	      sbc	ProgramStart+1
     94  1668		       8d 3c 2f 	      sta	UsedMem+1
     95  166b		       85 53		      sta	R0+1
     96  166d							;
     97  166d		       60		      rts
     98  166e
------- FILE mytb.asm
------- FILE gosub.asm LEVEL 2 PASS 6
      0  166e					      include	"gosub.asm"
      1  166e					      seg	Code
      2  166e
      3  166e							; Gosub and return related functions
      4  166e							;==========================================================
      5  166e							; Push the current math stack frame onto the gosub stack
      6  166e				   iPushMathStack
      7  166e		       98		      tya
      8  166f		       48		      pha
      9  1670		       a4 4d		      ldy	GOSUBSTACKPTR
     10  1672		       a5 4a		      lda	MATHSTACKPTR
     11  1674		       91 4b		      sta	(GOSUBSTACK),y
     12  1676		       a9 00		      lda	#0
     13  1678		       c8		      iny
     14  1679		       91 4b		      sta	(GOSUBSTACK),y
     15  167b		       c8		      iny
     16  167c		       91 4b		      sta	(GOSUBSTACK),y
     17  167e		       c8		      iny
     18  167f		       a9 05		      lda	#GOSUB_STACK_FRAME
     19  1681		       91 4b		      sta	(GOSUBSTACK),y
     20  1683		       c8		      iny
     21  1684		       84 4d		      sty	GOSUBSTACKPTR
     22  1686		       68		      pla
     23  1687		       a8		      tay
     24  1688		       4c c2 02 	      jmp	NextIL
     25  168b							;
     26  168b							;==========================================================
     27  168b							; Increment parameter count. Assume Stack frame is top of stack
     28  168b				   iIncParmCount
     29  168b		       98		      tya
     30  168c		       48		      pha
     31  168d		       a4 4d		      ldy	GOSUBSTACKPTR
     32  168f		       88		      dey
     33  1690		       88		      dey
     34  1691		       88		      dey
     35  1692		       b1 4b		      lda	(GOSUBSTACK),y
     36  1694		       aa		      tax
     37  1695		       e8		      inx
     38  1696		       8a		      txa
     39  1697		       91 4b		      sta	(GOSUBSTACK),y
     40  1699		       68		      pla
     41  169a		       a8		      tay
     42  169b		       4c c2 02 	      jmp	NextIL
     43  169e							;
     44  169e							;==========================================================
     45  169e							;Restore the math stack frame
     46  169e		       20 a4 16    iPopMathStack jsr	PopMathStackNow
     47  16a1		       4c c2 02 	      jmp	NextIL
     48  16a4
     49  16a4				   PopMathStackNow
     50  16a4		       98		      tya
     51  16a5		       48		      pha
     52  16a6
     53  16a6		       a4 4d		      ldy	GOSUBSTACKPTR
     54  16a8		       88		      dey
     55  16a9		       b1 4b		      lda	(GOSUBSTACK),y
     56  16ab		       c9 05		      cmp	#GOSUB_STACK_FRAME
     57  16ad		       d0 09		      bne	iPopMathStackNoFrame
     58  16af		       88		      dey
     59  16b0		       88		      dey
     60  16b1		       88		      dey
     61  16b2		       b1 4b		      lda	(GOSUBSTACK),y
     62  16b4		       85 4a		      sta	MATHSTACKPTR
     63  16b6		       84 4d		      sty	GOSUBSTACKPTR
     64  16b8
     65  16b8				   iPopMathStackNoFrame
     66  16b8
     67  16b8		       68		      pla
     68  16b9		       a8		      tay
     69  16ba		       60		      rts
     70  16bb
     71  16bb
     72  16bb							;==========================================================
     73  16bb							; Push the current math stack information onto the gosub stack
     74  16bb				   iSaveMathStack
     75  16bb		       98		      tya
     76  16bc		       48		      pha
     77  16bd		       a4 4d		      ldy	GOSUBSTACKPTR
     78  16bf		       a5 4a		      lda	MATHSTACKPTR
     79  16c1		       91 4b		      sta	(GOSUBSTACK),y
     80  16c3		       a5 48		      lda	MATHSTACK
     81  16c5		       c8		      iny
     82  16c6
     83  16c6		       91 4b		      sta	(GOSUBSTACK),y
     84  16c8		       c8		      iny
     85  16c9
     86  16c9		       a5 49		      lda	MATHSTACK+1
     87  16cb		       91 4b		      sta	(GOSUBSTACK),y
     88  16cd		       c8		      iny
     89  16ce
     90  16ce		       a9 06		      lda	#GOSUB_STACK_SAVE
     91  16d0		       91 4b		      sta	(GOSUBSTACK),y
     92  16d2		       c8		      iny
     93  16d3
     94  16d3		       84 4d		      sty	GOSUBSTACKPTR
     95  16d5		       68		      pla
     96  16d6		       a8		      tay
     97  16d7		       4c c2 02 	      jmp	NextIL
     98  16da							;
     99  16da							;==========================================================
    100  16da							;Restore the math stack information from the gosub stack
    101  16da				   iRestoreMathStack
    102  16da		       98		      tya
    103  16db		       48		      pha
    104  16dc
    105  16dc		       a5 4a		      lda	MATHSTACKPTR
    106  16de		       85 58		      sta	R2	; save the current offset for whatever task to R2
    107  16e0
    108  16e0		       a4 4d		      ldy	GOSUBSTACKPTR
    109  16e2		       88		      dey
    110  16e3		       b1 4b		      lda	(GOSUBSTACK),y
    111  16e5		       c9 06		      cmp	#GOSUB_STACK_SAVE
    112  16e7		       d0 16		      bne	iPopMathStack_Err
    113  16e9		       88		      dey
    114  16ea		       b1 4b		      lda	(GOSUBSTACK),y
    115  16ec		       85 49		      sta	MATHSTACK+1
    116  16ee		       88		      dey
    117  16ef		       b1 4b		      lda	(GOSUBSTACK),y
    118  16f1		       85 48		      sta	MATHSTACK
    119  16f3		       88		      dey
    120  16f4		       b1 4b		      lda	(GOSUBSTACK),y
    121  16f6		       85 4a		      sta	MATHSTACKPTR
    122  16f8		       84 4d		      sty	GOSUBSTACKPTR
    123  16fa		       68		      pla
    124  16fb		       a8		      tay
    125  16fc		       4c c2 02 	      jmp	NextIL
    126  16ff
    127  16ff				   iPopMathStack_Err
    128  16ff		       a9 00		      lda	#0
    129  1701		       a2 12		      ldx	#ERR_INVALID_STK_FRAME
    130  1703		       4c a7 06 	      jmp	iErr2
    131  1706							;=========================================
    132  1706							; For functions and tasks the variable address of # means
    133  1706							; a passed parameter so #[0] is the first parameter etc
    134  1706							; will try for a better way later
    135  1706
------- FILE mytb.asm
------- FILE tasks.asm LEVEL 2 PASS 6
      0  1706					      include	"tasks.asm"
      1  1706							;=====================================================
      2  1706							; Tiny Basic IL task management
      3  1706							; Data required by task management
      4  1706							; currently each context is about 30 bytes and is swapped
      5  1706							; into and out of page zero on each task switch....
      6  1706							; LOL yes it is slow, but works for this iteration.
      7  1706							;
      8  1706
      9  1706					      Seg	Code
     10  1706							;=====================================================
     11  1706							; Sets the pointers to the math,IL and gosub stacks
     12  1706							; Creates the initial Context for each task slot
     13  1706				   taskSetStacks
     14  1706		       a9 dc		      lda	#mathStack&$FF
     15  1708		       85 48		      sta	MATHSTACK
     16  170a		       a9 26		      lda	#mathStack>>8
     17  170c		       85 49		      sta	MATHSTACK+1
     18  170e
     19  170e		       a9 6c		      lda	#ilStack&$ff
     20  1710		       85 45		      sta	ILSTACK
     21  1712		       a9 28		      lda	#ilStack>>8
     22  1714		       85 46		      sta	ILSTACK+1
     23  1716
     24  1716		       a9 fc		      lda	#gosubStack&$FF
     25  1718		       85 4b		      sta	GOSUBSTACK
     26  171a		       a9 29		      lda	#gosubStack>>8
     27  171c		       85 4c		      sta	GOSUBSTACK+1
     28  171e
     29  171e		       a9 7c		      lda	#variableStack&$FF
     30  1720		       85 41		      sta	VARIABLES
     31  1722		       a9 2c		      lda	#variableStack>>8
     32  1724		       85 42		      sta	VARIABLES+1
     33  1726		       a2 0a		      ldx	#TASKCOUNT
     34  1728		       a0 00		      ldy	#0
     35  172a		       20 c7 19 	      jsr	ContextSave
     36  172d
     37  172d		       c0 fa	   taskSetLoop cpy	#TASKTABLELEN
     38  172f		       b0 3a		      bcs	taskSetDone
     39  1731
     40  1731		       a5 4b		      lda	GOSUBSTACK
     41  1733		       18		      clc
     42  1734		       69 40		      adc	#GOSUBSTACKSIZE*4	; must be less than 256
     43  1736		       85 4b		      sta	GOSUBSTACK
     44  1738		       a5 4c		      lda	GOSUBSTACK+1
     45  173a		       69 00		      adc	#0
     46  173c		       85 4c		      sta	GOSUBSTACK+1
     47  173e
     48  173e		       a5 45		      lda	ILSTACK	; must be less than 256
     49  1740		       18		      clc
     50  1741		       69 28		      adc	#ILSTACKSIZE*2
     51  1743		       85 45		      sta	ILSTACK
     52  1745		       a5 46		      lda	ILSTACK+1
     53  1747		       69 00		      adc	#0
     54  1749		       85 46		      sta	ILSTACK+1
     55  174b
     56  174b		       a5 48		      lda	MATHSTACK	; must be less than 256
     57  174d		       18		      clc
     58  174e		       69 28		      adc	#MATHSTACKSIZE*2
     59  1750		       85 48		      sta	MATHSTACK
     60  1752		       a5 49		      lda	MATHSTACK+1
     61  1754		       69 00		      adc	#0
     62  1756		       85 49		      sta	MATHSTACK+1
     63  1758
     64  1758		       a5 41		      lda	VARIABLES	; must be less than 256
     65  175a		       18		      clc
     66  175b		       69 36		      adc	#VARIABLESSIZE*2
     67  175d		       85 41		      sta	VARIABLES
     68  175f		       a5 42		      lda	VARIABLES+1
     69  1761		       69 00		      adc	#0
     70  1763		       85 42		      sta	VARIABLES+1
     71  1765
     72  1765		       20 c7 19 	      jsr	ContextSave
     73  1768		       4c 2d 17 	      jmp	taskSetLoop
     74  176b
     75  176b				   taskSetDone
     76  176b		       a0 00		      ldy	#0	; reload the main loop context
     77  176d		       20 d6 19 	      jsr	ContextLoad
     78  1770		       60		      rts
     79  1771							;
     80  1771							;=====================================================
     81  1771							; In some error cases the math stacks may be left pointing to the wrong stack
     82  1771							; This function will reset those stack addresses but not the actual pointer
     83  1771				   taskResetStacks
     84  1771		       a0 00		      ldy	#0
     85  1773		       20 d6 19 	      jsr	ContextLoad
     86  1776		       4c 06 17 	      jmp	taskSetStacks
     87  1779							;
     88  1779							;=====================================================
     89  1779							; Clear all task entries and task stacks
     90  1779		       98	   taskReset  tya		; Save Y
     91  177a		       48		      pha
     92  177b		       a9 01		      lda	#1
     93  177d		       8d db 26 	      sta	taskCounter	; Set number of active tasks to 1
     94  1780		       ac dc 25 	      ldy	taskPtr	; Set the active task to 0 MAIN
     95  1783		       c0 00		      cpy	#0	; check if we are the main context
     96  1785		       f0 08		      beq	taskResetCont	; if we are just continue
     97  1787
     98  1787		       a0 00		      ldy	#0	; else we need to switch to the main context
     99  1789		       8c dc 25 	      sty	taskPtr
    100  178c		       20 d6 19 	      jsr	ContextLoad	; load the System Task context
    101  178f				   taskResetCont
    102  178f		       a0 19		      ldy	#CONTEXTLEN+1	; Start at the second task +1 account for task control byte
    103  1791
    104  1791				   taskResetLoop
    105  1791		       a9 00		      lda	#TASKINACTIVE
    106  1793		       99 dd 25 	      sta	taskTable,y	; Ensure that the task is made inactive
    107  1796		       18		      clc
    108  1797		       98		      tya
    109  1798		       69 19		      adc	#CONTEXTLEN+1
    110  179a		       a8		      tay
    111  179b		       c0 fa		      cpy	#TASKTABLELEN	; Are we at the end yet
    112  179d		       90 f2		      bcc	taskResetLoop	; Go for more
    113  179f
    114  179f				   taskResetComplete
    115  179f
    116  179f		       68		      pla		; Restore y
    117  17a0		       a8		      tay
    118  17a1		       60		      rts
    119  17a2
    120  17a2							;
    121  17a2							;======================================================
    122  17a2							; iTaskSwitch	 switch to new task if not interrupt and
    123  17a2							;		 count is exceded for task time slice gets here
    124  17a2							;		 when time slice has reached zero
    125  17a2							;
    126  17a2		       98	   iTaskSwitch tya
    127  17a3		       48		      pha
    128  17a4
    129  17a4		       ad d9 26 	      lda	taskResetValue	; Always reset the counter value
    130  17a7		       8d d7 26 	      sta	taskCurrentCycles	; Update the counter with the new value
    131  17aa		       ce d8 26 	      dec	taskCurrentCycles+1	; dec high order byte
    132  17ad		       d0 44		      bne	iTaskSwitchDone	; Exit if not zero
    133  17af
    134  17af		       ad da 26 	      lda	taskResetValue+1
    135  17b2		       8d d8 26 	      sta	taskCurrentCycles+1
    136  17b5
    137  17b5		       ad d9 25 	      lda	IRQPending	; Skip this if we are processing an irq
    138  17b8		       0d 33 2f 	      ora	taskIOPending	; If set then don't switch
    139  17bb		       d0 36		      bne	iTaskSwitchDone	; DO irq Higher priority than the Tasks
    140  17bd
    141  17bd		       ad db 26    iTaskMain  lda	taskCounter	; Number of tasks
    142  17c0		       c9 01		      cmp	#1	; if there is only one task must be main
    143  17c2		       d0 07		      bne	itasknext	; if it some other number continue to next
    144  17c4
    145  17c4		       ac dc 25 	      ldy	taskPtr	; check if we have not just ended some other task
    146  17c7		       d0 02		      bne	itasknext	; 0 = main task if so then do a next anyway
    147  17c9		       f0 28		      beq	iTaskSwitchDone	; Skip this if main is only task
    148  17cb							;
    149  17cb							; Save the current context this is moved from BASIC STMT LEVEL TO IL INSTRUCTION LEVEL
    150  17cb							;
    151  17cb				   itasknext
    152  17cb		       ac dc 25 	      ldy	taskPtr
    153  17ce		       20 c7 19 	      jsr	ContextSave	; Save the current context, y points to next context
    154  17d1				   itaskLoop
    155  17d1		       c0 fa		      cpy	#TASKTABLELEN	; Are we at end of task table
    156  17d3		       90 04		      bcc	iTaskNextChk
    157  17d5
    158  17d5		       a0 00	   iTaskResetTop ldy	#0	; reset to top of taskTable
    159  17d7		       f0 0d		      beq	iTaskLoadEntry	; Go Ahead and just start this As we Can back and it is always active
    160  17d9
    161  17d9				   iTaskNextChk
    162  17d9		       b9 dd 25 	      lda	taskTable,y	; there is always at least one entry in table
    163  17dc		       d0 08		      bne	iTaskLoadEntry	; get next slot if this one empty
    164  17de		       18	   iTaskNext  clc
    165  17df		       98		      tya
    166  17e0		       69 19		      adc	#CONTEXTLEN+1	; Next Table entry
    167  17e2		       a8		      tay
    168  17e3		       4c d1 17 	      jmp	itaskLoop	; Check for busy entry
    169  17e6
    170  17e6		       a9 80	   iTaskLoadEntry lda	#TASKACTIVE
    171  17e8		       59 dd 25 	      eor	taskTable,y	; Check for anything waiting io
    172  17eb		       d0 f1		      bne	iTaskNext
    173  17ed		       20 d6 19 	      jsr	ContextLoad	; load the next context
    174  17f0		       8c dc 25 	      sty	taskPtr	; update the task pointer
    175  17f3
    176  17f3				   iTaskSwitchDone
    177  17f3		       68		      pla
    178  17f4		       a8		      tay
    179  17f5		       60		      rts
    180  17f6							;
    181  17f6							;================================================================
    182  17f6							; Task Set task number to line number to start
    183  17f6							; on entry stack contains, type of line description and  memvector or linenumber
    184  17f6							; Task Table structure:
    185  17f6							;    byte 0	-   Active inactive
    186  17f6							;    byte 1-2	-   Basic code line pointer
    187  17f6							;    byte 3	-   Offset on current line
    188  17f6		       98	   iTaskSet   tya		;preserve Y
    189  17f7		       48		      pha		; push a
    190  17f8		       20 8d 1d 	      jsr	popR1	; Get if compiled or line number expression
    191  17fb		       20 75 1d 	      jsr	popR0	; Get the line number to be saved
    192  17fe
    193  17fe
    194  17fe
    195  17fe		       ac dc 25 	      ldy	taskPtr	; find out where we are
    196  1801		       20 c7 19 	      jsr	ContextSave	; Save the current context
    197  1804
    198  1804							;Find the pointer to the line we need to start at
    199  1804		       a5 54		      lda	R1
    200  1806		       f0 0b		      beq	iTaskLineNum
    201  1808		       a5 52		      lda	R0
    202  180a		       85 4f		      sta	CURPTR
    203  180c		       a5 53		      lda	R0+1
    204  180e		       85 50		      sta	CURPTR+1
    205  1810		       4c 23 18 	      jmp	iTaskCont
    206  1813
    207  1813				   iTaskLineNum
    208  1813		       20 2f 1b 	      jsr	findLine	; Get the offset of the line to start task at
    209  1816		       f0 0b		      beq	iTaskCont
    210  1818
    211  1818		       ac dc 25 	      ldy	taskPtr	; Restore the original Context Error Exit
    212  181b		       20 d6 19 	      jsr	ContextLoad
    213  181e
    214  181e		       68		      pla		; pop a - exit
    215  181f		       a8		      tay
    216  1820		       4c 71 0d 	      jmp	iSetIrqErr	; Bad line number provided
    217  1823
    218  1823				   iTaskCont
    219  1823		       20 99 19 	      jsr	TaskEmpty	; Find an empty slot, y = new slot
    220  1826		       90 49		      bcc	iTaskNoEmpty	; There are no more empty slots
    221  1828
    222  1828		       a9 82		      lda	#TASKRUNPENDING+TASKACTIVE	; Mark as enabled but suspended
    223  182a		       99 dd 25 	      sta	taskTable,y	; new task as active
    224  182d
    225  182d		       a5 4f		      lda	CURPTR
    226  182f		       48		      pha		; push a
    227  1830		       a5 50		      lda	CURPTR+1
    228  1832		       48		      pha		; push a
    229  1833
    230  1833		       20 d6 19 	      jsr	ContextLoad	; load the context of the new task
    231  1836
    232  1836		       68		      pla		; pop a
    233  1837		       85 50		      sta	CURPTR+1
    234  1839		       68		      pla		; pop a
    235  183a		       85 4f		      sta	CURPTR
    236  183c		       a9 03		      lda	#3	; Offset to first instruction
    237  183e		       85 51		      sta	CUROFF
    238  1840
    239  1840		       a9 00		      lda	#0
    240  1842		       85 47		      sta	ILSTACKPTR
    241  1844		       85 4a		      sta	MATHSTACKPTR
    242  1846		       85 4d		      sta	GOSUBSTACKPTR
    243  1848		       a9 40		      lda	#GOSUBSTACKSIZE*4
    244  184a		       85 4e		      sta	MESSAGEPTR
    245  184c
    246  184c		       20 59 09 	      jsr	subVINIT	; Clear the variables
    247  184f
    248  184f		       a9 27		      lda	#STMT&$FF
    249  1851		       85 43		      sta	ILPC
    250  1853		       a9 22		      lda	#STMT>>8	; set ilpc to point to the STATEMENT processor
    251  1855		       85 44		      sta	ILPC+1
    252  1857
    253  1857		       98		      tya		; Save the new context offset to return to user
    254  1858		       48		      pha		; push a
    255  1859
    256  1859		       20 c7 19    itaskSetSave jsr	ContextSave	; save the updated context
    257  185c		       ee db 26 	      inc	taskCounter	; Update the number of Tasks running
    258  185f
    259  185f		       ac dc 25 	      ldy	taskPtr
    260  1862		       20 d6 19 	      jsr	ContextLoad	; restore the original context
    261  1865
    262  1865		       a9 00		      lda	#0	; Set the R0 upper to zero
    263  1867		       85 53		      sta	R0+1
    264  1869		       68		      pla		; Get the task pid we stored				 ; pop a
    265  186a		       85 52		      sta	R0	; Get the table entry value
    266  186c
    267  186c		       68		      pla		; Restore the y register we saved			 ; pop a   - exit
    268  186d		       a8		      tay
    269  186e
    270  186e		       4c 40 07 	      jmp	pushR0nextIl	; Push R0 and continue
    271  1871				   iTaskNoEmpty
    272  1871		       ac dc 25 	      ldy	taskPtr
    273  1874		       20 d6 19 	      jsr	ContextLoad
    274  1877
    275  1877		       68		      pla		; pop a    -- exit
    276  1878		       a8		      tay
    277  1879
    278  1879		       a2 0e		      ldx	#ERR_NO_EMPTY_TASK_SLOT
    279  187b		       a9 00		      lda	#0
    280  187d		       4c a7 06 	      jmp	iErr2
    281  1880							;
    282  1880							;===============================================================
    283  1880							; Run the task whos PID is on the stack, preserve the stack
    284  1880							;
    285  1880				   iTaskEnable
    286  1880		       98		      tya
    287  1881		       48		      pha
    288  1882		       20 8d 1d 	      jsr	popR1
    289  1885		       20 5b 1d 	      jsr	pushR1
    290  1888		       20 cd 1a 	      jsr	ipc_getcontext	; get context pointer into mq
    291  188b		       a0 00		      ldy	#0
    292  188d		       b1 56		      lda	(MQ),y
    293  188f		       49 02		      eor	#TASKRUNPENDING	; Turn off the Suspend flags
    294  1891		       09 80		      ora	#TASKACTIVE
    295  1893		       91 56		      sta	(MQ),y
    296  1895		       68		      pla
    297  1896		       a8		      tay
    298  1897		       4c c2 02 	      jmp	NextIL
    299  189a
    300  189a							;
    301  189a							;===============================================================
    302  189a							; Suspend the task whos PID  is on the stack, preserve the stack
    303  189a							;
    304  189a				   iTaskSuspend
    305  189a		       98		      tya
    306  189b		       48		      pha
    307  189c		       20 8d 1d 	      jsr	popR1
    308  189f		       20 5b 1d 	      jsr	pushR1
    309  18a2		       20 cd 1a 	      jsr	ipc_getcontext	; get context pointer into mq
    310  18a5		       a0 00		      ldy	#0
    311  18a7		       b1 56		      lda	(MQ),y
    312  18a9		       09 02		      ora	#TASKRUNPENDING	; Turn off the Suspend flags
    313  18ab		       09 80		      ora	#TASKACTIVE
    314  18ad		       68		      pla
    315  18ae		       a8		      tay
    316  18af		       4c c2 02 	      jmp	NextIL
    317  18b2
    318  18b2							;================================================================
    319  18b2							; Returns task Status
    320  18b2				   iTaskStat
    321  18b2		       98		      tya
    322  18b3		       48		      pha
    323  18b4		       20 c6 18 	      jsr	iTaskValid	; returns pointer to task entry
    324  18b7		       b9 dd 25 	      lda	taskTable,y
    325  18ba		       f0 05		      beq	iTaskStatExit
    326  18bc		       68		      pla
    327  18bd		       a8		      tay
    328  18be		       4c 2b 0d 	      jmp	iTruth
    329  18c1				   iTaskStatExit
    330  18c1		       68		      pla
    331  18c2		       a8		      tay
    332  18c3		       4c 34 0d 	      jmp	iFalse
    333  18c6
    334  18c6							;
    335  18c6							;================================================================
    336  18c6							; Validate the task number on top of the stack
    337  18c6							; on exit y points to the requested task entry
    338  18c6							;
    339  18c6		       20 75 1d    iTaskValid jsr	popR0	; get result of the multiply
    340  18c9		       a5 53		      lda	R0+1
    341  18cb		       d0 06		      bne	iTaskValidErr	; high byte must be zero
    342  18cd		       a5 52		      lda	R0
    343  18cf		       c9 fa		      cmp	#TASKTABLELEN
    344  18d1		       90 09		      bcc	iTaskIsValid
    345  18d3
    346  18d3		       68	   iTaskValidErr pla		;remove return address
    347  18d4		       68		      pla
    348  18d5		       a2 10		      ldx	#ERR_INVALID_PID
    349  18d7		       a9 00		      lda	#0
    350  18d9		       4c a7 06 	      jmp	iErr2
    351  18dc
    352  18dc		       a8	   iTaskIsValid tay
    353  18dd		       60		      rts
    354  18de							;
    355  18de							;================================================================
    356  18de							; Kill a running task, do nothing if already stopped
    357  18de		       20 c6 18    iTaskKill  jsr	iTaskValid
    358  18e1		       a9 00		      lda	#0
    359  18e3		       99 dd 25 	      sta	taskTable,y	; Fall thru to go to ntask - nexttask
    360  18e6							;
    361  18e6							;================================================================
    362  18e6							;Skip to next task
    363  18e6				   iNTask
    364  18e6		       a9 01		      lda	#1
    365  18e8		       8d d7 26 	      sta	taskCurrentCycles
    366  18eb		       8d d8 26 	      sta	taskCurrentCycles+1
    367  18ee		       4c c2 02 	      jmp	NextIL
    368  18f1							;
    369  18f1							;=======================================================
    370  18f1							; Wait for a task to complete
    371  18f1				   iWTASK
    372  18f1		       20 ea 1a 	      jsr	getILByte
    373  18f4		       8d 31 2f 	      sta	offset
    374  18f7							;
    375  18f7		       20 cd 1c 	      jsr	saveIL	;in case of failure
    376  18fa
    377  18fa		       20 c6 18 	      jsr	iTaskValid	; returns pointer to task entry from stack, y is offset
    378  18fd		       b9 dd 25 	      lda	taskTable,y
    379  1900		       d0 03		      bne	iWTASKWAIT
    380  1902				   iWTASKEXITED
    381  1902		       4c c2 02 	      jmp	NextIL
    382  1905				   iWTASKWAIT
    383  1905		       20 e3 1c 	      jsr	pushR0	; Push R0 back onto the stack
    384  1908		       a9 01		      lda	#1
    385  190a		       8d d7 26 	      sta	taskCurrentCycles	; Give up the cycles
    386  190d		       8d d8 26 	      sta	taskCurrentCycles+1
    387  1910		       20 d8 1c 	      jsr	restoreIL
    388  1913		       4c 8d 0b 	      jmp	tstBranch
    389  1916							;
    390  1916							;=======================================================
    391  1916							; Set task io lock
    392  1916		       ee 33 2f    iStartIO   inc	taskIOPending
    393  1919		       4c c2 02 	      jmp	NextIL
    394  191c							;
    395  191c							;=======================================================
    396  191c							; Release the io lock
    397  191c		       ad 33 2f    iEndIO     lda	taskIOPending
    398  191f		       f0 03		      beq	iEndIOExit
    399  1921		       ce 33 2f 	      dec	taskIOPending
    400  1924		       4c c2 02    iEndIOExit jmp	NextIL
    401  1927							;
    402  1927							;===============================================================
    403  1927							; Return the task PID
    404  1927				   iTASKPID
    405  1927		       a9 00		      lda	#0
    406  1929		       85 53		      sta	R0+1
    407  192b		       ad dc 25 	      lda	taskPtr
    408  192e		       85 52		      sta	R0
    409  1930		       4c 40 07 	      jmp	pushR0nextIl
    410  1933							;
    411  1933							;================================================================
    412  1933							; Terminate a task
    413  1933		       ac dc 25    iETask     ldy	taskPtr
    414  1936		       c0 00		      cpy	#0
    415  1938		       d0 03		      bne	iETaskCont
    416  193a		       4c 34 06 	      jmp	iFIN	; if the main task does a ETASK then stop
    417  193d				   iETaskCont
    418  193d		       a9 00		      lda	#TASKINACTIVE
    419  193f		       99 dd 25 	      sta	taskTable,y	; mark entry as free
    420  1942		       ce db 26 	      dec	taskCounter	; reduce the number of active tasks
    421  1945		       a9 01		      lda	#1
    422  1947		       8d d7 26 	      sta	taskCurrentCycles	; Make it 1 as rtn will dec and check
    423  194a		       8d d8 26 	      sta	taskCurrentCycles+1
    424  194d		       20 b4 19 	      jsr	TaskSetExitCode
    425  1950				   iETaskExit
    426  1950		       4c c2 02 	      jmp	NextIL
    427  1953							;================================================================
    428  1953							; make the current tasks math stack equal another tasks stack
    429  1953							; The task to get is stored on the math stack
    430  1953
    431  1953				   iTaskGetMathStack
    432  1953		       20 9b 1f 	      jsr	CopyStackR1	; Get the top of stack to R1
    433  1956		       20 cd 1a 	      jsr	ipc_getcontext	; MQ now has the context address
    434  1959		       a0 0a		      ldy	#MATHSTACKPTRPOS
    435  195b		       b1 56		      lda	(MQ),y
    436  195d		       85 4a		      sta	MATHSTACKPTR
    437  195f		       a0 09		      ldy	#MATHSTACKPOS
    438  1961		       b1 56		      lda	(MQ),y
    439  1963		       85 48		      sta	MATHSTACK
    440  1965		       c8		      iny
    441  1966		       b1 56		      lda	(MQ),y
    442  1968		       85 49		      sta	MATHSTACK+1
    443  196a		       4c c2 02 	      jmp	NextIL
    444  196d							;==================================================================
    445  196d							; Updates the tasks math stack pointer with contents of R2
    446  196d							; PID is on top of the stack
    447  196d				   iTaskPutMathPtr
    448  196d		       20 9b 1f 	      jsr	CopyStackR1	; Get the top of stack to R1
    449  1970		       20 cd 1a 	      jsr	ipc_getcontext	; MQ now has the context address
    450  1973		       a5 58		      lda	R2
    451  1975		       a0 0a		      ldy	#MATHSTACKPTRPOS
    452  1977		       91 56		      sta	(MQ),y
    453  1979		       4c c2 02 	      jmp	NextIL
    454  197c							;
    455  197c							;================================================================
    456  197c							; Set the time slice for each task
    457  197c				   iSLICE
    458  197c		       20 75 1d 	      jsr	popR0
    459  197f		       a5 52		      lda	R0
    460  1981		       8d d9 26 	      sta	taskResetValue
    461  1984		       a5 53		      lda	R0+1
    462  1986		       8d da 26 	      sta	taskResetValue+1
    463  1989		       d0 0b		      bne	iSliceSet
    464  198b		       ee da 26 	      inc	taskResetValue+1	; must be at least 1 high counter
    465  198e		       a9 01		      lda	#1
    466  1990		       8d d7 26 	      sta	taskCurrentCycles
    467  1993		       8d d8 26 	      sta	taskCurrentCycles+1
    468  1996				   iSliceSet
    469  1996		       4c c2 02 	      jmp	NextIL
    470  1999							;================================================================
    471  1999							; Find an empty slot in the taskTable
    472  1999							; Return the index in y
    473  1999							; on exit   c set if an empty slot is found
    474  1999							;	     c clear if not found
    475  1999							;================================================================
    476  1999							;
    477  1999		       ad db 26    TaskEmpty  lda	taskCounter
    478  199c		       c9 0a		      cmp	#TASKCOUNT
    479  199e		       b0 10		      bcs	TaskNoSlot
    480  19a0		       a0 19		      ldy	#CONTEXTLEN+1	;The first slot is always the main line SKIP
    481  19a2				   TaskLoop
    482  19a2		       b9 dd 25 	      lda	taskTable,y
    483  19a5		       f0 0b		      beq	TaskEmptyFnd
    484  19a7		       98		      tya
    485  19a8		       18		      clc
    486  19a9		       69 19		      adc	#CONTEXTLEN+1
    487  19ab		       a8		      tay
    488  19ac		       c0 fa		      cpy	#TASKTABLELEN
    489  19ae		       90 f2		      bcc	TaskLoop	; Y is never zero
    490  19b0				   TaskNoSlot
    491  19b0		       18		      clc
    492  19b1		       60		      rts
    493  19b2				   TaskEmptyFnd
    494  19b2		       38		      sec
    495  19b3		       60		      rts
    496  19b4							;====================================================
    497  19b4							; Set the task exit code called from the return command
    498  19b4							; on entry stack top hold exit value
    499  19b4				   TaskSetExitCode
    500  19b4		       98		      tya
    501  19b5		       48		      pha
    502  19b6		       20 75 1d 	      jsr	popR0
    503  19b9		       a0 34		      ldy	#TASKEXITCODE
    504  19bb		       a5 52		      lda	R0
    505  19bd		       91 41		      sta	(VARIABLES),y
    506  19bf		       c8		      iny
    507  19c0		       a5 53		      lda	R0+1
    508  19c2		       91 41		      sta	(VARIABLES),y
    509  19c4		       68		      pla
    510  19c5		       98		      tya
    511  19c6		       60		      rts
    512  19c7
    513  19c7							;
    514  19c7							;=====================================================
    515  19c7							; Save Context Store the context to the TASK Table
    516  19c7							; on entry y contains the task table entry to save to
    517  19c7							; on exit y points to next task table entry
    518  19c7							;	   x contains the number of bytes copied
    519  19c7		       a2 00	   ContextSave ldx	#0
    520  19c9		       c8		      iny		;inc past the task flags
    521  19ca		       b5 41	   ContextSvLoop lda	CONTEXT,x
    522  19cc		       99 dd 25 	      sta	taskTable,y
    523  19cf		       c8		      iny
    524  19d0		       e8		      inx
    525  19d1		       e0 18		      cpx	#CONTEXTLEN
    526  19d3		       90 f5		      bcc	ContextSvLoop
    527  19d5		       60		      rts
    528  19d6							;
    529  19d6							; Load Context transfer context from task table to the Current Context
    530  19d6							; on entry y contains the task table entry to transfer
    531  19d6							; on exit y points to the original task table entry
    532  19d6							;	   x contains the number of byts copied
    533  19d6		       98	   ContextLoad tya
    534  19d7		       48		      pha
    535  19d8		       a2 00		      ldx	#0
    536  19da		       c8		      iny		;inc past the task flags
    537  19db		       b9 dd 25    ContextLDLoop lda	taskTable,y
    538  19de		       95 41		      sta	CONTEXT,x
    539  19e0		       c8		      iny
    540  19e1		       e8		      inx
    541  19e2		       e0 18		      cpx	#CONTEXTLEN
    542  19e4		       90 f5		      bcc	ContextLDLoop
    543  19e6		       68		      pla
    544  19e7		       a8		      tay
    545  19e8		       60		      rts
------- FILE mytb.asm
------- FILE ipc.asm LEVEL 2 PASS 6
      0  19e9					      include	"ipc.asm"
      1  19e9							;======================================================
      2  19e9							; Inter process communications.
      3  19e9							; Tasks may write/read integer messages among
      4  19e9							; them selves.
      5  19e9							; This uses each tasks gosub stack as a message queue
      6  19e9							; Gosub calls start at the highest address and the
      7  19e9							; msg queue starts at the highest address.
      8  19e9							;
      9  19e9							;======================================================
     10  19e9							; ipcs   - Send msg to another task or many tasks
     11  19e9							; on entry  math stack contains the  top PID
     12  19e9							;				      2ND Message value
     13  19e9							; on exit   math stack contain top True-good or False-failed
     14  19e9							;
     15  19e9							; it may not be sent if queue is full
     16  19e9							;
     17  19e9							; a = ipcs(<message-expression>,<task PID-expression>)
     18  19e9							;
     19  19e9				   iIPCS
     20  19e9		       98		      tya
     21  19ea		       48		      pha
     22  19eb		       20 52 1a 	      jsr	ipc_enqueue
     23  19ee		       b0 08		      bcs	iIPC_BAD
     24  19f0		       20 8d 1f 	      jsr	pushTrue
     25  19f3		       68		      pla
     26  19f4		       a8		      tay
     27  19f5		       4c c2 02 	      jmp	NextIL
     28  19f8				   iIPC_BAD
     29  19f8		       68		      pla
     30  19f9		       a8		      tay
     31  19fa		       20 97 1f 	      jsr	pushFalse
     32  19fd		       4c c2 02 	      jmp	NextIL
     33  1a00
     34  1a00							;======================================================
     35  1a00							; ipcr   - Recieve msg from task
     36  1a00							; on exit  the message value is returned from message queue
     37  1a00							;	    message -1	is reserved meaning no entry found
     38  1a00							; The provided variable contains the pid of the sending
     39  1a00							; task. This is optional. This always waits for a message
     40  1a00							; before returning.
     41  1a00							;
     42  1a00							; a = ipcr(<variable name>)
     43  1a00							;
     44  1a00				   iIPCR
     45  1a00		       98		      tya
     46  1a01		       48		      pha
     47  1a02		       20 94 1a 	      jsr	ipc_dequeue
     48  1a05		       b0 05		      bcs	iIPCR_Q_Empty
     49  1a07		       68		      pla
     50  1a08		       a8		      tay
     51  1a09		       4c c2 02 	      jmp	NextIL
     52  1a0c				   iIPCR_Q_Empty
     53  1a0c		       68		      pla
     54  1a0d		       a8		      tay
     55  1a0e		       20 8d 1f 	      jsr	pushTrue	; puts -1 on the stack
     56  1a11		       4c c2 02 	      jmp	NextIL
     57  1a14
     58  1a14							;=======================================================
     59  1a14							; ipcc   - Check if message available
     60  1a14							; on exit  Stack contains number of messages
     61  1a14							;
     62  1a14							; a = ipcc()
     63  1a14							;
     64  1a14				   iIPCC
     65  1a14		       98		      tya
     66  1a15		       48		      pha
     67  1a16		       20 3f 1a 	      jsr	ipc_queue_count
     68  1a19		       20 e3 1c 	      jsr	pushR0	; return the count
     69  1a1c		       68		      pla
     70  1a1d		       a8		      tay
     71  1a1e		       4c c2 02 	      jmp	NextIL
     72  1a21
     73  1a21							;=======================================================
     74  1a21							;ipcio    Turns on the tasks wait ips if nothing in queue
     75  1a21				   iIPCIO
     76  1a21		       98		      tya
     77  1a22		       48		      pha
     78  1a23		       20 3f 1a 	      jsr	ipc_queue_count
     79  1a26		       a5 52		      lda	R0
     80  1a28		       d0 10		      bne	iIPCIO_No_Halt
     81  1a2a		       a9 01		      lda	#1
     82  1a2c		       8d d7 26 	      sta	taskCurrentCycles	; force a task switch
     83  1a2f		       a9 01		      lda	#TASKWAITIPC
     84  1a31		       ac dc 25 	      ldy	taskPtr
     85  1a34		       19 dd 25 	      ora	taskTable,y
     86  1a37		       99 dd 25 	      sta	taskTable,y
     87  1a3a
     88  1a3a				   iIPCIO_No_Halt
     89  1a3a		       68		      pla
     90  1a3b		       a8		      tay
     91  1a3c		       4c c2 02 	      jmp	NextIL
     92  1a3f							;======================================================
     93  1a3f							;ipc_queue_count
     94  1a3f				   ipc_queue_count
     95  1a3f		       a5 4e		      lda	MESSAGEPTR
     96  1a41		       18		      clc
     97  1a42		       4a		      lsr		; divide by 4
     98  1a43		       4a		      lsr
     99  1a44		       85 52		      sta	R0	; store into R0
    100  1a46		       a9 10		      lda	#GOSUBSTACKSIZE
    101  1a48		       38		      sec
    102  1a49		       e5 52		      sbc	R0	; Get how many entries on queue
    103  1a4b		       85 52		      sta	R0
    104  1a4d		       a9 00		      lda	#0
    105  1a4f		       85 53		      sta	R0+1
    106  1a51		       60		      rts
    107  1a52							;=======================================================
    108  1a52							; Support functions for messaging
    109  1a52							;
    110  1a52							; Enqueue message -> onto PID's MSG Q
    111  1a52							; on entry top of stack contains the PID
    112  1a52							;	    second contains the Message of the task
    113  1a52							; on exit contains c set if failed
    114  1a52							;		    c cleared if success
    115  1a52							;		    PID's MSG Q PTR points to the message
    116  1a52							;
    117  1a52				   ipc_enqueue
    118  1a52		       20 8d 1d 	      jsr	popR1	; Get the pid
    119  1a55		       20 cd 1a 	      jsr	ipc_getcontext	; Get the PID's context into MQ
    120  1a58
    121  1a58		       a0 0d		      ldy	#GOSUBPTRPOS	; pointer to required information
    122  1a5a		       b1 56		      lda	(MQ),Y	; Get the stk ptr gosub queue
    123  1a5c		       a0 0e		      ldy	#MSGPTRPOS	; Get the offset to the msg q ptr
    124  1a5e		       d1 56		      cmp	(MQ),y	; Test if there is already the max messages on stack
    125  1a60		       b0 30		      bcs	ipc_enq_full	; Exit with queue full message
    126  1a62
    127  1a62
    128  1a62							; Get the PID'S stack address into R0
    129  1a62		       a0 0c		      ldy	#GOSUBSTKPOS
    130  1a64		       b1 56		      lda	(MQ),y
    131  1a66		       85 52		      sta	R0
    132  1a68		       c8		      iny
    133  1a69		       b1 56		      lda	(MQ),y
    134  1a6b		       85 53		      sta	R0+1	; R0 now points to Task gosub/msg stack
    135  1a6d
    136  1a6d							; Set y to point to the msg q entry
    137  1a6d		       a0 0e		      ldy	#MSGPTRPOS	; Get the offset to the msg q ptr
    138  1a6f		       b1 56		      lda	(MQ),y	; Get the index
    139  1a71		       a8		      tay		; Set y to queue offset
    140  1a72
    141  1a72							; enqueue the message
    142  1a72		       88		      dey		; First byte to save to
    143  1a73		       a9 04		      lda	#GOSUB_MSG	; Get the Entry type
    144  1a75		       91 52		      sta	(R0),y	; Set the entry type
    145  1a77
    146  1a77		       88		      dey
    147  1a78		       ad dc 25 	      lda	taskPtr	; Store the PID into queue
    148  1a7b		       91 52		      sta	(R0),y
    149  1a7d		       20 8d 1d 	      jsr	popR1	; Get the actual message value
    150  1a80		       20 db 1a 	      jsr	ipc_pushR1	; Store Message value into queue
    151  1a83
    152  1a83		       98		      tya		; Save the new q ptr
    153  1a84		       a0 0e		      ldy	#MSGPTRPOS
    154  1a86		       91 56		      sta	(MQ),y	; Update the message stack pointer
    155  1a88		       a0 00		      ldy	#0	; points to context root
    156  1a8a		       a9 01		      lda	#TASKWAITIPC	; Turn off the ipc wait flag
    157  1a8c		       51 56		      eor	(MQ),y	; Turn off the bit
    158  1a8e		       91 56		      sta	(MQ),y	; Clear the ipc wait flag
    159  1a90		       18		      clc
    160  1a91		       60		      rts
    161  1a92				   ipc_enq_full
    162  1a92		       38		      sec
    163  1a93		       60		      rts
    164  1a94							;=============================================================
    165  1a94							; De-queue for message stack -> local tasks msg q
    166  1a94							;  on entry  top of math stack contains the Variable to place, or 0 if not to save
    167  1a94							;  message into
    168  1a94							;  on exit   math stack contains value of message
    169  1a94							;				  Variable if provided is pid
    170  1a94				   ipc_dequeue
    171  1a94		       20 a4 1d 	      jsr	popMQ	; Variable address to put PID into
    172  1a97
    173  1a97		       a4 4e		      ldy	MESSAGEPTR
    174  1a99		       c0 38		      cpy	#[[GOSUBSTACKSIZE - 2] * 4]	; see if anything to pop from stack
    175  1a9b		       b0 2e		      bcs	ipc_deq_empty
    176  1a9d		       b1 4b		      lda	(GOSUBSTACK),y	; get the message value
    177  1a9f		       85 52		      sta	R0
    178  1aa1		       c8		      iny
    179  1aa2		       b1 4b		      lda	(GOSUBSTACK),y
    180  1aa4		       85 53		      sta	R0+1
    181  1aa6		       c8		      iny
    182  1aa7		       b1 4b		      lda	(GOSUBSTACK),y	; get the pid value
    183  1aa9		       85 54		      sta	R1
    184  1aab		       c8		      iny
    185  1aac		       b1 4b		      lda	(GOSUBSTACK),y	; Get the type of message
    186  1aae		       c8		      iny
    187  1aaf		       84 4e		      sty	MESSAGEPTR	; Save the message q ptr
    188  1ab1
    189  1ab1		       c9 04		      cmp	#GOSUB_MSG	; Should be a message
    190  1ab3		       d0 16		      bne	ipc_deq_empty
    191  1ab5
    192  1ab5		       20 e3 1c 	      jsr	pushR0	; place value on stack
    193  1ab8
    194  1ab8		       a5 56		      lda	MQ
    195  1aba		       05 57		      ora	MQ+1
    196  1abc		       f0 0b		      beq	ipc_deq_done
    197  1abe		       a5 54		      lda	R1
    198  1ac0		       a0 00		      ldy	#0
    199  1ac2		       91 56		      sta	(MQ),y
    200  1ac4		       c8		      iny
    201  1ac5		       a9 00		      lda	#0
    202  1ac7		       91 56		      sta	(MQ),y
    203  1ac9				   ipc_deq_done
    204  1ac9		       18		      clc
    205  1aca		       60		      rts
    206  1acb
    207  1acb				   ipc_deq_empty
    208  1acb		       38		      sec
    209  1acc		       60		      rts
    210  1acd
    211  1acd							;=============================================
    212  1acd							;  Get the context address into MQ from R1 with
    213  1acd							;  context/index/pid
    214  1acd				   ipc_getcontext
    215  1acd		       18		      clc		; Get pointer to Task context
    216  1ace		       a9 dd		      lda	#taskTable&$FF	; change ptr to address
    217  1ad0		       65 54		      adc	R1
    218  1ad2		       85 56		      sta	MQ
    219  1ad4		       a9 25		      lda	#taskTable>>8
    220  1ad6		       65 55		      adc	R1+1
    221  1ad8		       85 57		      sta	MQ+1	; We now have a pointer into the context
    222  1ada		       60		      rts
    223  1adb							;
    224  1adb							;==============================================
    225  1adb							;Push R1 onto the stack
    226  1adb							;on entry y = next entry
    227  1adb							;R0 points to the stack space
    228  1adb							;on exit y points to next free byte
    229  1adb				   ipc_pushR1
    230  1adb		       88		      dey
    231  1adc		       a5 55		      lda	R1+1	; PID first
    232  1ade		       91 52		      sta	(R0),y
    233  1ae0		       88		      dey
    234  1ae1		       a5 54		      lda	R1
    235  1ae3		       91 52		      sta	(R0),y
    236  1ae5		       60		      rts
    237  1ae6
    238  1ae6
    239  1ae6
    240  1ae6
    241  1ae6
    242  1ae6
    243  1ae6
------- FILE mytb.asm
------- FILE support.asm LEVEL 2 PASS 6
      0  1ae6					      include	"support.asm"
      1  1ae6							;
      2  1ae6							;=====================================================
      3  1ae6							;=====================================================
      4  1ae6							;=====================================================
      5  1ae6							; This marks the start of support functions used by
      6  1ae6							; the IL opcodes.  These are support functions, NOT
      7  1ae6							; the IL code.
      8  1ae6							;=====================================================
      9  1ae6							;GOSUBSTACKSIZE  equ	  16	    ;Depth of gosub nesting
     10  1ae6							;=====================================================
     11  1ae6					      Seg	Code
     12  1ae6							;=====================================================
     13  1ae6							; This gets the next two bytes pointed to by ILPC and
     14  1ae6							; returns them; X contains LSB, A contains MSB.  ILPC
     15  1ae6							; is advanced by two, and Y contains 0 on return.
     16  1ae6
     17  1ae6							;
     18  1ae6		       20 ea 1a    getILWord  jsr	getILByte	;LSB
     19  1ae9		       aa		      tax
     20  1aea							;
     21  1aea							;=====================================================
     22  1aea							; This gets the next byte pointed to by ILPC and
     23  1aea							; returns it in A.  On return, X is unchanged but Y
     24  1aea							; contains 0.
     25  1aea							;
     26  1aea		       a0 00	   getILByte  ldy	#0
     27  1aec		       b1 43		      lda	(ILPC),y	;get byte
     28  1aee		       08		      php		;save status
     29  1aef		       e6 43		      inc	ILPC	;inc LSB
     30  1af1		       d0 02		      bne	getILb2	;branch if no overflow
     31  1af3		       e6 44		      inc	ILPC+1	;inc MSB
     32  1af5		       28	   getILb2    plp		;restore status
     33  1af6		       60		      rts
     34  1af7							;
     35  1af7							;=====================================================
     36  1af7							; Decrement ILPC by one.
     37  1af7							;
     38  1af7		       a5 43	   decIL      lda	ILPC
     39  1af9		       d0 02		      bne	decIL2
     40  1afb		       c6 44		      dec	ILPC+1
     41  1afd		       c6 43	   decIL2     dec	ILPC
     42  1aff		       60		      rts
     43  1b00							;
     44  1b00							;=====================================================
     45  1b00							; Push the ILPC onto the return stack.  Actually, this
     46  1b00							; pushes the address of ILPC+2 since that's the next
     47  1b00							; address to execute.
     48  1b00							;
     49  1b00		       a4 47	   pushILPC   ldy	ILSTACKPTR
     50  1b02		       c0 28		      cpy	#ILSTACKSIZE<<1
     51  1b04		       b0 15		      bcs	pushErr
     52  1b06		       a5 43		      lda	ILPC
     53  1b08		       18		      clc
     54  1b09		       69 02		      adc	#2
     55  1b0b		       91 45		      sta	(ILSTACK),y
     56  1b0d		       08		      php		;save C bit
     57  1b0e		       c8		      iny
     58  1b0f		       a5 44		      lda	ILPC+1
     59  1b11		       28		      plp		;restore C
     60  1b12		       69 00		      adc	#0
     61  1b14		       91 45		      sta	(ILSTACK),y
     62  1b16		       c8		      iny
     63  1b17		       84 47		      sty	ILSTACKPTR
     64  1b19		       18		      clc
     65  1b1a		       60		      rts
     66  1b1b				   pushErr
     67  1b1b		       38		      sec
     68  1b1c		       60		      rts
     69  1b1d							;
     70  1b1d							;=====================================================
     71  1b1d							; Pull the top entry from return stack and put into
     72  1b1d							; ILPC.
     73  1b1d							;
     74  1b1d		       a4 47	   popILPC    ldy	ILSTACKPTR
     75  1b1f		       f0 fa		      beq	pushErr
     76  1b21		       88		      dey
     77  1b22		       b1 45		      lda	(ILSTACK),y
     78  1b24		       85 44		      sta	ILPC+1
     79  1b26		       88		      dey
     80  1b27		       b1 45		      lda	(ILSTACK),y
     81  1b29		       85 43		      sta	ILPC
     82  1b2b		       84 47		      sty	ILSTACKPTR
     83  1b2d		       18		      clc
     84  1b2e		       60		      rts
     85  1b2f							;
     86  1b2f							;=====================================================
     87  1b2f							; This searches for a specific line number that is in
     88  1b2f							; R0.	There are three possible return conditions:
     89  1b2f							; Line numbers are now the third byte, the first byte is now
     90  1b2f							; a pointer to the next line, of course no longer than 255 byte
     91  1b2f							; per line.
     92  1b2f							;
     93  1b2f							; Exact match was found:
     94  1b2f							;    * Z set
     95  1b2f							;    * CURPTR points to two-byte line number for that
     96  1b2f							;	line.
     97  1b2f							;
     98  1b2f							; Next highest line found:
     99  1b2f							;    * Z cleared
    100  1b2f							;    * C set
    101  1b2f							;    * CURPTR points to two-byte line number for that
    102  1b2f							;	line.
    103  1b2f							;
    104  1b2f							; End of program reached:
    105  1b2f							;    * Z cleared
    106  1b2f							;    * C cleared
    107  1b2f							;    * CURPTR points to first free byte at end of
    108  1b2f							;	program.  Ie, it has save value as PROGRAMEND.
    109  1b2f							;
    110  1b2f							; A, X, and Y are all undefined on return.
    111  1b2f							;
    112  1b2f
    113  1b2f				   findLine
    114  1b2f		       ad 35 2f 	      lda	ProgramStart	;Start of program -> CURPTR
    115  1b32		       85 4f		      sta	CURPTR
    116  1b34		       ad 36 2f 	      lda	ProgramStart+1
    117  1b37		       85 50		      sta	CURPTR+1
    118  1b39							;
    119  1b39							; At end of code?
    120  1b39							;
    121  1b39				   iXFER1
    122  1b39		       a5 4f		      lda	CURPTR	; chk CURPTR = END PROGRAM
    123  1b3b		       cd 37 2f 	      cmp	ProgramEnd	; at end of program then stop run
    124  1b3e		       d0 0b		      bne	xfer2	; not end
    125  1b40		       a5 50		      lda	CURPTR+1
    126  1b42		       cd 38 2f 	      cmp	ProgramEnd+1
    127  1b45		       d0 04		      bne	xfer2	;Not at end
    128  1b47							;
    129  1b47							; Line not found and the end of the program was
    130  1b47							; reached.  Return Z and C both clear.
    131  1b47							;
    132  1b47		       a9 01		      lda	#1	;clear Z
    133  1b49		       18		      clc		;clear C
    134  1b4a		       60		      rts
    135  1b4b							;
    136  1b4b							; Check for an exact line number match
    137  1b4b							;
    138  1b4b		       a5 52	   xfer2      lda	R0
    139  1b4d		       a0 01		      ldy	#1	; changed to skip extra length byte
    140  1b4f		       d1 4f		      cmp	(CURPTR),y
    141  1b51		       d0 08		      bne	xfernotit
    142  1b53		       c8		      iny
    143  1b54		       a5 53		      lda	R0+1
    144  1b56		       d1 4f		      cmp	(CURPTR),y
    145  1b58		       d0 01		      bne	xfernotit	; not a matching line number
    146  1b5a							;
    147  1b5a							; This is exactly the line we want.
    148  1b5a							;
    149  1b5a		       60		      rts		;it matches exactly
    150  1b5b							;
    151  1b5b							; See if this line is greater than the one we're
    152  1b5b							; searching for.
    153  1b5b							;
    154  1b5b		       a0 02	   xfernotit  ldy	#2	;Changed from to skip leading length and least significat digit
    155  1b5d		       b1 4f		      lda	(CURPTR),y	;compare MSB first
    156  1b5f		       c5 53		      cmp	R0+1
    157  1b61		       90 0b		      bcc	xfer3
    158  1b63		       d0 07		      bne	xfer4
    159  1b65		       88		      dey
    160  1b66		       b1 4f		      lda	(CURPTR),y	;compare LSB
    161  1b68		       c5 52		      cmp	R0
    162  1b6a		       90 02		      bcc	xfer3
    163  1b6c							;
    164  1b6c							; This line is greater than the one we want, so
    165  1b6c							; return Z clear and C set.
    166  1b6c							;
    167  1b6c		       38	   xfer4      sec		;We found a line number greater
    168  1b6d		       60		      rts		;both conditions set
    169  1b6e							;
    170  1b6e							; Not the line (or droid) we're looking for.  Move to
    171  1b6e							; the next line.
    172  1b6e							;
    173  1b6e		       20 74 1b    xfer3      jsr	FindNextLine
    174  1b71		       4c 39 1b 	      jmp	iXFER1
    175  1b74							;
    176  1b74							;=====================================================
    177  1b74							; This advances CURPTR to the next line.  If there
    178  1b74							; are no more lines, this leaves CURPTR equal to
    179  1b74							; ProgramEnd.	Returns CUROFF set to 3.  This assumes
    180  1b74							; CURPTR is pointing to a valid line on entry.  This
    181  1b74							; pointer points to the two-byte line number.
    182  1b74							; Update this points to the 1 byte line length  ****************
    183  1b74							;
    184  1b74				   FindNextLine
    185  1b74		       a0 03		      ldy	#3	;skip line number and length byte
    186  1b76		       84 51		      sty	CUROFF	;this is the new offset
    187  1b78		       a0 00		      ldy	#0
    188  1b7a		       b1 4f		      lda	(CURPTR),y	;Get the length
    189  1b7c		       18		      clc
    190  1b7d		       65 4f		      adc	CURPTR
    191  1b7f		       85 4f		      sta	CURPTR
    192  1b81		       a5 50		      lda	CURPTR+1
    193  1b83		       69 00		      adc	#0
    194  1b85		       85 50		      sta	CURPTR+1
    195  1b87		       60	   FindNext4  rts
    196  1b88							;
    197  1b88							;=====================================================
    198  1b88							; This compares CURPTR to PROGRAMEND and returns Z set
    199  1b88							; if they are equal, Z clear if not.
    200  1b88							;
    201  1b88		       a5 4f	   AtEnd      lda	CURPTR
    202  1b8a		       cd 37 2f 	      cmp	ProgramEnd
    203  1b8d		       d0 05		      bne	atendexit
    204  1b8f		       a5 50		      lda	CURPTR+1
    205  1b91		       cd 38 2f 	      cmp	ProgramEnd+1
    206  1b94		       60	   atendexit  rts
    207  1b95							;
    208  1b95
    209  1b95							;
    210  1b95							;=====================================================
    211  1b95							; Convert an ASCII string to a number.  On input,
    212  1b95							; (CURPTR),Y points to the first digit.  This gets
    213  1b95							; digit-by-digit until finding a non-number.  Returns
    214  1b95							; Y pointing to the non-digit, and R0 contains the
    215  1b95							; number.  This does NOT check for valid ranges, so
    216  1b95							; a value like "123456789" will produce something,
    217  1b95							; but not what you had expected.
    218  1b95							;
    219  1b95		       a9 00	   getDecimal lda	#0
    220  1b97		       85 52		      sta	R0
    221  1b99		       85 53		      sta	R0+1
    222  1b9b		       85 59		      sta	dpl	;temporary negative flag
    223  1b9d							;
    224  1b9d							; See if it's negative...
    225  1b9d							;
    226  1b9d							;sty	  $0013 	Removed as no idea why here JUSTLOSTINTIME
    227  1b9d		       b1 4f		      lda	(CURPTR),y
    228  1b9f		       c9 2d		      cmp	#'-
    229  1ba1		       d0 02		      bne	getDecLoop
    230  1ba3		       e6 59		      inc	dpl	;it's negative
    231  1ba5							;
    232  1ba5		       b1 4f	   getDecLoop lda	(CURPTR),y
    233  1ba7		       f0 3a		      beq	getDdone	;Added this incase we hit eol JUSTLOSTINTIME
    234  1ba9		       c9 30		      cmp	#'0
    235  1bab		       90 36		      bcc	getDdone
    236  1bad		       c9 3a		      cmp	#'9+1
    237  1baf		       b0 32		      bcs	getDdone
    238  1bb1		       38		      sec
    239  1bb2		       e9 30		      sbc	#'0	;convert to binary
    240  1bb4		       48		      pha
    241  1bb5							;
    242  1bb5							; Now multiply R0 by 10.  Remember that
    243  1bb5							; 2*N + 8*N = 10*N.
    244  1bb5							;
    245  1bb5		       06 52		      asl	R0
    246  1bb7		       26 53		      rol	R0+1	;*2
    247  1bb9		       a5 52		      lda	R0
    248  1bbb		       85 54		      sta	R1
    249  1bbd		       a5 53		      lda	R0+1
    250  1bbf		       85 55		      sta	R1+1
    251  1bc1		       06 52		      asl	R0
    252  1bc3		       26 53		      rol	R0+1	;*4
    253  1bc5		       06 52		      asl	R0
    254  1bc7		       26 53		      rol	R0+1	;*8
    255  1bc9		       18		      clc		;now add the partial sums...
    256  1bca		       a5 52		      lda	R0	;...to get *10
    257  1bcc		       65 54		      adc	R1
    258  1bce		       85 52		      sta	R0
    259  1bd0		       a5 53		      lda	R0+1
    260  1bd2		       65 55		      adc	R1+1
    261  1bd4		       85 53		      sta	R0+1
    262  1bd6							;
    263  1bd6							; Add in the new digit
    264  1bd6							;
    265  1bd6		       68		      pla
    266  1bd7		       18		      clc
    267  1bd8		       65 52		      adc	R0
    268  1bda		       85 52		      sta	R0
    269  1bdc		       90 02		      bcc	getD2
    270  1bde		       e6 53		      inc	R0+1
    271  1be0							;
    272  1be0							; Move to next character
    273  1be0							;
    274  1be0		       c8	   getD2      iny
    275  1be1		       d0 c2		      bne	getDecLoop
    276  1be3							;
    277  1be3							; All done with digits, so now deal with it being
    278  1be3							; negative.  If zero, then don't check for negative
    279  1be3							; flag.  Ie, -0 is stored as 0.
    280  1be3							;
    281  1be3		       a5 52	   getDdone   lda	R0
    282  1be5		       05 53		      ora	R0+1
    283  1be7		       f0 16		      beq	getDone2	;zero
    284  1be9		       a5 59		      lda	dpl
    285  1beb		       f0 12		      beq	getDone2	;positive
    286  1bed							;
    287  1bed							; Invert all the bits, then add one.
    288  1bed							;
    289  1bed		       a5 52		      lda	R0
    290  1bef		       49 ff		      eor	#$ff
    291  1bf1		       85 52		      sta	R0
    292  1bf3		       a5 53		      lda	R0+1
    293  1bf5		       49 ff		      eor	#$ff
    294  1bf7		       85 53		      sta	R0+1
    295  1bf9							;
    296  1bf9		       e6 52		      inc	R0
    297  1bfb		       d0 02		      bne	getDone2
    298  1bfd		       e6 53		      inc	R0+1
    299  1bff				   getDone2
    300  1bff							; removed next few lines as no idea why they are here JUSTLOSTINTIME
    301  1bff							;lda	  R0
    302  1bff							;sta	  $0010
    303  1bff							;lda	  R0+1
    304  1bff							;sta	  $0011
    305  1bff							;lda	  dpl
    306  1bff							;sta	  $012
    307  1bff
    308  1bff		       60		      rts
    309  1c00
    310  1c00							;=====================================================
    311  1c00							; Gets a line of input into LINBUF.
    312  1c00							;
    313  1c00							; On entry:
    314  1c00							;    A contains the prompt character, or 0 if none.
    315  1c00							;    X = 1 Background read
    316  1c00							;    x = 0 Forground read with wait
    317  1c00							;
    318  1c00							; On exit:
    319  1c00							;    CURPTR points to LINBUF
    320  1c00							;    LINBUF contains the line with 0 at the end.
    321  1c00							;    Y has offset to first non-space character
    322  1c00							;    CURROFF has the same as Y.
    323  1c00							;
    324  1c00		       20 4f 1c    GetLine    jsr	ReadPrompt
    325  1c03		       e0 00		      cpx	#0
    326  1c05		       f0 14		      beq	GetLineRetry
    327  1c07		       ae dc 25 	      ldx	taskPtr
    328  1c0a		       bd dd 25 	      lda	taskTable,x
    329  1c0d		       29 40		      and	#TASKWAITIO	;Task Active and waiting for IO
    330  1c0f		       d0 3d		      bne	taskWaitingIO
    331  1c11		       09 40		      ora	#TASKWAITIO	;Mark Task as waiting for IO
    332  1c13		       9d dd 25 	      sta	taskTable,x	;Mark the state for task as waiting io
    333  1c16		       ce 4e 1c 	      dec	taskWaitingIO	;Start polling the input and make task wait
    334  1c19		       f0 33		      beq	taskWaitingIO	;Get out of here and wait for io to complete
    335  1c1b
    336  1c1b							;
    337  1c1b							; Now read a line and wait for the CR
    338  1c1b							;
    339  1c1b				   GetLineRetry
    340  1c1b		       a9 00		      lda	#0	;Wait for input to complete
    341  1c1d		       20 67 1c 	      jsr	ReadLine
    342  1c20
    343  1c20							;
    344  1c20							; Point to the line we just read
    345  1c20							; Set the current pointer to point to the input line
    346  1c20							;
    347  1c20		       a0 00	   ReadComplete ldy	#0
    348  1c22		       84 51		      sty	CUROFF
    349  1c24		       a2 98		      ldx	#LINBUF&$ff
    350  1c26		       86 4f		      stx	CURPTR
    351  1c28		       a2 2e		      ldx	#LINBUF>>8
    352  1c2a		       86 50		      stx	CURPTR+1
    353  1c2c							;
    354  1c2c							; Output a CR/LF
    355  1c2c							;
    356  1c2c		       20 2e 1e 	      jsr	CRLF
    357  1c2f							;
    358  1c2f							; If a blank line, prompt again.
    359  1c2f							;
    360  1c2f		       20 25 1e 	      jsr	SkipSpaces
    361  1c32		       b1 4f		      lda	(CURPTR),y
    362  1c34		       d0 10		      bne	GetLineDone	;We have data then exit
    363  1c36		       20 52 1c 	      jsr	ReadPromptRetry
    364  1c39		       ae dc 25 	      ldx	taskPtr	;if this task is waiting for IO
    365  1c3c		       bd dd 25 	      lda	taskTable,x	;then get out, wait for line to
    366  1c3f		       29 40		      and	#TASKWAITIO	;Complete again
    367  1c41		       d0 0b		      bne	taskWaitingIO
    368  1c43		       4c 1b 1c 	      jmp	GetLineRetry	;If the IO is wait then jump to start
    369  1c46
    370  1c46				   GetLineDone
    371  1c46		       ae dc 25 	      ldx	taskPtr
    372  1c49		       a9 80		      lda	#TASKACTIVE
    373  1c4b		       9d dd 25 	      sta	taskTable,x	;IO is complete
    374  1c4e
    375  1c4e				   taskWaitingIO
    376  1c4e		       60		      rts
    377  1c4f
    378  1c4f							;
    379  1c4f							;=======================================================================
    380  1c4f							; Display the prompt character
    381  1c4f							; On entry
    382  1c4f							;	    A contains the prompt character
    383  1c4f							; On exit
    384  1c4f							;	    The readbuffer index is reset to 0
    385  1c4f							;
    386  1c4f		       8d 1f 2f    ReadPrompt sta	promptChar
    387  1c52
    388  1c52							;
    389  1c52							; Prompt
    390  1c52							;
    391  1c52
    392  1c52		       ad 1f 2f    ReadPromptRetry lda	promptChar
    393  1c55		       09 00		      ora	#0	;any prompt?
    394  1c57		       f0 08		      beq	getlinenp
    395  1c59		       20 7c 1f 	      jsr	VOUTCH
    396  1c5c		       a9 20		      lda	#$20
    397  1c5e		       20 7c 1f 	      jsr	VOUTCH	;Space after prompt
    398  1c61							;
    399  1c61		       a2 00	   getlinenp  ldx	#0	;offset into LINBUF
    400  1c63		       8e 1c 2f 	      stx	getlinx
    401  1c66		       60		      rts
    402  1c67							;
    403  1c67							;===============================================================
    404  1c67							; This fuction is the driver for the line input
    405  1c67							; on call if a = 0 then it waits for all input
    406  1c67							;	      a = 1 then nowait for input
    407  1c67							; On exit
    408  1c67							;		       c clear if not complete line
    409  1c67							;		       c set if it was a complete line
    410  1c67
    411  1c67				   ReadLine
    412  1c67		       8d 1e 2f 	      sta	inputNoWait
    413  1c6a		       c9 00		      cmp	#0
    414  1c6c		       f0 05		      beq	getline1
    415  1c6e		       20 0f f0 	      jsr	ISCHAR	; if there is no character just get out
    416  1c71		       f0 2b		      beq	GetLineNoWait
    417  1c73		       20 7f 1f    getline1   jsr	VGETCH
    418  1c76					      if	CTMON65
    419  1c76		       48		      pha
    420  1c77		       20 7c 1f 	      jsr	VOUTCH	;echo echo echo
    421  1c7a		       68		      pla
    422  1c7b					      endif
    423  1c7b		       c9 0d		      cmp	#CR
    424  1c7d		       f0 15		      beq	getlind	;end of line
    425  1c7f		       c9 08		      cmp	#BS	;backspace?
    426  1c81		       f0 1d		      beq	getlinebs
    427  1c83		       ae 1c 2f 	      ldx	getlinx
    428  1c86		       9d 98 2e 	      sta	LINBUF,x
    429  1c89		       e8		      inx
    430  1c8a		       8e 1c 2f 	      stx	getlinx
    431  1c8d		       ad 1e 2f 	      lda	inputNoWait
    432  1c90		       f0 e1		      beq	getline1
    433  1c92		       d0 0a		      bne	GetLineNoWait
    434  1c94							;
    435  1c94							; CR was hit
    436  1c94							;
    437  1c94		       a9 00	   getlind    lda	#0	; set the end pf buffer
    438  1c96		       ae 1c 2f 	      ldx	getlinx
    439  1c99		       9d 98 2e 	      sta	LINBUF,x
    440  1c9c
    441  1c9c		       38		      sec		; Carry set then cr received
    442  1c9d		       60		      rts
    443  1c9e
    444  1c9e				   GetLineNoWait
    445  1c9e		       18		      clc		; Carry clear no end of line
    446  1c9f		       60		      rts
    447  1ca0							;
    448  1ca0							; Backspace was hit
    449  1ca0							;
    450  1ca0		       ae 1c 2f    getlinebs  ldx	getlinx
    451  1ca3		       f0 0e		      beq	getlineEOL	;at start of line
    452  1ca5		       ca		      dex
    453  1ca6		       8e 1c 2f 	      stx	getlinx
    454  1ca9		       20 25 14    getlinepbs jsr	puts
      0  1cac					      db	27,"[K",0
      1  1cac		       1b 5b 4b 00	      .byte.b	27,"[K",0
    456  1cb0		       4c 73 1c 	      jmp	getline1
    457  1cb3		       a9 20	   getlineEOL lda	#SPACE
    458  1cb5		       20 7c 1f 	      jsr	VOUTCH
    459  1cb8		       d0 ef		      bne	getlinepbs
    460  1cba							;
    461  1cba							;=====================================================
    462  1cba							; Count the length of the line currently in LINBUF
    463  1cba							; starting at offset Y.  Returns the length in X.  The
    464  1cba							; starting offset in Y should point past the ASCII
    465  1cba							; line number.  Also counts the trailing NULL and two
    466  1cba							; extra bytes for where the line number will be.
    467  1cba							; Update must now include leading length byte not the null at end ****************
    468  1cba							;
    469  1cba				   getLineLength
    470  1cba		       a2 00		      ldx	#0	;size
    471  1cbc		       b9 98 2e    getLineL2  lda	LINBUF,y
    472  1cbf		       f0 04		      beq	getLineL3
    473  1cc1		       c8		      iny
    474  1cc2		       e8		      inx
    475  1cc3		       d0 f7		      bne	getLineL2
    476  1cc5		       e8	   getLineL3  inx		;count null at end
    477  1cc6		       e8		      inx		;line number LSB
    478  1cc7		       e8		      inx		;MSB
    479  1cc8		       e8		      inx		;change: count new leading line length
    480  1cc9		       8e 32 2f 	      stx	lineLength
    481  1ccc		       60		      rts
    482  1ccd							;
    483  1ccd							;=====================================================
    484  1ccd							; Count the length of the line pointed to by CURPTR.
    485  1ccd							; This also counts the line number and the terminating
    486  1ccd							; null.  Ie, this string returns 8:
    487  1ccd							;
    488  1ccd							; <lineLow><lineHi>Hello<null>
    489  1ccd							;
    490  1ccd							; Another way of looking at it: add the return value
    491  1ccd							; to the CURPTR and it'll point to the next line's
    492  1ccd							; line number.  Returns the value in Y.
    493  1ccd							; Update to ject get the leading byte length ********************
    494  1ccd							;
    495  1ccd							;getCURPTRLength
    496  1ccd							;		ldy	CURPTR
    497  1ccd							;		ldy	#3	;change: skip line number and leading length byte
    498  1ccd							;getCLineL2	lda	(CURPTR),y
    499  1ccd							;		beq	getCLineL3
    500  1ccd							;		iny
    501  1ccd							;		bne	getCLineL2
    502  1ccd							;getCLineL3	iny		;count null at end
    503  1ccd							;		rts
    504  1ccd
    505  1ccd							;
    506  1ccd							;=====================================================
    507  1ccd							; This saves ILPC.  This saves to a single save area,
    508  1ccd							; so it can't be called more than once.
    509  1ccd							;
    510  1ccd		       a5 43	   saveIL     lda	ILPC
    511  1ccf		       8d 2e 2f 	      sta	tempIL
    512  1cd2		       a5 44		      lda	ILPC+1
    513  1cd4		       8d 2f 2f 	      sta	tempIL+1
    514  1cd7		       60		      rts
    515  1cd8							;
    516  1cd8							;=====================================================
    517  1cd8							; This restores ILPC.
    518  1cd8							;
    519  1cd8		       ad 2e 2f    restoreIL  lda	tempIL
    520  1cdb		       85 43		      sta	ILPC
    521  1cdd		       ad 2f 2f 	      lda	tempIL+1
    522  1ce0		       85 44		      sta	ILPC+1
    523  1ce2		       60		      rts
    524  1ce3							;
    525  1ce3							;=====================================================
    526  1ce3							; This pushes R0 onto the stack.
    527  1ce3							;
    528  1ce3		       8c 25 2f    pushR0     sty	rtemp1
    529  1ce6		       a4 4a		      ldy	MATHSTACKPTR
    530  1ce8		       c0 28		      cpy	#MATHSTACKSIZE<<1
    531  1cea		       b0 38		      bcs	pusherr
    532  1cec		       a5 52		      lda	R0
    533  1cee		       91 48		      sta	(MATHSTACK),y
    534  1cf0		       c8		      iny
    535  1cf1		       a5 53		      lda	R0+1
    536  1cf3		       91 48		      sta	(MATHSTACK),y
    537  1cf5		       c8		      iny
    538  1cf6		       84 4a		      sty	MATHSTACKPTR
    539  1cf8		       ac 25 2f 	      ldy	rtemp1
    540  1cfb		       18		      clc
    541  1cfc		       60		      rts
    542  1cfd
    543  1cfd							;=====================================================
    544  1cfd							; This pushes curptr basic current line onto the call stack.
    545  1cfd							; and CUROFF. Also marks entry type as 1 = GOSUB
    546  1cfd
    547  1cfd				   pushLN
    548  1cfd		       8d 26 2f 	      STA	rtemp1+1	; Store type of push being done
    549  1d00		       8c 25 2f 	      sty	rtemp1
    550  1d03		       a5 4e		      lda	MESSAGEPTR	; stack and msg Q grow together see if they cross!
    551  1d05		       c5 4d		      cmp	GOSUBSTACKPTR
    552  1d07		       90 1b		      bcc	pusherr	; No error
    553  1d09		       a4 4d		      ldy	GOSUBSTACKPTR	; Get the Go Stack Pointer
    554  1d0b		       a2 00		      ldx	#0	; Start of bytes to copy
    555  1d0d				   pushLoop
    556  1d0d		       b5 4f		      lda	CURPTR,x	; Get the current pointer Start address
    557  1d0f		       91 4b		      sta	(GOSUBSTACK),y	; put it onto the stack
    558  1d11		       c8		      iny		; Next destination
    559  1d12		       e8		      inx		; Next Source byte
    560  1d13		       e0 03		      cpx	#3	; 4 bytes per entry on the stack
    561  1d15		       d0 f6		      bne	pushLoop	; Jump if not done for next byte
    562  1d17
    563  1d17		       ad 26 2f    pushDone   lda	rtemp1+1	; Type of stack entry
    564  1d1a		       91 4b		      sta	(GOSUBSTACK),y	; Store Type of stack entry
    565  1d1c		       c8		      iny		; Next entry
    566  1d1d
    567  1d1d		       84 4d		      sty	GOSUBSTACKPTR	; Save the new stack pointer
    568  1d1f		       ac 25 2f 	      ldy	rtemp1
    569  1d22		       18		      clc
    570  1d23		       60		      rts
    571  1d24				   pusherr
    572  1d24		       38		      sec
    573  1d25		       60		      rts
    574  1d26							;=====================================================
    575  1d26							; This pops Top Off gosub call Stack and
    576  1d26							; places it in CURPTR/CUROFF.
    577  1d26							; This checks if the type = 1 GOSUB
    578  1d26							; if not it removes what ever is on the stack
    579  1d26							; until it finds the next return. Allowing
    580  1d26							; a return from within a for/next
    581  1d26							; on exit a contains the type of return from, gosub_rtn, gosub_rtn_value....
    582  1d26		       8c 25 2f    popLN      sty	rtemp1
    583  1d29		       a4 4d		      ldy	GOSUBSTACKPTR	; Get the Gosub/for stack pointer
    584  1d2b		       a2 03		      ldx	#3	; each stack entry is 3 bytes
    585  1d2d
    586  1d2d				   popContinue
    587  1d2d		       c0 04		      cpy	#4	; if less than 4 on stack then error
    588  1d2f		       90 22		      bcc	poperr	; Process an error
    589  1d31
    590  1d31		       88		      dey		; Position to read entry type
    591  1d32		       b1 4b		      lda	(GOSUBSTACK),y	; get the stack entry type
    592  1d34		       8d 26 2f 	      sta	rtemp1+1	; Save to be returned
    593  1d37		       c9 01		      cmp	#GOSUB_RTN	; Type is a gosub entry
    594  1d39		       f0 04		      beq	popLoop	; Restore the line
    595  1d3b		       c9 81		      cmp	#GOSUB_RTN_VALUE	; Also restore the line
    596  1d3d		       d0 16		      bne	popSkipEntry	; No then just skip this
    597  1d3f
    598  1d3f				   popLoop
    599  1d3f		       88		      dey
    600  1d40		       ca		      dex
    601  1d41		       b1 4b		      lda	(GOSUBSTACK),y
    602  1d43		       95 4f		      sta	CURPTR,x
    603  1d45		       e0 00		      cpx	#0
    604  1d47		       d0 f6		      bne	popLoop	; Loop until all moved
    605  1d49
    606  1d49
    607  1d49		       84 4d	   PopDone    sty	GOSUBSTACKPTR
    608  1d4b		       ac 25 2f 	      ldy	rtemp1
    609  1d4e		       ad 26 2f 	      lda	rtemp1+1	; get the type of return
    610  1d51		       18		      clc
    611  1d52		       60		      rts
    612  1d53
    613  1d53		       38	   poperr     sec
    614  1d54		       60		      rts
    615  1d55
    616  1d55		       88	   popSkipEntry dey
    617  1d56		       88		      dey
    618  1d57		       88		      dey
    619  1d58		       4c 2d 1d 	      jmp	popContinue
    620  1d5b
    621  1d5b							;
    622  1d5b							;=====================================================
    623  1d5b							; This pushes R1 onto the stack
    624  1d5b							;
    625  1d5b		       8c 25 2f    pushR1     sty	rtemp1
    626  1d5e		       a4 4a		      ldy	MATHSTACKPTR
    627  1d60		       c0 28		      cpy	#MATHSTACKSIZE<<1
    628  1d62		       b0 ef		      bcs	poperr
    629  1d64		       a5 54		      lda	R1
    630  1d66		       91 48		      sta	(MATHSTACK),y
    631  1d68		       c8		      iny
    632  1d69		       a5 55		      lda	R1+1
    633  1d6b		       91 48		      sta	(MATHSTACK),y
    634  1d6d		       c8		      iny
    635  1d6e		       84 4a		      sty	MATHSTACKPTR
    636  1d70		       ac 25 2f 	      ldy	rtemp1
    637  1d73		       18		      clc
    638  1d74		       60		      rts
    639  1d75							;
    640  1d75							;=====================================================
    641  1d75							; This pops Top Of Stack and places it in R0.
    642  1d75							;
    643  1d75		       8c 25 2f    popR0      sty	rtemp1
    644  1d78		       a4 4a		      ldy	MATHSTACKPTR
    645  1d7a		       f0 d7		      beq	poperr
    646  1d7c		       88		      dey
    647  1d7d		       b1 48		      lda	(MATHSTACK),y
    648  1d7f		       85 53		      sta	R0+1
    649  1d81		       88		      dey
    650  1d82		       b1 48		      lda	(MATHSTACK),y
    651  1d84		       85 52		      sta	R0
    652  1d86		       84 4a		      sty	MATHSTACKPTR
    653  1d88		       ac 25 2f 	      ldy	rtemp1
    654  1d8b		       18		      clc
    655  1d8c		       60		      rts
    656  1d8d
    657  1d8d							;
    658  1d8d							;=====================================================
    659  1d8d							; This pops TOS and places it in R1.
    660  1d8d							;
    661  1d8d		       8c 25 2f    popR1      sty	rtemp1
    662  1d90		       a4 4a		      ldy	MATHSTACKPTR
    663  1d92		       f0 bf		      beq	poperr
    664  1d94		       88		      dey
    665  1d95		       b1 48		      lda	(MATHSTACK),y
    666  1d97		       85 55		      sta	R1+1
    667  1d99		       88		      dey
    668  1d9a		       b1 48		      lda	(MATHSTACK),y
    669  1d9c		       85 54		      sta	R1
    670  1d9e		       84 4a		      sty	MATHSTACKPTR
    671  1da0		       ac 25 2f 	      ldy	rtemp1
    672  1da3		       60		      rts
    673  1da4							;
    674  1da4							;=====================================================
    675  1da4							; This pops TOS and places it in MQ.
    676  1da4							;
    677  1da4		       8c 25 2f    popMQ      sty	rtemp1
    678  1da7		       a4 4a		      ldy	MATHSTACKPTR
    679  1da9		       f0 a8		      beq	poperr
    680  1dab		       88		      dey
    681  1dac		       b1 48		      lda	(MATHSTACK),y
    682  1dae		       85 57		      sta	MQ+1
    683  1db0		       88		      dey
    684  1db1		       b1 48		      lda	(MATHSTACK),y
    685  1db3		       85 56		      sta	MQ
    686  1db5		       84 4a		      sty	MATHSTACKPTR
    687  1db7		       ac 25 2f 	      ldy	rtemp1
    688  1dba		       60		      rts
    689  1dbb							;
    690  1dbb							;=====================================================
    691  1dbb							; This assists with multiplication and division by
    692  1dbb							; looking at R0 and R1 and saving a flag as to what
    693  1dbb							; sign the result will be.  Math is always done on
    694  1dbb							; positive numbers, so this converts negative numbers
    695  1dbb							; into positives.  On exit, R0 and R1 are both
    696  1dbb							; positive.  If the signs were different then 'signs'
    697  1dbb							; will be non-zero.
    698  1dbb							;
    699  1dbb		       a9 00	   SaveSigns  lda	#0
    700  1dbd		       8d 24 2f 	      sta	sign	;assume positive
    701  1dc0		       a5 53		      lda	R0+1	;MSB
    702  1dc2		       10 13		      bpl	SaveSigns1
    703  1dc4		       ee 24 2f 	      inc	sign	;it's negative
    704  1dc7		       49 ff		      eor	#$ff	;flip bits
    705  1dc9		       85 53		      sta	R0+1
    706  1dcb		       a5 52		      lda	R0
    707  1dcd		       49 ff		      eor	#$ff
    708  1dcf		       85 52		      sta	R0
    709  1dd1		       e6 52		      inc	R0
    710  1dd3		       d0 02		      bne	SaveSigns1
    711  1dd5		       e6 53		      inc	R0+1
    712  1dd7		       a5 55	   SaveSigns1 lda	R1+1
    713  1dd9		       10 1a		      bpl	SaveSigns2
    714  1ddb		       48		      pha
    715  1ddc		       ad 24 2f 	      lda	sign
    716  1ddf		       49 01		      eor	#1
    717  1de1		       8d 24 2f 	      sta	sign
    718  1de4		       68		      pla
    719  1de5		       49 ff		      eor	#$ff	;flip bits
    720  1de7		       85 55		      sta	R1+1
    721  1de9		       a5 54		      lda	R1
    722  1deb		       49 ff		      eor	#$ff
    723  1ded		       85 54		      sta	R1
    724  1def		       e6 54		      inc	R1
    725  1df1		       d0 02		      bne	SaveSigns2
    726  1df3		       e6 55		      inc	R1+1
    727  1df5		       60	   SaveSigns2 rts
    728  1df6							;
    729  1df6							;=====================================================
    730  1df6							; This looks at the value of 'signs' and will convert
    731  1df6							; both R0 and R1 to negative if set.
    732  1df6							;
    733  1df6				   RestoreSigns
    734  1df6		       ad 24 2f 	      lda	sign
    735  1df9		       f0 28		      beq	restoresigns2
    736  1dfb							;
    737  1dfb		       a5 52		      lda	R0
    738  1dfd		       d0 02		      bne	restoresigns3
    739  1dff		       c6 53		      dec	R0+1
    740  1e01				   restoresigns3
    741  1e01		       c6 52		      dec	R0
    742  1e03		       a5 52		      lda	R0
    743  1e05		       49 ff		      eor	#$ff
    744  1e07		       85 52		      sta	R0
    745  1e09		       a5 53		      lda	R0+1
    746  1e0b		       49 ff		      eor	#$ff
    747  1e0d		       85 53		      sta	R0+1
    748  1e0f							;
    749  1e0f		       a5 54		      lda	R1
    750  1e11		       d0 02		      bne	restoresigns4
    751  1e13		       c6 55		      dec	R1+1
    752  1e15				   restoresigns4
    753  1e15		       c6 54		      dec	R1
    754  1e17		       a5 54		      lda	R1
    755  1e19		       49 ff		      eor	#$ff
    756  1e1b		       85 54		      sta	R1
    757  1e1d		       a5 55		      lda	R1+1
    758  1e1f		       49 ff		      eor	#$ff
    759  1e21		       85 55		      sta	R1+1
    760  1e23							;
    761  1e23				   restoresigns2
    762  1e23		       60		      rts
    763  1e24							;
    764  1e24							;=====================================================
    765  1e24							; Skip over spaces.  Returns Y with the offset to
    766  1e24							; either the last character in the line, or the first
    767  1e24							; non-space character.
    768  1e24							;
    769  1e24
    770  1e24		       c8	   skipsp2    iny
    771  1e25		       b1 4f	   SkipSpaces lda	(CURPTR),y
    772  1e27		       f0 04		      beq	Skip3	;end of line
    773  1e29		       c9 20		      cmp	#SPACE
    774  1e2b		       f0 f7		      beq	skipsp2
    775  1e2d		       60	   Skip3      rts
    776  1e2e							;*********************************************************
    777  1e2e							; Output a CR/LF combination to the console.  Preserves
    778  1e2e							; all registers.
    779  1e2e							;
    780  1e2e		       48	   tbcrlf     pha
    781  1e2f		       a9 0d		      lda	#CR
    782  1e31		       20 7c 1f 	      jsr	VOUTCH
    783  1e34		       a9 0a		      lda	#LF
    784  1e36		       20 7c 1f 	      jsr	VOUTCH
    785  1e39		       68		      pla
    786  1e3a		       60		      rts
    787  1e3b							;
    788  1e3b							;=====================================================
    789  1e3b							; Some logic to print the Line of basic code being executed
    790  1e3b		       24 40	   idbgBasic  bit	ILTrace
    791  1e3d		       50 75		      bvc	dbgBasicNone
    792  1e3f		       98		      tya
    793  1e40		       48		      pha
    794  1e41		       20 b0 1f 	      jsr	SetOutDebug
    795  1e44
    796  1e44		       a5 4f		      lda	CURPTR
    797  1e46		       85 59		      sta	dpl
    798  1e48		       a5 50		      lda	CURPTR+1
    799  1e4a		       85 5a		      sta	dpl+1
    800  1e4c
    801  1e4c		       20 bd 14 	      jsr	PrintProgramLine
    802  1e4f
    803  1e4f		       a5 40		      lda	ILTrace
    804  1e51		       29 01		      and	#$01	; Check if the Basic debug should be interactive
    805  1e53		       f0 5a		      beq	dbgBasicDone
    806  1e55		       20 c7 1f 	      jsr	SetInDebug
    807  1e58		       20 25 14 	      jsr	puts
      0  1e5b					      db	"Press s - Stop",CR,LF,"d - display Vars",CR,LF,"anything else to step",CR,LF," > ",0
      1  1e5b		       50 72 65 73*	      .byte.b	"Press s - Stop",CR,LF,"d - display Vars",CR,LF,"anything else to step",CR,LF," > ",0
    809  1e98				   dbgBasicLoop
    810  1e98		       20 7f 1f 	      jsr	VGETCH
    811  1e9b		       20 2e 1e 	      jsr	CRLF
    812  1e9e		       20 eb 1f 	      jsr	SetInDebugEnd
    813  1ea1
    814  1ea1		       c9 73		      cmp	#'s	; Quit program
    815  1ea3		       f0 12		      beq	dbgBasicStop
    816  1ea5
    817  1ea5		       c9 64		      cmp	#'d	; Display Variables
    818  1ea7		       d0 06		      bne	dbgBasicDone
    819  1ea9
    820  1ea9		       20 80 14 	      jsr	PrintAllVars
    821  1eac		       18		      clc
    822  1ead		       90 e9		      bcc	dbgBasicLoop	; Next char
    823  1eaf
    824  1eaf		       20 de 1f    dbgBasicDone jsr	SetOutDebugEnd
    825  1eb2		       68		      pla
    826  1eb3		       a8		      tay
    827  1eb4		       4c c2 02    dbgBasicNone jmp	NextIL
    828  1eb7
    829  1eb7				   dbgBasicStop
    830  1eb7		       20 de 1f 	      jsr	SetOutDebugEnd
    831  1eba		       68		      pla
    832  1ebb		       a8		      tay
    833  1ebc		       4c 34 06 	      jmp	iFIN
    834  1ebf							;
    835  1ebf							;=====================================================
    836  1ebf							; This is some debug logic which displays the current
    837  1ebf							; value of the ILPC and the line buffer.
    838  1ebf							;
    839  1ebf		       24 40	   dbgLine    bit	ILTrace
    840  1ec1		       30 01		      bmi	dbgPrt
    841  1ec3		       60		      rts
    842  1ec4				   dbgPrt
    843  1ec4		       20 b0 1f 	      jsr	SetOutDebug
    844  1ec7		       20 25 14 	      jsr	puts
      0  1eca					      db	"ILPC: ",0
      1  1eca		       49 4c 50 43*	      .byte.b	"ILPC: ",0
    846  1ed1		       a5 44		      lda	ILPC+1
    847  1ed3		       20 08 14 	      jsr	OUTHEX
    848  1ed6		       a5 43		      lda	ILPC
    849  1ed8		       20 08 14 	      jsr	OUTHEX
    850  1edb		       a9 20		      lda	#SPACE
    851  1edd		       20 7c 1f 	      jsr	VOUTCH
    852  1ee0		       a0 00		      ldy	#0
    853  1ee2		       b1 43		      lda	(ILPC),y
    854  1ee4		       20 08 14 	      jsr	OUTHEX
    855  1ee7							;
    856  1ee7							; Display the CURPTR value and offset
    857  1ee7							;
    858  1ee7		       20 25 14 	      jsr	puts
      0  1eea					      db	", CURPTR: ",0
      1  1eea		       2c 20 43 55*	      .byte.b	", CURPTR: ",0
    860  1ef5		       a5 50		      lda	CURPTR+1
    861  1ef7		       20 08 14 	      jsr	OUTHEX
    862  1efa		       a5 4f		      lda	CURPTR
    863  1efc		       20 08 14 	      jsr	OUTHEX
    864  1eff		       a9 2b		      lda	#'+
    865  1f01		       20 7c 1f 	      jsr	VOUTCH
    866  1f04		       a5 51		      lda	CUROFF
    867  1f06		       20 08 14 	      jsr	OUTHEX
    868  1f09							;
    869  1f09		       20 2e 1e 	      jsr	CRLF
    870  1f0c		       20 de 1f 	      jsr	SetOutDebugEnd
    871  1f0f		       20 42 1f 	      jsr	ILChkRange
    872  1f12		       b0 02		      bcs	dbgLineErr
    873  1f14		       18		      clc
    874  1f15		       60		      rts
    875  1f16
    876  1f16				   dbgLineErr
    877  1f16		       20 b0 1f 	      jsr	SetOutDebug
    878  1f19		       20 25 14 	      jsr	puts
      0  1f1c					      db	"Outside Valid IL Address Range",CR,LF,0
      1  1f1c		       4f 75 74 73*	      .byte.b	"Outside Valid IL Address Range",CR,LF,0
    880  1f3d		       20 de 1f 	      jsr	SetOutDebugEnd
    881  1f40		       38		      sec
    882  1f41		       60		      rts
    883  1f42
    884  1f42		       a5 44	   ILChkRange lda	ILPC+1
    885  1f44		       c9 22		      cmp	#IL>>8
    886  1f46		       90 18		      bcc	ILBadRange
    887  1f48		       d0 06		      bne	ILChkHigh
    888  1f4a
    889  1f4a		       a5 43		      lda	ILPC
    890  1f4c		       c9 19		      cmp	#IL&$ff
    891  1f4e		       90 10		      bcc	ILBadRange
    892  1f50
    893  1f50		       a5 44	   ILChkHigh  lda	ILPC+1
    894  1f52		       c9 25		      cmp	#ILEND>>8
    895  1f54		       90 08		      bcc	ILGoodRange
    896  1f56		       d0 08		      bne	ILBadRange
    897  1f58
    898  1f58		       a5 43		      lda	ILPC
    899  1f5a		       c9 95		      cmp	#ILEND&$ff
    900  1f5c		       b0 02		      bcs	ILBadRange
    901  1f5e
    902  1f5e		       18	   ILGoodRange clc
    903  1f5f		       60		      rts
    904  1f60				   ILBadRange
    905  1f60		       38		      sec
    906  1f61		       60		      rts
    907  1f62
    908  1f62
    909  1f62							;=====================================================
    910  1f62							; Set output vector to the console output function
    911  1f62							;
    912  1f62				   SetOutConsole
    913  1f62		       48		      pha
    914  1f63		       a9 0c		      lda	#OUTCH&$ff
    915  1f65		       8d 29 2f 	      sta	BOutVec
    916  1f68		       a9 f0		      lda	#OUTCH>>8
    917  1f6a		       8d 2a 2f 	      sta	BOutVec+1
    918  1f6d		       68		      pla
    919  1f6e		       60		      rts
    920  1f6f
    921  1f6f				   SetInConsole
    922  1f6f		       48		      pha
    923  1f70		       a9 09		      lda	#GETCH&$ff
    924  1f72		       8d 2b 2f 	      sta	BInVec
    925  1f75		       a9 f0		      lda	#GETCH>>8
    926  1f77		       8d 2c 2f 	      sta	BInVec+1
    927  1f7a		       68		      pla
    928  1f7b		       60		      rts
    929  1f7c
    930  1f7c							;=====================================================
    931  1f7c							; Jump to the output/input function in BOutVec/BInVec
    932  1f7c							;
    933  1f7c		       6c 29 2f    VOUTCH     jmp	(BOutVec)
    934  1f7f		       6c 2b 2f    VGETCH     jmp	(BInVec)
    935  1f82
    936  1f82
    937  1f82							;====================================================
    938  1f82							;Clear the terminal assume it is ansii or vt100
    939  1f82							;
    940  1f82				   iCLEARSCREEN
    941  1f82		       20 25 14 	      jsr	puts
      0  1f85					      db	$1b,'[,'2,'J,0
      1  1f85		       1b 5b 32 4a*	      .byte.b	$1b,'[,'2,'J,0
    943  1f8a		       4c c2 02 	      jmp	NextIL
    944  1f8d
    945  1f8d							;====================================================
    946  1f8d							; Push true and false onto math stack
    947  1f8d				   pushTrue
    948  1f8d		       a9 ff		      lda	#$ff
    949  1f8f		       85 52	   pushTF     sta	R0
    950  1f91		       85 53		      sta	R0+1
    951  1f93		       20 e3 1c 	      jsr	pushR0
    952  1f96		       60		      rts
    953  1f97		       a9 00	   pushFalse  lda	#0
    954  1f99		       f0 f4		      beq	pushTF
    955  1f9b
    956  1f9b							;======================================================
    957  1f9b							; Copy stack top to R1
    958  1f9b				   CopyStackR1
    959  1f9b		       98		      tya
    960  1f9c		       48		      pha
    961  1f9d		       a4 4a		      ldy	MATHSTACKPTR
    962  1f9f		       88		      dey
    963  1fa0		       b1 48		      lda	(MATHSTACK),y
    964  1fa2		       85 55		      sta	R1+1
    965  1fa4		       88		      dey
    966  1fa5		       b1 48		      lda	(MATHSTACK),y
    967  1fa7		       85 54		      sta	R1
    968  1fa9		       68		      pla
    969  1faa		       a8		      tay
    970  1fab		       60		      rts
    971  1fac
    972  1fac
    973  1fac							;====================================================
    974  1fac							;Swap the out debug call for standard calls
    975  1fac		       00 00	   DebugIOSave ds	2
    976  1fae		       00 00	   DebugInSave ds	2
    977  1fb0				   SetOutDebug
    978  1fb0		       ad 29 2f 	      lda	BOutVec
    979  1fb3		       8d ac 1f 	      sta	DebugIOSave
    980  1fb6		       ad 2a 2f 	      lda	BOutVec+1
    981  1fb9		       8d ad 1f 	      sta	DebugIOSave+1
    982  1fbc		       a9 02		      lda	#OUTDEBUG&$ff	; Put the Debug output
    983  1fbe		       8d 29 2f 	      sta	BOutVec
    984  1fc1		       a9 20		      lda	#OUTDEBUG>>8
    985  1fc3		       8d 2a 2f 	      sta	BOutVec+1
    986  1fc6		       60		      rts
    987  1fc7				   SetInDebug
    988  1fc7		       ad 2b 2f 	      lda	BInVec
    989  1fca		       8d ae 1f 	      sta	DebugInSave
    990  1fcd		       ad 2c 2f 	      lda	BInVec+1
    991  1fd0		       8d af 1f 	      sta	DebugInSave+1
    992  1fd3		       a9 06		      lda	#INDEBUG&$ff
    993  1fd5		       8d 2b 2f 	      sta	BInVec
    994  1fd8		       a9 20		      lda	#INDEBUG>>8
    995  1fda		       8d 2c 2f 	      sta	BInVec+1
    996  1fdd		       60		      rts
    997  1fde				   SetOutDebugEnd
    998  1fde		       ad ac 1f 	      lda	DebugIOSave
    999  1fe1		       8d 29 2f 	      sta	BOutVec
   1000  1fe4		       ad ad 1f 	      lda	DebugIOSave+1
   1001  1fe7		       8d 2a 2f 	      sta	BOutVec+1
   1002  1fea		       60		      rts
   1003  1feb				   SetInDebugEnd
   1004  1feb		       ad ae 1f 	      lda	DebugInSave
   1005  1fee		       8d 2b 2f 	      sta	BInVec
   1006  1ff1		       ad ad 1f 	      lda	DebugIOSave+1
   1007  1ff4		       8d 2c 2f 	      sta	BInVec+1
   1008  1ff7		       60		      rts
   1009  1ff8							;
   1010  1ff8							;====================================================
   1011  1ff8							; Output to the debug console
   1012  1ff8							;     x = high address byte
   1013  1ff8							;     y = low address byte
   1014  1ff8							;     a = Terminator for string
   1015  1ff8				   DebugWrite
   1016  1ff8		       20 b0 1f 	      jsr	SetOutDebug
   1017  1ffb		       20 63 14 	      jsr	PrtStr
   1018  1ffe		       20 de 1f 	      jsr	SetOutDebugEnd
   1019  2001		       60		      rts
   1020  2002
   1021  2002				   OUTDEBUG
   1022  2002		       8d		      .byte.b	$8D	; STA
   1023  2003		       01 e0	   DEBUGPORT  .word.w	$E001	;Dont check anything just output the byte
   1024  2005		       60		      RTS
   1025  2006
   1026  2006				   INDEBUG
   1027  2006		       ad		      .byte.b	$AD	; LDA
   1028  2007		       00 e0	   DEBUGPORTSTATUS .word.w	$E000
   1029  2009
   1030  2009		       29 01		      and	#$01
   1031  200b		       f0 f9		      beq	INDEBUG
   1032  200d
   1033  200d		       ad		      .byte.b	$AD	; LDA
   1034  200e		       01 e0	   DEBUGPORTIN .word.w	$E001
   1035  2010		       60		      rts
   1036  2011
   1037  2011							;======================================================================
   1038  2011							;Copy Quoted string to buffer, terminate with 0 byte
   1039  2011							; R0  Source tring points to tString type
   1040  2011							; x is terminator
   1041  2011							; R1 points to destinition location
   1042  2011							; On exit R0 contains length of copy Plus Term and leading bytes
   1043  2011
   1044  2011				   qstrcpy
   1045  2011		       20 e3 1c 	      jsr	pushR0
   1046  2014		       20 61 20 	      jsr	IncR0	; point past the tString
   1047  2017		       20 61 20 	      jsr	IncR0	; Point Past the opening "
   1048  201a		       a2 22		      ldx	#'"	; copy Termination
   1049  201c		       20 36 20 	      jsr	pstrcpy
   1050  201f		       20 61 20 	      jsr	IncR0	; point to "
   1051  2022		       20 61 20 	      jsr	IncR0	; Point to next free byte
   1052  2025		       20 8d 1d 	      jsr	popR1
   1053  2028		       38		      sec
   1054  2029		       a5 52		      lda	R0
   1055  202b		       e5 54		      sbc	R1
   1056  202d		       85 52		      sta	R0
   1057  202f		       a5 53		      lda	R0+1
   1058  2031		       e5 55		      sbc	R1+1
   1059  2033		       85 53		      sta	R0+1
   1060  2035		       60		      rts
   1061  2036
   1062  2036							;=========================================================================
   1063  2036							;Copy string from R0 to R1, terminator in x
   1064  2036							; On exit    R0 contains the length of the copy
   1065  2036				   pstrcpy
   1066  2036		       a0 00		      ldy	#0
   1067  2038		       86 58		      stx	R2
   1068  203a
   1069  203a				   strcpyLoop
   1070  203a		       b1 52		      lda	(R0),y
   1071  203c		       c5 58		      cmp	R2
   1072  203e		       f0 0a		      beq	strcpyDone
   1073  2040		       91 54		      sta	(R1),y
   1074  2042		       20 61 20 	      jsr	IncR0
   1075  2045		       20 4f 20 	      jsr	IncR1
   1076  2048		       90 f0		      bcc	strcpyLoop
   1077  204a				   strcpyDone
   1078  204a		       a9 00		      lda	#0
   1079  204c		       91 54		      sta	(R1),y
   1080  204e
   1081  204e		       60		      rts
   1082  204f
   1083  204f							;=========================================================================
   1084  204f							; on exit c is set on overflow
   1085  204f				   IncR1
   1086  204f		       48		      pha
   1087  2050		       18		      clc
   1088  2051		       a9 01		      lda	#1
   1089  2053		       65 54		      adc	R1
   1090  2055		       85 54		      sta	R1
   1091  2057		       90 06		      bcc	IncR1Done
   1092  2059		       a9 00		      lda	#0
   1093  205b		       65 55		      adc	R1+1
   1094  205d		       85 55		      sta	R1+1
   1095  205f				   IncR1Done
   1096  205f		       68		      pla
   1097  2060		       60		      rts
   1098  2061							;=========================================================================
   1099  2061							; on exit c is set on overflow
   1100  2061				   IncR0
   1101  2061		       48		      pha
   1102  2062		       18		      clc
   1103  2063		       a9 01		      lda	#1
   1104  2065		       65 52		      adc	R0
   1105  2067		       85 52		      sta	R0
   1106  2069		       90 06		      bcc	IncR0Done
   1107  206b		       a9 00		      lda	#0
   1108  206d		       65 53		      adc	R0+1
   1109  206f		       85 53		      sta	R0+1
   1110  2071				   IncR0Done
   1111  2071		       68		      pla
   1112  2072		       60		      rts
   1113  2073
   1114  2073
   1115  2073
   1116  2073
   1117  2073
   1118  2073
   1119  2073
   1120  2073
   1121  2073
   1122  2073
   1123  2073
   1124  2073
   1125  2073
   1126  2073
   1127  2073
   1128  2073
------- FILE mytb.asm
   2390  2073
   2391  2073					      if	DISK_ACCESS
------- FILE storage.asm LEVEL 2 PASS 6
      0  2073					      include	"storage.asm"
      1  2073							;
      2  2073							;=====================================================
      3  2073							;=====================================================
      4  2073							;=====================================================
      5  2073							; This file contains the functions for saving and
      6  2073							; restoring programs from some sort of mass storage
      7  2073							; device.  This particular version is for using the
      8  2073							; Corsham Tech SD Card System.
      9  2073							;=====================================================
     10  2073							;=====================================================
     11  2073							;=====================================================
     12  2073
     13 U2595					      seg.u	TBData
     14 U2595		       00	   diskBufLength ds	1
     15 U2596		       00	   diskBufOffset ds	1
     16 U2597		       00 00 00 00*DiskFileName ds	64
     17 U25d7
     18  2073					      SEG	Code
     19  2073
     20  2073							;
     21  2073							;=====================================================
     22  2073							; Open a file for reading as a program.  The next
     23  2073							; thing on the line should be the filename.
     24  2073							;
     25  2073				   iOPENREAD
     26  2073					      if	XKIM || CTMON65
     27  2073		       20 8d 20 	      jsr	setFileName	;Set the file name to open
     28  2076		       20 36 f0 	      jsr	DiskOpenRead	;attempt to open file
     29  2079		       90 07		      bcc	Ropenok	;branch if opened ok
     30  207b							;
     31  207b							; Open failed
     32  207b							;
     33  207b		       a2 07	   Rdfail     ldx	#ERR_READ_FAIL
     34  207d		       a9 00	   Rdfail2    lda	#0
     35  207f		       4c a7 06 	      jmp	iErr2
     36  2082							;
     37  2082							; Clear counts and offsets so the next read will
     38  2082							; cause the file to be read.
     39  2082							;
     40  2082		       a9 00	   Ropenok    lda	#0
     41  2084		       8d 96 25 	      sta	diskBufOffset
     42  2087		       8d 95 25 	      sta	diskBufLength
     43  208a		       4c c2 02 	      jmp	NextIL
     44  208d					      endif
     45  208d
     46  208d							;===============================================================
     47  208d							; Set file name
     48  208d				   setFileName
     49  208d		       a4 51		      ldy	CUROFF
     50  208f		       b1 4f		      lda	(CURPTR),y
     51  2091		       c9 a0		      cmp	#tString	;Must be a quoted string
     52  2093		       d0 24		      bne	setFileNameNotFound	;Must be a filename
     53  2095
     54  2095		       18		      clc
     55  2096		       98		      tya
     56  2097		       65 4f		      adc	CURPTR
     57  2099		       85 52		      sta	R0	;LSB
     58  209b		       a5 50		      lda	CURPTR+1
     59  209d		       69 00		      adc	#0
     60  209f		       85 53		      sta	R0+1
     61  20a1		       a9 97		      lda	#DiskFileName&$ff
     62  20a3		       85 54		      sta	R1
     63  20a5		       a9 25		      lda	#DiskFileName>>8
     64  20a7		       85 55		      sta	R1+1
     65  20a9		       20 11 20 	      jsr	qstrcpy	; on exit R0 contains the total copy length index accross source not dest
     66  20ac		       a5 52		      lda	R0
     67  20ae		       18		      clc
     68  20af		       65 51		      adc	CUROFF	; add the current offset
     69  20b1		       85 51		      sta	CUROFF	; Update the buffer pointer after complete
     70  20b3
     71  20b3		       a0 97		      ldy	#DiskFileName&$ff
     72  20b5		       a2 25		      ldx	#DiskFileName>>8
     73  20b7		       18		      clc
     74  20b8		       60		      rts
     75  20b9
     76  20b9				   setFileNameNotFound
     77  20b9		       68		      pla
     78  20ba		       68		      pla		; remove the return address from the stack
     79  20bb		       a9 00		      lda	#0
     80  20bd		       a2 09		      ldx	#ERR_NO_FILENAME
     81  20bf		       4c a7 06 	      jmp	iErr2
     82  20c2
     83  20c2							;
     84  20c2							;==============================JUSTLOSTINTIME 08/02/2022========
     85  20c2							;Remove a file from the disk
     86  20c2				   iRMFILE
     87  20c2					      if	XKIM || CTMON65
     88  20c2		       20 8d 20 	      jsr	setFileName
     89  20c5		       20 45 f0 	      jsr	DiskRmFile	;attempt to remove file
     90  20c8		       90 07		      bcc	wrmOk	;branch if removed ok
     91  20ca		       a9 00		      lda	#0
     92  20cc		       a2 0a		      ldx	#ERR_FILE_NOT_FOUND
     93  20ce		       4c a7 06 	      jmp	iErr2
     94  20d1				   wrmOk
     95  20d1		       4c c2 02 	      jmp	NextIL
     96  20d4
     97  20d4					      endif
     98  20d4							;
     99  20d4							;=====================================================
    100  20d4				   iOPENWRITE
    101  20d4					      if	XKIM || CTMON65
    102  20d4		       20 8d 20 	      jsr	setFileName
    103  20d7		       20 39 f0 	      jsr	DiskOpenWrite	;attempt to open file
    104  20da		       90 07		      bcc	Wopenok	;branch if opened ok
    105  20dc							;
    106  20dc							; Open failed
    107  20dc							;
    108  20dc		       a9 00	   Wdfail     lda	#0
    109  20de		       a2 08		      ldx	#ERR_WRITE_FAIL
    110  20e0		       4c a7 06 	      jmp	iErr2
    111  20e3							;
    112  20e3		       4c c2 02    Wopenok    jmp	NextIL
    113  20e6					      endif
    114  20e6							;
    115  20e6							;=====================================================
    116  20e6							; Gets a line of input from the disk file and puts it
    117  20e6							; into LINBUF.
    118  20e6							;
    119  20e6							; On exit:
    120  20e6							;    CURPTR points to LINBUF
    121  20e6							;    LINBUF contains the line with 0 at the end.
    122  20e6							;    Y has offset to first non-space character
    123  20e6							;    CURROFF has the same as Y.
    124  20e6							;
    125  20e6				   iDGETLINE
    126  20e6					      if	XKIM || CTMON65
    127  20e6		       a2 98		      ldx	#LINBUF&$ff
    128  20e8		       86 4f		      stx	CURPTR
    129  20ea		       a2 2e		      ldx	#LINBUF>>8
    130  20ec		       86 50		      stx	CURPTR+1
    131  20ee							;
    132  20ee		       a2 00		      ldx	#0	;offset
    133  20f0		       8e 1c 2f    iDgetLoop  stx	getlinx
    134  20f3		       20 5e 21 	      jsr	getNextFileByte
    135  20f6		       b0 16		      bcs	iGetEOF
    136  20f8		       c9 0d		      cmp	#CR
    137  20fa		       f0 0d		      beq	iGetEOL
    138  20fc		       c9 0a		      cmp	#LF
    139  20fe		       f0 09		      beq	iGetEOL
    140  2100		       ae 1c 2f 	      ldx	getlinx
    141  2103		       9d 98 2e 	      sta	LINBUF,x
    142  2106		       e8		      inx
    143  2107		       d0 e7		      bne	iDgetLoop
    144  2109							;
    145  2109							; Handle end of line.	If the line has nothing, loop
    146  2109							; back and get another line.
    147  2109							;
    148  2109		       ae 1c 2f    iGetEOL    ldx	getlinx	;blank line?
    149  210c		       f0 e2		      beq	iDgetLoop	;yes, ignore it
    150  210e							;
    151  210e							; This can fall through when there is a line, or
    152  210e							; called directly when EOF is encountered.
    153  210e							;
    154  210e		       ae 1c 2f    iGetEOF    ldx	getlinx
    155  2111		       a9 00		      lda	#0
    156  2113		       9d 98 2e 	      sta	LINBUF,x
    157  2116		       a0 00		      ldy	#0
    158  2118		       20 25 1e 	      jsr	SkipSpaces
    159  211b		       20 c6 10 	      jsr	ParseInputLine
    160  211e		       a9 c3		      lda	#TOKENBUFFER&$ff
    161  2120		       85 4f		      sta	CURPTR
    162  2122		       a9 0f		      lda	#TOKENBUFFER>>8
    163  2124		       85 50		      sta	CURPTR+1
    164  2126		       a9 01		      lda	#1
    165  2128		       85 51		      sta	CUROFF
    166  212a		       4c c2 02 	      jmp	NextIL
    167  212d					      endif
    168  212d
    169  212d							;
    170  212d							; THIS IS CALLED TO DISPLAY THE CONTENTS OF THE
    171  212d							; DISK
    172  212d							;
    173  212d				   iDDIR
    174  212d					      if	XKIM || CTMON65
    175  212d		       20 30 f0 	      jsr	DiskDir
    176  2130							;
    177  2130							; Get/Display each entry
    178  2130							;
    179  2130		       a2 25	   DiskDirLoop ldx	#DiskFileName>>8	;pointer to buffer
    180  2132		       a0 97		      ldy	#DiskFileName&$ff
    181  2134		       20 33 f0 	      jsr	DiskDirNext	;get next entry
    182  2137		       b0 16		      bcs	DiskDirEnd	;carry = end of list
    183  2139		       20 25 14 	      jsr	puts
      0  213c					      db	"   ",0
      1  213c		       20 20 20 00	      .byte.b	"   ",0
    185  2140							; Print the line to the console
    186  2140		       a2 25		      ldx	#DiskFileName>>8	;pointer to buffer
    187  2142		       a0 97		      ldy	#DiskFileName&$ff
    188  2144		       a5 00		      lda	0
    189  2146		       20 63 14 	      jsr	PrtStr	;else print name
    190  2149		       20 18 f0 	      jsr	crlf
    191  214c
    192  214c		       4c 30 21 	      jmp	DiskDirLoop	;do next entry
    193  214f
    194  214f		       4c c2 02    DiskDirEnd jmp	NextIL
    195  2152					      endif
    196  2152							;
    197  2152							;=====================================================
    198  2152							; Does a LIST to a Disk file.
    199  2152							;
    200  2152				   iDLIST
    201  2152					      if	XKIM || CTMON65
    202  2152		       20 8d 21 	      jsr	SetOutDisk
    203  2155		       4c 25 08 	      jmp	iLST2
    204  2158					      endif
    205  2158							;
    206  2158							;=====================================================
    207  2158							; Closes any pending disk file.  Okay to call if there
    208  2158							; is no open file.
    209  2158							;
    210  2158				   iDCLOSE
    211  2158					      if	XKIM || CTMON65
    212  2158		       20 42 f0 	      jsr	DiskClose
    213  215b		       4c c2 02 	      jmp	NextIL
    214  215e					      endif
    215  215e							;
    216  215e							;=====================================================
    217  215e							; This gets the next byte from an open disk file.  If
    218  215e							; there are no more bytes left, this returns C set.
    219  215e							; Else, C is clear and A contains the character.
    220  215e							;
    221  215e				   getNextFileByte
    222  215e					      if	XKIM || CTMON65
    223  215e		       ae 96 25 	      ldx	diskBufOffset
    224  2161		       ec 95 25 	      cpx	diskBufLength
    225  2164		       d0 14		      bne	hasdata	;branch if still data
    226  2166							;
    227  2166							; There is no data left in the buffer, so read a
    228  2166							; block from the SD system.
    229  2166							;
    230  2166		       a9 84		      lda	#BUFFER_SIZE
    231  2168		       a2 df		      ldx	#buffer>>8
    232  216a		       a0 0a		      ldy	#buffer&$ff
    233  216c		       20 3c f0 	      jsr	DiskRead
    234  216f		       b0 12		      bcs	getNextEof
    235  2171							;
    236  2171							; A contains the number of bytes actually read.
    237  2171							;
    238  2171		       8d 95 25 	      sta	diskBufLength	;save length
    239  2174		       c9 00		      cmp	#0	;shouldn't happen
    240  2176		       f0 0b		      beq	getNextEof
    241  2178							;
    242  2178		       a2 00		      ldx	#0
    243  217a		       bd 0a df    hasdata    lda	buffer,x
    244  217d		       e8		      inx
    245  217e		       8e 96 25 	      stx	diskBufOffset
    246  2181		       18		      clc
    247  2182		       60		      rts
    248  2183							;
    249  2183		       a9 00	   getNextEof lda	#0
    250  2185		       8d 96 25 	      sta	diskBufOffset
    251  2188		       8d 95 25 	      sta	diskBufLength
    252  218b		       38		      sec
    253  218c		       60		      rts
    254  218d							;
    255  218d							;=====================================================
    256  218d							; Set output vector to the disk output function
    257  218d							;
    258  218d		       a9 98	   SetOutDisk lda	#DOUT&$ff
    259  218f		       8d 29 2f 	      sta	BOutVec
    260  2192		       a9 21		      lda	#DOUT/256
    261  2194		       8d 2a 2f 	      sta	BOutVec+1
    262  2197		       60		      rts
    263  2198							;
    264  2198							;=====================================================
    265  2198
    266  2198		       8e 97 25    DOUT       stx	DiskFileName
    267  219b		       8c 98 25 	      sty	DiskFileName+1
    268  219e		       8d 0a df 	      sta	buffer
    269  21a1		       a9 01		      lda	#1
    270  21a3		       a0 0a		      ldy	#buffer&$ff
    271  21a5		       a2 df		      ldx	#buffer>>8
    272  21a7		       20 3f f0 	      jsr	DiskWrite
    273  21aa		       ae 97 25 	      ldx	DiskFileName
    274  21ad		       ac 98 25 	      ldy	DiskFileName+1
    275  21b0
    276  21b0							;
    277  21b0							; need error checking here
    278  21b0							;
    279  21b0		       60		      rts
    280  21b1					      endif
    281  21b1
    282  21b1
------- FILE mytb.asm
   2393  21b1					      endif
------- FILE IL.inc LEVEL 2 PASS 6
      0  21b1					      include	"IL.inc"
      1  21b1
      2  21b1							;=====================================================
      3  21b1							; IL.inc
      4  21b1							; These are macros for IL instructions
      5  21b1							;
      6  21b1					      mac	dw
      7  21b1					      .word	{0}
      8  21b1					      endm
      9  21b1					      mac	db
     10  21b1					      .byte	{0}
     11  21b1					      endm
     12  21b1					      macro	xinit
     13  21b1					      db	0
     14  21b1					      endm		;reset the il to start clear all
     15  21b1							;
     16  21b1					      macro	done
     17  21b1					      db	1
     18  21b1					      endm		;print an error if not end of line
     19  21b1							;
     20  21b1					      macro	prs
     21  21b1					      db	2
     22  21b1					      endm		;print a quoted string
     23  21b1							;
     24  21b1					      macro	prn
     25  21b1					      db	3
     26  21b1					      endm		;print a number
     27  21b1							;
     28  21b1					      macro	spc
     29  21b1					      db	4
     30  21b1					      endm		;print space til new tabstop
     31  21b1							;
     32  21b1					      macro	nline
     33  21b1					      db	5
     34  21b1					      endm		;print a new line crlf
     35  21b1							;
     36  21b1							; My NXT is a bit different in that it takes one
     37  21b1							; parameter, which is an address.  If the BASIC
     38  21b1							; program is currently running then move to the
     39  21b1							; next line and continue execution.  However, if
     40  21b1							; in direct mode, jump to the specified IL label.
     41  21b1							;
     42  21b1					      macro	nxt
     43  21b1					      db	6
     44  21b1					      dw	{1}	; addr
     45  21b1					      endm		; addr
     46  21b1							;
     47  21b1					      macro	xfer
     48  21b1					      db	7
     49  21b1					      endm
     50  21b1							;
     51  21b1					      macro	sav
     52  21b1					      db	8
     53  21b1					      db	{1}
     54  21b1					      endm
     55  21b1							;
     56  21b1							;  Passed jump if function called, and true false value returned
     57  21b1					      macro	rstr
     58  21b1					      db	9
     59  21b1					      db	({1}-*)-1	;(addr-*)-1
     60  21b1					      db	{2}
     61  21b1					      endm
     62  21b1							;
     63  21b1					      macro	cmpr
     64  21b1					      db	10
     65  21b1					      endm
     66  21b1							;
     67  21b1					      macro	innum
     68  21b1					      db	11
     69  21b1					      endm
     70  21b1							;
     71  21b1					      macro	fin
     72  21b1					      db	12
     73  21b1					      endm
     74  21b1							;
     75  21b1							; ERR is followed by an error number.	The error
     76  21b1							; code is printed along with the line number.
     77  21b1							; Control is passed to the statement set with
     78  21b1							; the ERRGOTO statement.
     79  21b1							;
     80  21b1					      macro	errmsg
     81  21b1					      db	13
     82  21b1					      dw	{1}	;ecode
     83  21b1					      endm		;ecode
     84  21b1							;
     85  21b1					      macro	add
     86  21b1					      db	14
     87  21b1					      endm
     88  21b1							;
     89  21b1					      macro	sub
     90  21b1					      db	15
     91  21b1					      endm
     92  21b1							;
     93  21b1					      macro	neg
     94  21b1					      db	16
     95  21b1					      endm
     96  21b1							;
     97  21b1					      macro	mul
     98  21b1					      db	17
     99  21b1					      endm
    100  21b1							;
    101  21b1					      macro	div
    102  21b1					      db	18
    103  21b1					      endm
    104  21b1							;
    105  21b1					      macro	store
    106  21b1					      db	19
    107  21b1					      endm
    108  21b1							;
    109  21b1					      macro	ind
    110  21b1					      db	20
    111  21b1					      endm
    112  21b1							;
    113  21b1					      macro	lst
    114  21b1					      db	21
    115  21b1					      endm
    116  21b1							;
    117  21b1					      macro	init
    118  21b1					      db	22
    119  21b1					      endm
    120  21b1							;
    121  21b1					      macro	getline
    122  21b1					      db	23
    123  21b1					      endm
    124  21b1							;
    125  21b1					      macro	insert
    126  21b1					      db	24
    127  21b1					      endm
    128  21b1							;
    129  21b1					      macro	rtn
    130  21b1					      db	25
    131  21b1					      endm
    132  21b1							;
    133  21b1					      macro	exit
    134  21b1					      db	26
    135  21b1					      endm
    136  21b1							;
    137  21b1					      macro	lit
    138  21b1					      db	27
    139  21b1					      dw	{1}	;value
    140  21b1					      endm		; value LIT
    141  21b1							;
    142  21b1					      macro	call
    143  21b1					      db	28
    144  21b1					      dw	{1}	;addr
    145  21b1					      endm		;addr
    146  21b1							;
    147  21b1							; IJMP will set the IL PC to the specified value.
    148  21b1							;
    149  21b1					      macro	ijmp
    150  21b1					      db	29
    151  21b1					      dw	{1}	;addr
    152  21b1					      endm		;addr
    153  21b1							;
    154  21b1					      macro	vinit
    155  21b1					      db	30
    156  21b1					      endm
    157  21b1							;
    158  21b1							; ERRGOTO sets the point in the code where the IL
    159  21b1							; interpreter will go after any error.
    160  21b1							;
    161  21b1					      macro	errgoto
    162  21b1					      db	31
    163  21b1					      dw	{1}	;addr
    164  21b1					      endm		;addr
    165  21b1							;
    166  21b1					      macro	tst
    167  21b1					      db	32
    168  21b1					      db	({1}-*)-1	;(addr-*)-1
    169  21b1					      db	{2},0	;string,0
    170  21b1					      endm		;addr,string
    171  21b1							;
    172  21b1					      macro	tstv
    173  21b1					      db	33
    174  21b1					      db	({1}-*)-1	;(addr-*)-1
    175  21b1					      endm		;addr
    176  21b1							;
    177  21b1					      macro	tstl
    178  21b1					      db	34
    179  21b1					      db	({1}-*)-1	;(addr-*)-1
    180  21b1					      endm		;addr
    181  21b1							;
    182  21b1					      macro	tstn
    183  21b1					      db	35
    184  21b1					      db	({1}-*)-1	;(addr-*)-1
    185  21b1					      endm		;addr
    186  21b1							;
    187  21b1							; FREE returns the amount of free RAM on top of
    188  21b1							; the stack.  This is the amount of room the user
    189  21b1							; program has available.
    190  21b1							;
    191  21b1					      macro	free
    192  21b1					      db	36
    193  21b1					      endm
    194  21b1							;
    195  21b1							; RANDOM takes the top item off the stack and
    196  21b1							; replaces it with a random number that is
    197  21b1							; MOD the initial value.  Ie, if the TOS is
    198  21b1							; 42 then RANDOM returns a value from 0 to 41.
    199  21b1							;
    200  21b1					      macro	random
    201  21b1					      db	37
    202  21b1					      endm
    203  21b1							;
    204  21b1							; ABS will replace the top of stack with the
    205  21b1							; absolute value.
    206  21b1							;
    207  21b1					      macro	abs
    208  21b1					      db	38
    209  21b1					      endm
    210  21b1							;
    211  21b1							; OPENREAD opens a file for reading, as in getting
    212  21b1							; statements from it.
    213  21b1							;
    214  21b1					      macro	openread
    215  21b1					      db	39
    216  21b1					      endm
    217  21b1							;
    218  21b1							; OPENWRITE opens a file for writing, as in saving
    219  21b1							; the current program to it.
    220  21b1							;
    221  21b1					      macro	openwrite
    222  21b1					      db	40
    223  21b1					      endm
    224  21b1							;
    225  21b1							; DCLOSE closes any open disk file.
    226  21b1							;
    227  21b1					      macro	dclose
    228  21b1					      db	41
    229  21b1					      endm
    230  21b1							;
    231  21b1							; DGETLINE gets one line from the disk file and puts it
    232  21b1							; into LINBUFF.
    233  21b1							;
    234  21b1					      macro	dgetline
    235  21b1					      db	42
    236  21b1					      endm
    237  21b1							;
    238  21b1							; DLIST saves the program to an open disk file.
    239  21b1							;
    240  21b1					      macro	dlist
    241  21b1					      db	43
    242  21b1					      endm
    243  21b1							; DDIR list the current directory
    244  21b1							;
    245  21b1					      macro	ddir
    246  21b1					      db	44
    247  21b1					      endm
    248  21b1
    249  21b1							; RMFILE remove a fle from disk
    250  21b1					      macro	rmfile
    251  21b1					      db	45
    252  21b1					      endm
    253  21b1
    254  21b1							; CLEARSCREEN clear the screen
    255  21b1					      macro	clearscreen
    256  21b1					      db	46
    257  21b1					      endm
    258  21b1							; POKEMEM Poke value into memory
    259  21b1					      macro	pokemem
    260  21b1					      db	47
    261  21b1					      endm
    262  21b1							; PEEKMEM peek at value in memory
    263  21b1					      macro	peekmem
    264  21b1					      db	48
    265  21b1					      endm
    266  21b1							; TSTLET Test if the statement is a let without the keyword let
    267  21b1					      macro	tstlet
    268  21b1					      db	49
    269  21b1					      db	({1}-*)-1	;(addr-*)-1
    270  21b1					      endm		;addr
    271  21b1							; TSTDONE if we reach the end of a statement
    272  21b1					      macro	tstdone
    273  21b1					      db	50
    274  21b1					      db	({1}-*)-1	;(addr-*)-1
    275  21b1					      endm		;addr
    276  21b1							; GETCHAR	get a character from the input line leave it in RO
    277  21b1					      macro	getchar
    278  21b1					      db	51
    279  21b1					      endm
    280  21b1							; PUTCHAR	Put a character to the terminal
    281  21b1					      macro	putchar
    282  21b1					      db	52
    283  21b1					      endm
    284  21b1							; Call		Call a machine function return a to stack
    285  21b1					      macro	callfunc
    286  21b1					      db	53
    287  21b1					      endm
    288  21b1
    289  21b1							; IBRANCH branch if value on stack = 0 false, nextil if value not = zero
    290  21b1					      macro	ibranch
    291  21b1					      db	54
    292  21b1					      endm
    293  21b1
    294  21b1							; TSTSTR	 Tests for the open quote in a string
    295  21b1					      macro	tststr
    296  21b1					      db	55
    297  21b1					      db	({1}-*)-1	;(addr-*)-1
    298  21b1					      endm
    299  21b1							; SETIRQ	Sets the line number to run when an irq happens irq 550
    300  21b1					      macro	setirq
    301  21b1					      db	56
    302  21b1					      endm
    303  21b1
    304  21b1							; TSTIRQ	Test for irq pending,
    305  21b1							;		if so push the IRQ LINE NUMBER into RO, onto stack
    306  21b1					      macro	tstirq
    307  21b1					      db	57
    308  21b1					      db	({1}-*)-1	;(addr-*)-1
    309  21b1					      endm
    310  21b1
    311  21b1							; IRET    return from interupt service
    312  21b1					      macro	iret
    313  21b1					      db	58
    314  21b1					      endm
    315  21b1
    316  21b1							; INSTR   read a string from the input
    317  21b1					      macro	instr
    318  21b1					      db	59
    319  21b1					      endm
    320  21b1
    321  21b1							; MODULO Returns the remainder of the division
    322  21b1					      macro	modulo
    323  21b1					      db	60
    324  21b1					      endm
    325  21b1							; Set a task line
    326  21b1					      macro	taskcreate
    327  21b1					      db	61
    328  21b1					      endm
    329  21b1							; End a task
    330  21b1					      macro	etask
    331  21b1					      db	62
    332  21b1					      endm
    333  21b1							; Skip to next task
    334  21b1					      macro	ntask
    335  21b1					      db	63
    336  21b1					      endm
    337  21b1							; Subscript
    338  21b1					      macro	subscript
    339  21b1					      db	64
    340  21b1					      endm
    341  21b1							; KILL Task
    342  21b1					      macro	taskkill
    343  21b1					      db	65
    344  21b1					      endm
    345  21b1							; STAT Task
    346  21b1					      macro	taskstat
    347  21b1					      db	66
    348  21b1					      endm
    349  21b1							;  output value as hex
    350  21b1					      macro	hexprt
    351  21b1					      db	67
    352  21b1					      endm
    353  21b1							;  Read in background has completed
    354  21b1					      macro	readcomplete
    355  21b1					      db	68
    356  21b1					      endm
    357  21b1							;  ReadInput line
    358  21b1					      macro	readstart
    359  21b1					      db	69
    360  21b1					      endm
    361  21b1							; Startio request
    362  21b1					      macro	startio
    363  21b1					      db	70
    364  21b1					      endm
    365  21b1							; Endio
    366  21b1					      macro	endio
    367  21b1					      db	71
    368  21b1					      endm
    369  21b1							; Logical not
    370  21b1					      macro	lognot
    371  21b1					      db	72
    372  21b1					      endm
    373  21b1							; Logical OR
    374  21b1					      macro	logor
    375  21b1					      db	73
    376  21b1					      endm
    377  21b1							;Logical and
    378  21b1					      macro	logand
    379  21b1					      db	74
    380  21b1					      endm
    381  21b1							;Logical XOR
    382  21b1					      macro	logxor
    383  21b1					      db	75
    384  21b1					      endm
    385  21b1							;Wait for task to complete, or list of tasks
    386  21b1					      macro	wtask
    387  21b1					      db	76
    388  21b1					      db	({1}-*)-1	;(addr-*)-1
    389  21b1					      endm
    390  21b1							;Get the current task id
    391  21b1					      MACRO	taskpid
    392  21b1					      db	77
    393  21b1					      endm
    394  21b1							;Trace the basic execution
    395  21b1					      Macro	traceprogram
    396  21b1					      db	78
    397  21b1					      endm
    398  21b1							;Do a basic program Trace
    399  21b1					      Macro	debugbasic
    400  21b1					      db	79
    401  21b1					      endm
    402  21b1
    403  21b1							; Inter Process communications instructions
    404  21b1					      Macro	ipcsend
    405  21b1					      db	80
    406  21b1					      endm
    407  21b1					      Macro	ipcreceive
    408  21b1					      db	81
    409  21b1					      endm
    410  21b1					      Macro	ipccheck
    411  21b1					      db	82
    412  21b1					      endm
    413  21b1					      Macro	ipcio
    414  21b1					      db	83
    415  21b1					      endm
    416  21b1					      Macro	pushmathstack
    417  21b1					      db	84
    418  21b1					      endm
    419  21b1					      Macro	popmathstack
    420  21b1					      db	85
    421  21b1					      endm
    422  21b1					      Macro	savemathstack
    423  21b1					      db	86
    424  21b1					      endm
    425  21b1					      Macro	restoremathstack
    426  21b1					      db	87
    427  21b1					      endm
    428  21b1					      Macro	incparmcount
    429  21b1					      db	88
    430  21b1					      endm
    431  21b1					      Macro	taskgetmathstack
    432  21b1					      db	89
    433  21b1					      endm
    434  21b1					      Macro	taskenable
    435  21b1					      db	90
    436  21b1					      endm
    437  21b1					      Macro	tasksuspend
    438  21b1					      db	91
    439  21b1					      endm
    440  21b1					      Macro	taskputmathptr
    441  21b1					      db	92
    442  21b1					      endm
    443  21b1							; Test for an extension type of variable that allows access to a tasks variables
    444  21b1							; Using  PID!<Var name>
    445  21b1					      Macro	tstvt
    446  21b1					      db	93
    447  21b1					      db	({1}-*)-1	;(addr-*)-1
    448  21b1					      endm
    449  21b1
    450  21b1							; Provide access to R2 for the IL program
    451  21b1					      Macro	setr2
    452  21b1					      db	94
    453  21b1					      db	{1}	; R2 is only one byte
    454  21b1					      endm
    455  21b1							;Move stack top to temp
    456  21b1					      Macro	stk2tmp
    457  21b1					      db	95
    458  21b1					      endm
    459  21b1
    460  21b1					      Macro	tmp2stk
    461  21b1					      db	96
    462  21b1					      endm
    463  21b1
    464  21b1					      Macro	tstbyte
    465  21b1					      db	97
    466  21b1					      db	({1}-*)-1	; (addr-*)-1 goto if match
    467  21b1					      dw	{2}	; address to check
    468  21b1					      db	{3}	; Value to compare
    469  21b1					      endm
    470  21b1
    471  21b1					      Macro	incvar
    472  21b1					      db	98
    473  21b1					      endm
    474  21b1					      Macro	decvar
    475  21b1					      db	99
    476  21b1					      endm
    477  21b1
    478  21b1					      Macro	slice
    479  21b1					      db	100
    480  21b1					      endm
    481  21b1
    482  21b1					      Macro	tstb
    483  21b1					      db	101
    484  21b1					      db	({1}-*)-1
    485  21b1					      db	{2}
    486  21b1					      endm
    487  21b1
    488  21b1					      Macro	tstw
    489  21b1					      db	102
    490  21b1					      db	({1}-*)-1
    491  21b1					      dw	{2}
    492  21b1					      endm
    493  21b1
    494  21b1					      Macro	ongoto
    495  21b1					      db	103
    496  21b1					      dw	{1}
    497  21b1					      dw	{2}
    498  21b1					      endm
    499  21b1
    500  21b1					      Macro	tstrelop
    501  21b1					      db	104
    502  21b1					      db	({1}-*)-1
    503  21b1					      endm
    504  21b1
    505  21b1
    506  21b1					      Macro	repeatline
    507  21b1					      db	105
    508  21b1					      endm
    509  21b1
    510  21b1							; Check for a precompiled branch, will take branch if precompiled value present
    511  21b1					      Macro	tstbranch
    512  21b1					      db	106
    513  21b1					      db	({1}-*)-1
    514  21b1					      endm
    515  21b1
    516  21b1					      Macro	fastxfer
    517  21b1					      db	107
    518  21b1					      endm
------- FILE mytb.asm
   2395  21b1							;
   2396  21b1				  -	      if	FIXED
   2397  21b1				  -	      org	$1000
   2398  21b1					      endif
------- FILE basic.il LEVEL 2 PASS 6
      0  21b1					      include	"basic.il"
      1  21b1					      seg	Code
      2  21b1							; on goto table
      3  21b1							; format :   first byte is value Base, subtracted from value found
      4  21b1							;	      second byte is the number of entries in the table max is 128... always a limit somewhere... lol
      5  21b1				   BasicStmts
      0  21b1					      db	kBeginKey,(kKeyCount+1)	; Base address of table, length of table
      1  21b1		       01 1f		      .byte.b	kBeginKey,(kKeyCount+1)
      0  21b3					      dw	ekLet
      1  21b3		       2c 22		      .word.w	ekLet
      0  21b5					      dw	ekInc
      1  21b5		       5a 22		      .word.w	ekInc
      0  21b7					      dw	ekDec
      1  21b7		       6a 22		      .word.w	ekDec
      0  21b9					      dw	ekIreturn
      1  21b9		       7a 22		      .word.w	ekIreturn
      0  21bb					      dw	ekIf
      1  21bb		       7f 22		      .word.w	ekIf
      0  21bd					      dw	ekThen
      1  21bd		       85 22		      .word.w	ekThen
      0  21bf					      dw	ekGoto
      1  21bf		       89 22		      .word.w	ekGoto
      0  21c1					      dw	ekGosub
      1  21c1		       9d 22		      .word.w	ekGosub
      0  21c3					      dw	ekReturn
      1  21c3		       a4 22		      .word.w	ekReturn
      0  21c5					      dw	ekRem
      1  21c5		       c4 22		      .word.w	ekRem
      0  21c7					      dw	ekPrint	; should be entry for print
      1  21c7		       ca 22		      .word.w	ekPrint
      0  21c9					      dw	ekTaske
      1  21c9		       17 23		      .word.w	ekTaske
      0  21cb					      dw	ekTaskn
      1  21cb		       2d 23		      .word.w	ekTaskn
      0  21cd					      dw	ekTaskw
      1  21cd		       34 23		      .word.w	ekTaskw
      0  21cf					      dw	ekPoke
      1  21cf		       4f 23		      .word.w	ekPoke
      0  21d1					      dw	ekPutch
      1  21d1		       66 23		      .word.w	ekPutch
      0  21d3					      dw	ekCls
      1  21d3		       71 23		      .word.w	ekCls
      0  21d5					      dw	ekInput
      1  21d5		       78 23		      .word.w	ekInput
      0  21d7					      dw	ekEnd
      1  21d7		       a0 23		      .word.w	ekEnd
      0  21d9					      dw	ekIrq
      1  21d9		       a4 23		      .word.w	ekIrq
      0  21db					      dw	ekKill
      1  21db		       af 23		      .word.w	ekKill
      0  21dd					      dw	ekList
      1  21dd		       ba 23		      .word.w	ekList
      0  21df					      dw	ekRun
      1  21df		       bf 23		      .word.w	ekRun
      0  21e1					      dw	ekNew
      1  21e1		       c8 23		      .word.w	ekNew
      0  21e3					      dw	ekSlice
      1  21e3		       cc 23		      .word.w	ekSlice
      0  21e5					      dw	ekTrace
      1  21e5		       d7 23		      .word.w	ekTrace
      0  21e7					      dw	ekExit
      1  21e7		       e8 23		      .word.w	ekExit
      0  21e9					      dw	ekSave
      1  21e9		       e9 23		      .word.w	ekSave
      0  21eb					      dw	ekLoad
      1  21eb		       ef 23		      .word.w	ekLoad
      0  21ed					      dw	ekErase
      1  21ed		       02 24		      .word.w	ekErase
      0  21ef					      dw	ekDir
      1  21ef		       fb 23		      .word.w	ekDir
     38  21f1							;
     39  21f1							; Logical operators
      0  21f1				   BasicLogical db	kOr,3
      1  21f1		       21 03		      .byte.b	kOr,3
      0  21f3					      dw	ekOr
      1  21f3		       1f 24		      .word.w	ekOr
      0  21f5					      dw	ekXor
      1  21f5		       24 24		      .word.w	ekXor
      0  21f7					      dw	ekAnd
      1  21f7		       1a 24		      .word.w	ekAnd
     44  21f9
     45  21f9							;functions returning values
     46  21f9
      0  21f9				   BasicFuncs db	kBeginFunc,kFuncCount
      1  21f9		       24 0f		      .byte.b	kBeginFunc,kFuncCount
      0  21fb					      dw	ekTrue
      1  21fb		       84 24		      .word.w	ekTrue
      0  21fd					      dw	ekFalse
      1  21fd		       88 24		      .word.w	ekFalse
      0  21ff					      dw	ekFree
      1  21ff		       8c 24		      .word.w	ekFree
      0  2201					      dw	ekGetch
      1  2201		       94 24		      .word.w	ekGetch
      0  2203					      dw	ekPeek
      1  2203		       9c 24		      .word.w	ekPeek
      0  2205					      dw	ekTask
      1  2205		       a7 24		      .word.w	ekTask
      0  2207					      dw	ekIpcc
      1  2207		       f3 24		      .word.w	ekIpcc
      0  2209					      dw	ekIpcs
      1  2209		       ce 24		      .word.w	ekIpcs
      0  220b					      dw	ekIpcr
      1  220b		       df 24		      .word.w	ekIpcr
      0  220d					      dw	ekRnd
      1  220d		       fe 24		      .word.w	ekRnd
      0  220f					      dw	ekStat
      1  220f		       1c 25		      .word.w	ekStat
      0  2211					      dw	ekAbs
      1  2211		       11 25		      .word.w	ekAbs
      0  2213					      dw	ekCall
      1  2213		       29 25		      .word.w	ekCall
      0  2215					      dw	ekGofn
      1  2215		       42 25		      .word.w	ekGofn
      0  2217					      dw	ekPid
      1  2217		       27 25		      .word.w	ekPid
     63  2219
     64  2219
     65  2219							;=====================================================
     66  2219							; This is the IL of the BASIC (or whatever) language.
     67  2219							; Because of the way macros are implemented by as65,
     68  2219							; labels can't be on the same line as a macro
     69  2219							; invocation, so that's why labels are on separate
     70  2219							; lines.
     71  2219							;
     72  2219		       22 19	   IL	      equ	*
     73  2219
     74  2219							;THE IL CONTROL SECTION
     75  2219
     76  2219				   START
      0  2219					      INIT		;INITIALIZE
      0  2219					      db	22
      1  2219		       16		      .byte.b	22
      0  221a					      NLINE		;WRITE CRLF
      0  221a					      db	5
      1  221a		       05		      .byte.b	5
      0  221b					      ERRGOTO	CO	;where to go after an error
      0  221b					      db	31
      1  221b		       1f		      .byte.b	31
      0  221c					      dw	CO
      1  221c		       1f 22		      .word.w	CO
      0  221e					      VINIT		;clear all variables
      0  221e					      db	30
      1  221e		       1e		      .byte.b	30
     81  221f							;
     82  221f							; This is where we jump to get a line of commands or
     83  221f							; a program from the user.
     84  221f							;
     85  221f				   CO
      0  221f					      GETLINE		;WRITE PROMPT AND GET LINE
      0  221f					      db	23
      1  221f		       17		      .byte.b	23
      0  2220					      TSTL	XEC	;TEST FOR LINE NUMBER
      0  2220					      db	34
      1  2220		       22		      .byte.b	34
      0  2221					      db	(XEC-*)-1
      1  2221		       04		      .byte.b	(XEC-*)-1
      0  2222					      INSERT		;INSERT IT (MAY BE DELETE)
      0  2222					      db	24
      1  2222		       18		      .byte.b	24
      0  2223					      IJMP	CO
      0  2223					      db	29
      1  2223		       1d		      .byte.b	29
      0  2224					      dw	CO
      1  2224		       1f 22		      .word.w	CO
     90  2226				   XEC
      0  2226					      XINIT		;INITIALIZE
      0  2226					      db	0
      1  2226		       00		      .byte.b	0
     92  2227							;============================================================================
     93  2227							;STATEMENT EXECUTOR DO not change the NAME as task manager uses this
     94  2227							;
     95  2227				   STMT
      0  2227					      DEBUGBASIC		;Check if we are doing a debug for this session
      0  2227					      db	79
      1  2227		       4f		      .byte.b	79
      0  2228					      TSTIRQ	notirq	;if it is an irq posted, this will cause transfer to irq handler
      0  2228					      db	57
      1  2228		       39		      .byte.b	57
      0  2229					      db	(notirq-*)-1
      1  2229		       00		      .byte.b	(notirq-*)-1
     98  222a							;==========================================================================================
     99  222a							; Process a let statement implied or explicit.
    100  222a							;
    101  222a				   notirq
      0  222a					      TSTLET	DoVector	; Test if Let keyword or a variable
      0  222a					      db	49
      1  222a		       31		      .byte.b	49
      0  222b					      db	(DoVector-*)-1
      1  222b		       29		      .byte.b	(DoVector-*)-1
    103  222c				   ekLet
      0  222c					      TSTV	ERRVEC2	; YES, PLACE VAR ADDRESS ON AESTK
      0  222c					      db	33
      1  222c		       21		      .byte.b	33
      0  222d					      db	(ERRVEC2-*)-1
      1  222d		       24		      .byte.b	(ERRVEC2-*)-1
      0  222e					      TSTB	LETSCONT,oBang	; allow to assign to another Tasks Variable
      0  222e					      db	101
      1  222e		       65		      .byte.b	101
      0  222f					      db	(LETSCONT-*)-1
      1  222f		       04		      .byte.b	(LETSCONT-*)-1
      0  2230					      db	oBang
      1  2230		       e8		      .byte.b	oBang
      0  2231					      IND
      0  2231					      db	20
      1  2231		       14		      .byte.b	20
      0  2232					      TSTVT	ERRVEC2
      0  2232					      db	93
      1  2232		       5d		      .byte.b	93
      0  2233					      db	(ERRVEC2-*)-1
      1  2233		       1e		      .byte.b	(ERRVEC2-*)-1
    108  2234
    109  2234				   LETSCONT
      0  2234					      TSTB	LETSQBRACKET,oEqual	; (This line originally omitted)
      0  2234					      db	101
      1  2234		       65		      .byte.b	101
      0  2235					      db	(LETSQBRACKET-*)-1
      1  2235		       04		      .byte.b	(LETSQBRACKET-*)-1
      0  2236					      db	oEqual
      1  2236		       f2		      .byte.b	oEqual
      0  2237					      IJMP	LETBE
      0  2237					      db	29
      1  2237		       1d		      .byte.b	29
      0  2238					      dw	LETBE
      1  2238		       47 22		      .word.w	LETBE
    112  223a
    113  223a				   LETSQBRACKET 		; is this an array access ?
    114  223a
      0  223a					      TSTB	ERRVEC2,oLeftSQBracket	; [
      0  223a					      db	101
      1  223a		       65		      .byte.b	101
      0  223b					      db	(ERRVEC2-*)-1
      1  223b		       16		      .byte.b	(ERRVEC2-*)-1
      0  223c					      db	oLeftSQBracket
      1  223c		       e4		      .byte.b	oLeftSQBracket
      0  223d					      CALL	EXPR
      0  223d					      db	28
      1  223d		       1c		      .byte.b	28
      0  223e					      dw	EXPR
      1  223e		       0a 24		      .word.w	EXPR
      0  2240					      TSTB	ERRVEC2,oRightSQBracket	; ]
      0  2240					      db	101
      1  2240		       65		      .byte.b	101
      0  2241					      db	(ERRVEC2-*)-1
      1  2241		       10		      .byte.b	(ERRVEC2-*)-1
      0  2242					      db	oRightSQBracket
      1  2242		       e5		      .byte.b	oRightSQBracket
      0  2243					      SUBSCRIPT
      0  2243					      db	64
      1  2243		       40		      .byte.b	64
      0  2244					      TSTB	ERRVEC2,oEqual	; (This line originally omitted)
      0  2244					      db	101
      1  2244		       65		      .byte.b	101
      0  2245					      db	(ERRVEC2-*)-1
      1  2245		       0c		      .byte.b	(ERRVEC2-*)-1
      0  2246					      db	oEqual
      1  2246		       f2		      .byte.b	oEqual
    120  2247				   LETBE
    121  2247
      0  2247					      CALL	EXPR	; PLACE EXPR VALUE ON MathSTK
      0  2247					      db	28
      1  2247		       1c		      .byte.b	28
      0  2248					      dw	EXPR
      1  2248		       0a 24		      .word.w	EXPR
      0  224a					      DONE		; REPORT ERROR IF NOT NEXT
      0  224a					      db	1
      1  224a		       01		      .byte.b	1
      0  224b					      STORE		; STORE RESULT
      0  224b					      db	19
      1  224b		       13		      .byte.b	19
      0  224c					      NXT	CO	; AND SEQUENCE TO NEXT
      0  224c					      db	6
      1  224c		       06		      .byte.b	6
      0  224d					      dw	CO
      1  224d		       1f 22		      .word.w	CO
      0  224f					      IJMP	STMT
      0  224f					      db	29
      1  224f		       1d		      .byte.b	29
      0  2250					      dw	STMT
      1  2250		       27 22		      .word.w	STMT
    127  2252				   ERRVEC2
      0  2252					      IJMP	UNKNOWN
      0  2252					      db	29
      1  2252		       1d		      .byte.b	29
      0  2253					      dw	UNKNOWN
      1  2253		       06 24		      .word.w	UNKNOWN
    129  2255							;=============================================================
    130  2255							;Branch on a valid statement start
    131  2255				   DoVector
      0  2255					      OnGoto	BasicStmts,UNKNOWN	; use the table provided if not in table branch to unknown
      0  2255					      db	103
      1  2255		       67		      .byte.b	103
      0  2256					      dw	BasicStmts
      1  2256		       b1 21		      .word.w	BasicStmts
      0  2258					      dw	UNKNOWN
      1  2258		       06 24		      .word.w	UNKNOWN
    133  225a							;This will never return here!
    134  225a							;=============================================================
    135  225a							; Inc or dec a variable
    136  225a							;S1:
    137  225a							;	  TSTB	     S1Dec,kInc 		    ; Increment variable
    138  225a				   ekInc
      0  225a					      TSTV	ERRVEC2	; Verify we have a variable
      0  225a					      db	33
      1  225a		       21		      .byte.b	33
      0  225b					      db	(ERRVEC2-*)-1
      1  225b		       f6		      .byte.b	(ERRVEC2-*)-1
      0  225c					      TSTB	eDoInc,oBang	; Allow to inc or dec other tasks variables
      0  225c					      db	101
      1  225c		       65		      .byte.b	101
      0  225d					      db	(eDoInc-*)-1
      1  225d		       04		      .byte.b	(eDoInc-*)-1
      0  225e					      db	oBang
      1  225e		       e8		      .byte.b	oBang
      0  225f					      IND		; we just got a pid
      0  225f					      db	20
      1  225f		       14		      .byte.b	20
      0  2260					      TSTVT	ERRVEC2	; if it is not another variabe then error, Call test var. task
      0  2260					      db	93
      1  2260		       5d		      .byte.b	93
      0  2261					      db	(ERRVEC2-*)-1
      1  2261		       f0		      .byte.b	(ERRVEC2-*)-1
    143  2262				   eDoInc
      0  2262					      INCVAR		; Do the increment of the variable
      0  2262					      db	98
      1  2262		       62		      .byte.b	98
      0  2263					      DONE		; Test for end of line or end of statement ":"
      0  2263					      db	1
      1  2263		       01		      .byte.b	1
      0  2264					      NXT	CO	; Get the next statement, branch CO if end of program
      0  2264					      db	6
      1  2264		       06		      .byte.b	6
      0  2265					      dw	CO
      1  2265		       1f 22		      .word.w	CO
      0  2267					      IJMP	STMT	; Process the next statement
      0  2267					      db	29
      1  2267		       1d		      .byte.b	29
      0  2268					      dw	STMT
      1  2268		       27 22		      .word.w	STMT
    148  226a							;S1Dec:
    149  226a							;	  TSTB	     S1Iret,kDec		    ; Dec variable
    150  226a				   ekDec
      0  226a					      TSTV	ERRVEC2	; Must be followed by a variable
      0  226a					      db	33
      1  226a		       21		      .byte.b	33
      0  226b					      db	(ERRVEC2-*)-1
      1  226b		       e6		      .byte.b	(ERRVEC2-*)-1
      0  226c					      TSTB	eDoDec,oBang	; Allow to inc or dec other tasks variables
      0  226c					      db	101
      1  226c		       65		      .byte.b	101
      0  226d					      db	(eDoDec-*)-1
      1  226d		       04		      .byte.b	(eDoDec-*)-1
      0  226e					      db	oBang
      1  226e		       e8		      .byte.b	oBang
      0  226f					      IND		; we just got a pid
      0  226f					      db	20
      1  226f		       14		      .byte.b	20
      0  2270					      TSTVT	ERRVEC2	; if it is not another variabe then error, Call test var. task
      0  2270					      db	93
      1  2270		       5d		      .byte.b	93
      0  2271					      db	(ERRVEC2-*)-1
      1  2271		       e0		      .byte.b	(ERRVEC2-*)-1
    155  2272				   eDoDec
      0  2272					      DECVAR		; Decrement the actual variable
      0  2272					      db	99
      1  2272		       63		      .byte.b	99
      0  2273					      DONE		; Test if end of line or : statement
      0  2273					      db	1
      1  2273		       01		      .byte.b	1
      0  2274					      NXT	CO	; If at end of program then got the console
      0  2274					      db	6
      1  2274		       06		      .byte.b	6
      0  2275					      dw	CO
      1  2275		       1f 22		      .word.w	CO
      0  2277					      IJMP	STMT	; Process the next statement of command line
      0  2277					      db	29
      1  2277		       1d		      .byte.b	29
      0  2278					      dw	STMT
      1  2278		       27 22		      .word.w	STMT
    160  227a							;=============================================================================================================================
    161  227a							; iret or ireturn, Return from interupt process
    162  227a							;
    163  227a							;S1Iret:
    164  227a							;	  TSTB	     S1S1,kIreturn		 ; test return from interupt
    165  227a							;S1Sa:
    166  227a				   ekIreturn
      0  227a					      DONE		; Must be only thing on the line
      0  227a					      db	1
      1  227a		       01		      .byte.b	1
      0  227b					      IRET		; RESTORE LINE NUMBER OF CALL
      0  227b					      db	58
      1  227b		       3a		      .byte.b	58
      0  227c					      IJMP	STMT
      0  227c					      db	29
      1  227c		       1d		      .byte.b	29
      0  227d					      dw	STMT
      1  227d		       27 22		      .word.w	STMT
    170  227f							;==============================================================================================================================
    171  227f							;Process if statement, if true then process all statements until end of line reached
    172  227f							;S1S1:
    173  227f							;	  TSTB	     S1Z,kIf			    ; IF STATEMENT
    174  227f				   ekIf
      0  227f					      CALL	EXPR	; GET EXPRESSION rel ops now valid expression 0 false, everything else true
      0  227f					      db	28
      1  227f		       1c		      .byte.b	28
      0  2280					      dw	EXPR
      1  2280		       0a 24		      .word.w	EXPR
      0  2282					      TSTB	S1W,kThen	; (This line originally omitted) not required
      0  2282					      db	101
      1  2282		       65		      .byte.b	101
      0  2283					      db	(S1W-*)-1
      1  2283		       01		      .byte.b	(S1W-*)-1
      0  2284					      db	kThen
      1  2284		       06		      .byte.b	kThen
    177  2285				   ekThen
    178  2285				   S1W
      0  2285					      IBRANCH		; PERFORM COMPARISON -- PERFORMS NXT IF FALSE calls iBranch
      0  2285					      db	54
      1  2285		       36		      .byte.b	54
      0  2286					      IJMP	STMT
      0  2286					      db	29
      1  2286		       1d		      .byte.b	29
      0  2287					      dw	STMT
      1  2287		       27 22		      .word.w	STMT
    181  2289							;===============================================================================================================================
    182  2289							; Test for GOTO
    183  2289							;S1Z:
    184  2289							;	  TSTB	     S2,kGoto			    ; YES...TO, OR...SUB
    185  2289							;
    186  2289				   ekGoto
      0  2289					      TSTBRANCH	ekGotoCompiled	; test the two byte vector following the goto if zero then normal line lookup
      0  2289					      db	106
      1  2289		       6a		      .byte.b	106
      0  228a					      db	(ekGotoCompiled-*)-1
      1  228a		       0e		      .byte.b	(ekGotoCompiled-*)-1
    188  228b							; Else we have the address ad just goto that address
      0  228b					      TSTB	ekGotoLine,oPeriod	; If it is a period, then just go to start of this line
      0  228b					      db	101
      1  228b		       65		      .byte.b	101
      0  228c					      db	(ekGotoLine-*)-1
      1  228c		       05		      .byte.b	(ekGotoLine-*)-1
      0  228d					      db	oPeriod
      1  228d		       e9		      .byte.b	oPeriod
      0  228e					      REPEATLINE		; Repeat the same line again
      0  228e					      db	105
      1  228e		       69		      .byte.b	105
      0  228f					      IJMP	STMT	; Go do the statement
      0  228f					      db	29
      1  228f		       1d		      .byte.b	29
      0  2290					      dw	STMT
      1  2290		       27 22		      .word.w	STMT
    192  2292
    193  2292				   ekGotoLine
      0  2292					      CALL	EXPR	; GET LABEL
      0  2292					      db	28
      1  2292		       1c		      .byte.b	28
      0  2293					      dw	EXPR
      1  2293		       0a 24		      .word.w	EXPR
      0  2295					      lit	0	; Place indicator for line num on stack
      0  2295					      db	27
      1  2295		       1b		      .byte.b	27
      0  2296					      dw	0
      1  2296		       00 00		      .word.w	0
      0  2298					      FASTXFER
      0  2298					      db	107
      1  2298		       6b		      .byte.b	107
    197  2299				   ekGotoCompiled
      0  2299					      lit	1	; tell it that mempointer on the stack
      0  2299					      db	27
      1  2299		       1b		      .byte.b	27
      0  229a					      dw	1
      1  229a		       01 00		      .word.w	1
      0  229c					      FASTXFER		; put top of stack into curptr
      0  229c					      db	107
      1  229c		       6b		      .byte.b	107
    200  229d
    201  229d							;===============================================================================================================================
    202  229d							; Process gosub / function
    203  229d							;
    204  229d							;S2:
    205  229d							;	  TSTB	     S2b,kGosub 		    ; ERROR IF NO MATCH
    206  229d				   ekGosub
      0  229d					      CALL	GOSUBSTATEMENT	; Do the gosub
      0  229d					      db	28
      1  229d		       1c		      .byte.b	28
      0  229e					      dw	GOSUBSTATEMENT
      1  229e		       6e 25		      .word.w	GOSUBSTATEMENT
      0  22a0					      DONE		; ERROR IF CR NOT NEXT
      0  22a0					      db	1
      1  22a0		       01		      .byte.b	1
      0  22a1					      SAV	GOSUB_RTN	; SAVE RETURN LINE
      0  22a1					      db	8
      1  22a1		       08		      .byte.b	8
      0  22a2					      db	GOSUB_RTN
      1  22a2		       01		      .byte.b	GOSUB_RTN
      0  22a3					      FASTXFER		; AND JUMP to sub rtn
      0  22a3					      db	107
      1  22a3		       6b		      .byte.b	107
    211  22a4							;
    212  22a4							; End of gosub processing
    213  22a4							;===============================================================================================================================
    214  22a4							; Return from a gosub
    215  22a4							;S2b:
    216  22a4							;	  TSTB	    S2a,kReturn 		   ; Speed up pocessing but more memory
    217  22a4				   ekReturn
      0  22a4					      TSTB	S2NoReturnValue,oLeftBracket	; Check if we will return some value
      0  22a4					      db	101
      1  22a4		       65		      .byte.b	101
      0  22a5					      db	(S2NoReturnValue-*)-1
      1  22a5		       11		      .byte.b	(S2NoReturnValue-*)-1
      0  22a6					      db	oLeftBracket
      1  22a6		       e0		      .byte.b	oLeftBracket
      0  22a7					      CALL	EXPR
      0  22a7					      db	28
      1  22a7		       1c		      .byte.b	28
      0  22a8					      dw	EXPR
      1  22a8		       0a 24		      .word.w	EXPR
      0  22aa					      TSTB	ERRVEC2,oRightBracket	; Now a value is on the stack
      0  22aa					      db	101
      1  22aa		       65		      .byte.b	101
      0  22ab					      db	(ERRVEC2-*)-1
      1  22ab		       a6		      .byte.b	(ERRVEC2-*)-1
      0  22ac					      db	oRightBracket
      1  22ac		       e1		      .byte.b	oRightBracket
      0  22ad					      DONE
      0  22ad					      db	1
      1  22ad		       01		      .byte.b	1
      0  22ae					      RSTR	S2RetFunc,1	; decides if call was a func or statement, branch on func, return value
      0  22ae					      db	9
      1  22ae		       09		      .byte.b	9
      0  22af					      db	(S2RetFunc-*)-1
      1  22af		       11		      .byte.b	(S2RetFunc-*)-1
      0  22b0					      db	1
      1  22b0		       01		      .byte.b	1
      0  22b1					      NXT	CO	; SEQUENCE TO NEXT STATEMENT
      0  22b1					      db	6
      1  22b1		       06		      .byte.b	6
      0  22b2					      dw	CO
      1  22b2		       1f 22		      .word.w	CO
      0  22b4					      IJMP	STMT	; Process the new statement
      0  22b4					      db	29
      1  22b4		       1d		      .byte.b	29
      0  22b5					      dw	STMT
      1  22b5		       27 22		      .word.w	STMT
    225  22b7
    226  22b7				   S2NoReturnValue
      0  22b7					      DONE
      0  22b7					      db	1
      1  22b7		       01		      .byte.b	1
      0  22b8					      RSTR	S2RetFunc,0	; decides if call was a func or statement, branch on func, no return value
      0  22b8					      db	9
      1  22b8		       09		      .byte.b	9
      0  22b9					      db	(S2RetFunc-*)-1
      1  22b9		       07		      .byte.b	(S2RetFunc-*)-1
      0  22ba					      db	0
      1  22ba		       00		      .byte.b	0
      0  22bb					      NXT	CO	; SEQUENCE TO NEXT STATEMENT
      0  22bb					      db	6
      1  22bb		       06		      .byte.b	6
      0  22bc					      dw	CO
      1  22bc		       1f 22		      .word.w	CO
      0  22be					      IJMP	STMT	; Process the new statement
      0  22be					      db	29
      1  22be		       1d		      .byte.b	29
      0  22bf					      dw	STMT
      1  22bf		       27 22		      .word.w	STMT
    231  22c1
    232  22c1				   S2RetFunc
      0  22c1					      IJMP	GOFNRet	; Back into the Function
      0  22c1					      db	29
      1  22c1		       1d		      .byte.b	29
      0  22c2					      dw	GOFNRet
      1  22c2		       48 25		      .word.w	GOFNRet
    234  22c4							;
    235  22c4							; End of return from gosub
    236  22c4							;==================================================================================================================================
    237  22c4							; Process REM statement
    238  22c4							;
    239  22c4							;S2a:
    240  22c4							;	  TSTB	     S3,kRem			    ; REMark.  Skip rest of line
    241  22c4				   ekRem
      0  22c4					      NXT	CO	; The rest of the line is ignored
      0  22c4					      db	6
      1  22c4		       06		      .byte.b	6
      0  22c5					      dw	CO
      1  22c5		       1f 22		      .word.w	CO
      0  22c7					      IJMP	STMT	; Process the next statement
      0  22c7					      db	29
      1  22c7		       1d		      .byte.b	29
      0  22c8					      dw	STMT
      1  22c8		       27 22		      .word.w	STMT
    244  22ca							;==================================================================================================================================
    245  22ca							; Print statement
    246  22ca							;
    247  22ca							;S3:
    248  22ca							;	  TSTB	     S8,kPrint			    ; ? or Print symonym for print
    249  22ca				   ekPrint
      0  22ca					      STARTIO		; Lock task until io completes
      0  22ca					      db	70
      1  22ca		       46		      .byte.b	70
    251  22cb				   S4
      0  22cb					      TSTDONE	S4a	; Test if we just want crlf printed
      0  22cb					      db	50
      1  22cb		       32		      .byte.b	50
      0  22cc					      db	(S4a-*)-1
      1  22cc		       03		      .byte.b	(S4a-*)-1
      0  22cd					      IJMP	S6
      0  22cd					      db	29
      1  22cd		       1d		      .byte.b	29
      0  22ce					      dw	S6
      1  22ce		       e5 22		      .word.w	S6
    254  22d0
    255  22d0				   S4a
      0  22d0					      TSTB	S7,tString	; TEST FOR QUOTED String
      0  22d0					      db	101
      1  22d0		       65		      .byte.b	101
      0  22d1					      db	(S7-*)-1
      1  22d1		       1f		      .byte.b	(S7-*)-1
      0  22d2					      db	tString
      1  22d2		       a0		      .byte.b	tString
      0  22d3					      PRS		; PRINT STRING
      0  22d3					      db	2
      1  22d3		       02		      .byte.b	2
    258  22d4				   S5
      0  22d4					      TSTB	S6A,oComma	; IS THERE MORE?
      0  22d4					      db	101
      1  22d4		       65		      .byte.b	101
      0  22d5					      db	(S6A-*)-1
      1  22d5		       07		      .byte.b	(S6A-*)-1
      0  22d6					      db	oComma
      1  22d6		       e2		      .byte.b	oComma
      0  22d7					      SPC		; SPACE TO NEXT ZONE
      0  22d7					      db	4
      1  22d7		       04		      .byte.b	4
      0  22d8					      TSTDONE	S4	; Not end of line jump back
      0  22d8					      db	50
      1  22d8		       32		      .byte.b	50
      0  22d9					      db	(S4-*)-1
      1  22d9		       f1		      .byte.b	(S4-*)-1
      0  22da					      IJMP	S6Z	; YES JUMP BACK
      0  22da					      db	29
      1  22da		       1d		      .byte.b	29
      0  22db					      dw	S6Z
      1  22db		       e7 22		      .word.w	S6Z
    263  22dd
    264  22dd							;
    265  22dd							; If a semicolon, don't do anything.
    266  22dd							;
    267  22dd				   S6A
      0  22dd					      TSTB	S6,oSemiColon	; IF semicolon also check if end of line
      0  22dd					      db	101
      1  22dd		       65		      .byte.b	101
      0  22de					      db	(S6-*)-1
      1  22de		       06		      .byte.b	(S6-*)-1
      0  22df					      db	oSemiColon
      1  22df		       e3		      .byte.b	oSemiColon
      0  22e0					      TSTDONE	S4	; Jump Back if not end of line
      0  22e0					      db	50
      1  22e0		       32		      .byte.b	50
      0  22e1					      db	(S4-*)-1
      1  22e1		       e9		      .byte.b	(S4-*)-1
      0  22e2					      IJMP	S6Z
      0  22e2					      db	29
      1  22e2		       1d		      .byte.b	29
      0  22e3					      dw	S6Z
      1  22e3		       e7 22		      .word.w	S6Z
    271  22e5
    272  22e5				   S6
    273  22e5
      0  22e5					      DONE		; ERROR IF CR NOT NEXT
      0  22e5					      db	1
      1  22e5		       01		      .byte.b	1
      0  22e6					      NLINE
      0  22e6					      db	5
      1  22e6		       05		      .byte.b	5
    276  22e7				   S6Z
      0  22e7					      ENDIO		; release task io completed
      0  22e7					      db	71
      1  22e7		       47		      .byte.b	71
      0  22e8					      NXT	CO	; exit here if , or ; at end of print
      0  22e8					      db	6
      1  22e8		       06		      .byte.b	6
      0  22e9					      dw	CO
      1  22e9		       1f 22		      .word.w	CO
      0  22eb					      IJMP	STMT
      0  22eb					      db	29
      1  22eb		       1d		      .byte.b	29
      0  22ec					      dw	STMT
      1  22ec		       27 22		      .word.w	STMT
    280  22ee							;
    281  22ee							; A jump for code too far away for relative branch
    282  22ee							;
    283  22ee				   ERRVEC
      0  22ee					      IJMP	UNKNOWN
      0  22ee					      db	29
      1  22ee		       1d		      .byte.b	29
      0  22ef					      dw	UNKNOWN
      1  22ef		       06 24		      .word.w	UNKNOWN
    285  22f1							;
    286  22f1							; Get here if there is an expression to print
    287  22f1				   S7
      0  22f1					      TSTB	S7AUnsigned,oDollar	; Print the value in Hex format
      0  22f1					      db	101
      1  22f1		       65		      .byte.b	101
      0  22f2					      db	(S7AUnsigned-*)-1
      1  22f2		       08		      .byte.b	(S7AUnsigned-*)-1
      0  22f3					      db	oDollar
      1  22f3		       e7		      .byte.b	oDollar
      0  22f4					      CALL	EXPR
      0  22f4					      db	28
      1  22f4		       1c		      .byte.b	28
      0  22f5					      dw	EXPR
      1  22f5		       0a 24		      .word.w	EXPR
      0  22f7					      HEXPRT
      0  22f7					      db	67
      1  22f7		       43		      .byte.b	67
      0  22f8					      IJMP	S5
      0  22f8					      db	29
      1  22f8		       1d		      .byte.b	29
      0  22f9					      dw	S5
      1  22f9		       d4 22		      .word.w	S5
    292  22fb
    293  22fb				   S7AUnsigned
    294  22fb
      0  22fb					      TSTB	S7A,oPercent	; Print the value as an unsigned number
      0  22fb					      db	101
      1  22fb		       65		      .byte.b	101
      0  22fc					      db	(S7A-*)-1
      1  22fc		       0a		      .byte.b	(S7A-*)-1
      0  22fd					      db	oPercent
      1  22fd		       ed		      .byte.b	oPercent
      0  22fe					      CALL	EXPR
      0  22fe					      db	28
      1  22fe		       1c		      .byte.b	28
      0  22ff					      dw	EXPR
      1  22ff		       0a 24		      .word.w	EXPR
      0  2301					      SETR2	1
      0  2301					      db	94
      1  2301		       5e		      .byte.b	94
      0  2302					      db	1
      1  2302		       01		      .byte.b	1
      0  2303					      PRN
      0  2303					      db	3
      1  2303		       03		      .byte.b	3
      0  2304					      IJMP	S5
      0  2304					      db	29
      1  2304		       1d		      .byte.b	29
      0  2305					      dw	S5
      1  2305		       d4 22		      .word.w	S5
    300  2307
    301  2307				   S7A
    302  2307
      0  2307					      CALL	EXPR
      0  2307					      db	28
      1  2307		       1c		      .byte.b	28
      0  2308					      dw	EXPR
      1  2308		       0a 24		      .word.w	EXPR
      0  230a					      TSTB	S7B,oDollar	; Print the value as a single character
      0  230a					      db	101
      1  230a		       65		      .byte.b	101
      0  230b					      db	(S7B-*)-1
      1  230b		       05		      .byte.b	(S7B-*)-1
      0  230c					      db	oDollar
      1  230c		       e7		      .byte.b	oDollar
      0  230d					      PUTCHAR
      0  230d					      db	52
      1  230d		       34		      .byte.b	52
      0  230e					      IJMP	S5
      0  230e					      db	29
      1  230e		       1d		      .byte.b	29
      0  230f					      dw	S5
      1  230f		       d4 22		      .word.w	S5
    307  2311
    308  2311				   S7B
      0  2311					      SETR2	0	; Print the value as a signed number
      0  2311					      db	94
      1  2311		       5e		      .byte.b	94
      0  2312					      db	0
      1  2312		       00		      .byte.b	0
      0  2313					      PRN		; PRINT IT
      0  2313					      db	3
      1  2313		       03		      .byte.b	3
      0  2314					      IJMP	S5	; IS THERE MORE?
      0  2314					      db	29
      1  2314		       1d		      .byte.b	29
      0  2315					      dw	S5
      1  2315		       d4 22		      .word.w	S5
    312  2317							;
    313  2317							;===========================================================
    314  2317							; PROCESS ALL THE TASK STATEMENTS
    315  2317							;
    316  2317							;S8:
    317  2317							;	  TSTB	      S8G,kTaske		 ; End Task
    318  2317				   ekTaske
      0  2317					      TSTB	S8NoParm,oLeftBracket
      0  2317					      db	101
      1  2317		       65		      .byte.b	101
      0  2318					      db	(S8NoParm-*)-1
      1  2318		       0c		      .byte.b	(S8NoParm-*)-1
      0  2319					      db	oLeftBracket
      1  2319		       e0		      .byte.b	oLeftBracket
      0  231a					      CALL	EXPR
      0  231a					      db	28
      1  231a		       1c		      .byte.b	28
      0  231b					      dw	EXPR
      1  231b		       0a 24		      .word.w	EXPR
      0  231d					      TSTB	UNKNOWNLnk,oRightBracket
      0  231d					      db	101
      1  231d		       65		      .byte.b	101
      0  231e					      db	(UNKNOWNLnk-*)-1
      1  231e		       2d		      .byte.b	(UNKNOWNLnk-*)-1
      0  231f					      db	oRightBracket
      1  231f		       e1		      .byte.b	oRightBracket
      0  2320					      ETASK
      0  2320					      db	62
      1  2320		       3e		      .byte.b	62
      0  2321					      DONE
      0  2321					      db	1
      1  2321		       01		      .byte.b	1
      0  2322					      IJMP	STMT
      0  2322					      db	29
      1  2322		       1d		      .byte.b	29
      0  2323					      dw	STMT
      1  2323		       27 22		      .word.w	STMT
    325  2325				   S8NoParm
      0  2325					      LIT	0
      0  2325					      db	27
      1  2325		       1b		      .byte.b	27
      0  2326					      dw	0
      1  2326		       00 00		      .word.w	0
      0  2328					      ETASK
      0  2328					      db	62
      1  2328		       3e		      .byte.b	62
      0  2329					      DONE		; Must be last thing on a line
      0  2329					      db	1
      1  2329		       01		      .byte.b	1
      0  232a					      IJMP	STMT
      0  232a					      db	29
      1  232a		       1d		      .byte.b	29
      0  232b					      dw	STMT
      1  232b		       27 22		      .word.w	STMT
    330  232d							;
    331  232d							;===========================================================
    332  232d							; The task gives up the rest of the cycles
    333  232d							;S8G:
    334  232d							;	  TSTB	      S8a,kTaskn	 ;Next task
    335  232d				   ekTaskn
      0  232d					      NTASK
      0  232d					      db	63
      1  232d		       3f		      .byte.b	63
      0  232e					      NXT	CO	;Next statement to execute
      0  232e					      db	6
      1  232e		       06		      .byte.b	6
      0  232f					      dw	CO
      1  232f		       1f 22		      .word.w	CO
      0  2331					      IJMP	STMT
      0  2331					      db	29
      1  2331		       1d		      .byte.b	29
      0  2332					      dw	STMT
      1  2332		       27 22		      .word.w	STMT
    339  2334							;
    340  2334							;===========================================================
    341  2334							; Waits for a task or list of tasks to complete
    342  2334							;S8a:
    343  2334							;	 TSTB	     S8a1,kTaskw		;Wait for tasks
    344  2334				   ekTaskw
      0  2334					      TSTB	UNKNOWNLnk,oLeftBracket
      0  2334					      db	101
      1  2334		       65		      .byte.b	101
      0  2335					      db	(UNKNOWNLnk-*)-1
      1  2335		       16		      .byte.b	(UNKNOWNLnk-*)-1
      0  2336					      db	oLeftBracket
      1  2336		       e0		      .byte.b	oLeftBracket
    346  2337				   S8TSK
      0  2337					      Call	EXPR	;Gets the PID of task to wait for
      0  2337					      db	28
      1  2337		       1c		      .byte.b	28
      0  2338					      dw	EXPR
      1  2338		       0a 24		      .word.w	EXPR
    348  233a				   S8LOOP
      0  233a					      WTASK	S8LOOP	;Chks for the task PID to finish in a loop, gives up time slice if not done
      0  233a					      db	76
      1  233a		       4c		      .byte.b	76
      0  233b					      db	(S8LOOP-*)-1
      1  233b		       fe		      .byte.b	(S8LOOP-*)-1
      0  233c					      TSTB	S8aa,oComma	;Checks for more tasks
      0  233c					      db	101
      1  233c		       65		      .byte.b	101
      0  233d					      db	(S8aa-*)-1
      1  233d		       04		      .byte.b	(S8aa-*)-1
      0  233e					      db	oComma
      1  233e		       e2		      .byte.b	oComma
      0  233f					      IJMP	S8TSK	;Go for the next task number
      0  233f					      db	29
      1  233f		       1d		      .byte.b	29
      0  2340					      dw	S8TSK
      1  2340		       37 23		      .word.w	S8TSK
    352  2342				   S8aa
      0  2342					      TSTB	UNKNOWNLnk,oRightBracket	;end of list
      0  2342					      db	101
      1  2342		       65		      .byte.b	101
      0  2343					      db	(UNKNOWNLnk-*)-1
      1  2343		       08		      .byte.b	(UNKNOWNLnk-*)-1
      0  2344					      db	oRightBracket
      1  2344		       e1		      .byte.b	oRightBracket
      0  2345					      DONE
      0  2345					      db	1
      1  2345		       01		      .byte.b	1
      0  2346					      NXT	CO
      0  2346					      db	6
      1  2346		       06		      .byte.b	6
      0  2347					      dw	CO
      1  2347		       1f 22		      .word.w	CO
      0  2349					      IJMP	STMT	;Next Statement
      0  2349					      db	29
      1  2349		       1d		      .byte.b	29
      0  234a					      dw	STMT
      1  234a		       27 22		      .word.w	STMT
    357  234c
    358  234c
    359  234c
    360  234c				   UNKNOWNLnk
      0  234c					      iJMP	UNKNOWN
      0  234c					      db	29
      1  234c		       1d		      .byte.b	29
      0  234d					      dw	UNKNOWN
      1  234d		       06 24		      .word.w	UNKNOWN
    362  234f
    363  234f							;
    364  234f							;===========================================================
    365  234f							; Update a memory location with a value
    366  234f							;  Use @[offset] to write a word value to memory
    367  234f							;
    368  234f							;S8a1:
    369  234f							;	  TSTB	      S8b,kPoke 			  ; Poke a value into memory
    370  234f				   ekPoke
      0  234f					      TSTB	UNKNOWNV,oLeftBracket	; opening bracket
      0  234f					      db	101
      1  234f		       65		      .byte.b	101
      0  2350					      db	(UNKNOWNV-*)-1
      1  2350		       50		      .byte.b	(UNKNOWNV-*)-1
      0  2351					      db	oLeftBracket
      1  2351		       e0		      .byte.b	oLeftBracket
      0  2352					      CALL	EXPR	; Get address to write to
      0  2352					      db	28
      1  2352		       1c		      .byte.b	28
      0  2353					      dw	EXPR
      1  2353		       0a 24		      .word.w	EXPR
      0  2355					      TSTB	UNKNOWNV,oComma	; Must have a coma
      0  2355					      db	101
      1  2355		       65		      .byte.b	101
      0  2356					      db	(UNKNOWNV-*)-1
      1  2356		       4a		      .byte.b	(UNKNOWNV-*)-1
      0  2357					      db	oComma
      1  2357		       e2		      .byte.b	oComma
      0  2358					      CALL	EXPR	; Get the value to poke
      0  2358					      db	28
      1  2358		       1c		      .byte.b	28
      0  2359					      dw	EXPR
      1  2359		       0a 24		      .word.w	EXPR
      0  235b					      TSTB	UNKNOWNV,oRightBracket	; closing bracket
      0  235b					      db	101
      1  235b		       65		      .byte.b	101
      0  235c					      db	(UNKNOWNV-*)-1
      1  235c		       44		      .byte.b	(UNKNOWNV-*)-1
      0  235d					      db	oRightBracket
      1  235d		       e1		      .byte.b	oRightBracket
      0  235e					      POKEMEM
      0  235e					      db	47
      1  235e		       2f		      .byte.b	47
      0  235f					      DONE
      0  235f					      db	1
      1  235f		       01		      .byte.b	1
      0  2360					      NXT	CO	;AND SEQUENCE TO NEXT
      0  2360					      db	6
      1  2360		       06		      .byte.b	6
      0  2361					      dw	CO
      1  2361		       1f 22		      .word.w	CO
      0  2363					      IJMP	STMT
      0  2363					      db	29
      1  2363		       1d		      .byte.b	29
      0  2364					      dw	STMT
      1  2364		       27 22		      .word.w	STMT
    380  2366							;================================================================
    381  2366							; Write a single byte to the output device
    382  2366							;
    383  2366							;S8b:
    384  2366							;	  TSTB	      S8c,kPutch       ;Put a char to the terminal
    385  2366				   ekPutch
      0  2366					      CALL	EXPR
      0  2366					      db	28
      1  2366		       1c		      .byte.b	28
      0  2367					      dw	EXPR
      1  2367		       0a 24		      .word.w	EXPR
      0  2369					      PUTCHAR
      0  2369					      db	52
      1  2369		       34		      .byte.b	52
      0  236a					      DONE
      0  236a					      db	1
      1  236a		       01		      .byte.b	1
      0  236b					      NXT	CO	;AND SEQUENCE TO NEXT
      0  236b					      db	6
      1  236b		       06		      .byte.b	6
      0  236c					      dw	CO
      1  236c		       1f 22		      .word.w	CO
      0  236e					      IJMP	STMT
      0  236e					      db	29
      1  236e		       1d		      .byte.b	29
      0  236f					      dw	STMT
      1  236f		       27 22		      .word.w	STMT
    391  2371							;================================================================
    392  2371							; Clear the screen lines
    393  2371							;  Uses the vt100 control seq, so must be connected to vt100 terminal
    394  2371							;
    395  2371							;S8c
    396  2371							;	  TSTB	      S9,kCls	       ;Clear the screen
    397  2371				   ekCls
      0  2371					      CLEARSCREEN
      0  2371					      db	46
      1  2371		       2e		      .byte.b	46
      0  2372					      NXT	CO	;AND SEQUENCE TO NEXT
      0  2372					      db	6
      1  2372		       06		      .byte.b	6
      0  2373					      dw	CO
      1  2373		       1f 22		      .word.w	CO
      0  2375					      IJMP	STMT
      0  2375					      db	29
      1  2375		       1d		      .byte.b	29
      0  2376					      dw	STMT
      1  2376		       27 22		      .word.w	STMT
    401  2378							;==================================================================
    402  2378							; Get input from the terminal
    403  2378							;   Reads from the currently active input device
    404  2378							;
    405  2378							;S9:
    406  2378							;	  TSTB	     S13,kInput 	      ;INPUT STATEMENT
    407  2378				   ekInput
    408  2378				   S10
      0  2378					      TSTB	S10A,tString	;If there is a string print the prompt
      0  2378					      db	101
      1  2378		       65		      .byte.b	101
      0  2379					      db	(S10A-*)-1
      1  2379		       05		      .byte.b	(S10A-*)-1
      0  237a					      db	tString
      1  237a		       a0		      .byte.b	tString
      0  237b					      PRS
      0  237b					      db	2
      1  237b		       02		      .byte.b	2
      0  237c					      TSTB	S10Z,oSemiColon	;Must follow the prompt
      0  237c					      db	101
      1  237c		       65		      .byte.b	101
      0  237d					      db	(S10Z-*)-1
      1  237d		       18		      .byte.b	(S10Z-*)-1
      0  237e					      db	oSemiColon
      1  237e		       e3		      .byte.b	oSemiColon
    412  237f				   S10A
      0  237f					      TSTV	UNKNOWN	; GET VAR ADDRESS (Originally CALL VAR = nonexist)
      0  237f					      db	33
      1  237f		       21		      .byte.b	33
      0  2380					      db	(UNKNOWN-*)-1
      1  2380		       85		      .byte.b	(UNKNOWN-*)-1
      0  2381					      TSTB	S10ACONT,oBang	; Print from another task
      0  2381					      db	101
      1  2381		       65		      .byte.b	101
      0  2382					      db	(S10ACONT-*)-1
      1  2382		       04		      .byte.b	(S10ACONT-*)-1
      0  2383					      db	oBang
      1  2383		       e8		      .byte.b	oBang
      0  2384					      IND
      0  2384					      db	20
      1  2384		       14		      .byte.b	20
      0  2385					      TSTVT	UNKNOWN
      0  2385					      db	93
      1  2385		       5d		      .byte.b	93
      0  2386					      db	(UNKNOWN-*)-1
      1  2386		       7f		      .byte.b	(UNKNOWN-*)-1
    417  2387
    418  2387				   S10ACONT
      0  2387					      TSTB	S10A1,oDollar
      0  2387					      db	101
      1  2387		       65		      .byte.b	101
      0  2388					      db	(S10A1-*)-1
      1  2388		       05		      .byte.b	(S10A1-*)-1
      0  2389					      db	oDollar
      1  2389		       e7		      .byte.b	oDollar
      0  238a					      INSTR		;Move character From tty to AESTK
      0  238a					      db	59
      1  238a		       3b		      .byte.b	59
      0  238b					      IJMP	S10A2
      0  238b					      db	29
      1  238b		       1d		      .byte.b	29
      0  238c					      dw	S10A2
      1  238c		       8f 23		      .word.w	S10A2
    422  238e				   S10A1
      0  238e					      INNUM		;MOVE NUMBER FROM TTY TO AESTK
      0  238e					      db	11
      1  238e		       0b		      .byte.b	11
    424  238f				   S10A2
      0  238f					      STORE		;STORE IT
      0  238f					      db	19
      1  238f		       13		      .byte.b	19
      0  2390					      TSTB	S11,oComma	;IS THERE MORE?
      0  2390					      db	101
      1  2390		       65		      .byte.b	101
      0  2391					      db	(S11-*)-1
      1  2391		       07		      .byte.b	(S11-*)-1
      0  2392					      db	oComma
      1  2392		       e2		      .byte.b	oComma
      0  2393					      IJMP	S10	;YES
      0  2393					      db	29
      1  2393		       1d		      .byte.b	29
      0  2394					      dw	S10
      1  2394		       78 23		      .word.w	S10
    428  2396				   S10Z
      0  2396					      iJMP	UNKNOWN
      0  2396					      db	29
      1  2396		       1d		      .byte.b	29
      0  2397					      dw	UNKNOWN
      1  2397		       06 24		      .word.w	UNKNOWN
    430  2399				   S11
      0  2399					      DONE		;MUST BE CR
      0  2399					      db	1
      1  2399		       01		      .byte.b	1
      0  239a					      NXT	CO	;SEQUENCE TO NEXT
      0  239a					      db	6
      1  239a		       06		      .byte.b	6
      0  239b					      dw	CO
      1  239b		       1f 22		      .word.w	CO
      0  239d					      IJMP	STMT
      0  239d					      db	29
      1  239d		       1d		      .byte.b	29
      0  239e					      dw	STMT
      1  239e		       27 22		      .word.w	STMT
    434  23a0							;=====================================================================
    435  23a0							; End of program, return to command line process
    436  23a0							; Main Task may also use taske or return to stopped
    437  23a0							;
    438  23a0							;S13:
    439  23a0							;	  TSTB	      S14,kEnd
    440  23a0				   ekEnd
      0  23a0					      FIN
      0  23a0					      db	12
      1  23a0		       0c		      .byte.b	12
    442  23a1
    443  23a1				   UNKNOWNV
      0  23a1					      IJMP	UNKNOWN
      0  23a1					      db	29
      1  23a1		       1d		      .byte.b	29
      0  23a2					      dw	UNKNOWN
      1  23a2		       06 24		      .word.w	UNKNOWN
    445  23a4							;====================================================================
    446  23a4							; IRQ <IRQ-HANDLER-Line expression>
    447  23a4							;   Specify a line number subroutine to call when an interupt is processed
    448  23a4							;   These subroutines must use iret to return.
    449  23a4							;
    450  23a4							;S14:
    451  23a4							;	  TSTB	      S14Z,kIrq      ;Check if we are setting IRQ HANDLER
    452  23a4				   ekIrq
      0  23a4					      CALL	EXPR	;Get the LABEL .. line NUMBER
      0  23a4					      db	28
      1  23a4		       1c		      .byte.b	28
      0  23a5					      dw	EXPR
      1  23a5		       0a 24		      .word.w	EXPR
      0  23a7					      DONE		;must be CR
      0  23a7					      db	1
      1  23a7		       01		      .byte.b	1
      0  23a8					      SETIRQ		;Set the line number now
      0  23a8					      db	56
      1  23a8		       38		      .byte.b	56
      0  23a9					      NXT	CO	;SEQUENCE TO NEXT STATEMENT
      0  23a9					      db	6
      1  23a9		       06		      .byte.b	6
      0  23aa					      dw	CO
      1  23aa		       1f 22		      .word.w	CO
      0  23ac					      IJMP	STMT
      0  23ac					      db	29
      1  23ac		       1d		      .byte.b	29
      0  23ad					      dw	STMT
      1  23ad		       27 22		      .word.w	STMT
    458  23af
    459  23af							;=========================================================================
    460  23af							; KILL PID-expression	 kill a running task
    461  23af							;  ignored of task has already stopped
    462  23af							;
    463  23af							;S14Z:
    464  23af							;	  TSTB	     S14S1,kKill     ; Kill A running Task
    465  23af				   ekKill
      0  23af					      CALL	EXPR
      0  23af					      db	28
      1  23af		       1c		      .byte.b	28
      0  23b0					      dw	EXPR
      1  23b0		       0a 24		      .word.w	EXPR
      0  23b2					      DONE
      0  23b2					      db	1
      1  23b2		       01		      .byte.b	1
      0  23b3					      TASKKILL
      0  23b3					      db	65
      1  23b3		       41		      .byte.b	65
      0  23b4					      NXT	CO
      0  23b4					      db	6
      1  23b4		       06		      .byte.b	6
      0  23b5					      dw	CO
      1  23b5		       1f 22		      .word.w	CO
      0  23b7					      IJMP	STMT
      0  23b7					      db	29
      1  23b7		       1d		      .byte.b	29
      0  23b8					      dw	STMT
      1  23b8		       27 22		      .word.w	STMT
    471  23ba
    472  23ba							;============================================================================
    473  23ba							; List all program lines
    474  23ba							;
    475  23ba							;S14S1:
    476  23ba							;	  TSTB	      S15,kList      ;LIST COMMAND
    477  23ba				   ekList
      0  23ba					      DONE
      0  23ba					      db	1
      1  23ba		       01		      .byte.b	1
      0  23bb					      LST
      0  23bb					      db	21
      1  23bb		       15		      .byte.b	21
      0  23bc					      IJMP	CO
      0  23bc					      db	29
      1  23bc		       1d		      .byte.b	29
      0  23bd					      dw	CO
      1  23bd		       1f 22		      .word.w	CO
    481  23bf							;=======================================================================
    482  23bf							;RUN begin to executed the program in memory
    483  23bf							;
    484  23bf							;S15:
    485  23bf							;	  TSTB	      S16,kRun	     ;RUN COMMAND
    486  23bf				   ekRun
      0  23bf					      DONE
      0  23bf					      db	1
      1  23bf		       01		      .byte.b	1
      0  23c0					      VINIT		;clear variables compile the line numbers
      0  23c0					      db	30
      1  23c0		       1e		      .byte.b	30
      0  23c1					      LIT	1	;GOTO line 1
      0  23c1					      db	27
      1  23c1		       1b		      .byte.b	27
      0  23c2					      dw	1
      1  23c2		       01 00		      .word.w	1
      0  23c4					      XFER		;Bob's addition
      0  23c4					      db	7
      1  23c4		       07		      .byte.b	7
    491  23c5							; EXIT
      0  23c5					      IJMP	STMT	;and run!
      0  23c5					      db	29
      1  23c5		       1d		      .byte.b	29
      0  23c6					      dw	STMT
      1  23c6		       27 22		      .word.w	STMT
    493  23c8							;=========================================================================
    494  23c8							;Clear the program memory, delete all proram lines
    495  23c8							;
    496  23c8							;S16:
    497  23c8							;	  TSTB	      S16A,kNew      ;clear program
    498  23c8				   ekNew
      0  23c8					      DONE
      0  23c8					      db	1
      1  23c8		       01		      .byte.b	1
      0  23c9					      IJMP	START
      0  23c9					      db	29
      1  23c9		       1d		      .byte.b	29
      0  23ca					      dw	START
      1  23ca		       19 22		      .word.w	START
    501  23cc
    502  23cc							;========================================================================
    503  23cc							; Slice(slice legth expression)
    504  23cc							;   set the length of time between task switches
    505  23cc							;
    506  23cc							;S16A:
    507  23cc							;	  TSTB	      S16Trace,kSlice
    508  23cc				   ekSlice
      0  23cc					      CALL	EXPR
      0  23cc					      db	28
      1  23cc		       1c		      .byte.b	28
      0  23cd					      dw	EXPR
      1  23cd		       0a 24		      .word.w	EXPR
      0  23cf					      SLICE
      0  23cf					      db	100
      1  23cf		       64		      .byte.b	100
      0  23d0					      DONE
      0  23d0					      db	1
      1  23d0		       01		      .byte.b	1
      0  23d1					      NXT	CO
      0  23d1					      db	6
      1  23d1		       06		      .byte.b	6
      0  23d2					      dw	CO
      1  23d2		       1f 22		      .word.w	CO
      0  23d4					      IJMP	STMT
      0  23d4					      db	29
      1  23d4		       1d		      .byte.b	29
      0  23d5					      dw	STMT
      1  23d5		       27 22		      .word.w	STMT
    514  23d7							;==========================================================================
    515  23d7							; Turn off and on the thrace functions
    516  23d7							; a debug terminal needs to be available
    517  23d7							; Trace( Trace flag expression)
    518  23d7							;	128 trace IL code, 64 trace basic code, 1 turn on interactive debug
    519  23d7							;	for individual lines of basic code. These can be combined
    520  23d7							;S16Trace:
    521  23d7							;	  TSTB	      S17A,kTrace
    522  23d7				   ekTrace
      0  23d7					      TSTB	UNKNOWN,oLeftBracket	;Are we going to trace
      0  23d7					      db	101
      1  23d7		       65		      .byte.b	101
      0  23d8					      db	(UNKNOWN-*)-1
      1  23d8		       2d		      .byte.b	(UNKNOWN-*)-1
      0  23d9					      db	oLeftBracket
      1  23d9		       e0		      .byte.b	oLeftBracket
      0  23da					      CALL	EXPR
      0  23da					      db	28
      1  23da		       1c		      .byte.b	28
      0  23db					      dw	EXPR
      1  23db		       0a 24		      .word.w	EXPR
      0  23dd					      TSTB	UNKNOWN,oRightBracket
      0  23dd					      db	101
      1  23dd		       65		      .byte.b	101
      0  23de					      db	(UNKNOWN-*)-1
      1  23de		       27		      .byte.b	(UNKNOWN-*)-1
      0  23df					      db	oRightBracket
      1  23df		       e1		      .byte.b	oRightBracket
      0  23e0					      TRACEPROGRAM
      0  23e0					      db	78
      1  23e0		       4e		      .byte.b	78
      0  23e1					      DONE
      0  23e1					      db	1
      1  23e1		       01		      .byte.b	1
      0  23e2					      NXT	CO
      0  23e2					      db	6
      1  23e2		       06		      .byte.b	6
      0  23e3					      dw	CO
      1  23e3		       1f 22		      .word.w	CO
      0  23e5					      IJMP	STMT
      0  23e5					      db	29
      1  23e5		       1d		      .byte.b	29
      0  23e6					      dw	STMT
      1  23e6		       27 22		      .word.w	STMT
    530  23e8							;=====================================================================
    531  23e8							; Exit basic to machine monitor
    532  23e8							;
    533  23e8							;S17A:
    534  23e8							;	  TSTB	      S17B,kExit      ;allow them to exit BASIC
    535  23e8				   ekExit
      0  23e8					      EXIT
      0  23e8					      db	26
      1  23e8		       1a		      .byte.b	26
    537  23e9
    538  23e9							;=======================================================================
    539  23e9							; Commands related to saving/restoring programs
    540  23e9							; to/from mass storage.
    541  23e9							;=======================================================================
    542  23e9							; Save a program file
    543  23e9							;
    544  23e9							;S17B:
    545  23e9					      if	(XKIM || CTMON65) && DISK_ACCESS
    546  23e9
    547  23e9							;	  TSTB	      S17C,kSave
    548  23e9				   ekSave
      0  23e9					      OPENWRITE
      0  23e9					      db	40
      1  23e9		       28		      .byte.b	40
      0  23ea					      DLIST
      0  23ea					      db	43
      1  23ea		       2b		      .byte.b	43
      0  23eb					      DCLOSE
      0  23eb					      db	41
      1  23eb		       29		      .byte.b	41
      0  23ec					      IJMP	CO
      0  23ec					      db	29
      1  23ec		       1d		      .byte.b	29
      0  23ed					      dw	CO
      1  23ed		       1f 22		      .word.w	CO
    553  23ef							;=========================================================================
    554  23ef							; Load a program file
    555  23ef							;
    556  23ef							;S17C:
    557  23ef							;	  TSTB	      S18,kLoad
    558  23ef				   ekLoad
      0  23ef					      OPENREAD
      0  23ef					      db	39
      1  23ef		       27		      .byte.b	39
    560  23f0				   S17CLP
      0  23f0					      DGETLINE		;get line from file
      0  23f0					      db	42
      1  23f0		       2a		      .byte.b	42
      0  23f1					      TSTL	S17EOL	;no line num means EOL
      0  23f1					      db	34
      1  23f1		       22		      .byte.b	34
      0  23f2					      db	(S17EOL-*)-1
      1  23f2		       04		      .byte.b	(S17EOL-*)-1
      0  23f3					      INSERT		;put it into the program
      0  23f3					      db	24
      1  23f3		       18		      .byte.b	24
      0  23f4					      IJMP	S17CLP	;keep going
      0  23f4					      db	29
      1  23f4		       1d		      .byte.b	29
      0  23f5					      dw	S17CLP
      1  23f5		       f0 23		      .word.w	S17CLP
    565  23f7				   S17EOL
      0  23f7					      DCLOSE		;close disk file
      0  23f7					      db	41
      1  23f7		       29		      .byte.b	41
      0  23f8					      IJMP	CO	;back to start
      0  23f8					      db	29
      1  23f8		       1d		      .byte.b	29
      0  23f9					      dw	CO
      1  23f9		       1f 22		      .word.w	CO
    568  23fb							;=========================================================================
    569  23fb							; Display the directory content
    570  23fb							;
    571  23fb							;S18:
    572  23fb							;	  TSTB	      S19,kDir
    573  23fb				   ekDir
      0  23fb					      DDIR		;Display the directory content
      0  23fb					      db	44
      1  23fb		       2c		      .byte.b	44
      0  23fc					      IJMP	CO
      0  23fc					      db	29
      1  23fc		       1d		      .byte.b	29
      0  23fd					      dw	CO
      1  23fd		       1f 22		      .word.w	CO
    576  23ff							;=========================================================================
    577  23ff							; Erase a file from disk
    578  23ff							;
      0  23ff				   S19	      TSTB	UNKNOWN,kErase
      0  23ff					      db	101
      1  23ff		       65		      .byte.b	101
      0  2400					      db	(UNKNOWN-*)-1
      1  2400		       05		      .byte.b	(UNKNOWN-*)-1
      0  2401					      db	kErase
      1  2401		       1e		      .byte.b	kErase
    580  2402				   ekErase
      0  2402					      RMFILE		;Erase the file from the disk
      0  2402					      db	45
      1  2402		       2d		      .byte.b	45
      0  2403					      IJMP	CO
      0  2403					      db	29
      1  2403		       1d		      .byte.b	29
      0  2404					      dw	CO
      1  2404		       1f 22		      .word.w	CO
    583  2406
    584  2406					      endif
    585  2406
    586  2406							;===========================================================================
    587  2406							; Else, unknown command.
    588  2406							;
    589  2406				   UNKNOWN
      0  2406					      ENDIO
      0  2406					      db	71
      1  2406		       47		      .byte.b	71
    591  2407
    592  2407				   NotKnownStatement
    593  2407
      0  2407					      ERRMSG	ERR_SYNTAX	;SYNTAX ERROR
      0  2407					      db	13
      1  2407		       0d		      .byte.b	13
      0  2408					      dw	ERR_SYNTAX
      1  2408		       05 00		      .word.w	ERR_SYNTAX
    595  240a
    596  240a							;=======================================================
    597  240a							; Process Expresions, precidence is represented by the
    598  240a							; various call levels
    599  240a							;
    600  240a				   EXPR
      0  240a					      TSTB	EXPRLOGS,kNot
      0  240a					      db	101
      1  240a		       65		      .byte.b	101
      0  240b					      db	(EXPRLOGS-*)-1
      1  240b		       06		      .byte.b	(EXPRLOGS-*)-1
      0  240c					      db	kNot
      1  240c		       20		      .byte.b	kNot
    602  240d				   ekNot
      0  240d					      Call	EXPR
      0  240d					      db	28
      1  240d		       1c		      .byte.b	28
      0  240e					      dw	EXPR
      1  240e		       0a 24		      .word.w	EXPR
      0  2410					      LOGNOT
      0  2410					      db	72
      1  2410		       48		      .byte.b	72
      0  2411					      RTN
      0  2411					      db	25
      1  2411		       19		      .byte.b	25
    606  2412
    607  2412							;=========================================================
    608  2412							;Look for logical operators
    609  2412				   EXPRLOGS
      0  2412					      Call	EXPRCMP
      0  2412					      db	28
      1  2412		       1c		      .byte.b	28
      0  2413					      dw	EXPRCMP
      1  2413		       29 24		      .word.w	EXPRCMP
      0  2415					      OnGoto	BasicLogical,iLOG3
      0  2415					      db	103
      1  2415		       67		      .byte.b	103
      0  2416					      dw	BasicLogical
      1  2416		       f1 21		      .word.w	BasicLogical
      0  2418					      dw	iLOG3
      1  2418		       28 24		      .word.w	iLOG3
    612  241a							;	  TSTB	     iLOG1,kAnd
    613  241a				   ekAnd
      0  241a					      Call	EXPR
      0  241a					      db	28
      1  241a		       1c		      .byte.b	28
      0  241b					      dw	EXPR
      1  241b		       0a 24		      .word.w	EXPR
      0  241d					      LOGAND
      0  241d					      db	74
      1  241d		       4a		      .byte.b	74
      0  241e					      RTN
      0  241e					      db	25
      1  241e		       19		      .byte.b	25
    617  241f							;iLOG1:
    618  241f							;	  TSTB	     iLOG2,kOr
    619  241f				   ekOr
      0  241f					      Call	EXPR
      0  241f					      db	28
      1  241f		       1c		      .byte.b	28
      0  2420					      dw	EXPR
      1  2420		       0a 24		      .word.w	EXPR
      0  2422					      LOGOR
      0  2422					      db	73
      1  2422		       49		      .byte.b	73
      0  2423					      RTN
      0  2423					      db	25
      1  2423		       19		      .byte.b	25
    623  2424							;iLOG2:
    624  2424							;	  TSTB	  iLOG3,kXor
    625  2424				   ekXor
      0  2424					      Call	EXPR
      0  2424					      db	28
      1  2424		       1c		      .byte.b	28
      0  2425					      dw	EXPR
      1  2425		       0a 24		      .word.w	EXPR
      0  2427					      LOGXOR
      0  2427					      db	75
      1  2427		       4b		      .byte.b	75
    628  2428				   iLOG3
      0  2428					      RTN
      0  2428					      db	25
      1  2428		       19		      .byte.b	25
    630  2429							;========================================================================
    631  2429							; Process relational operators
    632  2429							;
    633  2429				   EXPRCMP
      0  2429					      Call	EXPR2	; get the first expression
      0  2429					      db	28
      1  2429		       1c		      .byte.b	28
      0  242a					      dw	EXPR2
      1  242a		       34 24		      .word.w	EXPR2
      0  242c					      TSTRELOP	iRDone	; Exit level if no rel ops found
      0  242c					      db	104
      1  242c		       68		      .byte.b	104
      0  242d					      db	(iRDone-*)-1
      1  242d		       05		      .byte.b	(iRDone-*)-1
    636  242e							;	  TSTB	     iR0,oEqual
    637  242e							;	  LIT	     2		     ;=
    638  242e							;	  IJMP	     iRFound
    639  242e							;iR0:
    640  242e							;	  TSTB	      iR1,oLessEqual
    641  242e							;	  LIT	      3 	      ;<=
    642  242e							;	  IJMP	     iRFound
    643  242e							;iR1:
    644  242e							;	  TSTB	     iR3,oNotEqual
    645  242e							;	  LIT	     5		      ;<>
    646  242e							;	      IJMP	  iRFound
    647  242e							;iR3:
    648  242e							;	  TSTB	     iR4,oLess
    649  242e							;	  LIT	     1		     ;<
    650  242e							;	      IJMP	  iRFound
    651  242e							;iR4:
    652  242e							;	  TST	     iR5,oGreaterEqual
    653  242e							;	  LIT	     6		     ;>=
    654  242e							;	      IJMP	  iRFound
    655  242e							;iR5:
    656  242e							;	  TSTB	     iRDone,oGreater
    657  242e							;	  LIT	     4		     ;>
    658  242e				   iRFound
      0  242e					      Call	EXPR	; get the right side of the expression
      0  242e					      db	28
      1  242e		       1c		      .byte.b	28
      0  242f					      dw	EXPR
      1  242f		       0a 24		      .word.w	EXPR
      0  2431					      CMPR		; Push the value of the true false onto the stack
      0  2431					      db	10
      1  2431		       0a		      .byte.b	10
      0  2432					      RTN
      0  2432					      db	25
      1  2432		       19		      .byte.b	25
    662  2433
    663  2433				   iRDone
      0  2433					      RTN
      0  2433					      db	25
      1  2433		       19		      .byte.b	25
    665  2434
    666  2434				   EXPR2
      0  2434					      TSTB	E0,oMinus	; Look for leading - to negate term
      0  2434					      db	101
      1  2434		       65		      .byte.b	101
      0  2435					      db	(E0-*)-1
      1  2435		       08		      .byte.b	(E0-*)-1
      0  2436					      db	oMinus
      1  2436		       eb		      .byte.b	oMinus
      0  2437					      CALL	TERM	; Get value to negate FOR UNARY -.
      0  2437					      db	28
      1  2437		       1c		      .byte.b	28
      0  2438					      dw	TERM
      1  2438		       5a 24		      .word.w	TERM
      0  243a					      NEG		; Make value negated
      0  243a					      db	16
      1  243a		       10		      .byte.b	16
      0  243b					      IJMP	E1	; We have Left term process operators next
      0  243b					      db	29
      1  243b		       1d		      .byte.b	29
      0  243c					      dw	E1
      1  243c		       44 24		      .word.w	E1
    671  243e				   E0
      0  243e					      TSTB	E1A,oPlus	; Look for a leading + for value and disgard it if found
      0  243e					      db	101
      1  243e		       65		      .byte.b	101
      0  243f					      db	(E1A-*)-1
      1  243f		       01		      .byte.b	(E1A-*)-1
      0  2440					      db	oPlus
      1  2440		       ea		      .byte.b	oPlus
    673  2441				   E1A
      0  2441					      CALL	TERM	; Get the left term if it was not negated
      0  2441					      db	28
      1  2441		       1c		      .byte.b	28
      0  2442					      dw	TERM
      1  2442		       5a 24		      .word.w	TERM
    675  2444				   E1
      0  2444					      TST	E2,oPlus	; Check if we are adding left term to something
      0  2444					      db	32
      1  2444		       20		      .byte.b	32
      0  2445					      db	(E2-*)-1
      1  2445		       09		      .byte.b	(E2-*)-1
      0  2446					      db	oPlus,0
      1  2446		       ea 00		      .byte.b	oPlus,0
      0  2448					      CALL	TERM	; if adding then get the right side term
      0  2448					      db	28
      1  2448		       1c		      .byte.b	28
      0  2449					      dw	TERM
      1  2449		       5a 24		      .word.w	TERM
      0  244b					      ADD		; Add it to left term
      0  244b					      db	14
      1  244b		       0e		      .byte.b	14
      0  244c					      IJMP	E1	; look for next + or -
      0  244c					      db	29
      1  244c		       1d		      .byte.b	29
      0  244d					      dw	E1
      1  244d		       44 24		      .word.w	E1
    680  244f				   E2
      0  244f					      TSTB	E3,oMinus	; Check if we are subtractig something
      0  244f					      db	101
      1  244f		       65		      .byte.b	101
      0  2450					      db	(E3-*)-1
      1  2450		       08		      .byte.b	(E3-*)-1
      0  2451					      db	oMinus
      1  2451		       eb		      .byte.b	oMinus
      0  2452					      CALL	TERM	; get right side to subtract Diffrence
      0  2452					      db	28
      1  2452		       1c		      .byte.b	28
      0  2453					      dw	TERM
      1  2453		       5a 24		      .word.w	TERM
      0  2455					      SUB		; Subtract the value
      0  2455					      db	15
      1  2455		       0f		      .byte.b	15
      0  2456					      IJMP	E1	; Look for next + or -
      0  2456					      db	29
      1  2456		       1d		      .byte.b	29
      0  2457					      dw	E1
      1  2457		       44 24		      .word.w	E1
    685  2459				   E3			; Finish processing the expression
      0  2459					      RTN		; We are finished processing the Expression
      0  2459					      db	25
      1  2459		       19		      .byte.b	25
    687  245a							;
    688  245a							; Get one of the terms of an expression
    689  245a							;
    690  245a				   TERM
      0  245a					      CALL	FACT	; Get a value
      0  245a					      db	28
      1  245a		       1c		      .byte.b	28
      0  245b					      dw	FACT
      1  245b		       7f 24		      .word.w	FACT
    692  245d				   T0			; Check for higher precidence operators
      0  245d					      TSTB	T1,oMultiply	; Check for *
      0  245d					      db	101
      1  245d		       65		      .byte.b	101
      0  245e					      db	(T1-*)-1
      1  245e		       08		      .byte.b	(T1-*)-1
      0  245f					      db	oMultiply
      1  245f		       ee		      .byte.b	oMultiply
      0  2460					      CALL	FACT	; Get right side of term PRODUCT FACTOR.
      0  2460					      db	28
      1  2460		       1c		      .byte.b	28
      0  2461					      dw	FACT
      1  2461		       7f 24		      .word.w	FACT
      0  2463					      MUL		; Multiply factors
      0  2463					      db	17
      1  2463		       11		      .byte.b	17
      0  2464					      IJMP	T0	; Check for * or /
      0  2464					      db	29
      1  2464		       1d		      .byte.b	29
      0  2465					      dw	T0
      1  2465		       5d 24		      .word.w	T0
    697  2467				   T1
      0  2467					      TSTB	T2,oDivide	; Check for a division
      0  2467					      db	101
      1  2467		       65		      .byte.b	101
      0  2468					      db	(T2-*)-1
      1  2468		       08		      .byte.b	(T2-*)-1
      0  2469					      db	oDivide
      1  2469		       ec		      .byte.b	oDivide
      0  246a					      CALL	FACT	; get right side QUOTIENT FACTOR.
      0  246a					      db	28
      1  246a		       1c		      .byte.b	28
      0  246b					      dw	FACT
      1  246b		       7f 24		      .word.w	FACT
      0  246d					      DIV		; do division
      0  246d					      db	18
      1  246d		       12		      .byte.b	18
      0  246e					      IJMP	T0	; check for more * or /
      0  246e					      db	29
      1  246e		       1d		      .byte.b	29
      0  246f					      dw	T0
      1  246f		       5d 24		      .word.w	T0
    702  2471				   T2
      0  2471					      TSTB	T3,oModulo	; Check for a division
      0  2471					      db	101
      1  2471		       65		      .byte.b	101
      0  2472					      db	(T3-*)-1
      1  2472		       08		      .byte.b	(T3-*)-1
      0  2473					      db	oModulo
      1  2473		       ed		      .byte.b	oModulo
      0  2474					      CALL	FACT	; get right side QUOTIENT FACTOR.
      0  2474					      db	28
      1  2474		       1c		      .byte.b	28
      0  2475					      dw	FACT
      1  2475		       7f 24		      .word.w	FACT
      0  2477					      MODULO		; do division for remainder
      0  2477					      db	60
      1  2477		       3c		      .byte.b	60
      0  2478					      IJMP	T0	; check for more * or / or %
      0  2478					      db	29
      1  2478		       1d		      .byte.b	29
      0  2479					      dw	T0
      1  2479		       5d 24		      .word.w	T0
    707  247b				   T3			; Finish processing the Term
      0  247b					      RTN
      0  247b					      db	25
      1  247b		       19		      .byte.b	25
    709  247c
    710  247c				   UNKNOWNVEC
      0  247c					      IJMP	UNKNOWN
      0  247c					      db	29
      1  247c		       1d		      .byte.b	29
      0  247d					      dw	UNKNOWN
      1  247d		       06 24		      .word.w	UNKNOWN
    712  247f
    713  247f							;=============================================================================================
    714  247f							; Factor an expression.  Always test for functions
    715  247f							; first or else they'll be confused for variables.
    716  247f							;
    717  247f				   FACT
      0  247f					      OnGoto	BasicFuncs,FactNumber
      0  247f					      db	103
      1  247f		       67		      .byte.b	103
      0  2480					      dw	BasicFuncs
      1  2480		       f9 21		      .word.w	BasicFuncs
      0  2482					      dw	FactNumber
      1  2482		       49 25		      .word.w	FactNumber
    719  2484
    720  2484							;FACTCONTINUE:
    721  2484							;	  TSTB	     F1AA,kTrue
    722  2484				   ekTrue
      0  2484					      LIT	-1
      0  2484					      db	27
      1  2484		       1b		      .byte.b	27
      0  2485					      dw	-1
      1  2485		       ff ff		      .word.w	-1
      0  2487					      RTN
      0  2487					      db	25
      1  2487		       19		      .byte.b	25
    725  2488							;F1AA:
    726  2488							;	  TSTB	     F1AB,kFalse
    727  2488				   ekFalse
      0  2488					      LIT	0
      0  2488					      db	27
      1  2488		       1b		      .byte.b	27
      0  2489					      dw	0
      1  2489		       00 00		      .word.w	0
      0  248b					      RTN
      0  248b					      db	25
      1  248b		       19		      .byte.b	25
    730  248c							;==================================================================================
    731  248c							; Returns the amount of free SPACE
    732  248c							;
    733  248c							;F1AB
    734  248c							;	  TSTB	     F1A,kFree
    735  248c				   ekFree
      0  248c					      TSTB	UNKNOWNVEC,oLeftBracket
      0  248c					      db	101
      1  248c		       65		      .byte.b	101
      0  248d					      db	(UNKNOWNVEC-*)-1
      1  248d		       ee		      .byte.b	(UNKNOWNVEC-*)-1
      0  248e					      db	oLeftBracket
      1  248e		       e0		      .byte.b	oLeftBracket
      0  248f					      TSTB	UNKNOWNVEC,oRightBracket
      0  248f					      db	101
      1  248f		       65		      .byte.b	101
      0  2490					      db	(UNKNOWNVEC-*)-1
      1  2490		       eb		      .byte.b	(UNKNOWNVEC-*)-1
      0  2491					      db	oRightBracket
      1  2491		       e1		      .byte.b	oRightBracket
      0  2492					      FREE
      0  2492					      db	36
      1  2492		       24		      .byte.b	36
      0  2493					      RTN
      0  2493					      db	25
      1  2493		       19		      .byte.b	25
    740  2494							;===================================================================================
    741  2494							; getch() read a character from the input device
    742  2494							;
    743  2494							;F1A:
    744  2494							;	  TSTB	     F1A2,kGetch		      ; read char from the terminal
    745  2494				   ekGetch
      0  2494					      TSTB	UNKNOWNVEC,oLeftBracket
      0  2494					      db	101
      1  2494		       65		      .byte.b	101
      0  2495					      db	(UNKNOWNVEC-*)-1
      1  2495		       e6		      .byte.b	(UNKNOWNVEC-*)-1
      0  2496					      db	oLeftBracket
      1  2496		       e0		      .byte.b	oLeftBracket
      0  2497					      TSTB	UNKNOWNVEC,oRightBracket
      0  2497					      db	101
      1  2497		       65		      .byte.b	101
      0  2498					      db	(UNKNOWNVEC-*)-1
      1  2498		       e3		      .byte.b	(UNKNOWNVEC-*)-1
      0  2499					      db	oRightBracket
      1  2499		       e1		      .byte.b	oRightBracket
      0  249a					      GETCHAR
      0  249a					      db	51
      1  249a		       33		      .byte.b	51
      0  249b					      RTN
      0  249b					      db	25
      1  249b		       19		      .byte.b	25
    750  249c							;====================================================================================
    751  249c							; peek(mem address) return the value of a byte in memory
    752  249c							; @[offset] return a word value from offset -- see tstv
    753  249c							;
    754  249c							;F1A2:
    755  249c							;	  TSTB	      F2AZ,kPeek		      ;Return a value from memory
    756  249c				   ekPeek
      0  249c					      TSTB	UNKNOWNVEC,oLeftBracket
      0  249c					      db	101
      1  249c		       65		      .byte.b	101
      0  249d					      db	(UNKNOWNVEC-*)-1
      1  249d		       de		      .byte.b	(UNKNOWNVEC-*)-1
      0  249e					      db	oLeftBracket
      1  249e		       e0		      .byte.b	oLeftBracket
      0  249f					      CALL	EXPR	;Get the address to write to
      0  249f					      db	28
      1  249f		       1c		      .byte.b	28
      0  24a0					      dw	EXPR
      1  24a0		       0a 24		      .word.w	EXPR
      0  24a2					      TSTB	UNKNOWNVEC,oRightBracket
      0  24a2					      db	101
      1  24a2		       65		      .byte.b	101
      0  24a3					      db	(UNKNOWNVEC-*)-1
      1  24a3		       d8		      .byte.b	(UNKNOWNVEC-*)-1
      0  24a4					      db	oRightBracket
      1  24a4		       e1		      .byte.b	oRightBracket
      0  24a5					      PEEKMEM
      0  24a5					      db	48
      1  24a5		       30		      .byte.b	48
      0  24a6					      RTN
      0  24a6					      db	25
      1  24a6		       19		      .byte.b	25
    762  24a7							;=======================================================================================
    763  24a7							; TASK(line-num expr,[Parm1,....]) start a task with or without Parameters
    764  24a7							;
    765  24a7							;F2AZ:
    766  24a7							;	  TSTB	      F2AZ1,kTask		      ;Check if we are setting a task start
    767  24a7				   ekTask
      0  24a7					      TSTBRANCH	ekTaskCompiled
      0  24a7					      db	106
      1  24a7		       6a		      .byte.b	106
      0  24a8					      db	(ekTaskCompiled-*)-1
      1  24a8		       0c		      .byte.b	(ekTaskCompiled-*)-1
      0  24a9					      TSTB	UNKNOWNVEC,oLeftBracket
      0  24a9					      db	101
      1  24a9		       65		      .byte.b	101
      0  24aa					      db	(UNKNOWNVEC-*)-1
      1  24aa		       d1		      .byte.b	(UNKNOWNVEC-*)-1
      0  24ab					      db	oLeftBracket
      1  24ab		       e0		      .byte.b	oLeftBracket
      0  24ac					      CALL	EXPR	;Get the LABEL .. line NUMBER
      0  24ac					      db	28
      1  24ac		       1c		      .byte.b	28
      0  24ad					      dw	EXPR
      1  24ad		       0a 24		      .word.w	EXPR
      0  24af					      lit	0
      0  24af					      db	27
      1  24af		       1b		      .byte.b	27
      0  24b0					      dw	0
      1  24b0		       00 00		      .word.w	0
      0  24b2					      iJMP	ekTaskLinenum
      0  24b2					      db	29
      1  24b2		       1d		      .byte.b	29
      0  24b3					      dw	ekTaskLinenum
      1  24b3		       b8 24		      .word.w	ekTaskLinenum
    773  24b5
    774  24b5				   ekTaskCompiled
      0  24b5					      lit	1
      0  24b5					      db	27
      1  24b5		       1b		      .byte.b	27
      0  24b6					      dw	1
      1  24b6		       01 00		      .word.w	1
    776  24b8
    777  24b8				   ekTaskLinenum
      0  24b8					      TASKCREATE		;Allocate the task and initialize it, Suspended
      0  24b8					      db	61
      1  24b8		       3d		      .byte.b	61
      0  24b9					      TSTB	F2AZNoParms,oComma	;Parameters to be passed to task
      0  24b9					      db	101
      1  24b9		       65		      .byte.b	101
      0  24ba					      db	(F2AZNoParms-*)-1
      1  24ba		       0e		      .byte.b	(F2AZNoParms-*)-1
      0  24bb					      db	oComma
      1  24bb		       e2		      .byte.b	oComma
      0  24bc					      SAVEMATHSTACK		;Push The mathstack
      0  24bc					      db	86
      1  24bc		       56		      .byte.b	86
      0  24bd					      TASKGETMATHSTACK		;Make the New Task Stack The current stack
      0  24bd					      db	89
      1  24bd		       59		      .byte.b	89
    782  24be				   F2AZLOOP
      0  24be					      CALL	EXPR	;do the expression leave answer on tasks stack
      0  24be					      db	28
      1  24be		       1c		      .byte.b	28
      0  24bf					      dw	EXPR
      1  24bf		       0a 24		      .word.w	EXPR
      0  24c1					      TSTB	F2AZEndParm,oComma	;Parameters to be passed tp task
      0  24c1					      db	101
      1  24c1		       65		      .byte.b	101
      0  24c2					      db	(F2AZEndParm-*)-1
      1  24c2		       04		      .byte.b	(F2AZEndParm-*)-1
      0  24c3					      db	oComma
      1  24c3		       e2		      .byte.b	oComma
      0  24c4					      IJMP	F2AZLOOP	;check for more
      0  24c4					      db	29
      1  24c4		       1d		      .byte.b	29
      0  24c5					      dw	F2AZLOOP
      1  24c5		       be 24		      .word.w	F2AZLOOP
    786  24c7
    787  24c7				   F2AZEndParm
      0  24c7					      RESTOREMATHSTACK		;Back to normal stack
      0  24c7					      db	87
      1  24c7		       57		      .byte.b	87
      0  24c8					      TASKPUTMATHPTR		;Update the tasks stack pointer with parameter count
      0  24c8					      db	92
      1  24c8		       5c		      .byte.b	92
    790  24c9
    791  24c9				   F2AZNoParms
      0  24c9					      TSTB	UNKNOWNVEC,oRightBracket	;must be )
      0  24c9					      db	101
      1  24c9		       65		      .byte.b	101
      0  24ca					      db	(UNKNOWNVEC-*)-1
      1  24ca		       b1		      .byte.b	(UNKNOWNVEC-*)-1
      0  24cb					      db	oRightBracket
      1  24cb		       e1		      .byte.b	oRightBracket
    793  24cc
      0  24cc					      TASKENABLE		;Enable the task to execute
      0  24cc					      db	90
      1  24cc		       5a		      .byte.b	90
    795  24cd
      0  24cd					      RTN		;Returns the Task number
      0  24cd					      db	25
      1  24cd		       19		      .byte.b	25
    797  24ce							;=========================================================================================
    798  24ce							; Check for IPC interproccess instructions
    799  24ce							;   IPCS  - Send a message
    800  24ce							;
    801  24ce							;F2AZ1:
    802  24ce							;	  TSTB	      F2AZa,kIpcs		      ;Test if one of the IPC functions
    803  24ce				   ekIpcs
      0  24ce					      TSTB	UNKNOWNVEC,oLeftBracket	;IPCS - send a message
      0  24ce					      db	101
      1  24ce		       65		      .byte.b	101
      0  24cf					      db	(UNKNOWNVEC-*)-1
      1  24cf		       ac		      .byte.b	(UNKNOWNVEC-*)-1
      0  24d0					      db	oLeftBracket
      1  24d0		       e0		      .byte.b	oLeftBracket
      0  24d1					      CALL	EXPR	;Get the message value
      0  24d1					      db	28
      1  24d1		       1c		      .byte.b	28
      0  24d2					      dw	EXPR
      1  24d2		       0a 24		      .word.w	EXPR
      0  24d4					      TSTB	UNKNOWNVEC,oComma
      0  24d4					      db	101
      1  24d4		       65		      .byte.b	101
      0  24d5					      db	(UNKNOWNVEC-*)-1
      1  24d5		       a6		      .byte.b	(UNKNOWNVEC-*)-1
      0  24d6					      db	oComma
      1  24d6		       e2		      .byte.b	oComma
      0  24d7					      CALL	EXPR	;Get pid of task to send to
      0  24d7					      db	28
      1  24d7		       1c		      .byte.b	28
      0  24d8					      dw	EXPR
      1  24d8		       0a 24		      .word.w	EXPR
      0  24da					      TSTB	UNKNOWNVEC,oRightBracket
      0  24da					      db	101
      1  24da		       65		      .byte.b	101
      0  24db					      db	(UNKNOWNVEC-*)-1
      1  24db		       a0		      .byte.b	(UNKNOWNVEC-*)-1
      0  24dc					      db	oRightBracket
      1  24dc		       e1		      .byte.b	oRightBracket
      0  24dd					      IPCSEND		;Send msg and clear pid msg pending
      0  24dd					      db	80
      1  24dd		       50		      .byte.b	80
      0  24de					      RTN
      0  24de					      db	25
      1  24de		       19		      .byte.b	25
    811  24df							;================================================================================
    812  24df							; IPCR() --- recieve a message, IPCR(VARIABLE) -- receive msg and return pid in var
    813  24df							;
    814  24df							;F2AZa:
    815  24df							;	  TSTB	      F2AZb,kIpcr		      ;IPCR recieve a message , wait if none
    816  24df				   ekIpcr
      0  24df					      TSTB	UNKNOWNVEC,oLeftBracket	;IPCS - send a message
      0  24df					      db	101
      1  24df		       65		      .byte.b	101
      0  24e0					      db	(UNKNOWNVEC-*)-1
      1  24e0		       9b		      .byte.b	(UNKNOWNVEC-*)-1
      0  24e1					      db	oLeftBracket
      1  24e1		       e0		      .byte.b	oLeftBracket
      0  24e2					      TSTB	F2AZa1,oRightBracket
      0  24e2					      db	101
      1  24e2		       65		      .byte.b	101
      0  24e3					      db	(F2AZa1-*)-1
      1  24e3		       07		      .byte.b	(F2AZa1-*)-1
      0  24e4					      db	oRightBracket
      1  24e4		       e1		      .byte.b	oRightBracket
      0  24e5					      LIT	0	;We dont want the pid returned to us
      0  24e5					      db	27
      1  24e5		       1b		      .byte.b	27
      0  24e6					      dw	0
      1  24e6		       00 00		      .word.w	0
      0  24e8					      IJMP	ekIpcrComplete
      0  24e8					      db	29
      1  24e8		       1d		      .byte.b	29
      0  24e9					      dw	ekIpcrComplete
      1  24e9		       f0 24		      .word.w	ekIpcrComplete
    821  24eb				   F2AZa1
      0  24eb					      TSTV	UNKNOWNVEC	;must be a variable to return pid of message to
      0  24eb					      db	33
      1  24eb		       21		      .byte.b	33
      0  24ec					      db	(UNKNOWNVEC-*)-1
      1  24ec		       8f		      .byte.b	(UNKNOWNVEC-*)-1
      0  24ed					      TSTB	UNKNOWNVEC,oRightBracket
      0  24ed					      db	101
      1  24ed		       65		      .byte.b	101
      0  24ee					      db	(UNKNOWNVEC-*)-1
      1  24ee		       8d		      .byte.b	(UNKNOWNVEC-*)-1
      0  24ef					      db	oRightBracket
      1  24ef		       e1		      .byte.b	oRightBracket
    824  24f0
    825  24f0				   ekIpcrComplete
      0  24f0					      IPCIO		;Set the io bit and exit task till message
      0  24f0					      db	83
      1  24f0		       53		      .byte.b	83
      0  24f1					      IPCRECEIVE		;Get the message
      0  24f1					      db	81
      1  24f1		       51		      .byte.b	81
      0  24f2					      RTN
      0  24f2					      db	25
      1  24f2		       19		      .byte.b	25
    829  24f3							;===============================================================================
    830  24f3							; IPCC ---- check if a message is available
    831  24f3							;F2AZb:
    832  24f3							;	  TST	     F2A,kIpcc			      ;Returns number of messages on the message queue
    833  24f3				   ekIpcc
      0  24f3					      TSTB	UNKNOWNVEC,oLeftBracket
      0  24f3					      db	101
      1  24f3		       65		      .byte.b	101
      0  24f4					      db	(UNKNOWNVEC-*)-1
      1  24f4		       87		      .byte.b	(UNKNOWNVEC-*)-1
      0  24f5					      db	oLeftBracket
      1  24f5		       e0		      .byte.b	oLeftBracket
      0  24f6					      TSTB	UNKNOWNVEC,oRightBracket
      0  24f6					      db	101
      1  24f6		       65		      .byte.b	101
      0  24f7					      db	(UNKNOWNVEC-*)-1
      1  24f7		       84		      .byte.b	(UNKNOWNVEC-*)-1
      0  24f8					      db	oRightBracket
      1  24f8		       e1		      .byte.b	oRightBracket
      0  24f9					      IPCCHECK
      0  24f9					      db	82
      1  24f9		       52		      .byte.b	82
      0  24fa					      RTN
      0  24fa					      db	25
      1  24fa		       19		      .byte.b	25
    838  24fb
    839  24fb				   UNKNOWNID
      0  24fb					      IJMP	UNKNOWN
      0  24fb					      db	29
      1  24fb		       1d		      .byte.b	29
      0  24fc					      dw	UNKNOWN
      1  24fc		       06 24		      .word.w	UNKNOWN
    841  24fe							;============================================================
    842  24fe							; RND() is supposed to have an argument but if none
    843  24fe							; was provided, just assume a large value.
    844  24fe							;
    845  24fe							;F2A:
    846  24fe							;	  TSTB	      F2B,kRnd
    847  24fe				   ekRnd
      0  24fe					      TSTB	UNKNOWNVEC,oLeftBracket
      0  24fe					      db	101
      1  24fe		       65		      .byte.b	101
      0  24ff					      db	(UNKNOWNVEC-*)-1
      1  24ff		       7c		      .byte.b	(UNKNOWNVEC-*)-1
      0  2500					      db	oLeftBracket
      1  2500		       e0		      .byte.b	oLeftBracket
      0  2501					      TSTB	F2A1,oRightBracket
      0  2501					      db	101
      1  2501		       65		      .byte.b	101
      0  2502					      db	(F2A1-*)-1
      1  2502		       06		      .byte.b	(F2A1-*)-1
      0  2503					      db	oRightBracket
      1  2503		       e1		      .byte.b	oRightBracket
      0  2504					      LIT	32766
      0  2504					      db	27
      1  2504		       1b		      .byte.b	27
      0  2505					      dw	32766
      1  2505		       fe 7f		      .word.w	32766
      0  2507					      RANDOM
      0  2507					      db	37
      1  2507		       25		      .byte.b	37
      0  2508					      RTN
      0  2508					      db	25
      1  2508		       19		      .byte.b	25
    853  2509
    854  2509				   F2A1
      0  2509					      CALL	EXPR	;GET RANGE
      0  2509					      db	28
      1  2509		       1c		      .byte.b	28
      0  250a					      dw	EXPR
      1  250a		       0a 24		      .word.w	EXPR
      0  250c					      TSTB	UNKNOWNVEC,oRightBracket
      0  250c					      db	101
      1  250c		       65		      .byte.b	101
      0  250d					      db	(UNKNOWNVEC-*)-1
      1  250d		       6e		      .byte.b	(UNKNOWNVEC-*)-1
      0  250e					      db	oRightBracket
      1  250e		       e1		      .byte.b	oRightBracket
      0  250f					      RANDOM
      0  250f					      db	37
      1  250f		       25		      .byte.b	37
      0  2510					      RTN
      0  2510					      db	25
      1  2510		       19		      .byte.b	25
    859  2511							;==========================================================
    860  2511							;	Return absolute value of expresion
    861  2511							;
    862  2511							;F2B:
    863  2511							;	  TSTB	      F2B2,kAbs
    864  2511				   ekAbs
      0  2511					      TSTB	UNKNOWNVEC,oLeftBracket
      0  2511					      db	101
      1  2511		       65		      .byte.b	101
      0  2512					      db	(UNKNOWNVEC-*)-1
      1  2512		       69		      .byte.b	(UNKNOWNVEC-*)-1
      0  2513					      db	oLeftBracket
      1  2513		       e0		      .byte.b	oLeftBracket
      0  2514					      CALL	EXPR	;get value
      0  2514					      db	28
      1  2514		       1c		      .byte.b	28
      0  2515					      dw	EXPR
      1  2515		       0a 24		      .word.w	EXPR
      0  2517					      TSTB	UNKNOWNVEC,oRightBracket
      0  2517					      db	101
      1  2517		       65		      .byte.b	101
      0  2518					      db	(UNKNOWNVEC-*)-1
      1  2518		       63		      .byte.b	(UNKNOWNVEC-*)-1
      0  2519					      db	oRightBracket
      1  2519		       e1		      .byte.b	oRightBracket
      0  251a					      ABS
      0  251a					      db	38
      1  251a		       26		      .byte.b	38
      0  251b					      RTN
      0  251b					      db	25
      1  251b		       19		      .byte.b	25
    870  251c							;============================================================
    871  251c							;     Return the the status of a task, provide the PID
    872  251c							;
    873  251c							;F2B2:
    874  251c							;	  TSTB	      F2Z,kStat
    875  251c				   ekStat
      0  251c					      TSTB	UNKNOWNVEC,oLeftBracket
      0  251c					      db	101
      1  251c		       65		      .byte.b	101
      0  251d					      db	(UNKNOWNVEC-*)-1
      1  251d		       5e		      .byte.b	(UNKNOWNVEC-*)-1
      0  251e					      db	oLeftBracket
      1  251e		       e0		      .byte.b	oLeftBracket
      0  251f					      Call	EXPR
      0  251f					      db	28
      1  251f		       1c		      .byte.b	28
      0  2520					      dw	EXPR
      1  2520		       0a 24		      .word.w	EXPR
      0  2522					      TSTB	UNKNOWNVEC,oRightBracket
      0  2522					      db	101
      1  2522		       65		      .byte.b	101
      0  2523					      db	(UNKNOWNVEC-*)-1
      1  2523		       58		      .byte.b	(UNKNOWNVEC-*)-1
      0  2524					      db	oRightBracket
      1  2524		       e1		      .byte.b	oRightBracket
      0  2525					      TASKSTAT
      0  2525					      db	66
      1  2525		       42		      .byte.b	66
      0  2526					      RTN
      0  2526					      db	25
      1  2526		       19		      .byte.b	25
    881  2527							;==============================================================
    882  2527							; Return the current tasks pid
    883  2527							;
    884  2527							;F2Z:
    885  2527							;	  TSTB	      F2ZA,kPid
    886  2527				   ekPid
      0  2527					      TASKPID
      0  2527					      db	77
      1  2527		       4d		      .byte.b	77
      0  2528					      RTN
      0  2528					      db	25
      1  2528		       19		      .byte.b	25
    889  2529							;===========================================================================
    890  2529							; Call a machine function, provide the address to call and optionally
    891  2529							; the value to be passed in reg A
    892  2529							;F2ZA:
    893  2529							;	  TSTB	       F2FUNC,kCall		       ;call machine function
    894  2529				   ekCall
      0  2529					      TSTB	UNKNOWNVEC,oLeftBracket
      0  2529					      db	101
      1  2529		       65		      .byte.b	101
      0  252a					      db	(UNKNOWNVEC-*)-1
      1  252a		       51		      .byte.b	(UNKNOWNVEC-*)-1
      0  252b					      db	oLeftBracket
      1  252b		       e0		      .byte.b	oLeftBracket
      0  252c					      CALL	EXPR
      0  252c					      db	28
      1  252c		       1c		      .byte.b	28
      0  252d					      dw	EXPR
      1  252d		       0a 24		      .word.w	EXPR
      0  252f					      TSTB	F2B2A,oComma
      0  252f					      db	101
      1  252f		       65		      .byte.b	101
      0  2530					      db	(F2B2A-*)-1
      1  2530		       09		      .byte.b	(F2B2A-*)-1
      0  2531					      db	oComma
      1  2531		       e2		      .byte.b	oComma
      0  2532					      CALL	EXPR
      0  2532					      db	28
      1  2532		       1c		      .byte.b	28
      0  2533					      dw	EXPR
      1  2533		       0a 24		      .word.w	EXPR
      0  2535					      TSTB	UNKNOWNVEC,oRightBracket
      0  2535					      db	101
      1  2535		       65		      .byte.b	101
      0  2536					      db	(UNKNOWNVEC-*)-1
      1  2536		       45		      .byte.b	(UNKNOWNVEC-*)-1
      0  2537					      db	oRightBracket
      1  2537		       e1		      .byte.b	oRightBracket
      0  2538					      CALLFUNC
      0  2538					      db	53
      1  2538		       35		      .byte.b	53
      0  2539					      RTN
      0  2539					      db	25
      1  2539		       19		      .byte.b	25
    902  253a							; Run the gosub within this function
    903  253a				   F2B2A
      0  253a					      TSTB	UNKNOWNID,oRightBracket
      0  253a					      db	101
      1  253a		       65		      .byte.b	101
      0  253b					      db	(UNKNOWNID-*)-1
      1  253b		       bf		      .byte.b	(UNKNOWNID-*)-1
      0  253c					      db	oRightBracket
      1  253c		       e1		      .byte.b	oRightBracket
      0  253d					      LIT	0	; No parameter passed so just load zero to A
      0  253d					      db	27
      1  253d		       1b		      .byte.b	27
      0  253e					      dw	0
      1  253e		       00 00		      .word.w	0
      0  2540					      CALLFUNC
      0  2540					      db	53
      1  2540		       35		      .byte.b	53
      0  2541					      RTN
      0  2541					      db	25
      1  2541		       19		      .byte.b	25
    908  2542							;===========================================================================
    909  2542							; Same as gosub but expects a return value
    910  2542							;   GOFN 1000(parm1, ....)  Expects an integer to be returned
    911  2542							;
    912  2542							;F2FUNC  TSTB	      F2C,kGofn
    913  2542				   ekGofn
      0  2542					      Call	GOSUBSTATEMENT
      0  2542					      db	28
      1  2542		       1c		      .byte.b	28
      0  2543					      dw	GOSUBSTATEMENT
      1  2543		       6e 25		      .word.w	GOSUBSTATEMENT
      0  2545					      SAV	GOSUB_RTN_VALUE	;SAVE RETURN LINE
      0  2545					      db	8
      1  2545		       08		      .byte.b	8
      0  2546					      db	GOSUB_RTN_VALUE
      1  2546		       81		      .byte.b	GOSUB_RTN_VALUE
      0  2547					      FASTXFER
      0  2547					      db	107
      1  2547		       6b		      .byte.b	107
    917  2548
    918  2548				   GOFNRet
      0  2548					      RTN
      0  2548					      db	25
      1  2548		       19		      .byte.b	25
    920  2549
    921  2549							;=================================================================================
    922  2549							;Check for a number !
    923  2549							;
    924  2549							;F0:
    925  2549				   FactNumber
      0  2549					      TSTN	FactVariable	;NUMBER, GET ITS VALUE.
      0  2549					      db	35
      1  2549		       23		      .byte.b	35
      0  254a					      db	(FactVariable-*)-1
      1  254a		       0f		      .byte.b	(FactVariable-*)-1
      0  254b					      RTN
      0  254b					      db	25
      1  254b		       19		      .byte.b	25
    928  254c				   F1
      0  254c					      TSTB	F2RTN,oLeftBracket	;PARENTHESIZED EXPR.
      0  254c					      db	101
      1  254c		       65		      .byte.b	101
      0  254d					      db	(F2RTN-*)-1
      1  254d		       08		      .byte.b	(F2RTN-*)-1
      0  254e					      db	oLeftBracket
      1  254e		       e0		      .byte.b	oLeftBracket
      0  254f					      CALL	EXPR
      0  254f					      db	28
      1  254f		       1c		      .byte.b	28
      0  2550					      dw	EXPR
      1  2550		       0a 24		      .word.w	EXPR
      0  2552					      TST	F2,oRightBracket
      0  2552					      db	32
      1  2552		       20		      .byte.b	32
      0  2553					      db	(F2-*)-1
      1  2553		       03		      .byte.b	(F2-*)-1
      0  2554					      db	oRightBracket,0
      1  2554		       e1 00		      .byte.b	oRightBracket,0
    932  2556				   F2RTN
      0  2556					      RTN
      0  2556					      db	25
      1  2556		       19		      .byte.b	25
    934  2557
    935  2557				   F2
      0  2557					      ERRMSG	ERR_SYNTAX	;ERROR.
      0  2557					      db	13
      1  2557		       0d		      .byte.b	13
      0  2558					      dw	ERR_SYNTAX
      1  2558		       05 00		      .word.w	ERR_SYNTAX
    937  255a							;
    938  255a							;=============================================================================
    939  255a							; See if this is just a simple variable
    940  255a							;  Allow a subscript for any variable
    941  255a							;
    942  255a							;F2C:
    943  255a							;
    944  255a				   FactVariable
      0  255a					      TSTV	F1
      0  255a					      db	33
      1  255a		       21		      .byte.b	33
      0  255b					      db	(F1-*)-1
      1  255b		       f0		      .byte.b	(F1-*)-1
      0  255c					      TSTB	F2CLocalTask,oBang
      0  255c					      db	101
      1  255c		       65		      .byte.b	101
      0  255d					      db	(F2CLocalTask-*)-1
      1  255d		       04		      .byte.b	(F2CLocalTask-*)-1
      0  255e					      db	oBang
      1  255e		       e8		      .byte.b	oBang
      0  255f					      IND		; we just got a pid
      0  255f					      db	20
      1  255f		       14		      .byte.b	20
      0  2560					      TSTVT	UNKNOWNID	; if it is not another variabe then error, Call test var. task
      0  2560					      db	93
      1  2560		       5d		      .byte.b	93
      0  2561					      db	(UNKNOWNID-*)-1
      1  2561		       99		      .byte.b	(UNKNOWNID-*)-1
    949  2562
    950  2562				   F2CLocalTask
      0  2562					      TSTB	F2C1,oLeftSQBracket
      0  2562					      db	101
      1  2562		       65		      .byte.b	101
      0  2563					      db	(F2C1-*)-1
      1  2563		       08		      .byte.b	(F2C1-*)-1
      0  2564					      db	oLeftSQBracket
      1  2564		       e4		      .byte.b	oLeftSQBracket
      0  2565					      CALL	EXPR
      0  2565					      db	28
      1  2565		       1c		      .byte.b	28
      0  2566					      dw	EXPR
      1  2566		       0a 24		      .word.w	EXPR
      0  2568					      TSTB	UNKNOWNID,oRightSQBracket
      0  2568					      db	101
      1  2568		       65		      .byte.b	101
      0  2569					      db	(UNKNOWNID-*)-1
      1  2569		       91		      .byte.b	(UNKNOWNID-*)-1
      0  256a					      db	oRightSQBracket
      1  256a		       e5		      .byte.b	oRightSQBracket
      0  256b					      SUBSCRIPT
      0  256b					      db	64
      1  256b		       40		      .byte.b	64
    955  256c				   F2C1
      0  256c					      IND		; YES, GET THE VALUE.
      0  256c					      db	20
      1  256c		       14		      .byte.b	20
      0  256d					      RTN
      0  256d					      db	25
      1  256d		       19		      .byte.b	25
    958  256e
    959  256e							;=============================================================
    960  256e							; Gosub can be both a Function and a Subroutine
    961  256e				   GOSUBSTATEMENT
      0  256e					      TSTBRANCH	GOSUBCOMPILED	; if the two bytes after gosub are not zero then direct transfer
      0  256e					      db	106
      1  256e		       6a		      .byte.b	106
      0  256f					      db	(GOSUBCOMPILED-*)-1
      1  256f		       0a		      .byte.b	(GOSUBCOMPILED-*)-1
      0  2570					      CALL	EXPR	; GET DESTINATION
      0  2570					      db	28
      1  2570		       1c		      .byte.b	28
      0  2571					      dw	EXPR
      1  2571		       0a 24		      .word.w	EXPR
      0  2573					      CALL	GOSUBCONT
      0  2573					      db	28
      1  2573		       1c		      .byte.b	28
      0  2574					      dw	GOSUBCONT
      1  2574		       81 25		      .word.w	GOSUBCONT
      0  2576					      lit	0	; mark as lookup on stack
      0  2576					      db	27
      1  2576		       1b		      .byte.b	27
      0  2577					      dw	0
      1  2577		       00 00		      .word.w	0
      0  2579					      RTN
      0  2579					      db	25
      1  2579		       19		      .byte.b	25
    967  257a
    968  257a				   GOSUBCOMPILED
      0  257a					      CALL	GOSUBCONT
      0  257a					      db	28
      1  257a		       1c		      .byte.b	28
      0  257b					      dw	GOSUBCONT
      1  257b		       81 25		      .word.w	GOSUBCONT
      0  257d					      lit	1	;mark as compiled on stack
      0  257d					      db	27
      1  257d		       1b		      .byte.b	27
      0  257e					      dw	1
      1  257e		       01 00		      .word.w	1
      0  2580					      RTN
      0  2580					      db	25
      1  2580		       19		      .byte.b	25
    972  2581
    973  2581				   GOSUBCONT
      0  2581					      TSTB	GOSUBDONE,oLeftBracket	;Check if any Parameters
      0  2581					      db	101
      1  2581		       65		      .byte.b	101
      0  2582					      db	(GOSUBDONE-*)-1
      1  2582		       11		      .byte.b	(GOSUBDONE-*)-1
      0  2583					      db	oLeftBracket
      1  2583		       e0		      .byte.b	oLeftBracket
      0  2584					      STK2TMP		;Transfer stack top to temp
      0  2584					      db	95
      1  2584		       5f		      .byte.b	95
      0  2585					      PUSHMATHSTACK		;Record stack frame for return
      0  2585					      db	84
      1  2585		       54		      .byte.b	84
    977  2586				   GOSUBLOOP
      0  2586					      CALL	EXPR	; Allows what ever fits onto stack
      0  2586					      db	28
      1  2586		       1c		      .byte.b	28
      0  2587					      dw	EXPR
      1  2587		       0a 24		      .word.w	EXPR
      0  2589					      INCPARMCOUNT
      0  2589					      db	88
      1  2589		       58		      .byte.b	88
      0  258a					      TSTB	GOSUBParmDONE,oComma
      0  258a					      db	101
      1  258a		       65		      .byte.b	101
      0  258b					      db	(GOSUBParmDONE-*)-1
      1  258b		       04		      .byte.b	(GOSUBParmDONE-*)-1
      0  258c					      db	oComma
      1  258c		       e2		      .byte.b	oComma
      0  258d					      IJMP	GOSUBLOOP
      0  258d					      db	29
      1  258d		       1d		      .byte.b	29
      0  258e					      dw	GOSUBLOOP
      1  258e		       86 25		      .word.w	GOSUBLOOP
    982  2590				   GOSUBParmDONE
      0  2590					      TSTB	F2,oRightBracket
      0  2590					      db	101
      1  2590		       65		      .byte.b	101
      0  2591					      db	(F2-*)-1
      1  2591		       c5		      .byte.b	(F2-*)-1
      0  2592					      db	oRightBracket
      1  2592		       e1		      .byte.b	oRightBracket
      0  2593					      TMP2STK		; Restore line to goto
      0  2593					      db	96
      1  2593		       60		      .byte.b	96
    985  2594				   GOSUBDONE
      0  2594					      RTN
      0  2594					      db	25
      1  2594		       19		      .byte.b	25
    987  2595
    988  2595		       25 95	   ILEND      equ	*
------- FILE mytb.asm
   2400  2595		       25 95	   PROGEND    equ	*
   2401  2595
   2402  2595
   2403  2595							;=====================================================
   2404  2595							; Define start of non page zero data
   2405 U25d7					      seg.u	TBData
   2406 U25d7
   2407 U25d7							;=====================================================
   2408 U25d7							; These are storage items not in page zero.
   2409 U25d7							;
   2410 U25d7							; IRQ BASIC Code Service RTN Support
      0 U25d7				   SaveIrqReg db	0	; Store current setting
      1 U25d7		       00		      .byte.b	0
      0 U25d8				   IRQStatus  db	0	; 1 = enabled, 0 = dissabled
      1 U25d8		       00		      .byte.b	0
      0 U25d9				   IRQPending db	0	; Irq recieved, Called at next Basic Line
      1 U25d9		       00		      .byte.b	0
      0 U25da				   IRQEntry   db	0,0	; Basic code offset of IRQ Handler
      1 U25da		       00 00		      .byte.b	0,0
   2415 U25dc
   2416 U25dc							;
   2417 U25dc							;==================================================================================================
   2418 U25dc							; Task Management information
   2419 U25dc							; Tasks may be created by the Task <expr>,<expr>,[<expr>]   Slot number, Cycles per switch command
   2420 U25dc							; Tasks are ended by the Endtask command   This with clear the entry from the task table
   2421 U25dc							; Task switchs happen at the beginning of the next Basic command line
   2422 U25dc							; It will not happen during an input or output operations
   2423 U25dc							; Task switches otherwise are prememtive, The cycle count defaults to 100.
   2424 U25dc							; Task Zero is always the root task, main line program
   2425 U25dc							;
   2426 U25dc							; Layout is repeated for each configured task
   2427 U25dc							; Task Table Byte   use masks follow
   2428 U25dc		       00 00	   TASKINACTIVE equ	%00000000	; Task is inactive
   2429 U25dc		       00 80	   TASKACTIVE equ	%10000000	; Active task
   2430 U25dc		       00 40	   TASKWAITIO equ	%01000000	; Task is waiting for io
   2431 U25dc		       00 01	   TASKWAITIPC equ	%00000001	; Task is waiting for message
   2432 U25dc		       00 02	   TASKRUNPENDING equ	%00000010	; Task Is initialized but suspended
   2433 U25dc
   2434 U25dc		       00	   taskPtr    ds	1	; Current offset into task table CONTEXTLEN modulo entry
   2435 U25dd		       00 00 00 00*taskTable  ds	[TASKCOUNT * [CONTEXTLEN + 1]]	; Task Table Offset and pointer to Basic code, active flag
   2436 U25dd		       26 d7	   TASKTABLEEND equ	*	; End of task table
   2437 U25dd		       00 fa	   TASKTABLELEN equ	[TASKTABLEEND-taskTable]	; actual length of the task table
   2438 U26d7
   2439 U26d7							;Task Cycle Counter and reset count
   2440 U26d7		       00 00	   taskCurrentCycles ds	2
   2441 U26d9		       00 00	   taskResetValue ds	2
   2442 U26db		       00	   taskCounter ds	1	; Count of active tasks
   2443 U26dc
   2444 U26dc							;
   2445 U26dc							; Math stack and IL call and Gosub/For-next return stack definitions
   2446 U26dc							;
   2447 U26dc		       26 dc	   STACKSTART equ	*
   2448 U26dc		       00 00 00 00*mathStack  ds	[MATHSTACKSIZE * 2 * TASKCOUNT]	; Stack used for math expressions
   2449 U286c		       00 00 00 00*ilStack    ds	[ILSTACKSIZE * 2 * TASKCOUNT]	; stack used by the IL for calls and returns
   2450 U29fc		       00 00 00 00*gosubStack ds	[GOSUBSTACKSIZE * 4 * TASKCOUNT]	; stack size for gosub stacks
   2451 U2c7c		       00 00 00 00*variableStack ds	[VARIABLESSIZE * 2 * TASKCOUNT]	; Stack of variables, 26 A-Z-task exit code
   2452 U2c7c		       00 34	   TASKEXITCODE equ	[[VARIABLESSIZE * 2] - 2]	; Offset to exit code location
   2453 U2c7c		       2e 98	   STACKEND   equ	*
   2454 U2c7c		       07 bc	   STACKLEN   equ	STACKEND-STACKSTART	; total space used for stacks
   2455 U2e98							;
   2456 U2e98							;
   2457 U2e98		       00 00 00 00*LINBUF     ds	BUFFER_SIZE
   2458 U2f1c		       00	   getlinx    ds	1	;temp for x during GetLine functions
   2459 U2f1d		       00	   printtx    ds	1	;temp X for print funcs
   2460 U2f1e		       00	   inputNoWait ds	1	;Wait no wait for line buff input
   2461 U2f1f		       00	   promptChar ds	1	;the character to use for a prompt
   2462 U2f20		       00	   diddigit   ds	1	;for leading zero suppression
   2463 U2f21		       00	   putsy      ds	1
   2464 U2f22		       00 00	   errGoto    ds	2	;where to set ILPC on err
   2465 U2f24		       00	   sign       ds	1	;0 = positive, else negative
   2466 U2f25		       00 00	   rtemp1     ds	2	;Temp for x and y
   2467 U2f27		       00 00	   random     ds	2
   2468 U2f29		       00 00	   BOutVec    ds	2	; This is used by functions to vector to the current output rtn
   2469 U2f2b		       00 00	   BInVec     ds	2	; This is used by fuction to vector to current input rtn
   2470 U2f2d		       00	   tempy      ds	1	;temp y storage
   2471 U2f2e
   2472 U2f2e
   2473 U2f2e							; Moved from page zero as one clock cycle diff gives more space on page zero
   2474 U2f2e		       00 00	   tempIL     ds	2	;Temp IL programcounter storage
   2475 U2f30		       00	   tempIlY    ds	1	;Temp IL Y register storage
   2476 U2f31		       00	   offset     ds	1	;IL Offset to next inst when test fails
   2477 U2f32		       00	   lineLength ds	1	;Length of current line
   2478 U2f33
   2479 U2f33		       00	   taskIOPending ds	1	; 1 = pending Set when a task wants to read keyboard/ write to screen
   2480 U2f34		       00	   taskRDPending ds	1	; 1 = background read is pending
   2481 U2f35
   2482 U2f35				  -	      if	XKIM
   2483 U2f35				  -buffer     ds	BUFFER_SIZE
   2484 U2f35					      endif
   2485 U2f35							;
   2486 U2f35							; PROGRAMEND is the end of the user's BASIC program.
   2487 U2f35							; More precisely, it is one byte past the end.  Or,
   2488 U2f35							; it's where the next line added to the end will be
   2489 U2f35							; placed.
   2490 U2f35							;
   2491 U2f35		       00 00	   ProgramStart ds	2	; Start Of usable memory
   2492 U2f37		       00 00	   ProgramEnd ds	2	; End of users basic program
   2493 U2f39		       00 00	   HighMem    ds	2	; highest location
   2494 U2f3b		       00 00	   UsedMem    ds	2	; size of user program
   2495 U2f3d		       00 00	   FreeMem    ds	2	; amount of free memory
   2496 U2f3f							;
   2497 U2f3f							;=====================================================
   2498 U2f3f							; This is the start of the user's BASIC program space.
   2499 U2f3f							;
   2500 U2f3f							; PERSONAL GOAL: This should be no larger than $0DFF.
   2501 U2f3f							;		  0200-05FF = 1K
   2502 U2f3f							;		  0200-09FF = 2K
   2503 U2f3f							;		  0200-0DFF = 3K
   2504 U2f3f							;		  0200-11FF = 4K
   2505 U2f3f							;		  0200-13FF = 4.5K
   2506 U2f3f							;
   2507 U2f3f				  -	      if	FIXED
   2508 U2f3f				  -	      org	$2000
   2509 U2f3f					      endif
   2510 U2f3f
   2511 U2f3f		       2f 3f	   FreeMemStart equ	*
   2512 U2f3f							;/*
   2513 U2f3f							;	if	CTMON65 || XKIM
   2514 U2f3f							;		SEG Code
   2515 U2f3f							;		org	AutoRun
   2516 U2f3f							;		dw	TBasicCold
   2517 U2f3f							;	endif
   2518 U2f3f							;*/
   2519 U2f3f					      end
