------- FILE useirq.asm LEVEL 1 PASS 2
      1  02ff				   input      processor	6502
      2  02ff ????						;=====================================================
      3  02ff ????						;UseIrq is a sample program that enables the IRQ for the
      4  02ff ????						;Emulator and then prints a star each time the
      5  02ff ????						;irq arrives.
      6  02ff ????						; 04/13/2022 https://github.com/justlostintime/em6502
      7  02ff ????						;=====================================================
      8  02ff ????						;   Need to define some macros for the dasm assembler
      9  02ff ????						;
     10  02ff ????				      MACRO	dw
     11  02ff ????				      .word	{0}
     12  02ff ????				      ENDM
     13  02ff ????
     14  02ff ????				      MACRO	db
     15  02ff ????				      .byte	{0}
     16  02ff ????				      ENDM
     17  02ff ????						;
     18  02ff ????						; Common ASCII constants
     19  02ff ????						;
     20  02ff ????	       00 07	   BEL	      equ	$07
     21  02ff ????	       00 08	   BS	      equ	$08
     22  02ff ????	       00 09	   TAB	      equ	$09
     23  02ff ????	       00 0a	   LF	      equ	$0A
     24  02ff ????	       00 0d	   CR	      equ	$0D
     25  02ff ????	       00 22	   QUOTE      equ	$22
     26  02ff ????	       00 20	   SPACE      equ	$20
     27  02ff ????	       00 2c	   COMMA      equ	',
     28  02ff ????	       00 3b	   SEMICOLON  equ	';
     29  02ff ????						;=====================================================
     30  02ff ????						;
     31  02ff ????				      SEG	Code
     32  0200					      org	$0200
     33  0200		       4c 12 02    UseIrq     jmp	CodeStart	; jump around the vectors
     34  0203
------- FILE ctmon65.inc LEVEL 2 PASS 2
      0  0203					      include	"ctmon65.inc"
      1  0203							;*********************************************************
      2  0203							; FILE: ctmon65.inc
      3  0203							;
      4  0203							; Applications wishing to run under CTMON65 should include
      5  0203							; this file, as it defines vectors and other pieces of
      6  0203							; necessary data.
      7  0203							;*********************************************************
      8  0203							;
------- FILE config.inc LEVEL 3 PASS 2
      0  0203					      include	"config.inc"
      1  0203					      Processor	6502
      2  0203							;*********************************************************
      3  0203							; FILE: config.inc
      4  0203							;
      5  0203							; General configuration file
      6  0203							;*********************************************************
      7  0203							;
      8  0203		       00 00	   FALSE      equ	0
      9  0203		       00 01	   TRUE       equ	!FALSE
     10  0203							;
     11  0203							; SS-50 bus constants
     12  0203							;
     13  0203		       e0 00	   IO_BASE    equ	$E000
     14  0203		       00 10	   IO_SIZE    equ	16
     15  0203							;
     16  0203							; Memory usage
     17  0203							;
     18  0203		       00 f0	   ZERO_PAGE_START equ	$00f0
     19  0203		       f0 00	   ROM_START  equ	$f000
     20  0203		       df 00	   RAM_START  equ	$df00
     21  0203							;
     22  0203							; If enabled, turn on buffered input code.
     23  0203							;
     24  0203		       00 00	   BUFFERED_INPUT equ	FALSE
     25  0203							;
     26  0203		       00 05	   MAX_ARGC   equ	5
     27  0203							;
     28  0203							; If enabled, the debugger will display the flag register
     29  0203							; in ASCII.  Nice, but takes more code.
     30  0203							;
     31  0203		       00 01	   FULL_STATUS equ	TRUE
     32  0203							;
     33  0203							; Enable EXTENDED_CMDS to allow linking external commands
     34  0203							; to the command handler.
     35  0203							;
     36  0203		       00 00	   EXTENDED_CMDS equ	FALSE
     37  0203							;
     38  0203							; Define to enable SD related functions
     39  0203							;
     40  0203		       00 01	   SD_ENABLED equ	TRUE
     41  0203							;
     42  0203							; Size of the keyboard buffer
     43  0203							;
     44  0203		       00 84	   BUFFER_SIZE equ	132
     45  0203							;==============================================
     46  0203							; Device specific information
     47  0203							;=============================================
     48  0203							;Timer based upon emulator system clock
     49  0203		       e0 20	   SysTime    equ	$E020	; write 1 to enable 0 to disable
     50  0203		       e0 21	   SysTime_Period equ	SysTime+1	; Write the timeout period 2 bytew Low/high order
     51  0203		       e0 23	   SysTime_Ack equ	SysTime+3	; Set to one if irq pending, write any value to ACK irq
     52  0203
     53  0203							;Timer based upon instruction cycle clock
     54  0203		       e0 30	   CycleTime  equ	$E030	; write 1 to enable 0 to disable
     55  0203		       00 01	   Cycletime_Period equ	Cycletime+1	; Write the timeout period 2 bytes Low/high order
     56  0203		       e0 33	   CycleTime_Ack equ	CycleTime+3	; Set to one if irq pending, write any value to ACK irq
     57  0203
     58  0203
------- FILE ctmon65.inc
     10  0203							;
     11 Uf048 ????				      SEG.U	rom
     12 Uf000					      org	ROM_START
     13 Uf000							;
     14 Uf000							;=========================================================
     15 Uf000							; Jump table to common functions.  The entries in this
     16 Uf000							; table are used by external programs, so nothing can be
     17 Uf000							; moved or removed from this table.  New entries always
     18 Uf000							; go at the end.  Many of these are internal functions
     19 Uf000							; and I figured they might be handy for others.
     20 Uf000							;
     21 Uf000		       00 00 00    RESET      ds	3
     22 Uf003		       00 00 00    WARM       ds	3
     23 Uf006							;
     24 Uf006							; These are the major and minor revision numbers so that
     25 Uf006							; code can check to see which CTMON65 version is running.
     26 Uf006							;
     27 Uf006		       00	   CTMON65ver ds	1
     28 Uf007		       00	   CTMON65rev ds	1
     29 Uf008		       00		      ds	1	;unused
     30 Uf009							;
     31 Uf009							; Console related functions
     32 Uf009							;
     33 Uf009		       00 00 00    cin	      ds	3
     34 Uf00c		       00 00 00    cout       ds	3
     35 Uf00f		       00 00 00    cstatus    ds	3
     36 Uf012		       00 00 00    putsil     ds	3
     37 Uf015		       00 00 00    getline    ds	3
     38 Uf018		       00 00 00    crlf       ds	3
     39 Uf01b		       00 00 00    HexA       ds	3
     40 Uf01e							;
     41 Uf01e							; Low-level functions to access the SD card system
     42 Uf01e							;
     43 Uf01e					      if	SD_ENABLED	;SD ENABLED
     44 Uf01e		       00 00 00    xParInit   ds	3
     45 Uf021		       00 00 00    xParSetWrite ds	3
     46 Uf024		       00 00 00    xParSetRead ds	3
     47 Uf027		       00 00 00    xParWriteByte ds	3
     48 Uf02a		       00 00 00    xParReadByte ds	3
     49 Uf02d							;
     50 Uf02d							; Higher level SD card functions
     51 Uf02d							;
     52 Uf02d		       00 00 00    DiskPing   ds	3
     53 Uf030		       00 00 00    DiskDir    ds	3
     54 Uf033		       00 00 00    DiskDirNext ds	3
     55 Uf036		       00 00 00    DiskOpenRead ds	3
     56 Uf039		       00 00 00    DiskOpenWrite ds	3
     57 Uf03c		       00 00 00    DiskRead   ds	3
     58 Uf03f		       00 00 00    DiskWrite  ds	3
     59 Uf042		       00 00 00    DiskClose  ds	3
     60 Uf045		       00 00 00    DiskRmFile ds	3
     61 Uf048					      endif		;SD_ENABLED
     62 Uf048
     63 Uf048							;
     64 Udf8e ????				      SEG.U	Data
     65 Udf00					      org	RAM_START
     66 Udf00							;
     67 Udf00							; The use of memory starting from here will remain
     68 Udf00							; constant through different versions of CTMON65.
     69 Udf00							;
     70 Udf00		       00 00	   IRQvec     ds	2
     71 Udf02		       00 00	   NMIvec     ds	2
     72 Udf04							;
     73 Udf04							; Before a L(oad) command, these are set to $FF.
     74 Udf04							; After loading, if they are different, jump to
     75 Udf04							; that address.
     76 Udf04							;
     77 Udf04		       00 00	   AutoRun    ds	2
     78 Udf06							;
     79 Udf06							; Pointer to the subroutine that gets the next input
     80 Udf06							; character.  Used for doing disk/console input.
     81 Udf06							;
     82 Udf06		       00 00	   inputVector ds	2
     83 Udf08							;
     84 Udf08							; Same thing for output.
     85 Udf08							;
     86 Udf08		       00 00	   outputVector ds	2
     87 Udf0a							;
     88 Udf0a							; Buffer for GETLINE
     89 Udf0a							;
     90 Udf0a		       00 00 00 00*buffer     ds	BUFFER_SIZE
------- FILE useirq.asm
     36  0203					      SEG	Code
     37  0203
     38  0203		       4c 0c f0    OUTCH      jmp	cout
     39  0206		       4c 09 f0    GETCH      jmp	cin
     40  0209		       4c 18 f0    CRLF       jmp	crlf
     41  020c		       4c 1b f0    OUTHEX     jmp	HexA
     42  020f		       4c 03 f0    MONITOR    jmp	WARM
     43  020f		       f0 12	   puts       equ	putsil
     44  0212
     45  0212		       20 12 f0    CodeStart  jsr	puts
      0  0215					      db	CR,LF,CR,LF
      1  0215		       0d 0a 0d 0a	      .byte.b	CR,LF,CR,LF
      0  0219					      db	"IRQ Test app Version 1.0.1"
      1  0219		       49 52 51 20*	      .byte.b	"IRQ Test app Version 1.0.1"
      0  0233					      db	CR,LF
      1  0233		       0d 0a		      .byte.b	CR,LF
      0  0235					      db	"https://github.com/justlostintime/em6502"
      1  0235		       68 74 74 70*	      .byte.b	"https://github.com/justlostintime/em6502"
      0  025d					      db	CR,LF,0
      1  025d		       0d 0a 00 	      .byte.b	CR,LF,0
     51  0260		       a9 7b		      lda	#ServiceIrq&$ff	;Irq Service function
     52  0262		       8d 00 df 	      sta	IRQvec
     53  0265		       a9 02		      lda	#ServiceIrq>>8
     54  0267		       8d 01 df 	      sta	IRQvec+1
     55  026a		       a9 da		      lda	#ServiceNmi&$ff	;Nmi Service function
     56  026c		       8d 02 df 	      sta	NMIvec
     57  026f		       a9 02		      lda	#ServiceNmi>>8
     58  0271		       8d 03 df 	      sta	NMIvec+1
     59  0274		       58		      cli
     60  0275		       4c 0f 02 	      jmp	MONITOR
     61  0278
      0  0278				   SaveReg    db	0,0,0
      1  0278		       00 00 00 	      .byte.b	0,0,0
     63  027b
     64  027b		       8d 78 02    ServiceIrq sta	SaveReg
     65  027e		       8c 79 02 	      sty	SaveReg+1
     66  0281		       8e 7a 02 	      stx	SaveReg+2
     67  0284
     68  0284		       ad 20 e0 	      lda	SysTime	;Check if this created the IRQ
     69  0287		       f0 1b		      beq	cycletimer
     70  0289		       20 12 f0 	      jsr	puts	; the timer that uses a real system timer
      0  028c					      db	"IRQ Real Timer"
      1  028c		       49 52 51 20*	      .byte.b	"IRQ Real Timer"
      0  029a					      db	CR,LF,0
      1  029a		       0d 0a 00 	      .byte.b	CR,LF,0
     73  029d		       a9 00		      lda	#0	; Zero the pending and reset timer
     74  029f		       8d 23 e0 	      sta	SysTime_Ack	; Write anything to reset the timer
     75  02a2		       f0 51		      beq	ExitIrq
     76  02a4
     77  02a4		       ad 30 e0    cycletimer lda	CycleTime	; Check timer based upon clock cycles ticked
     78  02a7		       f0 1c		      beq	NotTimer
     79  02a9		       20 12 f0 	      jsr	puts	; the timer that uses a Cycle Clock as a timer source
      0  02ac					      db	"IRQ Cycle Timer"
      1  02ac		       49 52 51 20*	      .byte.b	"IRQ Cycle Timer"
      0  02bb					      db	CR,LF,0
      1  02bb		       0d 0a 00 	      .byte.b	CR,LF,0
     82  02be		       a9 00		      lda	#0	; Zero the pending and reset timer
     83  02c0		       8d 33 e0 	      sta	CycleTime_Ack	; Write anything to reset the timer
     84  02c3		       f0 30		      beq	ExitIrq
     85  02c5
     86  02c5		       20 12 f0    NotTimer   jsr	puts	; we have some unknown irq happening
      0  02c8					      db	"IRQ UnKnown"
      1  02c8		       49 52 51 20*	      .byte.b	"IRQ UnKnown"
      0  02d3					      db	CR,LF,0
      1  02d3		       0d 0a 00 	      .byte.b	CR,LF,0
     89  02d6		       a9 00		      lda	#0
     90  02d8		       f0 1b		      beq	ExitIrq
     91  02da
     92  02da		       8d 78 02    ServiceNmi sta	SaveReg
     93  02dd		       8c 79 02 	      sty	SaveReg+1
     94  02e0		       8e 7a 02 	      stx	SaveReg+2
     95  02e3
     96  02e3		       20 12 f0 	      jsr	puts
      0  02e6					      db	"NMI Recieved"
      1  02e6		       4e 4d 49 20*	      .byte.b	"NMI Recieved"
      0  02f2					      db	CR,LF,0
      1  02f2		       0d 0a 00 	      .byte.b	CR,LF,0
     99  02f5
    100  02f5		       ad 78 02    ExitIrq    lda	SaveReg
    101  02f8		       ac 79 02 	      ldy	SaveReg+1
    102  02fb		       ae 7a 02 	      ldx	SaveReg+2
    103  02fe		       40		      rti
    104  02ff
