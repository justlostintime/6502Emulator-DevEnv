ca65 V2.19 - Git 8ac5e2f
Main file   : hello.s
Current file: hello.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git 8ac5e2f
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git 8ac5e2f"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_fclose
000000r 1               	.import		_fgets
000000r 1               	.import		_fopen
000000r 1               	.import		_fread
000000r 1               	.import		_fwrite
000000r 1               	.import		_printf
000000r 1               	.import		_putchar
000000r 1               	.import		_malloc
000000r 1               	.import		_free
000000r 1               	.import		_strcpy
000000r 1               	.import		_open
000000r 1               	.import		_close
000000r 1               	.import		___errno
000000r 1               	.import		_read
000000r 1               	.export		_copy
000000r 1               	.export		_seperator
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               S0025:
000000r 1  43 6F 70 79  	.byte	$43,$6F,$70,$79,$20,$66,$6F,$70,$65,$6E,$20,$73,$6F,$75,$72,$63
000004r 1  20 66 6F 70  
000008r 1  65 6E 20 73  
000010r 1  65 20 25 73  	.byte	$65,$20,$25,$73,$20,$72,$65,$74,$75,$72,$6E,$65,$64,$20,$25,$64
000014r 1  20 72 65 74  
000018r 1  75 72 6E 65  
000020r 1  2C 20 45 72  	.byte	$2C,$20,$45,$72,$72,$6F,$72,$20,$6E,$75,$6D,$62,$65,$72,$20,$25
000024r 1  72 6F 72 20  
000028r 1  6E 75 6D 62  
000030r 1  64 0A 55 73  	.byte	$64,$0A,$55,$73,$69,$6E,$67,$20,$66,$72,$65,$61,$64,$20,$74,$6F
000034r 1  69 6E 67 20  
000038r 1  66 72 65 61  
000040r 1  20 72 65 61  	.byte	$20,$72,$65,$61,$64,$20,$65,$61,$63,$68,$20,$6C,$69,$6E,$65,$0A
000044r 1  64 20 65 61  
000048r 1  63 68 20 6C  
000050r 1  3D 3D 3D 3D  	.byte	$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$0A,$00
000054r 1  3D 3D 3D 3D  
000058r 1  3D 3D 3D 3D  
00005Er 1               S0014:
00005Er 1  66 72 65 61  	.byte	$66,$72,$65,$61,$64,$20,$25,$73,$20,$43,$6F,$75,$6E,$74,$20,$72
000062r 1  64 20 25 73  
000066r 1  20 43 6F 75  
00006Er 1  65 74 75 72  	.byte	$65,$74,$75,$72,$6E,$65,$64,$20,$25,$64,$20,$62,$79,$74,$65,$73
000072r 1  6E 65 64 20  
000076r 1  25 64 20 62  
00007Er 1  20 61 6E 64  	.byte	$20,$61,$6E,$64,$20,$25,$64,$20,$65,$6C,$65,$6D,$65,$6E,$74,$73
000082r 1  20 25 64 20  
000086r 1  65 6C 65 6D  
00008Er 1  2C 20 45 72  	.byte	$2C,$20,$45,$72,$72,$6F,$72,$20,$6E,$75,$6D,$62,$65,$72,$20,$25
000092r 1  72 6F 72 20  
000096r 1  6E 75 6D 62  
00009Er 1  64 0A 44 61  	.byte	$64,$0A,$44,$61,$74,$61,$20,$66,$72,$65,$61,$64,$3A,$0A,$00
0000A2r 1  74 61 20 66  
0000A6r 1  72 65 61 64  
0000ADr 1               S0013:
0000ADr 1  42 65 67 69  	.byte	$42,$65,$67,$69,$6E,$69,$6E,$67,$20,$74,$65,$73,$74,$20,$6F,$66
0000B1r 1  6E 69 6E 67  
0000B5r 1  20 74 65 73  
0000BDr 1  20 66 72 65  	.byte	$20,$66,$72,$65,$61,$64,$2F,$66,$63,$6C,$6F,$73,$65,$2F,$66,$6F
0000C1r 1  61 64 2F 66  
0000C5r 1  63 6C 6F 73  
0000CDr 1  70 65 6E 20  	.byte	$70,$65,$6E,$20,$6F,$66,$20,$25,$73,$20,$72,$65,$74,$75,$72,$6E
0000D1r 1  6F 66 20 25  
0000D5r 1  73 20 72 65  
0000DDr 1  65 64 20 25  	.byte	$65,$64,$20,$25,$64,$2C,$20,$45,$72,$72,$6F,$72,$20,$6E,$75,$6D
0000E1r 1  64 2C 20 45  
0000E5r 1  72 72 6F 72  
0000EDr 1  62 65 72 20  	.byte	$62,$65,$72,$20,$25,$64,$0A,$00
0000F1r 1  25 64 0A 00  
0000F5r 1               S002F:
0000F5r 1  0A 3D 3D 3D  	.byte	$0A,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D
0000F9r 1  3D 3D 3D 3D  
0000FDr 1  3D 3D 3D 3D  
000105r 1  3D 3D 3D 3D  	.byte	$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D
000109r 1  3D 3D 3D 3D  
00010Dr 1  3D 3D 3D 3D  
000115r 1  3D 3D 3D 3D  	.byte	$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D
000119r 1  3D 3D 3D 3D  
00011Dr 1  3D 3D 3D 3D  
000125r 1  3D 3D 3D 3D  	.byte	$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$3D,$0A
000129r 1  3D 3D 3D 3D  
00012Dr 1  3D 3D 3D 3D  
000135r 1  00           	.byte	$00
000136r 1               S000E:
000136r 1  0A 52 65 61  	.byte	$0A,$52,$65,$61,$64,$20,$25,$64,$20,$62,$79,$74,$65,$73,$20,$66
00013Ar 1  64 20 25 64  
00013Er 1  20 62 79 74  
000146r 1  72 6F 6D 20  	.byte	$72,$6F,$6D,$20,$25,$73,$20,$44,$61,$74,$61,$3A,$0A,$2D,$2D,$2D
00014Ar 1  25 73 20 44  
00014Er 1  61 74 61 3A  
000156r 1  2D 2D 2D 2D  	.byte	$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D
00015Ar 1  2D 2D 2D 2D  
00015Er 1  2D 2D 2D 2D  
000166r 1  2D 2D 2D 2D  	.byte	$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$0A,$00
00016Ar 1  2D 2D 2D 2D  
00016Er 1  2D 2D 2D 2D  
000176r 1               S001A:
000176r 1  41 66 74 65  	.byte	$41,$66,$74,$65,$72,$20,$43,$6F,$70,$79,$20,$66,$6F,$70,$65,$6E
00017Ar 1  72 20 43 6F  
00017Er 1  70 79 20 66  
000186r 1  20 25 73 20  	.byte	$20,$25,$73,$20,$72,$65,$74,$75,$72,$6E,$65,$64,$20,$25,$64,$2C
00018Ar 1  72 65 74 75  
00018Er 1  72 6E 65 64  
000196r 1  20 45 72 72  	.byte	$20,$45,$72,$72,$6F,$72,$20,$6E,$75,$6D,$62,$65,$72,$20,$25,$64
00019Ar 1  6F 72 20 6E  
00019Er 1  75 6D 62 65  
0001A6r 1  0A 44 6F 69  	.byte	$0A,$44,$6F,$69,$6E,$67,$20,$66,$73,$63,$61,$6E,$66,$0A,$00
0001AAr 1  6E 67 20 66  
0001AEr 1  73 63 61 6E  
0001B5r 1               S000C:
0001B5r 1  54 65 73 74  	.byte	$54,$65,$73,$74,$20,$72,$65,$61,$64,$69,$6E,$67,$20,$61,$20,$66
0001B9r 1  20 72 65 61  
0001BDr 1  64 69 6E 67  
0001C5r 1  69 6C 65 20  	.byte	$69,$6C,$65,$20,$0A,$20,$4F,$70,$65,$6E,$20,$25,$73,$20,$72,$65
0001C9r 1  0A 20 4F 70  
0001CDr 1  65 6E 20 25  
0001D5r 1  74 75 72 6E  	.byte	$74,$75,$72,$6E,$65,$64,$20,$25,$64,$2C,$20,$45,$72,$72,$6F,$72
0001D9r 1  65 64 20 25  
0001DDr 1  64 2C 20 45  
0001E5r 1  20 6E 75 6D  	.byte	$20,$6E,$75,$6D,$62,$65,$72,$20,$25,$64,$0A,$00
0001E9r 1  62 65 72 20  
0001EDr 1  25 64 0A 00  
0001F1r 1               S0028:
0001F1r 1  43 6F 70 79  	.byte	$43,$6F,$70,$79,$20,$66,$63,$6C,$6F,$73,$65,$20,$73,$6F,$75,$72
0001F5r 1  20 66 63 6C  
0001F9r 1  6F 73 65 20  
000201r 1  63 65 20 66  	.byte	$63,$65,$20,$66,$69,$6C,$65,$20,$25,$73,$20,$72,$65,$74,$75,$72
000205r 1  69 6C 65 20  
000209r 1  25 73 20 72  
000211r 1  6E 65 64 20  	.byte	$6E,$65,$64,$20,$25,$64,$2C,$20,$45,$72,$72,$6F,$72,$20,$6E,$75
000215r 1  25 64 2C 20  
000219r 1  45 72 72 6F  
000221r 1  6D 62 65 72  	.byte	$6D,$62,$65,$72,$20,$25,$64,$0A,$00
000225r 1  20 25 64 0A  
000229r 1  00           
00022Ar 1               S001B:
00022Ar 1  66 67 65 74  	.byte	$66,$67,$65,$74,$73,$28,$29,$20,$6F,$66,$20,$63,$72,$65,$61,$74
00022Er 1  73 28 29 20  
000232r 1  6F 66 20 63  
00023Ar 1  65 64 20 66  	.byte	$65,$64,$20,$66,$69,$6C,$65,$20,$25,$73,$20,$52,$65,$61,$64,$20
00023Er 1  69 6C 65 20  
000242r 1  25 73 20 52  
00024Ar 1  72 65 74 75  	.byte	$72,$65,$74,$75,$72,$6E,$65,$64,$20,$70,$6F,$69,$6E,$74,$65,$72
00024Er 1  72 6E 65 64  
000252r 1  20 70 6F 69  
00025Ar 1  20 20 25 64  	.byte	$20,$20,$25,$64,$20,$3A,$0A,$00
00025Er 1  20 3A 0A 00  
000262r 1               S001E:
000262r 1  66 63 6C 6F  	.byte	$66,$63,$6C,$6F,$73,$65,$20,$63,$72,$65,$61,$74,$65,$64,$20,$25
000266r 1  73 65 20 63  
00026Ar 1  72 65 61 74  
000272r 1  73 20 66 69  	.byte	$73,$20,$66,$69,$6C,$65,$20,$72,$65,$74,$75,$72,$6E,$65,$64,$20
000276r 1  6C 65 20 72  
00027Ar 1  65 74 75 72  
000282r 1  25 64 2C 20  	.byte	$25,$64,$2C,$20,$45,$72,$72,$6F,$72,$20,$6E,$75,$6D,$62,$65,$72
000286r 1  45 72 72 6F  
00028Ar 1  72 20 6E 75  
000292r 1  20 25 64 0A  	.byte	$20,$25,$64,$0A,$00
000296r 1  00           
000297r 1               S0024:
000297r 1  43 6F 70 79  	.byte	$43,$6F,$70,$79,$20,$55,$6E,$61,$62,$6C,$65,$20,$74,$6F,$20,$6F
00029Br 1  20 55 6E 61  
00029Fr 1  62 6C 65 20  
0002A7r 1  70 65 6E 20  	.byte	$70,$65,$6E,$20,$73,$6F,$75,$72,$63,$65,$20,$66,$69,$6C,$65,$20
0002ABr 1  73 6F 75 72  
0002AFr 1  63 65 20 66  
0002B7r 1  25 73 20 65  	.byte	$25,$73,$20,$65,$72,$72,$6F,$72,$20,$6E,$75,$6D,$62,$65,$72,$20
0002BBr 1  72 72 6F 72  
0002BFr 1  20 6E 75 6D  
0002C7r 1  25 64 0A 00  	.byte	$25,$64,$0A,$00
0002CBr 1               S0018:
0002CBr 1  43 6F 70 79  	.byte	$43,$6F,$70,$79,$20,$63,$6F,$6D,$70,$6C,$65,$74,$65,$64,$20,$63
0002CFr 1  20 63 6F 6D  
0002D3r 1  70 6C 65 74  
0002DBr 1  6F 72 72 65  	.byte	$6F,$72,$72,$65,$63,$74,$6C,$79,$2C,$20,$72,$65,$61,$64,$69,$6E
0002DFr 1  63 74 6C 79  
0002E3r 1  2C 20 72 65  
0002EBr 1  67 20 25 73  	.byte	$67,$20,$25,$73,$20,$74,$6F,$20,$63,$6F,$6D,$66,$69,$72,$6D,$0A
0002EFr 1  20 74 6F 20  
0002F3r 1  63 6F 6D 66  
0002FBr 1  00           	.byte	$00
0002FCr 1               S0026:
0002FCr 1  43 6F 70 79  	.byte	$43,$6F,$70,$79,$20,$66,$72,$65,$61,$64,$20,$72,$65,$74,$75,$72
000300r 1  20 66 72 65  
000304r 1  61 64 20 72  
00030Cr 1  6E 65 64 20  	.byte	$6E,$65,$64,$20,$25,$64,$20,$65,$6C,$65,$6D,$65,$6E,$74,$73,$20
000310r 1  25 64 20 65  
000314r 1  6C 65 6D 65  
00031Cr 1  72 65 61 64  	.byte	$72,$65,$61,$64,$2C,$20,$25,$64,$20,$62,$79,$74,$65,$73,$0A,$00
000320r 1  2C 20 25 64  
000324r 1  20 62 79 74  
00032Cr 1               S002A:
00032Cr 1  43 6F 70 79  	.byte	$43,$6F,$70,$79,$20,$66,$6F,$70,$65,$6E,$20,$25,$73,$20,$72,$65
000330r 1  20 66 6F 70  
000334r 1  65 6E 20 25  
00033Cr 1  74 75 72 6E  	.byte	$74,$75,$72,$6E,$65,$64,$20,$25,$64,$2C,$20,$45,$72,$72,$6F,$72
000340r 1  65 64 20 25  
000344r 1  64 2C 20 45  
00034Cr 1  20 6E 75 6D  	.byte	$20,$6E,$75,$6D,$62,$65,$72,$20,$25,$64,$0A,$00
000350r 1  62 65 72 20  
000354r 1  25 64 0A 00  
000358r 1               S0011:
000358r 1  43 6C 6F 73  	.byte	$43,$6C,$6F,$73,$69,$6E,$67,$20,$25,$73,$20,$72,$65,$74,$75,$72
00035Cr 1  69 6E 67 20  
000360r 1  25 73 20 72  
000368r 1  6E 65 64 20  	.byte	$6E,$65,$64,$20,$25,$64,$2C,$20,$45,$72,$72,$6F,$72,$20,$6E,$75
00036Cr 1  25 64 2C 20  
000370r 1  45 72 72 6F  
000378r 1  6D 62 65 72  	.byte	$6D,$62,$65,$72,$20,$25,$64,$0A,$00
00037Cr 1  20 25 64 0A  
000380r 1  00           
000381r 1               S0016:
000381r 1  0A 66 63 6C  	.byte	$0A,$66,$63,$6C,$6F,$73,$65,$20,$25,$73,$20,$72,$65,$74,$75,$72
000385r 1  6F 73 65 20  
000389r 1  25 73 20 72  
000391r 1  6E 65 64 20  	.byte	$6E,$65,$64,$20,$25,$64,$2C,$20,$45,$72,$72,$6F,$72,$20,$6E,$75
000395r 1  25 64 2C 20  
000399r 1  45 72 72 6F  
0003A1r 1  6D 62 65 72  	.byte	$6D,$62,$65,$72,$20,$25,$64,$0A,$00
0003A5r 1  20 25 64 0A  
0003A9r 1  00           
0003AAr 1               S002C:
0003AAr 1  43 6F 70 79  	.byte	$43,$6F,$70,$79,$20,$77,$72,$6F,$74,$65,$20,$25,$64,$20,$62,$79
0003AEr 1  20 77 72 6F  
0003B2r 1  74 65 20 25  
0003BAr 1  74 65 73 20  	.byte	$74,$65,$73,$20,$74,$6F,$20,$64,$65,$73,$74,$69,$6E,$61,$74,$69
0003BEr 1  74 6F 20 64  
0003C2r 1  65 73 74 69  
0003CAr 1  6F 6E 20 25  	.byte	$6F,$6E,$20,$25,$73,$0A,$00
0003CEr 1  73 0A 00     
0003D1r 1               S002B:
0003D1r 1  43 6F 70 79  	.byte	$43,$6F,$70,$79,$20,$77,$72,$69,$74,$69,$6E,$67,$20,$74,$6F,$20
0003D5r 1  20 77 72 69  
0003D9r 1  74 69 6E 67  
0003E1r 1  25 73 20 77  	.byte	$25,$73,$20,$77,$72,$69,$74,$69,$6E,$67,$20,$20,$25,$64,$20,$62
0003E5r 1  72 69 74 69  
0003E9r 1  6E 67 20 20  
0003F1r 1  79 74 65 73  	.byte	$79,$74,$65,$73,$0A,$00
0003F5r 1  0A 00        
0003F7r 1               S0022:
0003F7r 1  43 6F 70 79  	.byte	$43,$6F,$70,$79,$20,$6D,$65,$6D,$6F,$72,$79,$20,$61,$6C,$6C,$6F
0003FBr 1  20 6D 65 6D  
0003FFr 1  6F 72 79 20  
000407r 1  63 61 74 69  	.byte	$63,$61,$74,$69,$6F,$6E,$20,$61,$64,$64,$72,$65,$73,$73,$20,$3D
00040Br 1  6F 6E 20 61  
00040Fr 1  64 64 72 65  
000417r 1  20 25 64 0A  	.byte	$20,$25,$64,$0A,$00
00041Br 1  00           
00041Cr 1               S001C:
00041Cr 1  44 61 74 61  	.byte	$44,$61,$74,$61,$20,$52,$65,$61,$64,$20,$66,$72,$6F,$6D,$20,$25
000420r 1  20 52 65 61  
000424r 1  64 20 66 72  
00042Cr 1  73 3A 0A 25  	.byte	$73,$3A,$0A,$25,$73,$0A,$45,$6E,$64,$20,$6F,$66,$20,$70,$72,$69
000430r 1  73 0A 45 6E  
000434r 1  64 20 6F 66  
00043Cr 1  6E 74 0A 00  	.byte	$6E,$74,$0A,$00
000440r 1               S000B:
000440r 1  42 65 67 69  	.byte	$42,$65,$67,$69,$6E,$20,$6F,$70,$65,$6E,$20,$63,$6C,$6F,$73,$65
000444r 1  6E 20 6F 70  
000448r 1  65 6E 20 63  
000450r 1  20 72 65 61  	.byte	$20,$72,$65,$61,$64,$20,$77,$72,$69,$74,$65,$20,$74,$65,$73,$74
000454r 1  64 20 77 72  
000458r 1  69 74 65 20  
000460r 1  73 0A 00     	.byte	$73,$0A,$00
000463r 1               S000D:
000463r 1  42 65 67 69  	.byte	$42,$65,$67,$69,$6E,$20,$52,$65,$61,$64,$69,$6E,$67,$20,$74,$65
000467r 1  6E 20 52 65  
00046Br 1  61 64 69 6E  
000473r 1  73 74 20 66  	.byte	$73,$74,$20,$66,$72,$6F,$6D,$20,$25,$73,$20,$44,$61,$74,$61,$3A
000477r 1  72 6F 6D 20  
00047Br 1  25 73 20 44  
000483r 1  20 0A 00     	.byte	$20,$0A,$00
000486r 1               S0027:
000486r 1  43 6F 70 79  	.byte	$43,$6F,$70,$79,$20,$52,$65,$61,$64,$20,$25,$64,$20,$62,$79,$74
00048Ar 1  20 52 65 61  
00048Er 1  64 20 25 64  
000496r 1  65 73 20 66  	.byte	$65,$73,$20,$66,$72,$6F,$6D,$20,$66,$69,$6C,$65,$20,$25,$73,$0A
00049Ar 1  72 6F 6D 20  
00049Er 1  66 69 6C 65  
0004A6r 1  00           	.byte	$00
0004A7r 1               S001D:
0004A7r 1  46 69 6C 65  	.byte	$46,$69,$6C,$65,$20,$25,$73,$20,$52,$65,$61,$64,$20,$61,$66,$74
0004ABr 1  20 25 73 20  
0004AFr 1  52 65 61 64  
0004B7r 1  65 72 20 63  	.byte	$65,$72,$20,$63,$6F,$70,$79,$20,$66,$61,$69,$6C,$65,$64,$0A,$00
0004BBr 1  6F 70 79 20  
0004BFr 1  66 61 69 6C  
0004C7r 1               S000A:
0004C7r 1  54 68 65 20  	.byte	$54,$68,$65,$20,$6C,$6F,$6E,$67,$20,$69,$6E,$74,$65,$67,$65,$72
0004CBr 1  6C 6F 6E 67  
0004CFr 1  20 69 6E 74  
0004D7r 1  20 6E 75 6D  	.byte	$20,$6E,$75,$6D,$62,$65,$72,$20,$69,$73,$20,$25,$6C,$64,$0A,$00
0004DBr 1  62 65 72 20  
0004DFr 1  69 73 20 25  
0004E7r 1               S0021:
0004E7r 1  43 6F 70 79  	.byte	$43,$6F,$70,$79,$20,$4D,$65,$6D,$6F,$72,$79,$20,$61,$6C,$6C,$6F
0004EBr 1  20 4D 65 6D  
0004EFr 1  6F 72 79 20  
0004F7r 1  63 61 74 69  	.byte	$63,$61,$74,$69,$6F,$6E,$20,$66,$61,$69,$6C,$65,$64,$0A,$00
0004FBr 1  6F 6E 20 66  
0004FFr 1  61 69 6C 65  
000506r 1               S0004:
000506r 1  0A 20 44 79  	.byte	$0A,$20,$44,$79,$6E,$61,$6D,$69,$63,$20,$68,$65,$6C,$6C,$6F,$20
00050Ar 1  6E 61 6D 69  
00050Er 1  63 20 68 65  
000516r 1  77 6F 72 6C  	.byte	$77,$6F,$72,$6C,$64,$20,$25,$73,$20,$2D,$20,$25,$64,$0A,$00
00051Ar 1  64 20 25 73  
00051Er 1  20 2D 20 25  
000525r 1               S002E:
000525r 1  43 6F 70 79  	.byte	$43,$6F,$70,$79,$20,$63,$6F,$6D,$70,$6C,$65,$74,$65,$64,$20,$66
000529r 1  20 63 6F 6D  
00052Dr 1  70 6C 65 74  
000535r 1  72 6F 6D 20  	.byte	$72,$6F,$6D,$20,$25,$73,$20,$74,$6F,$20,$25,$73,$0A,$00
000539r 1  25 73 20 74  
00053Dr 1  6F 20 25 73  
000543r 1               S0020:
000543r 1  0A 43 6F 70  	.byte	$0A,$43,$6F,$70,$79,$20,$66,$69,$6C,$65,$20,$66,$75,$6E,$63,$74
000547r 1  79 20 66 69  
00054Br 1  6C 65 20 66  
000553r 1  69 6F 6E 20  	.byte	$69,$6F,$6E,$20,$63,$61,$6C,$6C,$65,$64,$0A,$00
000557r 1  63 61 6C 6C  
00055Br 1  65 64 0A 00  
00055Fr 1               S0010:
00055Fr 1  52 65 61 64  	.byte	$52,$65,$61,$64,$20,$54,$65,$73,$74,$20,$43,$6F,$6D,$70,$6C,$65
000563r 1  20 54 65 73  
000567r 1  74 20 43 6F  
00056Fr 1  74 65 20 66  	.byte	$74,$65,$20,$66,$6F,$72,$20,$25,$73,$0A,$00
000573r 1  6F 72 20 25  
000577r 1  73 0A 00     
00057Ar 1               S0006:
00057Ar 1  42 65 67 69  	.byte	$42,$65,$67,$69,$6E,$20,$4C,$6F,$6F,$70,$20,$74,$65,$73,$74,$20
00057Er 1  6E 20 4C 6F  
000582r 1  6F 70 20 74  
00058Ar 1  35 30 30 2C  	.byte	$35,$30,$30,$2C,$30,$30,$30,$00
00058Er 1  30 30 30 00  
000592r 1               S0005:
000592r 1  0A 20 53 74  	.byte	$0A,$20,$53,$74,$61,$74,$69,$63,$20,$48,$65,$6C,$6C,$6F,$20,$57
000596r 1  61 74 69 63  
00059Ar 1  20 48 65 6C  
0005A2r 1  6F 72 6C 64  	.byte	$6F,$72,$6C,$64,$0A,$00
0005A6r 1  0A 00        
0005A8r 1               S0009:
0005A8r 1  43 6F 6D 70  	.byte	$43,$6F,$6D,$70,$6C,$65,$74,$65,$64,$20,$70,$75,$74,$63,$68,$20
0005ACr 1  6C 65 74 65  
0005B0r 1  64 20 70 75  
0005B8r 1  74 65 73 74  	.byte	$74,$65,$73,$74,$0A,$00
0005BCr 1  0A 00        
0005BEr 1               S0008:
0005BEr 1  54 72 79 20  	.byte	$54,$72,$79,$20,$74,$6F,$20,$70,$75,$74,$63,$68,$61,$72,$28,$27
0005C2r 1  74 6F 20 70  
0005C6r 1  75 74 63 68  
0005CEr 1  61 27 29 0A  	.byte	$61,$27,$29,$0A,$00
0005D2r 1  00           
0005D3r 1               S002D:
0005D3r 1  43 6F 70 79  	.byte	$43,$6F,$70,$79,$20,$66,$61,$69,$6C,$65,$64,$20,$74,$6F,$20,$25
0005D7r 1  20 66 61 69  
0005DBr 1  6C 65 64 20  
0005E3r 1  73 0A 00     	.byte	$73,$0A,$00
0005E6r 1               S001F:
0005E6r 1  41 6C 6C 20  	.byte	$41,$6C,$6C,$20,$74,$65,$73,$74,$73,$20,$63,$6F,$6D,$70,$6C,$65
0005EAr 1  74 65 73 74  
0005EEr 1  73 20 63 6F  
0005F6r 1  74 65 00     	.byte	$74,$65,$00
0005F9r 1               S0017:
0005F9r 1  42 65 67 69  	.byte	$42,$65,$67,$69,$6E,$20,$43,$6F,$70,$79,$20,$74,$65,$73,$74,$0A
0005FDr 1  6E 20 43 6F  
000601r 1  70 79 20 74  
000609r 1  00           	.byte	$00
00060Ar 1               S0003:
00060Ar 1  74 68 69 73  	.byte	$74,$68,$69,$73,$20,$69,$73,$20,$61,$20,$73,$74,$72,$69,$6E,$67
00060Er 1  20 69 73 20  
000612r 1  61 20 73 74  
00061Ar 1  00           	.byte	$00
00061Br 1               S0007:
00061Br 1  45 6E 64 20  	.byte	$45,$6E,$64,$20,$6C,$6F,$6F,$70,$20,$74,$65,$73,$74,$0A,$00
00061Fr 1  6C 6F 6F 70  
000623r 1  20 74 65 73  
00062Ar 1               S0001:
00062Ar 1  73 6F 75 72  	.byte	$73,$6F,$75,$72,$63,$65,$2E,$74,$78,$74,$00
00062Er 1  63 65 2E 74  
000632r 1  78 74 00     
000635r 1               S0002:
000635r 1  61 63 6F 70  	.byte	$61,$63,$6F,$70,$79,$2E,$74,$78,$74,$00
000639r 1  79 2E 74 78  
00063Dr 1  74 00        
00063Fr 1               S000F	:=	S002C+35
00063Fr 1               S0015	:=	S002C+35
00063Fr 1               S0029:
00063Fr 1  77 00        	.byte	$77,$00
000641r 1               S0023:
000641r 1  72 00        	.byte	$72,$00
000643r 1               S0019	:=	S0023+0
000643r 1               S0012	:=	S0023+0
000643r 1               
000643r 1               ; ---------------------------------------------------------------
000643r 1               ; int __near__ copy (char *source, char *dest)
000643r 1               ; ---------------------------------------------------------------
000643r 1               
000643r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_copy: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; int copy(char *source, char *dest) {
000000r 1               ;
000000r 1  20 rr rr     	jsr     pushax
000003r 1               ;
000003r 1               ; int index = 0, i = 1;
000003r 1               ;
000003r 1  20 rr rr     	jsr     decsp2
000006r 1  20 rr rr     	jsr     push0
000009r 1  A9 01        	lda     #$01
00000Br 1  20 rr rr     	jsr     pusha0
00000Er 1               ;
00000Er 1               ; seperator();
00000Er 1               ;
00000Er 1  20 rr rr     	jsr     decsp2
000011r 1  20 rr rr     	jsr     _seperator
000014r 1               ;
000014r 1               ; printf("\nCopy file function called\n");
000014r 1               ;
000014r 1  A9 rr        	lda     #<(S0020)
000016r 1  A2 rr        	ldx     #>(S0020)
000018r 1  20 rr rr     	jsr     pushax
00001Br 1  A0 02        	ldy     #$02
00001Dr 1  20 rr rr     	jsr     _printf
000020r 1               ;
000020r 1               ; buffer = malloc(bufferlen);
000020r 1               ;
000020r 1  A2 03        	ldx     #$03
000022r 1  A9 FC        	lda     #$FC
000024r 1  20 rr rr     	jsr     _malloc
000027r 1  A0 06        	ldy     #$06
000029r 1  20 rr rr     	jsr     staxysp
00002Cr 1               ;
00002Cr 1               ; if (buffer == NULL) {
00002Cr 1               ;
00002Cr 1  E0 00        	cpx     #$00
00002Er 1  D0 15        	bne     L0002
000030r 1  C9 00        	cmp     #$00
000032r 1  D0 11        	bne     L0002
000034r 1               ;
000034r 1               ; printf("Copy Memory allocation failed\n");
000034r 1               ;
000034r 1  A9 rr        	lda     #<(S0021)
000036r 1  A2 rr        	ldx     #>(S0021)
000038r 1  20 rr rr     	jsr     pushax
00003Br 1  A0 02        	ldy     #$02
00003Dr 1  20 rr rr     	jsr     _printf
000040r 1               ;
000040r 1               ; return -1;
000040r 1               ;
000040r 1  A2 FF        	ldx     #$FF
000042r 1  4C rr rr     	jmp     L0018
000045r 1               ;
000045r 1               ; printf("Copy memory allocation address = %d\n",buffer);
000045r 1               ;
000045r 1  A9 rr        L0002:	lda     #<(S0022)
000047r 1  A2 rr        	ldx     #>(S0022)
000049r 1  20 rr rr     	jsr     pushax
00004Cr 1  A0 0B        	ldy     #$0B
00004Er 1  20 rr rr     	jsr     pushwysp
000051r 1  A0 04        	ldy     #$04
000053r 1  20 rr rr     	jsr     _printf
000056r 1               ;
000056r 1               ; myfile = fopen(source,"r");
000056r 1               ;
000056r 1  A0 0D        	ldy     #$0D
000058r 1  20 rr rr     	jsr     pushwysp
00005Br 1  A9 rr        	lda     #<(S0023)
00005Dr 1  A2 rr        	ldx     #>(S0023)
00005Fr 1  20 rr rr     	jsr     _fopen
000062r 1  20 rr rr     	jsr     stax0sp
000065r 1               ;
000065r 1               ; if (myfile == NULL) {
000065r 1               ;
000065r 1  E0 00        	cpx     #$00
000067r 1  D0 23        	bne     L0005
000069r 1  C9 00        	cmp     #$00
00006Br 1  D0 1F        	bne     L0005
00006Dr 1               ;
00006Dr 1               ; printf("Copy Unable to open source file %s error number %d\n",source,errno);
00006Dr 1               ;
00006Dr 1  A9 rr        	lda     #<(S0024)
00006Fr 1  A2 rr        	ldx     #>(S0024)
000071r 1  20 rr rr     	jsr     pushax
000074r 1  A0 0F        	ldy     #$0F
000076r 1  20 rr rr     	jsr     pushwysp
000079r 1  AD rr rr     	lda     ___errno
00007Cr 1  AE rr rr     	ldx     ___errno+1
00007Fr 1  20 rr rr     	jsr     pushax
000082r 1  A0 06        	ldy     #$06
000084r 1  20 rr rr     	jsr     _printf
000087r 1               ;
000087r 1               ; return -1;
000087r 1               ;
000087r 1  A2 FF        	ldx     #$FF
000089r 1  4C rr rr     	jmp     L0018
00008Cr 1               ;
00008Cr 1               ; printf("Copy fopen source %s returned %d, Error number %d\nUsing fread to read each line\n============\n",source,myfile,errno);
00008Cr 1               ;
00008Cr 1  A9 rr        L0005:	lda     #<(S0025)
00008Er 1  A2 rr        	ldx     #>(S0025)
000090r 1  20 rr rr     	jsr     pushax
000093r 1  A0 0F        	ldy     #$0F
000095r 1  20 rr rr     	jsr     pushwysp
000098r 1  A0 07        	ldy     #$07
00009Ar 1  20 rr rr     	jsr     pushwysp
00009Dr 1  AD rr rr     	lda     ___errno
0000A0r 1  AE rr rr     	ldx     ___errno+1
0000A3r 1  20 rr rr     	jsr     pushax
0000A6r 1  A0 08        	ldy     #$08
0000A8r 1  20 rr rr     	jsr     _printf
0000ABr 1               ;
0000ABr 1               ; buffer[0] = 0;
0000ABr 1               ;
0000ABr 1  A0 07        	ldy     #$07
0000ADr 1  20 rr rr     	jsr     ldaxysp
0000B0r 1  85 rr        	sta     ptr1
0000B2r 1  86 rr        	stx     ptr1+1
0000B4r 1  A9 00        	lda     #$00
0000B6r 1  A8           	tay
0000B7r 1  91 rr        	sta     (ptr1),y
0000B9r 1               ;
0000B9r 1               ; while(i > 0 && i < blockcount-1 ) {
0000B9r 1               ;
0000B9r 1  4C rr rr     	jmp     L000F
0000BCr 1               ;
0000BCr 1               ; i = fread(buffer+index,blocklen,blockcount-1,myfile);
0000BCr 1               ;
0000BCr 1  A0 05        L0007:	ldy     #$05
0000BEr 1  20 rr rr     	jsr     ldaxysp
0000C1r 1  18           	clc
0000C2r 1  A0 06        	ldy     #$06
0000C4r 1  71 rr        	adc     (sp),y
0000C6r 1  48           	pha
0000C7r 1  8A           	txa
0000C8r 1  C8           	iny
0000C9r 1  71 rr        	adc     (sp),y
0000CBr 1  AA           	tax
0000CCr 1  68           	pla
0000CDr 1  20 rr rr     	jsr     pushax
0000D0r 1  A9 01        	lda     #$01
0000D2r 1  20 rr rr     	jsr     pusha0
0000D5r 1  A2 03        	ldx     #$03
0000D7r 1  A9 FA        	lda     #$FA
0000D9r 1  20 rr rr     	jsr     pushax
0000DCr 1  A0 07        	ldy     #$07
0000DEr 1  20 rr rr     	jsr     ldaxysp
0000E1r 1  20 rr rr     	jsr     _fread
0000E4r 1  A0 02        	ldy     #$02
0000E6r 1  20 rr rr     	jsr     staxysp
0000E9r 1               ;
0000E9r 1               ; if(i>0) {
0000E9r 1               ;
0000E9r 1  C9 01        	cmp     #$01
0000EBr 1  8A           	txa
0000ECr 1  E9 00        	sbc     #$00
0000EEr 1  70 02        	bvs     L0010
0000F0r 1  49 80        	eor     #$80
0000F2r 1  10 20        L0010:	bpl     L000F
0000F4r 1               ;
0000F4r 1               ; index = blocklen*i;
0000F4r 1               ;
0000F4r 1  A0 03        	ldy     #$03
0000F6r 1  20 rr rr     	jsr     ldaxysp
0000F9r 1  A0 04        	ldy     #$04
0000FBr 1  20 rr rr     	jsr     staxysp
0000FEr 1               ;
0000FEr 1               ; printf("Copy fread returned %d elements read, %d bytes\n",i,index);
0000FEr 1               ;
0000FEr 1  A9 rr        	lda     #<(S0026)
000100r 1  A2 rr        	ldx     #>(S0026)
000102r 1  20 rr rr     	jsr     pushax
000105r 1  A0 07        	ldy     #$07
000107r 1  20 rr rr     	jsr     pushwysp
00010Ar 1  A0 0B        	ldy     #$0B
00010Cr 1  20 rr rr     	jsr     pushwysp
00010Fr 1  A0 06        	ldy     #$06
000111r 1  20 rr rr     	jsr     _printf
000114r 1               ;
000114r 1               ; while(i > 0 && i < blockcount-1 ) {
000114r 1               ;
000114r 1  A0 03        L000F:	ldy     #$03
000116r 1  20 rr rr     	jsr     ldaxysp
000119r 1  C9 01        	cmp     #$01
00011Br 1  8A           	txa
00011Cr 1  E9 00        	sbc     #$00
00011Er 1  70 02        	bvs     L000A
000120r 1  49 80        	eor     #$80
000122r 1  10 10        L000A:	bpl     L0014
000124r 1  A0 03        	ldy     #$03
000126r 1  20 rr rr     	jsr     ldaxysp
000129r 1  C9 FA        	cmp     #$FA
00012Br 1  8A           	txa
00012Cr 1  E9 03        	sbc     #$03
00012Er 1  50 02        	bvc     L000C
000130r 1  49 80        	eor     #$80
000132r 1  30 88        L000C:	bmi     L0007
000134r 1               ;
000134r 1               ; buffer[index] = 0;
000134r 1               ;
000134r 1  A0 05        L0014:	ldy     #$05
000136r 1  20 rr rr     	jsr     ldaxysp
000139r 1  18           	clc
00013Ar 1  A0 06        	ldy     #$06
00013Cr 1  71 rr        	adc     (sp),y
00013Er 1  85 rr        	sta     ptr1
000140r 1  8A           	txa
000141r 1  C8           	iny
000142r 1  71 rr        	adc     (sp),y
000144r 1  85 rr        	sta     ptr1+1
000146r 1  A2 00        	ldx     #$00
000148r 1  8A           	txa
000149r 1  A8           	tay
00014Ar 1  91 rr        	sta     (ptr1),y
00014Cr 1               ;
00014Cr 1               ; seperator();
00014Cr 1               ;
00014Cr 1  20 rr rr     	jsr     _seperator
00014Fr 1               ;
00014Fr 1               ; printf("Copy Read %d bytes from file %s\n",index,source);
00014Fr 1               ;
00014Fr 1  A9 rr        	lda     #<(S0027)
000151r 1  A2 rr        	ldx     #>(S0027)
000153r 1  20 rr rr     	jsr     pushax
000156r 1  A0 09        	ldy     #$09
000158r 1  20 rr rr     	jsr     pushwysp
00015Br 1  A0 11        	ldy     #$11
00015Dr 1  20 rr rr     	jsr     pushwysp
000160r 1  A0 06        	ldy     #$06
000162r 1  20 rr rr     	jsr     _printf
000165r 1               ;
000165r 1               ; i = fclose(myfile);
000165r 1               ;
000165r 1  20 rr rr     	jsr     ldax0sp
000168r 1  20 rr rr     	jsr     _fclose
00016Br 1  A0 02        	ldy     #$02
00016Dr 1  20 rr rr     	jsr     staxysp
000170r 1               ;
000170r 1               ; printf("Copy fclose source file %s returned %d, Error number %d\n",source ,i,errno);
000170r 1               ;
000170r 1  A9 rr        	lda     #<(S0028)
000172r 1  A2 rr        	ldx     #>(S0028)
000174r 1  20 rr rr     	jsr     pushax
000177r 1  A0 0F        	ldy     #$0F
000179r 1  20 rr rr     	jsr     pushwysp
00017Cr 1  A0 09        	ldy     #$09
00017Er 1  20 rr rr     	jsr     pushwysp
000181r 1  AD rr rr     	lda     ___errno
000184r 1  AE rr rr     	ldx     ___errno+1
000187r 1  20 rr rr     	jsr     pushax
00018Ar 1  A0 08        	ldy     #$08
00018Cr 1  20 rr rr     	jsr     _printf
00018Fr 1               ;
00018Fr 1               ; seperator();
00018Fr 1               ;
00018Fr 1  20 rr rr     	jsr     _seperator
000192r 1               ;
000192r 1               ; myfile = fopen(dest,"w");
000192r 1               ;
000192r 1  A0 0B        	ldy     #$0B
000194r 1  20 rr rr     	jsr     pushwysp
000197r 1  A9 rr        	lda     #<(S0029)
000199r 1  A2 rr        	ldx     #>(S0029)
00019Br 1  20 rr rr     	jsr     _fopen
00019Er 1  20 rr rr     	jsr     stax0sp
0001A1r 1               ;
0001A1r 1               ; printf("Copy fopen %s returned %d, Error number %d\n",dest,myfile,errno);
0001A1r 1               ;
0001A1r 1  A9 rr        	lda     #<(S002A)
0001A3r 1  A2 rr        	ldx     #>(S002A)
0001A5r 1  20 rr rr     	jsr     pushax
0001A8r 1  A0 0D        	ldy     #$0D
0001AAr 1  20 rr rr     	jsr     pushwysp
0001ADr 1  A0 07        	ldy     #$07
0001AFr 1  20 rr rr     	jsr     pushwysp
0001B2r 1  AD rr rr     	lda     ___errno
0001B5r 1  AE rr rr     	ldx     ___errno+1
0001B8r 1  20 rr rr     	jsr     pushax
0001BBr 1  A0 08        	ldy     #$08
0001BDr 1  20 rr rr     	jsr     _printf
0001C0r 1               ;
0001C0r 1               ; if (myfile != NULL) {
0001C0r 1               ;
0001C0r 1  A0 00        	ldy     #$00
0001C2r 1  B1 rr        	lda     (sp),y
0001C4r 1  C8           	iny
0001C5r 1  11 rr        	ora     (sp),y
0001C7r 1  F0 51        	beq     L0011
0001C9r 1               ;
0001C9r 1               ; printf("Copy writing to %s writing  %d bytes\n",dest,index);
0001C9r 1               ;
0001C9r 1  A9 rr        	lda     #<(S002B)
0001CBr 1  A2 rr        	ldx     #>(S002B)
0001CDr 1  20 rr rr     	jsr     pushax
0001D0r 1  A0 0D        	ldy     #$0D
0001D2r 1  20 rr rr     	jsr     pushwysp
0001D5r 1  A0 0B        	ldy     #$0B
0001D7r 1  20 rr rr     	jsr     pushwysp
0001DAr 1  A0 06        	ldy     #$06
0001DCr 1  20 rr rr     	jsr     _printf
0001DFr 1               ;
0001DFr 1               ; i = fwrite(buffer, 1 ,index , myfile);
0001DFr 1               ;
0001DFr 1  A0 09        	ldy     #$09
0001E1r 1  20 rr rr     	jsr     pushwysp
0001E4r 1  A9 01        	lda     #$01
0001E6r 1  20 rr rr     	jsr     pusha0
0001E9r 1  A0 0B        	ldy     #$0B
0001EBr 1  20 rr rr     	jsr     pushwysp
0001EEr 1  A0 07        	ldy     #$07
0001F0r 1  20 rr rr     	jsr     ldaxysp
0001F3r 1  20 rr rr     	jsr     _fwrite
0001F6r 1  A0 02        	ldy     #$02
0001F8r 1  20 rr rr     	jsr     staxysp
0001FBr 1               ;
0001FBr 1               ; printf("Copy wrote %d bytes to destination %s\n",i,dest);
0001FBr 1               ;
0001FBr 1  A9 rr        	lda     #<(S002C)
0001FDr 1  A2 rr        	ldx     #>(S002C)
0001FFr 1  20 rr rr     	jsr     pushax
000202r 1  A0 07        	ldy     #$07
000204r 1  20 rr rr     	jsr     pushwysp
000207r 1  A0 0F        	ldy     #$0F
000209r 1  20 rr rr     	jsr     pushwysp
00020Cr 1  A0 06        	ldy     #$06
00020Er 1  20 rr rr     	jsr     _printf
000211r 1               ;
000211r 1               ; fclose(myfile);
000211r 1               ;
000211r 1  20 rr rr     	jsr     ldax0sp
000214r 1  20 rr rr     	jsr     _fclose
000217r 1               ;
000217r 1               ; } else {
000217r 1               ;
000217r 1  4C rr rr     	jmp     L0013
00021Ar 1               ;
00021Ar 1               ; seperator();
00021Ar 1               ;
00021Ar 1  20 rr rr     L0011:	jsr     _seperator
00021Dr 1               ;
00021Dr 1               ; printf("Copy failed to %s\n",dest);
00021Dr 1               ;
00021Dr 1  A9 rr        	lda     #<(S002D)
00021Fr 1  A2 rr        	ldx     #>(S002D)
000221r 1  20 rr rr     	jsr     pushax
000224r 1  A0 0D        	ldy     #$0D
000226r 1  20 rr rr     	jsr     pushwysp
000229r 1  A0 04        	ldy     #$04
00022Br 1  20 rr rr     	jsr     _printf
00022Er 1               ;
00022Er 1               ; free(buffer);
00022Er 1               ;
00022Er 1  A0 07        	ldy     #$07
000230r 1  20 rr rr     	jsr     ldaxysp
000233r 1  20 rr rr     	jsr     _free
000236r 1               ;
000236r 1               ; return -1;
000236r 1               ;
000236r 1  A2 FF        	ldx     #$FF
000238r 1  4C rr rr     	jmp     L0018
00023Br 1               ;
00023Br 1               ; printf("Copy completed from %s to %s\n",source,dest);
00023Br 1               ;
00023Br 1  A9 rr        L0013:	lda     #<(S002E)
00023Dr 1  A2 rr        	ldx     #>(S002E)
00023Fr 1  20 rr rr     	jsr     pushax
000242r 1  A0 0F        	ldy     #$0F
000244r 1  20 rr rr     	jsr     pushwysp
000247r 1  A0 0F        	ldy     #$0F
000249r 1  20 rr rr     	jsr     pushwysp
00024Cr 1  A0 06        	ldy     #$06
00024Er 1  20 rr rr     	jsr     _printf
000251r 1               ;
000251r 1               ; seperator();
000251r 1               ;
000251r 1  20 rr rr     	jsr     _seperator
000254r 1               ;
000254r 1               ; free(buffer);
000254r 1               ;
000254r 1  A0 07        	ldy     #$07
000256r 1  20 rr rr     	jsr     ldaxysp
000259r 1  20 rr rr     	jsr     _free
00025Cr 1               ;
00025Cr 1               ; return 0;
00025Cr 1               ;
00025Cr 1  A2 00        	ldx     #$00
00025Er 1  8A           L0018:	txa
00025Fr 1               ;
00025Fr 1               ; }
00025Fr 1               ;
00025Fr 1  A0 0C        	ldy     #$0C
000261r 1  4C rr rr     	jmp     addysp
000264r 1               
000264r 1               .endproc
000264r 1               
000264r 1               ; ---------------------------------------------------------------
000264r 1               ; void __near__ seperator (void)
000264r 1               ; ---------------------------------------------------------------
000264r 1               
000264r 1               .segment	"CODE"
000264r 1               
000264r 1               .proc	_seperator: near
000264r 1               
000264r 1               .segment	"CODE"
000264r 1               
000264r 1               ;
000264r 1               ; printf("\n==============================================================\n");
000264r 1               ;
000264r 1  A9 rr        	lda     #<(S002F)
000266r 1  A2 rr        	ldx     #>(S002F)
000268r 1  20 rr rr     	jsr     pushax
00026Br 1  A0 02        	ldy     #$02
00026Dr 1  4C rr rr     	jmp     _printf
000270r 1               
000270r 1               .endproc
000270r 1               
000270r 1               ; ---------------------------------------------------------------
000270r 1               ; void __near__ main (void)
000270r 1               ; ---------------------------------------------------------------
000270r 1               
000270r 1               .segment	"CODE"
000270r 1               
000270r 1               .proc	_main: near
000270r 1               
000270r 1               .segment	"CODE"
000270r 1               
000270r 1               ;
000270r 1               ; char *source = "source.txt";
000270r 1               ;
000270r 1  A9 rr        	lda     #<(S0001)
000272r 1  A2 rr        	ldx     #>(S0001)
000274r 1  20 rr rr     	jsr     pushax
000277r 1               ;
000277r 1               ; char *dest   = "acopy.txt";
000277r 1               ;
000277r 1  A9 rr        	lda     #<(S0002)
000279r 1  A2 rr        	ldx     #>(S0002)
00027Br 1  20 rr rr     	jsr     pushax
00027Er 1               ;
00027Er 1               ; long fnum = 26 ;
00027Er 1               ;
00027Er 1  A0 0C        	ldy     #$0C
000280r 1  20 rr rr     	jsr     subysp
000283r 1  A2 00        	ldx     #$00
000285r 1  A9 1A        	lda     #$1A
000287r 1  20 rr rr     	jsr     push0ax
00028Ar 1               ;
00028Ar 1               ; for(i=0; i < 10; i++) {
00028Ar 1               ;
00028Ar 1  8A           	txa
00028Br 1  A0 0E        	ldy     #$0E
00028Dr 1  20 rr rr     	jsr     staxysp
000290r 1  A0 0F        L0002:	ldy     #$0F
000292r 1  20 rr rr     	jsr     ldaxysp
000295r 1  C9 0A        	cmp     #$0A
000297r 1  8A           	txa
000298r 1  E9 00        	sbc     #$00
00029Ar 1  50 02        	bvc     L0006
00029Cr 1  49 80        	eor     #$80
00029Er 1  0A           L0006:	asl     a
00029Fr 1  A9 00        	lda     #$00
0002A1r 1  AA           	tax
0002A2r 1  90 4C        	bcc     L0025
0002A4r 1               ;
0002A4r 1               ; ptr = malloc(bufferlen);
0002A4r 1               ;
0002A4r 1  A2 03        	ldx     #$03
0002A6r 1  A9 FC        	lda     #$FC
0002A8r 1  20 rr rr     	jsr     _malloc
0002ABr 1  A0 08        	ldy     #$08
0002ADr 1  20 rr rr     	jsr     staxysp
0002B0r 1               ;
0002B0r 1               ; strcpy(ptr, "this is a string");
0002B0r 1               ;
0002B0r 1  20 rr rr     	jsr     pushax
0002B3r 1  A9 rr        	lda     #<(S0003)
0002B5r 1  A2 rr        	ldx     #>(S0003)
0002B7r 1  20 rr rr     	jsr     _strcpy
0002BAr 1               ;
0002BAr 1               ; printf("\n Dynamic hello world %s - %d\n",ptr,i);
0002BAr 1               ;
0002BAr 1  A9 rr        	lda     #<(S0004)
0002BCr 1  A2 rr        	ldx     #>(S0004)
0002BEr 1  20 rr rr     	jsr     pushax
0002C1r 1  A0 0D        	ldy     #$0D
0002C3r 1  20 rr rr     	jsr     pushwysp
0002C6r 1  A0 15        	ldy     #$15
0002C8r 1  20 rr rr     	jsr     pushwysp
0002CBr 1  A0 06        	ldy     #$06
0002CDr 1  20 rr rr     	jsr     _printf
0002D0r 1               ;
0002D0r 1               ; printf("\n Static Hello World\n");
0002D0r 1               ;
0002D0r 1  A9 rr        	lda     #<(S0005)
0002D2r 1  A2 rr        	ldx     #>(S0005)
0002D4r 1  20 rr rr     	jsr     pushax
0002D7r 1  A0 02        	ldy     #$02
0002D9r 1  20 rr rr     	jsr     _printf
0002DCr 1               ;
0002DCr 1               ; free(ptr);
0002DCr 1               ;
0002DCr 1  A0 09        	ldy     #$09
0002DEr 1  20 rr rr     	jsr     ldaxysp
0002E1r 1  20 rr rr     	jsr     _free
0002E4r 1               ;
0002E4r 1               ; for(i=0; i < 10; i++) {
0002E4r 1               ;
0002E4r 1  A0 0E        	ldy     #$0E
0002E6r 1  A2 00        	ldx     #$00
0002E8r 1  A9 01        	lda     #$01
0002EAr 1  20 rr rr     	jsr     addeqysp
0002EDr 1  4C rr rr     	jmp     L0002
0002F0r 1               ;
0002F0r 1               ; k = 0;
0002F0r 1               ;
0002F0r 1  A0 0A        L0025:	ldy     #$0A
0002F2r 1  20 rr rr     	jsr     staxysp
0002F5r 1               ;
0002F5r 1               ; printf("Begin Loop test 500,000");
0002F5r 1               ;
0002F5r 1  A9 rr        	lda     #<(S0006)
0002F7r 1  A2 rr        	ldx     #>(S0006)
0002F9r 1  20 rr rr     	jsr     pushax
0002FCr 1  A0 02        	ldy     #$02
0002FEr 1  20 rr rr     	jsr     _printf
000301r 1               ;
000301r 1               ; for(i=0; i<100; i++) {
000301r 1               ;
000301r 1  A2 00        	ldx     #$00
000303r 1  8A           	txa
000304r 1  A0 0E        	ldy     #$0E
000306r 1  20 rr rr     	jsr     staxysp
000309r 1  A0 0F        L0007:	ldy     #$0F
00030Br 1  20 rr rr     	jsr     ldaxysp
00030Er 1  C9 64        	cmp     #$64
000310r 1  8A           	txa
000311r 1  E9 00        	sbc     #$00
000313r 1  50 02        	bvc     L000B
000315r 1  49 80        	eor     #$80
000317r 1  10 39        L000B:	bpl     L0008
000319r 1               ;
000319r 1               ; for(j=0; j<50; j++) {
000319r 1               ;
000319r 1  A2 00        	ldx     #$00
00031Br 1  8A           	txa
00031Cr 1  A0 0C        	ldy     #$0C
00031Er 1  20 rr rr     	jsr     staxysp
000321r 1  A0 0D        L000C:	ldy     #$0D
000323r 1  20 rr rr     	jsr     ldaxysp
000326r 1  C9 32        	cmp     #$32
000328r 1  8A           	txa
000329r 1  E9 00        	sbc     #$00
00032Br 1  50 02        	bvc     L0010
00032Dr 1  49 80        	eor     #$80
00032Fr 1  10 15        L0010:	bpl     L0009
000331r 1               ;
000331r 1               ; k++;
000331r 1               ;
000331r 1  A0 0A        	ldy     #$0A
000333r 1  A2 00        	ldx     #$00
000335r 1  A9 01        	lda     #$01
000337r 1  20 rr rr     	jsr     addeqysp
00033Ar 1               ;
00033Ar 1               ; for(j=0; j<50; j++) {
00033Ar 1               ;
00033Ar 1  A0 0C        	ldy     #$0C
00033Cr 1  A2 00        	ldx     #$00
00033Er 1  A9 01        	lda     #$01
000340r 1  20 rr rr     	jsr     addeqysp
000343r 1  4C rr rr     	jmp     L000C
000346r 1               ;
000346r 1               ; for(i=0; i<100; i++) {
000346r 1               ;
000346r 1  A0 0E        L0009:	ldy     #$0E
000348r 1  A2 00        	ldx     #$00
00034Ar 1  A9 01        	lda     #$01
00034Cr 1  20 rr rr     	jsr     addeqysp
00034Fr 1  4C rr rr     	jmp     L0007
000352r 1               ;
000352r 1               ; printf("End loop test\n");
000352r 1               ;
000352r 1  A9 rr        L0008:	lda     #<(S0007)
000354r 1  A2 rr        	ldx     #>(S0007)
000356r 1  20 rr rr     	jsr     pushax
000359r 1  A0 02        	ldy     #$02
00035Br 1  20 rr rr     	jsr     _printf
00035Er 1               ;
00035Er 1               ; seperator();
00035Er 1               ;
00035Er 1  20 rr rr     	jsr     _seperator
000361r 1               ;
000361r 1               ; printf("Try to putchar('a')\n");
000361r 1               ;
000361r 1  A9 rr        	lda     #<(S0008)
000363r 1  A2 rr        	ldx     #>(S0008)
000365r 1  20 rr rr     	jsr     pushax
000368r 1  A0 02        	ldy     #$02
00036Ar 1  20 rr rr     	jsr     _printf
00036Dr 1               ;
00036Dr 1               ; for(i=0; i < 10; i++) putchar('a');
00036Dr 1               ;
00036Dr 1  A2 00        	ldx     #$00
00036Fr 1  8A           	txa
000370r 1  A0 0E        	ldy     #$0E
000372r 1  20 rr rr     	jsr     staxysp
000375r 1  A0 0F        L0011:	ldy     #$0F
000377r 1  20 rr rr     	jsr     ldaxysp
00037Ar 1  C9 0A        	cmp     #$0A
00037Cr 1  8A           	txa
00037Dr 1  E9 00        	sbc     #$00
00037Fr 1  50 02        	bvc     L0015
000381r 1  49 80        	eor     #$80
000383r 1  0A           L0015:	asl     a
000384r 1  A9 00        	lda     #$00
000386r 1  AA           	tax
000387r 1  2A           	rol     a
000388r 1  F0 11        	beq     L0012
00038Ar 1  A9 61        	lda     #$61
00038Cr 1  20 rr rr     	jsr     _putchar
00038Fr 1  A0 0E        	ldy     #$0E
000391r 1  A2 00        	ldx     #$00
000393r 1  A9 01        	lda     #$01
000395r 1  20 rr rr     	jsr     addeqysp
000398r 1  4C rr rr     	jmp     L0011
00039Br 1               ;
00039Br 1               ; seperator();
00039Br 1               ;
00039Br 1  20 rr rr     L0012:	jsr     _seperator
00039Er 1               ;
00039Er 1               ; printf("Completed putch test\n");
00039Er 1               ;
00039Er 1  A9 rr        	lda     #<(S0009)
0003A0r 1  A2 rr        	ldx     #>(S0009)
0003A2r 1  20 rr rr     	jsr     pushax
0003A5r 1  A0 02        	ldy     #$02
0003A7r 1  20 rr rr     	jsr     _printf
0003AAr 1               ;
0003AAr 1               ; fnum = 0x20000;
0003AAr 1               ;
0003AAr 1  A2 00        	ldx     #$00
0003ACr 1  86 rr        	stx     sreg+1
0003AEr 1  A9 02        	lda     #$02
0003B0r 1  85 rr        	sta     sreg
0003B2r 1  8A           	txa
0003B3r 1  20 rr rr     	jsr     steax0sp
0003B6r 1               ;
0003B6r 1               ; printf("The long integer number is %ld\n",fnum);
0003B6r 1               ;
0003B6r 1  A9 rr        	lda     #<(S000A)
0003B8r 1  A2 rr        	ldx     #>(S000A)
0003BAr 1  20 rr rr     	jsr     pushax
0003BDr 1  A0 05        	ldy     #$05
0003BFr 1  20 rr rr     	jsr     ldeaxysp
0003C2r 1  20 rr rr     	jsr     pusheax
0003C5r 1  A0 06        	ldy     #$06
0003C7r 1  20 rr rr     	jsr     _printf
0003CAr 1               ;
0003CAr 1               ; seperator();
0003CAr 1               ;
0003CAr 1  20 rr rr     	jsr     _seperator
0003CDr 1               ;
0003CDr 1               ; printf("Begin open close read write tests\n");
0003CDr 1               ;
0003CDr 1  A9 rr        	lda     #<(S000B)
0003CFr 1  A2 rr        	ldx     #>(S000B)
0003D1r 1  20 rr rr     	jsr     pushax
0003D4r 1  A0 02        	ldy     #$02
0003D6r 1  20 rr rr     	jsr     _printf
0003D9r 1               ;
0003D9r 1               ; i = open(source,O_RDONLY);
0003D9r 1               ;
0003D9r 1  A0 15        	ldy     #$15
0003DBr 1  20 rr rr     	jsr     pushwysp
0003DEr 1  A9 01        	lda     #$01
0003E0r 1  20 rr rr     	jsr     pusha0
0003E3r 1  A0 04        	ldy     #$04
0003E5r 1  20 rr rr     	jsr     _open
0003E8r 1  A0 0E        	ldy     #$0E
0003EAr 1  20 rr rr     	jsr     staxysp
0003EDr 1               ;
0003EDr 1               ; seperator();
0003EDr 1               ;
0003EDr 1  20 rr rr     	jsr     _seperator
0003F0r 1               ;
0003F0r 1               ; printf("Test reading a file \n Open %s returned %d, Error number %d\n",source,i,errno);
0003F0r 1               ;
0003F0r 1  A9 rr        	lda     #<(S000C)
0003F2r 1  A2 rr        	ldx     #>(S000C)
0003F4r 1  20 rr rr     	jsr     pushax
0003F7r 1  A0 17        	ldy     #$17
0003F9r 1  20 rr rr     	jsr     pushwysp
0003FCr 1  A0 15        	ldy     #$15
0003FEr 1  20 rr rr     	jsr     pushwysp
000401r 1  AD rr rr     	lda     ___errno
000404r 1  AE rr rr     	ldx     ___errno+1
000407r 1  20 rr rr     	jsr     pushax
00040Ar 1  A0 08        	ldy     #$08
00040Cr 1  20 rr rr     	jsr     _printf
00040Fr 1               ;
00040Fr 1               ; ptr = malloc(bufferlen);
00040Fr 1               ;
00040Fr 1  A2 03        	ldx     #$03
000411r 1  A9 FC        	lda     #$FC
000413r 1  20 rr rr     	jsr     _malloc
000416r 1  A0 08        	ldy     #$08
000418r 1  20 rr rr     	jsr     staxysp
00041Br 1               ;
00041Br 1               ; k=1;
00041Br 1               ;
00041Br 1  A2 00        	ldx     #$00
00041Dr 1  A9 01        	lda     #$01
00041Fr 1  A0 0A        	ldy     #$0A
000421r 1  20 rr rr     	jsr     staxysp
000424r 1               ;
000424r 1               ; seperator();
000424r 1               ;
000424r 1  20 rr rr     	jsr     _seperator
000427r 1               ;
000427r 1               ; printf("Begin Reading test from %s Data: \n",source);
000427r 1               ;
000427r 1  A9 rr        	lda     #<(S000D)
000429r 1  A2 rr        	ldx     #>(S000D)
00042Br 1  20 rr rr     	jsr     pushax
00042Er 1  A0 15        	ldy     #$15
000430r 1               ;
000430r 1               ; while (k != 0) {
000430r 1               ;
000430r 1  4C rr rr     	jmp     L0028
000433r 1               ;
000433r 1               ; k = read(3,ptr,bufferlen-1);
000433r 1               ;
000433r 1  A9 03        L0016:	lda     #$03
000435r 1  20 rr rr     	jsr     pusha0
000438r 1  A0 0D        	ldy     #$0D
00043Ar 1  20 rr rr     	jsr     pushwysp
00043Dr 1  A2 03        	ldx     #$03
00043Fr 1  A9 FB        	lda     #$FB
000441r 1  20 rr rr     	jsr     _read
000444r 1  A0 0A        	ldy     #$0A
000446r 1  20 rr rr     	jsr     staxysp
000449r 1               ;
000449r 1               ; if (k > 0) {
000449r 1               ;
000449r 1  C9 01        	cmp     #$01
00044Br 1  8A           	txa
00044Cr 1  E9 00        	sbc     #$00
00044Er 1  70 02        	bvs     L001B
000450r 1  49 80        	eor     #$80
000452r 1  0A           L001B:	asl     a
000453r 1  A2 00        	ldx     #$00
000455r 1  90 41        	bcc     L001A
000457r 1               ;
000457r 1               ; printf("\nRead %d bytes from %s Data:\n---------------------------------\n",k,source);
000457r 1               ;
000457r 1  A9 rr        	lda     #<(S000E)
000459r 1  A2 rr        	ldx     #>(S000E)
00045Br 1  20 rr rr     	jsr     pushax
00045Er 1  A0 0F        	ldy     #$0F
000460r 1  20 rr rr     	jsr     pushwysp
000463r 1  A0 19        	ldy     #$19
000465r 1  20 rr rr     	jsr     pushwysp
000468r 1  A0 06        	ldy     #$06
00046Ar 1  20 rr rr     	jsr     _printf
00046Dr 1               ;
00046Dr 1               ; ptr[k] = 0;
00046Dr 1               ;
00046Dr 1  A0 0B        	ldy     #$0B
00046Fr 1  20 rr rr     	jsr     ldaxysp
000472r 1  18           	clc
000473r 1  A0 08        	ldy     #$08
000475r 1  71 rr        	adc     (sp),y
000477r 1  85 rr        	sta     ptr1
000479r 1  8A           	txa
00047Ar 1  C8           	iny
00047Br 1  71 rr        	adc     (sp),y
00047Dr 1  85 rr        	sta     ptr1+1
00047Fr 1  A9 00        	lda     #$00
000481r 1  A8           	tay
000482r 1  91 rr        	sta     (ptr1),y
000484r 1               ;
000484r 1               ; printf("%s\n",ptr);
000484r 1               ;
000484r 1  A9 rr        	lda     #<(S000F)
000486r 1  A2 rr        	ldx     #>(S000F)
000488r 1  20 rr rr     	jsr     pushax
00048Br 1  A0 0B        	ldy     #$0B
00048Dr 1  20 rr rr     L0028:	jsr     ldaxysp
000490r 1  20 rr rr     	jsr     pushax
000493r 1  A0 04        	ldy     #$04
000495r 1  20 rr rr     	jsr     _printf
000498r 1               ;
000498r 1               ; while (k != 0) {
000498r 1               ;
000498r 1  A0 0A        L001A:	ldy     #$0A
00049Ar 1  B1 rr        	lda     (sp),y
00049Cr 1  C8           	iny
00049Dr 1  11 rr        	ora     (sp),y
00049Fr 1  D0 92        	bne     L0016
0004A1r 1               ;
0004A1r 1               ; seperator();
0004A1r 1               ;
0004A1r 1  20 rr rr     	jsr     _seperator
0004A4r 1               ;
0004A4r 1               ; printf("Read Test Complete for %s\n",source);
0004A4r 1               ;
0004A4r 1  A9 rr        	lda     #<(S0010)
0004A6r 1  A2 rr        	ldx     #>(S0010)
0004A8r 1  20 rr rr     	jsr     pushax
0004ABr 1  A0 17        	ldy     #$17
0004ADr 1  20 rr rr     	jsr     pushwysp
0004B0r 1  A0 04        	ldy     #$04
0004B2r 1  20 rr rr     	jsr     _printf
0004B5r 1               ;
0004B5r 1               ; j = close(i);
0004B5r 1               ;
0004B5r 1  A0 0F        	ldy     #$0F
0004B7r 1  20 rr rr     	jsr     ldaxysp
0004BAr 1  20 rr rr     	jsr     _close
0004BDr 1  A0 0C        	ldy     #$0C
0004BFr 1  20 rr rr     	jsr     staxysp
0004C2r 1               ;
0004C2r 1               ; printf("Closing %s returned %d, Error number %d\n",source,j,errno);
0004C2r 1               ;
0004C2r 1  A9 rr        	lda     #<(S0011)
0004C4r 1  A2 rr        	ldx     #>(S0011)
0004C6r 1  20 rr rr     	jsr     pushax
0004C9r 1  A0 17        	ldy     #$17
0004CBr 1  20 rr rr     	jsr     pushwysp
0004CEr 1  A0 13        	ldy     #$13
0004D0r 1  20 rr rr     	jsr     pushwysp
0004D3r 1  AD rr rr     	lda     ___errno
0004D6r 1  AE rr rr     	ldx     ___errno+1
0004D9r 1  20 rr rr     	jsr     pushax
0004DCr 1  A0 08        	ldy     #$08
0004DEr 1  20 rr rr     	jsr     _printf
0004E1r 1               ;
0004E1r 1               ; seperator();
0004E1r 1               ;
0004E1r 1  20 rr rr     	jsr     _seperator
0004E4r 1               ;
0004E4r 1               ; myfile = fopen(source,"r");
0004E4r 1               ;
0004E4r 1  A0 15        	ldy     #$15
0004E6r 1  20 rr rr     	jsr     pushwysp
0004E9r 1  A9 rr        	lda     #<(S0012)
0004EBr 1  A2 rr        	ldx     #>(S0012)
0004EDr 1  20 rr rr     	jsr     _fopen
0004F0r 1  A0 04        	ldy     #$04
0004F2r 1  20 rr rr     	jsr     staxysp
0004F5r 1               ;
0004F5r 1               ; printf("Begining test of fread/fclose/fopen of %s returned %d, Error number %d\n",source,myfile,errno);
0004F5r 1               ;
0004F5r 1  A9 rr        	lda     #<(S0013)
0004F7r 1  A2 rr        	ldx     #>(S0013)
0004F9r 1  20 rr rr     	jsr     pushax
0004FCr 1  A0 17        	ldy     #$17
0004FEr 1  20 rr rr     	jsr     pushwysp
000501r 1  A0 0B        	ldy     #$0B
000503r 1  20 rr rr     	jsr     pushwysp
000506r 1  AD rr rr     	lda     ___errno
000509r 1  AE rr rr     	ldx     ___errno+1
00050Cr 1  20 rr rr     	jsr     pushax
00050Fr 1  A0 08        	ldy     #$08
000511r 1  20 rr rr     	jsr     _printf
000514r 1               ;
000514r 1               ; k = fread(ptr,1,blockcount,myfile);
000514r 1               ;
000514r 1  A0 0B        	ldy     #$0B
000516r 1  20 rr rr     	jsr     pushwysp
000519r 1  A9 01        	lda     #$01
00051Br 1  20 rr rr     	jsr     pusha0
00051Er 1  A2 03        	ldx     #$03
000520r 1  A9 FB        	lda     #$FB
000522r 1  20 rr rr     	jsr     pushax
000525r 1  A0 0B        	ldy     #$0B
000527r 1  20 rr rr     	jsr     ldaxysp
00052Ar 1  20 rr rr     	jsr     _fread
00052Dr 1  A0 0A        	ldy     #$0A
00052Fr 1  20 rr rr     	jsr     staxysp
000532r 1               ;
000532r 1               ; ptr[k*blocklen] = 0;
000532r 1               ;
000532r 1  18           	clc
000533r 1  A0 08        	ldy     #$08
000535r 1  71 rr        	adc     (sp),y
000537r 1  85 rr        	sta     ptr1
000539r 1  8A           	txa
00053Ar 1  C8           	iny
00053Br 1  71 rr        	adc     (sp),y
00053Dr 1  85 rr        	sta     ptr1+1
00053Fr 1  A9 00        	lda     #$00
000541r 1  A8           	tay
000542r 1  91 rr        	sta     (ptr1),y
000544r 1               ;
000544r 1               ; printf("fread %s Count returned %d bytes and %d elements, Error number %d\nData fread:\n",source,k*blocklen,k,errno);
000544r 1               ;
000544r 1  A9 rr        	lda     #<(S0014)
000546r 1  A2 rr        	ldx     #>(S0014)
000548r 1  20 rr rr     	jsr     pushax
00054Br 1  A0 17        	ldy     #$17
00054Dr 1  20 rr rr     	jsr     pushwysp
000550r 1  A0 11        	ldy     #$11
000552r 1  20 rr rr     	jsr     pushwysp
000555r 1  A0 13        	ldy     #$13
000557r 1  20 rr rr     	jsr     pushwysp
00055Ar 1  AD rr rr     	lda     ___errno
00055Dr 1  AE rr rr     	ldx     ___errno+1
000560r 1  20 rr rr     	jsr     pushax
000563r 1  A0 0A        	ldy     #$0A
000565r 1  20 rr rr     	jsr     _printf
000568r 1               ;
000568r 1               ; printf("%s\n",ptr);
000568r 1               ;
000568r 1  A9 rr        	lda     #<(S0015)
00056Ar 1  A2 rr        	ldx     #>(S0015)
00056Cr 1  20 rr rr     	jsr     pushax
00056Fr 1  A0 0D        	ldy     #$0D
000571r 1  20 rr rr     	jsr     pushwysp
000574r 1  A0 04        	ldy     #$04
000576r 1  20 rr rr     	jsr     _printf
000579r 1               ;
000579r 1               ; seperator();
000579r 1               ;
000579r 1  20 rr rr     	jsr     _seperator
00057Cr 1               ;
00057Cr 1               ; i = fclose(myfile);
00057Cr 1               ;
00057Cr 1  A0 05        	ldy     #$05
00057Er 1  20 rr rr     	jsr     ldaxysp
000581r 1  20 rr rr     	jsr     _fclose
000584r 1  A0 0E        	ldy     #$0E
000586r 1  20 rr rr     	jsr     staxysp
000589r 1               ;
000589r 1               ; printf("\nfclose %s returned %d, Error number %d\n",source,i,errno);
000589r 1               ;
000589r 1  A9 rr        	lda     #<(S0016)
00058Br 1  A2 rr        	ldx     #>(S0016)
00058Dr 1  20 rr rr     	jsr     pushax
000590r 1  A0 17        	ldy     #$17
000592r 1  20 rr rr     	jsr     pushwysp
000595r 1  A0 15        	ldy     #$15
000597r 1  20 rr rr     	jsr     pushwysp
00059Ar 1  AD rr rr     	lda     ___errno
00059Dr 1  AE rr rr     	ldx     ___errno+1
0005A0r 1  20 rr rr     	jsr     pushax
0005A3r 1  A0 08        	ldy     #$08
0005A5r 1  20 rr rr     	jsr     _printf
0005A8r 1               ;
0005A8r 1               ; seperator();
0005A8r 1               ;
0005A8r 1  20 rr rr     	jsr     _seperator
0005ABr 1               ;
0005ABr 1               ; printf("Begin Copy test\n");
0005ABr 1               ;
0005ABr 1  A9 rr        	lda     #<(S0017)
0005ADr 1  A2 rr        	ldx     #>(S0017)
0005AFr 1  20 rr rr     	jsr     pushax
0005B2r 1  A0 02        	ldy     #$02
0005B4r 1  20 rr rr     	jsr     _printf
0005B7r 1               ;
0005B7r 1               ; ptr[0] = 0;  // clear the buffer
0005B7r 1               ;
0005B7r 1  A0 09        	ldy     #$09
0005B9r 1  20 rr rr     	jsr     ldaxysp
0005BCr 1  85 rr        	sta     ptr1
0005BEr 1  86 rr        	stx     ptr1+1
0005C0r 1  A9 00        	lda     #$00
0005C2r 1  A8           	tay
0005C3r 1  91 rr        	sta     (ptr1),y
0005C5r 1               ;
0005C5r 1               ; free(ptr);
0005C5r 1               ;
0005C5r 1  A0 09        	ldy     #$09
0005C7r 1  20 rr rr     	jsr     ldaxysp
0005CAr 1  20 rr rr     	jsr     _free
0005CDr 1               ;
0005CDr 1               ; if (!copy(source,dest)) {
0005CDr 1               ;
0005CDr 1  A0 15        	ldy     #$15
0005CFr 1  20 rr rr     	jsr     pushwysp
0005D2r 1  A0 13        	ldy     #$13
0005D4r 1  20 rr rr     	jsr     ldaxysp
0005D7r 1  20 rr rr     	jsr     _copy
0005DAr 1  86 rr        	stx     tmp1
0005DCr 1  05 rr        	ora     tmp1
0005DEr 1  F0 03 4C rr  	jne     L001D
0005E2r 1  rr           
0005E3r 1               ;
0005E3r 1               ; printf("Copy completed correctly, reading %s to comfirm\n",dest);
0005E3r 1               ;
0005E3r 1  A9 rr        	lda     #<(S0018)
0005E5r 1  A2 rr        	ldx     #>(S0018)
0005E7r 1  20 rr rr     	jsr     pushax
0005EAr 1  A0 15        	ldy     #$15
0005ECr 1  20 rr rr     	jsr     pushwysp
0005EFr 1  A0 04        	ldy     #$04
0005F1r 1  20 rr rr     	jsr     _printf
0005F4r 1               ;
0005F4r 1               ; myfile = fopen(dest,"r");
0005F4r 1               ;
0005F4r 1  A0 13        	ldy     #$13
0005F6r 1  20 rr rr     	jsr     pushwysp
0005F9r 1  A9 rr        	lda     #<(S0019)
0005FBr 1  A2 rr        	ldx     #>(S0019)
0005FDr 1  20 rr rr     	jsr     _fopen
000600r 1  A0 04        	ldy     #$04
000602r 1  20 rr rr     	jsr     staxysp
000605r 1               ;
000605r 1               ; printf("After Copy fopen %s returned %d, Error number %d\nDoing fscanf\n",dest,myfile,errno);
000605r 1               ;
000605r 1  A9 rr        	lda     #<(S001A)
000607r 1  A2 rr        	ldx     #>(S001A)
000609r 1  20 rr rr     	jsr     pushax
00060Cr 1  A0 15        	ldy     #$15
00060Er 1  20 rr rr     	jsr     pushwysp
000611r 1  A0 0B        	ldy     #$0B
000613r 1  20 rr rr     	jsr     pushwysp
000616r 1  AD rr rr     	lda     ___errno
000619r 1  AE rr rr     	ldx     ___errno+1
00061Cr 1  20 rr rr     	jsr     pushax
00061Fr 1  A0 08        	ldy     #$08
000621r 1  20 rr rr     	jsr     _printf
000624r 1               ;
000624r 1               ; if (myfile != 0) {
000624r 1               ;
000624r 1  A0 04        	ldy     #$04
000626r 1  B1 rr        	lda     (sp),y
000628r 1  C8           	iny
000629r 1  11 rr        	ora     (sp),y
00062Br 1  D0 03 4C rr  	jeq     L001D
00062Fr 1  rr           
000630r 1               ;
000630r 1               ; ptr = malloc(bufferlen);
000630r 1               ;
000630r 1  A2 03        	ldx     #$03
000632r 1  A9 FC        	lda     #$FC
000634r 1  20 rr rr     	jsr     _malloc
000637r 1  A0 08        	ldy     #$08
000639r 1  20 rr rr     	jsr     staxysp
00063Cr 1               ;
00063Cr 1               ; result = fgets(ptr,bufferlen-1,myfile);
00063Cr 1               ;
00063Cr 1  20 rr rr     	jsr     pushax
00063Fr 1  A2 03        	ldx     #$03
000641r 1  A9 FB        	lda     #$FB
000643r 1  20 rr rr     	jsr     pushax
000646r 1  A0 09        	ldy     #$09
000648r 1  20 rr rr     	jsr     ldaxysp
00064Br 1  20 rr rr     	jsr     _fgets
00064Er 1  A0 06        	ldy     #$06
000650r 1  20 rr rr     	jsr     staxysp
000653r 1               ;
000653r 1               ; printf("fgets() of created file %s Read returned pointer  %d :\n",dest,result);
000653r 1               ;
000653r 1  A9 rr        	lda     #<(S001B)
000655r 1  A2 rr        	ldx     #>(S001B)
000657r 1  20 rr rr     	jsr     pushax
00065Ar 1  A0 15        	ldy     #$15
00065Cr 1  20 rr rr     	jsr     pushwysp
00065Fr 1  A0 0D        	ldy     #$0D
000661r 1  20 rr rr     	jsr     pushwysp
000664r 1  A0 06        	ldy     #$06
000666r 1  20 rr rr     	jsr     _printf
000669r 1               ;
000669r 1               ; if(result != NULL) {
000669r 1               ;
000669r 1  A0 06        	ldy     #$06
00066Br 1  B1 rr        	lda     (sp),y
00066Dr 1  C8           	iny
00066Er 1  11 rr        	ora     (sp),y
000670r 1  F0 16        	beq     L001F
000672r 1               ;
000672r 1               ; printf("Data Read from %s:\n%s\nEnd of print\n",dest,ptr);
000672r 1               ;
000672r 1  A9 rr        	lda     #<(S001C)
000674r 1  A2 rr        	ldx     #>(S001C)
000676r 1  20 rr rr     	jsr     pushax
000679r 1  A0 15        	ldy     #$15
00067Br 1  20 rr rr     	jsr     pushwysp
00067Er 1  A0 0F        	ldy     #$0F
000680r 1  20 rr rr     	jsr     pushwysp
000683r 1  A0 06        	ldy     #$06
000685r 1               ;
000685r 1               ; } else {
000685r 1               ;
000685r 1  4C rr rr     	jmp     L0023
000688r 1               ;
000688r 1               ; printf("File %s Read after copy failed\n",dest);
000688r 1               ;
000688r 1  A9 rr        L001F:	lda     #<(S001D)
00068Ar 1  A2 rr        	ldx     #>(S001D)
00068Cr 1  20 rr rr     	jsr     pushax
00068Fr 1  A0 15        	ldy     #$15
000691r 1  20 rr rr     	jsr     pushwysp
000694r 1  A0 04        	ldy     #$04
000696r 1  20 rr rr     L0023:	jsr     _printf
000699r 1               ;
000699r 1               ; free(ptr);
000699r 1               ;
000699r 1  A0 09        	ldy     #$09
00069Br 1  20 rr rr     	jsr     ldaxysp
00069Er 1  20 rr rr     	jsr     _free
0006A1r 1               ;
0006A1r 1               ; k = fclose(myfile);
0006A1r 1               ;
0006A1r 1  A0 05        	ldy     #$05
0006A3r 1  20 rr rr     	jsr     ldaxysp
0006A6r 1  20 rr rr     	jsr     _fclose
0006A9r 1  A0 0A        	ldy     #$0A
0006ABr 1  20 rr rr     	jsr     staxysp
0006AEr 1               ;
0006AEr 1               ; printf("fclose created %s file returned %d, Error number %d\n",dest,k,errno);
0006AEr 1               ;
0006AEr 1  A9 rr        	lda     #<(S001E)
0006B0r 1  A2 rr        	ldx     #>(S001E)
0006B2r 1  20 rr rr     	jsr     pushax
0006B5r 1  A0 15        	ldy     #$15
0006B7r 1  20 rr rr     	jsr     pushwysp
0006BAr 1  A0 11        	ldy     #$11
0006BCr 1  20 rr rr     	jsr     pushwysp
0006BFr 1  AD rr rr     	lda     ___errno
0006C2r 1  AE rr rr     	ldx     ___errno+1
0006C5r 1  20 rr rr     	jsr     pushax
0006C8r 1  A0 08        	ldy     #$08
0006CAr 1  20 rr rr     	jsr     _printf
0006CDr 1               ;
0006CDr 1               ; printf("All tests complete");
0006CDr 1               ;
0006CDr 1  A9 rr        L001D:	lda     #<(S001F)
0006CFr 1  A2 rr        	ldx     #>(S001F)
0006D1r 1  20 rr rr     	jsr     pushax
0006D4r 1  A0 02        	ldy     #$02
0006D6r 1  20 rr rr     	jsr     _printf
0006D9r 1               ;
0006D9r 1               ; }
0006D9r 1               ;
0006D9r 1  A0 14        	ldy     #$14
0006DBr 1  4C rr rr     	jmp     addysp
0006DEr 1               
0006DEr 1               .endproc
0006DEr 1               
0006DEr 1               
