ca65 V2.19 - Git 8ac5e2f
Main file   : primes.s
Current file: primes.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git 8ac5e2f
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git 8ac5e2f"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.import		_stdin
000000r 1               	.import		_stdout
000000r 1               	.import		_fgets
000000r 1               	.import		_fprintf
000000r 1               	.import		_printf
000000r 1               	.import		_malloc
000000r 1               	.import		_atoi
000000r 1               	.export		_printflags
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               S0003:
000000r 1  43 6F 6D 70  	.byte	$43,$6F,$6D,$70,$6C,$65,$74,$65,$64,$20,$73,$63,$61,$6E,$0A,$4C
000004r 1  6C 65 74 65  
000008r 1  64 20 73 63  
000010r 1  69 73 74 20  	.byte	$69,$73,$74,$20,$6F,$66,$20,$74,$68,$65,$20,$69,$74,$73,$79,$20
000014r 1  6F 66 20 74  
000018r 1  68 65 20 69  
000020r 1  50 72 69 6D  	.byte	$50,$72,$69,$6D,$65,$73,$20,$3A,$0A,$00
000024r 1  65 73 20 3A  
000028r 1  0A 00        
00002Ar 1               S0001:
00002Ar 1  45 6E 74 65  	.byte	$45,$6E,$74,$65,$72,$20,$74,$68,$65,$20,$6E,$75,$6D,$62,$65,$72
00002Er 1  72 20 74 68  
000032r 1  65 20 6E 75  
00003Ar 1  20 6F 66 20  	.byte	$20,$6F,$66,$20,$70,$72,$69,$6D,$65,$73,$20,$32,$2D,$25,$64,$3A
00003Er 1  70 72 69 6D  
000042r 1  65 73 20 32  
00004Ar 1  3E 00        	.byte	$3E,$00
00004Cr 1               S0002:
00004Cr 1  20 56 61 6C  	.byte	$20,$56,$61,$6C,$75,$65,$20,$6D,$75,$73,$74,$20,$62,$65,$20,$62
000050r 1  75 65 20 6D  
000054r 1  75 73 74 20  
00005Cr 1  65 74 77 65  	.byte	$65,$74,$77,$65,$65,$6E,$20,$32,$20,$61,$6E,$64,$20,$25,$64,$0A
000060r 1  65 6E 20 32  
000064r 1  20 61 6E 64  
00006Cr 1  00           	.byte	$00
00006Dr 1               S0006:
00006Dr 1  0A 54 6F 74  	.byte	$0A,$54,$6F,$74,$61,$6C,$20,$50,$72,$69,$6D,$65,$73,$20,$3D,$20
000071r 1  61 6C 20 50  
000075r 1  72 69 6D 65  
00007Dr 1  25 64 0A 00  	.byte	$25,$64,$0A,$00
000081r 1               S0007:
000081r 1  0A 25 34 64  	.byte	$0A,$25,$34,$64,$20,$3A,$20,$00
000085r 1  20 3A 20 00  
000089r 1               S0004:
000089r 1  0A 3A 3A 20  	.byte	$0A,$3A,$3A,$20,$00
00008Dr 1  00           
00008Er 1               S0005:
00008Er 1  20 25 34 64  	.byte	$20,$25,$34,$64,$00
000092r 1  00           
000093r 1               S0008:
000093r 1  25 31 64 20  	.byte	$25,$31,$64,$20,$00
000097r 1  00           
000098r 1               S0009:
000098r 1  0A 0A 00     	.byte	$0A,$0A,$00
00009Br 1               
00009Br 1               ; ---------------------------------------------------------------
00009Br 1               ; void __near__ printflags (char *flags, int count)
00009Br 1               ; ---------------------------------------------------------------
00009Br 1               
00009Br 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_printflags: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; void printflags(char *flags, int count) {
000000r 1               ;
000000r 1  20 rr rr     	jsr     pushax
000003r 1               ;
000003r 1               ; for(i=0;i<count;i++) {
000003r 1               ;
000003r 1  20 rr rr     	jsr     decsp2
000006r 1  A2 00        	ldx     #$00
000008r 1  8A           	txa
000009r 1  20 rr rr     	jsr     stax0sp
00000Cr 1  20 rr rr     L0002:	jsr     pushw0sp
00000Fr 1  A0 05        	ldy     #$05
000011r 1  20 rr rr     	jsr     ldaxysp
000014r 1  20 rr rr     	jsr     tosicmp
000017r 1  10 54        	bpl     L0003
000019r 1               ;
000019r 1               ; if( i % 20 == 0) printf("\n%4d : ",i);
000019r 1               ;
000019r 1  20 rr rr     	jsr     pushw0sp
00001Cr 1  A0 00        	ldy     #$00
00001Er 1  A2 00        	ldx     #$00
000020r 1  A9 14        	lda     #$14
000022r 1  20 rr rr     	jsr     tosmoda0
000025r 1  E0 00        	cpx     #$00
000027r 1  D0 15        	bne     L0006
000029r 1  C9 00        	cmp     #$00
00002Br 1  D0 11        	bne     L0006
00002Dr 1  A9 rr        	lda     #<(S0007)
00002Fr 1  A2 rr        	ldx     #>(S0007)
000031r 1  20 rr rr     	jsr     pushax
000034r 1  A0 05        	ldy     #$05
000036r 1  20 rr rr     	jsr     pushwysp
000039r 1  A0 04        	ldy     #$04
00003Br 1  20 rr rr     	jsr     _printf
00003Er 1               ;
00003Er 1               ; printf("%1d ",flags[i]);
00003Er 1               ;
00003Er 1  A9 rr        L0006:	lda     #<(S0008)
000040r 1  A2 rr        	ldx     #>(S0008)
000042r 1  20 rr rr     	jsr     pushax
000045r 1  A0 03        	ldy     #$03
000047r 1  20 rr rr     	jsr     ldaxysp
00004Ar 1  18           	clc
00004Br 1  A0 06        	ldy     #$06
00004Dr 1  71 rr        	adc     (sp),y
00004Fr 1  85 rr        	sta     ptr1
000051r 1  8A           	txa
000052r 1  C8           	iny
000053r 1  71 rr        	adc     (sp),y
000055r 1  85 rr        	sta     ptr1+1
000057r 1  A2 00        	ldx     #$00
000059r 1  A1 rr        	lda     (ptr1,x)
00005Br 1  20 rr rr     	jsr     pusha0
00005Er 1  A0 04        	ldy     #$04
000060r 1  20 rr rr     	jsr     _printf
000063r 1               ;
000063r 1               ; for(i=0;i<count;i++) {
000063r 1               ;
000063r 1  A2 00        	ldx     #$00
000065r 1  A9 01        	lda     #$01
000067r 1  20 rr rr     	jsr     addeq0sp
00006Ar 1  4C rr rr     	jmp     L0002
00006Dr 1               ;
00006Dr 1               ; printf("\n\n");
00006Dr 1               ;
00006Dr 1  A9 rr        L0003:	lda     #<(S0009)
00006Fr 1  A2 rr        	ldx     #>(S0009)
000071r 1  20 rr rr     	jsr     pushax
000074r 1  A0 02        	ldy     #$02
000076r 1  20 rr rr     	jsr     _printf
000079r 1               ;
000079r 1               ; }
000079r 1               ;
000079r 1  4C rr rr     	jmp     incsp6
00007Cr 1               
00007Cr 1               .endproc
00007Cr 1               
00007Cr 1               ; ---------------------------------------------------------------
00007Cr 1               ; void __near__ main (void)
00007Cr 1               ; ---------------------------------------------------------------
00007Cr 1               
00007Cr 1               .segment	"CODE"
00007Cr 1               
00007Cr 1               .proc	_main: near
00007Cr 1               
00007Cr 1               .segment	"CODE"
00007Cr 1               
00007Cr 1               ;
00007Cr 1               ; int count = 0,i,halfcount,a,b;
00007Cr 1               ;
00007Cr 1  A0 6A        	ldy     #$6A
00007Er 1  20 rr rr     	jsr     subysp
000081r 1  20 rr rr     	jsr     push0
000084r 1               ;
000084r 1               ; while(count <=0 || count >= MaxPrime) {
000084r 1               ;
000084r 1  20 rr rr     	jsr     decsp8
000087r 1  4C rr rr     	jmp     L0004
00008Ar 1               ;
00008Ar 1               ; printf("Enter the number of primes 2-%d:>",MaxPrime);
00008Ar 1               ;
00008Ar 1  A9 rr        L0002:	lda     #<(S0001)
00008Cr 1  A2 rr        	ldx     #>(S0001)
00008Er 1  20 rr rr     	jsr     pushax
000091r 1  A2 4E        	ldx     #$4E
000093r 1  A9 20        	lda     #$20
000095r 1  20 rr rr     	jsr     pushax
000098r 1  A0 04        	ldy     #$04
00009Ar 1  20 rr rr     	jsr     _printf
00009Dr 1               ;
00009Dr 1               ; result = fgets(buffer,100,stdin);
00009Dr 1               ;
00009Dr 1  A9 10        	lda     #$10
00009Fr 1  20 rr rr     	jsr     leaa0sp
0000A2r 1  20 rr rr     	jsr     pushax
0000A5r 1  A9 64        	lda     #$64
0000A7r 1  20 rr rr     	jsr     pusha0
0000AAr 1  AD rr rr     	lda     _stdin
0000ADr 1  AE rr rr     	ldx     _stdin+1
0000B0r 1  20 rr rr     	jsr     _fgets
0000B3r 1  A0 0E        	ldy     #$0E
0000B5r 1  20 rr rr     	jsr     staxysp
0000B8r 1               ;
0000B8r 1               ; if(result == NULL) continue;
0000B8r 1               ;
0000B8r 1  E0 00        	cpx     #$00
0000BAr 1  D0 04        	bne     L002C
0000BCr 1  C9 00        	cmp     #$00
0000BEr 1  F0 3B        	beq     L0004
0000C0r 1               ;
0000C0r 1               ; count = atoi(buffer);
0000C0r 1               ;
0000C0r 1  A9 10        L002C:	lda     #$10
0000C2r 1  20 rr rr     	jsr     leaa0sp
0000C5r 1  20 rr rr     	jsr     _atoi
0000C8r 1  A0 08        	ldy     #$08
0000CAr 1  20 rr rr     	jsr     staxysp
0000CDr 1               ;
0000CDr 1               ; if (count <= 1 || count > MaxPrime) {
0000CDr 1               ;
0000CDr 1  C9 02        	cmp     #$02
0000CFr 1  8A           	txa
0000D0r 1  E9 00        	sbc     #$00
0000D2r 1  50 02        	bvc     L000C
0000D4r 1  49 80        	eor     #$80
0000D6r 1  30 10        L000C:	bmi     L0028
0000D8r 1  A0 09        	ldy     #$09
0000DAr 1  20 rr rr     	jsr     ldaxysp
0000DDr 1  C9 21        	cmp     #$21
0000DFr 1  8A           	txa
0000E0r 1  E9 4E        	sbc     #$4E
0000E2r 1  70 02        	bvs     L000E
0000E4r 1  49 80        	eor     #$80
0000E6r 1  10 39        L000E:	bpl     L0003
0000E8r 1               ;
0000E8r 1               ; printf(" Value must be between 2 and %d\n",MaxPrime);
0000E8r 1               ;
0000E8r 1  A9 rr        L0028:	lda     #<(S0002)
0000EAr 1  A2 rr        	ldx     #>(S0002)
0000ECr 1  20 rr rr     	jsr     pushax
0000EFr 1  A2 4E        	ldx     #$4E
0000F1r 1  A9 20        	lda     #$20
0000F3r 1  20 rr rr     	jsr     pushax
0000F6r 1  A0 04        	ldy     #$04
0000F8r 1  20 rr rr     	jsr     _printf
0000FBr 1               ;
0000FBr 1               ; while(count <=0 || count >= MaxPrime) {
0000FBr 1               ;
0000FBr 1  A0 09        L0004:	ldy     #$09
0000FDr 1  20 rr rr     	jsr     ldaxysp
000100r 1  C9 01        	cmp     #$01
000102r 1  8A           	txa
000103r 1  E9 00        	sbc     #$00
000105r 1  50 02        	bvc     L0005
000107r 1  49 80        	eor     #$80
000109r 1  10 03 4C rr  L0005:	jmi     L0002
00010Dr 1  rr           
00010Er 1  A0 09        	ldy     #$09
000110r 1  20 rr rr     	jsr     ldaxysp
000113r 1  C9 20        	cmp     #$20
000115r 1  8A           	txa
000116r 1  E9 4E        	sbc     #$4E
000118r 1  70 02        	bvs     L0007
00011Ar 1  49 80        	eor     #$80
00011Cr 1  10 03 4C rr  L0007:	jmi     L0002
000120r 1  rr           
000121r 1               ;
000121r 1               ; count++;
000121r 1               ;
000121r 1  A0 08        L0003:	ldy     #$08
000123r 1  A2 00        	ldx     #$00
000125r 1  A9 01        	lda     #$01
000127r 1  20 rr rr     	jsr     addeqysp
00012Ar 1               ;
00012Ar 1               ; halfcount = count/2;
00012Ar 1               ;
00012Ar 1  A0 0B        	ldy     #$0B
00012Cr 1  20 rr rr     	jsr     pushwysp
00012Fr 1  A9 02        	lda     #$02
000131r 1  20 rr rr     	jsr     tosdiva0
000134r 1  A0 04        	ldy     #$04
000136r 1  20 rr rr     	jsr     staxysp
000139r 1               ;
000139r 1               ; flags = malloc(count);
000139r 1               ;
000139r 1  A0 09        	ldy     #$09
00013Br 1  20 rr rr     	jsr     ldaxysp
00013Er 1  20 rr rr     	jsr     _malloc
000141r 1  A0 0C        	ldy     #$0C
000143r 1  20 rr rr     	jsr     staxysp
000146r 1               ;
000146r 1               ; flaginit = (int *)&flags[3];
000146r 1               ;
000146r 1  20 rr rr     	jsr     incax3
000149r 1  A0 0A        	ldy     #$0A
00014Br 1  20 rr rr     	jsr     staxysp
00014Er 1               ;
00014Er 1               ; for(i=0; i < halfcount; i++) flaginit[i] = 1;
00014Er 1               ;
00014Er 1  A2 00        	ldx     #$00
000150r 1  8A           	txa
000151r 1  A0 06        	ldy     #$06
000153r 1  20 rr rr     	jsr     staxysp
000156r 1  A0 07        L0010:	ldy     #$07
000158r 1  20 rr rr     	jsr     ldaxysp
00015Br 1  A0 04        	ldy     #$04
00015Dr 1  D1 rr        	cmp     (sp),y
00015Fr 1  8A           	txa
000160r 1  C8           	iny
000161r 1  F1 rr        	sbc     (sp),y
000163r 1  50 02        	bvc     L0024
000165r 1  49 80        	eor     #$80
000167r 1  10 2B        L0024:	bpl     L0011
000169r 1  A0 07        	ldy     #$07
00016Br 1  20 rr rr     	jsr     ldaxysp
00016Er 1  20 rr rr     	jsr     aslax1
000171r 1  18           	clc
000172r 1  A0 0A        	ldy     #$0A
000174r 1  71 rr        	adc     (sp),y
000176r 1  85 rr        	sta     ptr1
000178r 1  8A           	txa
000179r 1  C8           	iny
00017Ar 1  71 rr        	adc     (sp),y
00017Cr 1  85 rr        	sta     ptr1+1
00017Er 1  A9 01        	lda     #$01
000180r 1  A0 00        	ldy     #$00
000182r 1  91 rr        	sta     (ptr1),y
000184r 1  C8           	iny
000185r 1  A9 00        	lda     #$00
000187r 1  91 rr        	sta     (ptr1),y
000189r 1  A0 06        	ldy     #$06
00018Br 1  AA           	tax
00018Cr 1  A9 01        	lda     #$01
00018Er 1  20 rr rr     	jsr     addeqysp
000191r 1  4C rr rr     	jmp     L0010
000194r 1               ;
000194r 1               ; flags[0]=0;
000194r 1               ;
000194r 1  A0 0D        L0011:	ldy     #$0D
000196r 1  20 rr rr     	jsr     ldaxysp
000199r 1  85 rr        	sta     ptr1
00019Br 1  86 rr        	stx     ptr1+1
00019Dr 1  A9 00        	lda     #$00
00019Fr 1  A8           	tay
0001A0r 1  91 rr        	sta     (ptr1),y
0001A2r 1               ;
0001A2r 1               ; flags[1]=0;
0001A2r 1               ;
0001A2r 1  A0 0D        	ldy     #$0D
0001A4r 1  20 rr rr     	jsr     ldaxysp
0001A7r 1  20 rr rr     	jsr     incax1
0001AAr 1  85 rr        	sta     ptr1
0001ACr 1  86 rr        	stx     ptr1+1
0001AEr 1  A9 00        	lda     #$00
0001B0r 1  A8           	tay
0001B1r 1  91 rr        	sta     (ptr1),y
0001B3r 1               ;
0001B3r 1               ; flags[2]=1;
0001B3r 1               ;
0001B3r 1  A0 0D        	ldy     #$0D
0001B5r 1  20 rr rr     	jsr     ldaxysp
0001B8r 1  20 rr rr     	jsr     incax2
0001BBr 1  85 rr        	sta     ptr1
0001BDr 1  86 rr        	stx     ptr1+1
0001BFr 1  A9 01        	lda     #$01
0001C1r 1  A0 00        	ldy     #$00
0001C3r 1  91 rr        	sta     (ptr1),y
0001C5r 1               ;
0001C5r 1               ; flags[count]=1;
0001C5r 1               ;
0001C5r 1  A0 09        	ldy     #$09
0001C7r 1  20 rr rr     	jsr     ldaxysp
0001CAr 1  18           	clc
0001CBr 1  A0 0C        	ldy     #$0C
0001CDr 1  71 rr        	adc     (sp),y
0001CFr 1  85 rr        	sta     ptr1
0001D1r 1  8A           	txa
0001D2r 1  C8           	iny
0001D3r 1  71 rr        	adc     (sp),y
0001D5r 1  85 rr        	sta     ptr1+1
0001D7r 1  A9 01        	lda     #$01
0001D9r 1  A0 00        	ldy     #$00
0001DBr 1  91 rr        	sta     (ptr1),y
0001DDr 1               ;
0001DDr 1               ; for (a = 3; (a+a) < count; a++) {
0001DDr 1               ;
0001DDr 1  A2 00        	ldx     #$00
0001DFr 1  A9 03        	lda     #$03
0001E1r 1  A0 02        	ldy     #$02
0001E3r 1  20 rr rr     	jsr     staxysp
0001E6r 1  A0 03        L0014:	ldy     #$03
0001E8r 1  20 rr rr     	jsr     ldaxysp
0001EBr 1  18           	clc
0001ECr 1  A0 02        	ldy     #$02
0001EEr 1  71 rr        	adc     (sp),y
0001F0r 1  48           	pha
0001F1r 1  8A           	txa
0001F2r 1  C8           	iny
0001F3r 1  71 rr        	adc     (sp),y
0001F5r 1  AA           	tax
0001F6r 1  68           	pla
0001F7r 1  A0 08        	ldy     #$08
0001F9r 1  D1 rr        	cmp     (sp),y
0001FBr 1  8A           	txa
0001FCr 1  C8           	iny
0001FDr 1  F1 rr        	sbc     (sp),y
0001FFr 1  50 02        	bvc     L0025
000201r 1  49 80        	eor     #$80
000203r 1  10 69        L0025:	bpl     L0015
000205r 1               ;
000205r 1               ; if (flags[a] == 0) continue;
000205r 1               ;
000205r 1  A0 03        	ldy     #$03
000207r 1  20 rr rr     	jsr     ldaxysp
00020Ar 1  18           	clc
00020Br 1  A0 0C        	ldy     #$0C
00020Dr 1  71 rr        	adc     (sp),y
00020Fr 1  85 rr        	sta     ptr1
000211r 1  8A           	txa
000212r 1  C8           	iny
000213r 1  71 rr        	adc     (sp),y
000215r 1  85 rr        	sta     ptr1+1
000217r 1  A0 00        	ldy     #$00
000219r 1  B1 rr        	lda     (ptr1),y
00021Br 1  F0 45        	beq     L0016
00021Dr 1               ;
00021Dr 1               ; for (b = a+a; b < count; b += a) flags[b] = 0;
00021Dr 1               ;
00021Dr 1  A0 03        	ldy     #$03
00021Fr 1  20 rr rr     	jsr     ldaxysp
000222r 1  18           	clc
000223r 1  A0 02        	ldy     #$02
000225r 1  71 rr        	adc     (sp),y
000227r 1  48           	pha
000228r 1  8A           	txa
000229r 1  C8           	iny
00022Ar 1  71 rr        	adc     (sp),y
00022Cr 1  AA           	tax
00022Dr 1  68           	pla
00022Er 1  20 rr rr     	jsr     stax0sp
000231r 1  20 rr rr     L0019:	jsr     ldax0sp
000234r 1  A0 08        	ldy     #$08
000236r 1  D1 rr        	cmp     (sp),y
000238r 1  8A           	txa
000239r 1  C8           	iny
00023Ar 1  F1 rr        	sbc     (sp),y
00023Cr 1  50 02        	bvc     L0026
00023Er 1  49 80        	eor     #$80
000240r 1  10 20        L0026:	bpl     L0016
000242r 1  20 rr rr     	jsr     ldax0sp
000245r 1  18           	clc
000246r 1  A0 0C        	ldy     #$0C
000248r 1  71 rr        	adc     (sp),y
00024Ar 1  85 rr        	sta     ptr1
00024Cr 1  8A           	txa
00024Dr 1  C8           	iny
00024Er 1  71 rr        	adc     (sp),y
000250r 1  85 rr        	sta     ptr1+1
000252r 1  A9 00        	lda     #$00
000254r 1  A8           	tay
000255r 1  91 rr        	sta     (ptr1),y
000257r 1  A0 03        	ldy     #$03
000259r 1  20 rr rr     	jsr     ldaxysp
00025Cr 1  20 rr rr     	jsr     addeq0sp
00025Fr 1  4C rr rr     	jmp     L0019
000262r 1               ;
000262r 1               ; for (a = 3; (a+a) < count; a++) {
000262r 1               ;
000262r 1  A0 02        L0016:	ldy     #$02
000264r 1  A2 00        	ldx     #$00
000266r 1  A9 01        	lda     #$01
000268r 1  20 rr rr     	jsr     addeqysp
00026Br 1  4C rr rr     	jmp     L0014
00026Er 1               ;
00026Er 1               ; printf("Completed scan\nList of the itsy Primes :\n");
00026Er 1               ;
00026Er 1  A9 rr        L0015:	lda     #<(S0003)
000270r 1  A2 rr        	ldx     #>(S0003)
000272r 1  20 rr rr     	jsr     pushax
000275r 1  A0 02        	ldy     #$02
000277r 1  20 rr rr     	jsr     _printf
00027Ar 1               ;
00027Ar 1               ; a=0;
00027Ar 1               ;
00027Ar 1  A2 00        	ldx     #$00
00027Cr 1  8A           	txa
00027Dr 1  A0 02        	ldy     #$02
00027Fr 1  20 rr rr     	jsr     staxysp
000282r 1               ;
000282r 1               ; for(b = 0; b<count; b++ ) {
000282r 1               ;
000282r 1  20 rr rr     	jsr     stax0sp
000285r 1  20 rr rr     L001D:	jsr     ldax0sp
000288r 1  A0 08        	ldy     #$08
00028Ar 1  D1 rr        	cmp     (sp),y
00028Cr 1  8A           	txa
00028Dr 1  C8           	iny
00028Er 1  F1 rr        	sbc     (sp),y
000290r 1  50 02        	bvc     L0027
000292r 1  49 80        	eor     #$80
000294r 1  10 69        L0027:	bpl     L001E
000296r 1               ;
000296r 1               ; if(flags[b] == 1) {
000296r 1               ;
000296r 1  20 rr rr     	jsr     ldax0sp
000299r 1  18           	clc
00029Ar 1  A0 0C        	ldy     #$0C
00029Cr 1  71 rr        	adc     (sp),y
00029Er 1  85 rr        	sta     ptr1
0002A0r 1  8A           	txa
0002A1r 1  C8           	iny
0002A2r 1  71 rr        	adc     (sp),y
0002A4r 1  85 rr        	sta     ptr1+1
0002A6r 1  A0 00        	ldy     #$00
0002A8r 1  A2 00        	ldx     #$00
0002AAr 1  B1 rr        	lda     (ptr1),y
0002ACr 1  C9 01        	cmp     #$01
0002AEr 1  D0 47        	bne     L002B
0002B0r 1               ;
0002B0r 1               ; if(a%15 == 0) printf("\n:: ");
0002B0r 1               ;
0002B0r 1  A0 05        	ldy     #$05
0002B2r 1  20 rr rr     	jsr     pushwysp
0002B5r 1  A0 00        	ldy     #$00
0002B7r 1  A2 00        	ldx     #$00
0002B9r 1  A9 0F        	lda     #$0F
0002BBr 1  20 rr rr     	jsr     tosmoda0
0002BEr 1  E0 00        	cpx     #$00
0002C0r 1  D0 10        	bne     L0022
0002C2r 1  C9 00        	cmp     #$00
0002C4r 1  D0 0C        	bne     L0022
0002C6r 1  A9 rr        	lda     #<(S0004)
0002C8r 1  A2 rr        	ldx     #>(S0004)
0002CAr 1  20 rr rr     	jsr     pushax
0002CDr 1  A0 02        	ldy     #$02
0002CFr 1  20 rr rr     	jsr     _printf
0002D2r 1               ;
0002D2r 1               ; fprintf(stdout," %4d",b);
0002D2r 1               ;
0002D2r 1  AD rr rr     L0022:	lda     _stdout
0002D5r 1  AE rr rr     	ldx     _stdout+1
0002D8r 1  20 rr rr     	jsr     pushax
0002DBr 1  A9 rr        	lda     #<(S0005)
0002DDr 1  A2 rr        	ldx     #>(S0005)
0002DFr 1  20 rr rr     	jsr     pushax
0002E2r 1  A0 07        	ldy     #$07
0002E4r 1  20 rr rr     	jsr     pushwysp
0002E7r 1  A0 06        	ldy     #$06
0002E9r 1  20 rr rr     	jsr     _fprintf
0002ECr 1               ;
0002ECr 1               ; a++;
0002ECr 1               ;
0002ECr 1  A0 02        	ldy     #$02
0002EEr 1  A2 00        	ldx     #$00
0002F0r 1  A9 01        	lda     #$01
0002F2r 1  20 rr rr     	jsr     addeqysp
0002F5r 1               ;
0002F5r 1               ; for(b = 0; b<count; b++ ) {
0002F5r 1               ;
0002F5r 1  A2 00        	ldx     #$00
0002F7r 1  A9 01        L002B:	lda     #$01
0002F9r 1  20 rr rr     	jsr     addeq0sp
0002FCr 1  4C rr rr     	jmp     L001D
0002FFr 1               ;
0002FFr 1               ; printf("\nTotal Primes = %d\n",a);
0002FFr 1               ;
0002FFr 1  A9 rr        L001E:	lda     #<(S0006)
000301r 1  A2 rr        	ldx     #>(S0006)
000303r 1  20 rr rr     	jsr     pushax
000306r 1  A0 07        	ldy     #$07
000308r 1  20 rr rr     	jsr     pushwysp
00030Br 1  A0 04        	ldy     #$04
00030Dr 1  20 rr rr     	jsr     _printf
000310r 1               ;
000310r 1               ; }
000310r 1               ;
000310r 1  A0 74        	ldy     #$74
000312r 1  4C rr rr     	jmp     addysp
000315r 1               
000315r 1               .endproc
000315r 1               
000315r 1               
