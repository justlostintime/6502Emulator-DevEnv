'Gambas class definition - 6502 device prototype
'Released Under:
'  GNU GENERAL Public LICENSE
'  Version 3, 29 June 2007
'  See project license file.

Fast Unsafe

Property MemoryStart As Long use $MemoryStart = 0                    ' Start of this block of memory
Property MemoryEnd As Long use $MemoryEnd = 0                        ' If this is zero then the device has no mapped memory
Property MemoryLen As Long use $MemoryLen = 0                        ' Length of this memory block

'' If required the Device may request a secondary control address area
'' See MMU for example
'Property IoAddress as long use $IoAddress = 0                       ' IoAddress control area 
'Property IoLength as long  use $IoLength  = 5                       ' IoAddress Space Length

'This is an example of memory implementation but is not required, if your device does something else
'see the reset button example
DevMemory as byte[]

Property read Name as string use $name

Event IRQ()                                ' Device can create an IRQ
Event NMI()                                ' Device can create an NMI
Event Reset()                              ' Device can force a reset of the CPU
Event Halt(Reason as string)          ' A device can raise this event to terminate the computer session

public sub _new(address as long, len as long, parameters as string)
  MyParms as string[] = split(parameters)                    ' any parameters you may need for your device
  
  $Name = "MyDevName"
  debug $Name;;"Created with :";;address, len, parameters
  $MemoryStart = address
  $MemoryLen = len
  $MemoryEnd = Address-len -1
  DevMemory = new byte[$MemeoryLen]
  
end

' See the RamMemory or the ResetButtom devices for examples
public sub _get(address as long) as byte

   debug "read ", address
   return DevMemory[address]

end

' See the RamMemory or the ResetButtom devices for examples
public sub _put(Value as byte, address as long)

  debug "write",address, Value
  devmemory[address] = value
  
end

'this can be called by other devices or the computer
'the cpu keeps its own dictionary of device addresses
Public Sub _InRange(Address As Long) As Boolean

' If Address >= $IoAddress and if address < $IoAddress + $IoLength then return true
  If Address >= $MemoryStart And Address <= $MemoryEnd Then Return True
  Return False

End

' This will be called as the computer shuts down
' Can be implemented if required to clean anything up
Public sub halt()
   ' close any open windows etc
end

' This is called when is reset
' This shoud only change internal state
Public Sub Reset() 
  Debug "Device Reset"
end

'The following is optional and will be called if the cpu calls to load a bin source
'Should be a comma seperated list of files or parameters to be loaded or applied
public sub load(Parmlist as string)
  dim parameters as string[] = split(ParmList,",","",true,false)

end