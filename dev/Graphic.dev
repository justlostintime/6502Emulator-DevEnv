'Gambas class definition - 6502 device prototype
'Released Under:
'  GNU GENERAL Public LICENSE
'  Version 3, 29 June 2007
'  See project license file.

'' Memory maped io or memory
'' Anything with two leading '' will
'' be displayed as part of the help system
'' so be verbose here
'' any function you see here are manditory to
'' correctly interface to the virtual machine
'' These are written in gambas and you may want to visit the site
'' http://gambas.sourceforge.net or https://gambaswiki.org/wiki

'Enabling this will improve performance a very great amount
'
'Fast Unsafe                                       ' use this to compile to binary
'' This device is a set of 320 bits wide by 200  bit high array of leds
'' 8 bit color for each led.
'' write data by address 0 value of led color,
''               address 1 row address of led
''               address 2-3 column address of led    2 low order address, 3 high order address
''               address 4   write 1 to actually write the info to the led
''                           write 2 to auto increment after each write to address 0, starts where ever the address 1 row,
''                           and 2,3 are pointing to when set
''                           treats the matrix as a linear array
''               address 5   Sets the page 320x200 to be displayed up to 10 pages


'====================================================================================================
' These are the memory constraints this device will occupy in the 6502 memory map
' for this device it is $E030, 16 bytes long

Property MemoryStart As Long use $MemoryStart = 0                    ' Start of this block of memory
Property MemoryEnd As Long use $MemoryEnd = 0                        ' If this is zero then the device has no mapped memory
Property MemoryLen As Long use $MemoryLen = 0                        ' Length of this memory block

'======================================================================================================
'' If required the Device may request a secondary control address area
'' See MMU for example This is Looked for  by the CPU as configuration time.
'
'Property IoAddress as long use $IoAddress = 0                       ' IoAddress control area
'Property IoLength as long  use $IoLength  = 5                       ' IoAddress Space Length

' Private variables for this device
DevPages as new variant[]                 ' an array of pages for the screen each entry is an array of points to plot
DevCurrent as integer[]                   ' an array of arrays
DevRow as integer = 0                     ' the address of the current row
DevCol as integer = 0                     ' address of the current color
DevValue as byte = 0                      ' the color to be written to the row col address
DevMode as integer = 0                    ' The current write mode 1 = immediate, write and increment wrap at end
PlotWindow as window                      ' The window that will actually display the data
PlotHeight as integer = 200               ' default page
PlotWidth as integer = 320                ' default page
PlotArea as drawingArea                   ' where we will actually place the bits
PlotTitle as string = "No Title"          ' Title for the displayed window

'========================================================================================================
'These are required and provided by you .. see _new()
'
Property read Name as string use $name

'===================================================================================================================
'This is expected to contain the text parameter list passed to your device
'during configuration
Property read Parameters as string use $Parameters  ' coma seperated list of all loaded binaries/Or anything else your device requires

'========================================================================================================================
' These are the possible interupts the device may raise to the cpu
' Example usage:
' if ButtonPress then Raise IRQ()
'
Event IRQ()                                ' Device can create an IRQ
Event NMI()                                ' Device can create an NMI
Event Reset()                              ' Device can force a reset of the CPU
Event Halt(Reason as string)               ' A device can raise this event to terminate the computer session

'======================================================================================================
' The emulator will pass the following information when your device is loaded
' Start    This is the start location your device will occupy
' Length   This is the number of memory mapped bytes required by your device
' UserDefinedParameters - This is any configuration information your device requires at startup
' Configuration information is split using comma seperation by default
' config string contains width,height,title as the parameters
'
public sub _new(address as long, length as long, UserDefinedParameters as string)
  dim MyParms as string[] = split(UserDefinedParameters)                    ' any parameters you may need for your device

  error "Graphics Begin Definition"
  $MemoryStart = Address
  $MemoryEnd = Address + Length - 1
  $MemoryLen = Length
  $Name = "Graphic"                                 ' this may be anything you like, but should be unique to your device
  $Parameters = UserDefinedParameters               ' save the config parameters
  error $Name;;"Defined at : $"; Hex($MemoryStart, 6);"-$";Hex($MemoryEnd,6); " For length("; $MemoryLen; ")$"; Hex(length);;" Parms :";UserDefinedParameters
  PlotWidth = val(MyParms[0])
  PlotHeight = val(MyParms[1])
  PlotTitle  = MyParms[2]
  ConfigScreen()

  catch
    error "Graphics Init Error";;error.text, error.where

end

'=================================================================================================
' The get is used by the emulater to request a byte from your device
' this is an example of ram interface
' The emulater validates the address for your device before it is called
' See the RamMemory or the ResetButtom devices for examples
'
public sub _get(address as long) as byte

   debug "read ", address
   select case address and &h00FF            ' only the last half matters
      case 1                                    ' Define the Screen Background color
        return PlotWindow.background         ' return the background
   end select
end

'=====================================================================================
' This is called by the emulater to pass a byte to your device
' This is an example of simple memory
' See the RamMemory or the ResetButtom devices for examples
'
enum CmdRegister, ScreenBorderL, ScreenBorderH,DrawAreaBgL,DrawAreaBgH,PixelColorH,WriteAddrL,WriteAddrH,SetPixelInc,SetPixel
private PixelPointer as integer = 0
private ScreenBGColor as integer = color.softroyal
private DrawAreaBgColor as integer = color.black
private PixelColor as integer = color.green

Public const doRefresh as byte = 1
Public const doclear as byte = doRefresh+1
Public const doScrollUp as byte = doClear+1
Public const doScrollDown as byte = doScrollUp+1
Public const doScrollLeft as byte = doScrollDown+1
Public const doScrollRight as byte = doScrollLeft+1

public sub _put(Value as byte, address as long)
  dim register as byte = address and &h00FF
  dim pixelcolor as integer
  dim intval as integer
  dim filler as integer[]
  debug "write",address, Value

  select Case  register
    case ScreenBorderL                                                  ' set the window  background ie screen border low
       ScreenBGColor = (ScreenBGColor and &hff00) or value

    case ScreenBorderH                                                  ' set the window background  ie screen border high
       intval = value and &h00ff
       ScreenBGColor = (ScreenBGColor and &h00ff) or (intval shl 8)

    case DrawAreaBgL                                                    ' drawing area background color low
       DrawAreaBgColor = (DrawAreaBgColor and &hFF00) or value

    case DrawAreaBgH                                                    ' drawing area background color high
      intval = value and &h00ff
      DrawAreaBgColor = (DrawAreaBgColor and &h00ff) or (intval shl 8)

    case PixelColorH                                                    ' pixel color high
      intval = value and &h00ff
       pixelColor  = (pixelColor and &h00ff) or (intval shl 8)

    case WriteAddrL                                                     ' Write address start address low
       PixelPointer = (PixelPointer and &hff00) or value

    case WriteAddrH                                                     ' Write Address start address high
       intval = value and &h00ff
       PixelPointer = (PixelPointer and &h00ff) or (intval shl 8)

    case SetPixelInc                                                    ' value is lower bits of pixel color, pixel is written to screen
       pixelColor = (pixelColor and &hFF00) or value
       DevCurrent[PixelPointer] = PixelColor
       inc PixelPointer

    case SetPixel                                                      ' value is lower bits of pixel color, pixel is written to screen
       pixelColor = (pixelColor and &hFF00) or value
       DevCurrent[PixelPointer] = PixelColor

    case CmdRegister                                                   ' command register
    select case value
      case doRefresh                                                   ' after all updates for screen are done then this is called to update what is seen
         PlotArea.Refresh()

      case doClear                                                     ' clear the plot
         DevCurrent = new integer[PlotHeight*PlotWidth]
         PlotArea.clear()

      case doScrollUp                                                    ' scroll one pixel up, does not update display
        filler = new integer[PlotWidth]
        DevCurrent = DevCurrent.extract(PlotWidth,-1)
        DevCurrent.insert(filler)

      case doScrollDown                                                  ' scroll one pixel down
        filler = new integer[PlotWidth]
        DevCurrent = DevCurrent.delete(DevCurrent.length - PlotWidth,-1)
        DevCurrent.insert(filler,0)

      case doScrollLeft                                                  ' scroll one pixel left
      case doScrollRight                                                 ' scroll one pixel right

    end select

  end select


end

'============================================================================================
'this can be called by other devices or the computer
'the cpu keeps its own dictionary of device addresses
'
Public Sub _InRange(Address As Long) As Boolean

' If Address >= $IoAddress and if address < $IoAddress + $IoLength then return true
  If Address >= $MemoryStart And Address <= $MemoryEnd Then Return True
  Return False

End

'===========================================================================
' This will be called as the computer shuts down
' Can be implemented if required to clean anything up
'
Public sub halt()
   ' close any open windows etc
   PlotWindow.hide()
   PlotWindow = Null
end

'==========================================================================
' This is called when Cpu is reset
' This shoud only change the internal state of the device
'
Public Sub Reset()
  Debug "Device Reset"
  if PlotArea then PlotArea.clear()
end

'==========================================================================

'' The emulator looks for this when the defined computer tries to load device specific
'' files
'' This device is defined as "320,200,title" width, height, title
public sub load(Parmlist as string)
  dim parameters as string[] = split(ParmList,",","",true,false)

end

'===========================================================================
'Define the visable screen area
'
public sub ConfigScreen()
    error "Graphics Configure screen"
    if PlotWindow then
       PlotWindow.hide()
    endif

    DevCurrent = new integer[PlotWidth*PlotHeight]     ' the actual memory for this screen

    PlotWindow = new window
    PlotWindow.width = PlotWidth+10
    PlotWindow.Height = PlotHeight+10
    PlotArea = new  drawingArea(PlotWindow) as "Graphics"
    PlotArea.width = PlotWidth
    PlotArea.height = PlotHeight
    PlotArea.x = 5
    PlotArea.y = 5
    PlotArea.foreground = color.white
    PlotArea.Background = color.black
    PlotArea.clear()
    PlotWindow.Background = color.softroyal
    PlotWindow.title = PlotTitle
    PlotArea.refresh()
    PlotWindow.refresh()
    PlotWindow.show()
    wait
   catch
     error "Graphics Config Error";;Error.Text, error.where

end

'=================================================================================
' Called when the drawing area needs to be refreshed
'
public sub Graphics_draw()
  error "Begin the draw procedure"
  for point as integer = 0 to DevCurrent.max
     PlotArea.foreground = point
     draw.point(point mod Plotwidth, int(point / PlotWidth))
  next
end
