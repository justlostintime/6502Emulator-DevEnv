' Gambas class file
'Released Under:
'  GNU GENERAL Public LICENSE
'  Version 3, 29 June 2007
'  See project license file.

'' Ram Memory
'' You may add as many MMU/Ram memory devices as required
'' if the ram has spaced between addresses you will need to
'' define a ram device for each block location
'' when defining ram memory block you may also have binaries loaded
'' automatically by adding the parameter in the format "IoAddress, NumberofBlock ; bin1:block#,bin2:Block#,.."
'' Just make sure the load points don't overlap

Fast Unsafe
Public MemoryStart As Long = 0                    ' Start of this block of memory
Public MemoryEnd As Long = 0                      ' Highest valid address
Public MemoryLen As Long = 0                      ' Length of this memory block

'Public IoAddress as long = 0                      ' IoAddress for this MMU
'Public IoLength as long = 1                       ' IoAddress Space Length

Public Mem As byte[]                              ' The actual memory array of memory blocks
Property read Name as string use $Name            ' Every device gets a name
Property read BinLoaded as string use $BinLoaded  ' coma seperated list of all loaded binaries

'' bin image load info   filename:blockNumber
Public Sub _New(Start As Long, Length As Long, LoadImages As String)

  MemoryStart = Start
  MemoryEnd = start + Length - 1
  MemoryLen = Length

  Mem = New Byte[Length]

  $Name = "RAM"

  Debug "Ram Defined at : $"; Hex(Start, 6);"-$";Hex(MemoryEnd,6); " For length("; length; ")$"; Hex(length)
  If LoadImages <> ""  Then
    Load(LoadImages)
  Endif

End

Public Sub _get(memoryAddress As Long) As Byte
 'dim result as byte

  'result =  Mem[CurrentBlock][memoryAddress - MemoryStart]
  'If Error Then
  '  debug Subst("Memory access error at (&1 - &2) offset &3", Hex(memoryAddress), Hex(MemoryStart), Hex(MemoryAddress - MemoryStart))
  '  Return &hff
  'Endif

    return Mem[memoryAddress - MemoryStart]

End

Public Sub _put(value As Byte, memoryAddress as long)

    'print "Store to "; hex(MemoryAddress,6) ;; "Value = ";Hex(value,2);; "Read = ";
    Mem[memoryAddress - MemoryStart] = value
    'print hex(Mem[memoryAddress - MemoryStart],2)

End

Public Sub _InRange(Address As Long) As Boolean

  If Address >= MemoryStart And if Address <= MemoryEnd Then
      Return True
  endif

  Return False

End

'' We expect any binary image to contain in the first two byte the origin address
'' Using dasm as the assembler of choice

Public Sub Load(sBinSources As string ) as long ' For ram we can load a number Of files into Memory
  dim binsources as string[] = split(sBinSources,",","\"\"",true,false)
  Dim BinInfo As File
  Dim al as byte = 0
  Dim ah As Byte = 0
  Dim address As Long = 0
  Dim ReadtoAddress as long = 0
  Dim Length As Integer = 0
  
  error "New Ram Load Request ";sBinSources

  For Each BinSource As String In BinSources
    
   
    
    Try BinInfo = Open BinSource For Read
    if not error Then
      if file.ext(BinSource) == "raw" then               ' Special case for cc65 binary raw files
        error "Raw file being loaded"
        Address = &H200
        Length = Lof(BinInfo)
      else
        error "File with leading load address being loaded"
        Read #BinInfo, al                     ' By default the first two byte are the load address
        Read #BinInfo, ah
        Address = Address or ah
        Address = (Address shl 8) or al
        Length = Lof(BinInfo) - 2
      endif
      error "Loading Image to address "; hex(address,4); " Length=";hex(length,4)
      
      ReadToAddress = Address - MemoryStart
      If (Address < MemoryStart) Or If (Address + length - 1) > MemoryEnd Then
        Error(Subst("Invalid Memory Address Scope for &1, Starts at $&2 for length of $&3", BinSOurce, Hex(address, 6), Hex(Length, 4)))
      Endif
      If Error Then Error("Missing Ram Source file")
      Try mem.Read(BinInfo, ReadToAddress, Length)
      If Error Then Error(subst("Error reading Ram Source at address &1 for length &2 :&3",hex(address,4),length,  Error.text))
      error "Binary Ram Image "; BinSource; " at Address:"; Hex(address, 6)
    else
      error "RAM: Unable to find file:";BinSource; "  Loading is ignored"
    endif
  Next

 dim bindef as string = BinSource &":"&hex(address,4)
 $BinLoaded &= iif($binLoaded = "",BinDef,","&BinDef)
 return address
 
 catch
    error "Ram device internal error :";error.text,error.number
    return address
 
End


