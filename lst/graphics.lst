ca65 V2.19 - Git ffa83c3
Main file   : graphics.s
Current file: graphics.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git ffa83c3
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git ffa83c3"
000000r 1               	.setcpu		"65C02"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	on
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.dbg		file, "graphics.c", 1620, 1677447779
000000r 1               	.dbg		file, "/usr/share/cc65/include/stdio.h", 6887, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/stdlib.h", 6885, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/string.h", 5492, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/fcntl.h", 3550, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/errno.h", 5854, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/unistd.h", 4309, 1605895793
000000r 1               	.dbg		file, "../../cc65Integration/include/ctmon65.h", 5258, 1676224656
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.dbg		sym, "printf", "00", extern, "_printf"
000000r 1               	.import		_printf
000000r 1               	.export		_RegisterNames
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _RegisterNames:
000000r 1  rr rr        	.addr	S0001
000002r 1  rr rr        	.addr	S0002
000004r 1  rr rr        	.addr	S0003
000006r 1  rr rr        	.addr	S0004
000008r 1  rr rr        	.addr	S0005
00000Ar 1  rr rr        	.addr	S0006
00000Cr 1  rr rr        	.addr	S0007
00000Er 1  rr rr        	.addr	S0008
000010r 1  rr rr        	.addr	S0009
000012r 1  rr rr        	.addr	S000A
000014r 1               
000014r 1               .segment	"RODATA"
000000r 1               
000000r 1               S000B:
000000r 1  42 65 67 69  	.byte	$42,$65,$67,$69,$6E,$20,$74,$68,$65,$20,$67,$72,$61,$70,$68,$69
000004r 1  6E 20 74 68  
000008r 1  65 20 67 72  
000010r 1  63 73 20 70  	.byte	$63,$73,$20,$70,$72,$6F,$67,$72,$61,$6D,$0A,$00
000014r 1  72 6F 67 72  
000018r 1  61 6D 0A 00  
00001Cr 1               S000C:
00001Cr 1  52 65 67 69  	.byte	$52,$65,$67,$69,$73,$74,$65,$72,$20,$25,$73,$20,$61,$74,$20,$25
000020r 1  73 74 65 72  
000024r 1  20 25 73 20  
00002Cr 1  34 78 0A 00  	.byte	$34,$78,$0A,$00
000030r 1               S0003:
000030r 1  53 63 72 65  	.byte	$53,$63,$72,$65,$65,$6E,$42,$6F,$72,$64,$65,$72,$48,$00
000034r 1  65 6E 42 6F  
000038r 1  72 64 65 72  
00003Er 1               S0002:
00003Er 1  53 63 72 65  	.byte	$53,$63,$72,$65,$65,$6E,$42,$6F,$72,$64,$65,$72,$4C,$00
000042r 1  65 6E 42 6F  
000046r 1  72 64 65 72  
00004Cr 1               S0006:
00004Cr 1  50 69 78 65  	.byte	$50,$69,$78,$65,$6C,$43,$6F,$6C,$6F,$72,$48,$00
000050r 1  6C 43 6F 6C  
000054r 1  6F 72 48 00  
000058r 1               S0004:
000058r 1  44 72 61 77  	.byte	$44,$72,$61,$77,$41,$72,$65,$61,$42,$67,$4C,$00
00005Cr 1  41 72 65 61  
000060r 1  42 67 4C 00  
000064r 1               S0005:
000064r 1  44 72 61 77  	.byte	$44,$72,$61,$77,$41,$72,$65,$61,$42,$67,$48,$00
000068r 1  41 72 65 61  
00006Cr 1  42 67 48 00  
000070r 1               S0009:
000070r 1  53 65 74 50  	.byte	$53,$65,$74,$50,$69,$78,$65,$6C,$49,$6E,$63,$00
000074r 1  69 78 65 6C  
000078r 1  49 6E 63 00  
00007Cr 1               S0001:
00007Cr 1  43 6D 64 52  	.byte	$43,$6D,$64,$52,$65,$67,$69,$73,$74,$65,$72,$00
000080r 1  65 67 69 73  
000084r 1  74 65 72 00  
000088r 1               S0008:
000088r 1  57 72 69 74  	.byte	$57,$72,$69,$74,$65,$41,$64,$64,$72,$48,$00
00008Cr 1  65 41 64 64  
000090r 1  72 48 00     
000093r 1               S0007:
000093r 1  57 72 69 74  	.byte	$57,$72,$69,$74,$65,$41,$64,$64,$72,$4C,$00
000097r 1  65 41 64 64  
00009Br 1  72 4C 00     
00009Er 1               S000A:
00009Er 1  53 65 74 50  	.byte	$53,$65,$74,$50,$69,$78,$65,$6C,$00
0000A2r 1  69 78 65 6C  
0000A6r 1  00           
0000A7r 1               
0000A7r 1               ; ---------------------------------------------------------------
0000A7r 1               ; void __near__ main (void)
0000A7r 1               ; ---------------------------------------------------------------
0000A7r 1               
0000A7r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_main: near
000000r 1               
000000r 1               	.dbg	func, "main", "00", extern, "_main"
000000r 1               	.dbg	sym, "i", "00", auto, -2
000000r 1               	.dbg	sym, "ScreenPtr", "00", auto, -4
000000r 1               	.dbg	sym, "ScreenRegister", "00", auto, -6
000000r 1               	.dbg	sym, "ScreenAltReg", "00", auto, -8
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; unsigned char *ScreenPtr = 0;
000000r 1               ;
000000r 1               	.dbg	line, "graphics.c", 26
000000r 1  20 rr rr     	jsr     decsp2
000003r 1  20 rr rr     	jsr     push0
000006r 1               ;
000006r 1               ; unsigned char *ScreenRegister = 0;
000006r 1               ;
000006r 1               	.dbg	line, "graphics.c", 27
000006r 1  20 rr rr     	jsr     push0
000009r 1               ;
000009r 1               ; unsigned int  *ScreenAltReg = 0;
000009r 1               ;
000009r 1               	.dbg	line, "graphics.c", 28
000009r 1  20 rr rr     	jsr     push0
00000Cr 1               ;
00000Cr 1               ; printf("Begin the graphics program\n");
00000Cr 1               ;
00000Cr 1               	.dbg	line, "graphics.c", 29
00000Cr 1  A9 rr        	lda     #<(S000B)
00000Er 1  A2 rr        	ldx     #>(S000B)
000010r 1  20 rr rr     	jsr     pushax
000013r 1  A0 02        	ldy     #$02
000015r 1  20 rr rr     	jsr     _printf
000018r 1               ;
000018r 1               ; for(i=CmdRegister; i <= SetPixel; i++) {
000018r 1               ;
000018r 1               	.dbg	line, "graphics.c", 30
000018r 1  A0 06        	ldy     #$06
00001Ar 1  A9 30        	lda     #$30
00001Cr 1  91 rr        	sta     (sp),y
00001Er 1  A9 E0        	lda     #$E0
000020r 1  C8           	iny
000021r 1  91 rr        	sta     (sp),y
000023r 1  A0 07        L0002:	ldy     #$07
000025r 1  B1 rr        	lda     (sp),y
000027r 1  C9 E0        	cmp     #$E0
000029r 1  D0 05        	bne     L0006
00002Br 1  88           	dey
00002Cr 1  B1 rr        	lda     (sp),y
00002Er 1  C9 3A        	cmp     #$3A
000030r 1  B0 46        L0006:	bcs     L0003
000032r 1               ;
000032r 1               ; printf("Register %s at %4x\n",RegisterNames[i-ScreenBase],i);
000032r 1               ;
000032r 1               	.dbg	line, "graphics.c", 31
000032r 1  A9 rr        	lda     #<(S000C)
000034r 1  A2 rr        	ldx     #>(S000C)
000036r 1  20 rr rr     	jsr     pushax
000039r 1  A0 09        	ldy     #$09
00003Br 1  B1 rr        	lda     (sp),y
00003Dr 1  AA           	tax
00003Er 1  88           	dey
00003Fr 1  B1 rr        	lda     (sp),y
000041r 1  38           	sec
000042r 1  E9 30        	sbc     #$30
000044r 1  48           	pha
000045r 1  8A           	txa
000046r 1  E9 E0        	sbc     #$E0
000048r 1  85 rr        	sta     tmp1
00004Ar 1  68           	pla
00004Br 1  0A           	asl     a
00004Cr 1  26 rr        	rol     tmp1
00004Er 1  18           	clc
00004Fr 1  69 rr        	adc     #<(_RegisterNames)
000051r 1  85 rr        	sta     ptr1
000053r 1  A5 rr        	lda     tmp1
000055r 1  69 rr        	adc     #>(_RegisterNames)
000057r 1  85 rr        	sta     ptr1+1
000059r 1  A0 01        	ldy     #$01
00005Br 1  B1 rr        	lda     (ptr1),y
00005Dr 1  AA           	tax
00005Er 1  B2 rr        	lda     (ptr1)
000060r 1  20 rr rr     	jsr     pushax
000063r 1  A0 0D        	ldy     #$0D
000065r 1  20 rr rr     	jsr     pushwysp
000068r 1  A0 06        	ldy     #$06
00006Ar 1  20 rr rr     	jsr     _printf
00006Dr 1               ;
00006Dr 1               ; for(i=CmdRegister; i <= SetPixel; i++) {
00006Dr 1               ;
00006Dr 1               	.dbg	line, "graphics.c", 30
00006Dr 1  A0 06        	ldy     #$06
00006Fr 1  A2 00        	ldx     #$00
000071r 1  A9 01        	lda     #$01
000073r 1  20 rr rr     	jsr     addeqysp
000076r 1  80 AB        	bra     L0002
000078r 1               ;
000078r 1               ; for(ScreenPtr=1; ScreenPtr < (320*200); ScreenPtr += 320 ) {
000078r 1               ;
000078r 1               	.dbg	line, "graphics.c", 34
000078r 1  A0 04        L0003:	ldy     #$04
00007Ar 1  A9 01        	lda     #$01
00007Cr 1  91 rr        	sta     (sp),y
00007Er 1  3A           	dea
00007Fr 1  C8           	iny
000080r 1  91 rr        	sta     (sp),y
000082r 1  A0 05        L0007:	ldy     #$05
000084r 1  B1 rr        	lda     (sp),y
000086r 1  AA           	tax
000087r 1  E0 FA        	cpx     #$FA
000089r 1  B0 35        	bcs     L0008
00008Br 1               ;
00008Br 1               ; ScreenAltReg    = WriteAddrL;
00008Br 1               ;
00008Br 1               	.dbg	line, "graphics.c", 35
00008Br 1  A2 E0        	ldx     #$E0
00008Dr 1  A9 36        	lda     #$36
00008Fr 1  20 rr rr     	jsr     stax0sp
000092r 1               ;
000092r 1               ; *ScreenAltReg   = (int)ScreenPtr;
000092r 1               ;
000092r 1               	.dbg	line, "graphics.c", 36
000092r 1  85 rr        	sta     ptr1
000094r 1  86 rr        	stx     ptr1+1
000096r 1  A0 05        	ldy     #$05
000098r 1  B1 rr        	lda     (sp),y
00009Ar 1  AA           	tax
00009Br 1  88           	dey
00009Cr 1  B1 rr        	lda     (sp),y
00009Er 1  92 rr        	sta     (ptr1)
0000A0r 1  A0 01        	ldy     #$01
0000A2r 1  8A           	txa
0000A3r 1  91 rr        	sta     (ptr1),y
0000A5r 1               ;
0000A5r 1               ; ScreenRegister = SetPixel;
0000A5r 1               ;
0000A5r 1               	.dbg	line, "graphics.c", 37
0000A5r 1  A2 E0        	ldx     #$E0
0000A7r 1  A9 39        	lda     #$39
0000A9r 1  C8           	iny
0000AAr 1  20 rr rr     	jsr     staxysp
0000ADr 1               ;
0000ADr 1               ; *ScreenRegister = 0x25;
0000ADr 1               ;
0000ADr 1               	.dbg	line, "graphics.c", 38
0000ADr 1  85 rr        	sta     ptr1
0000AFr 1  86 rr        	stx     ptr1+1
0000B1r 1  A9 25        	lda     #$25
0000B3r 1  92 rr        	sta     (ptr1)
0000B5r 1               ;
0000B5r 1               ; for(ScreenPtr=1; ScreenPtr < (320*200); ScreenPtr += 320 ) {
0000B5r 1               ;
0000B5r 1               	.dbg	line, "graphics.c", 34
0000B5r 1  A0 04        	ldy     #$04
0000B7r 1  A2 01        	ldx     #$01
0000B9r 1  A9 40        	lda     #$40
0000BBr 1  20 rr rr     	jsr     addeqysp
0000BEr 1  80 C2        	bra     L0007
0000C0r 1               ;
0000C0r 1               ; ScreenRegister = CmdRegister;
0000C0r 1               ;
0000C0r 1               	.dbg	line, "graphics.c", 41
0000C0r 1  A2 E0        L0008:	ldx     #$E0
0000C2r 1  A9 30        	lda     #$30
0000C4r 1  A0 02        	ldy     #$02
0000C6r 1  20 rr rr     	jsr     staxysp
0000C9r 1               ;
0000C9r 1               ; *ScreenRegister = doRefresh;
0000C9r 1               ;
0000C9r 1               	.dbg	line, "graphics.c", 42
0000C9r 1  85 rr        	sta     ptr1
0000CBr 1  86 rr        	stx     ptr1+1
0000CDr 1  A9 01        	lda     #$01
0000CFr 1  92 rr        	sta     (ptr1)
0000D1r 1               ;
0000D1r 1               ; }
0000D1r 1               ;
0000D1r 1               	.dbg	line, "graphics.c", 44
0000D1r 1  4C rr rr     	jmp     incsp8
0000D4r 1               
0000D4r 1               	.dbg	line
0000D4r 1               .endproc
0000D4r 1               
0000D4r 1               
