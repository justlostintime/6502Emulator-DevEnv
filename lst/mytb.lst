------- FILE mytb.asm LEVEL 1 PASS 6
      1 U4279				   input      processor	6502
      2 U4279 ????						;=====================================================
      3 U4279 ????						; Concurrent Tiny Basic, no longer Tiny
      4 U4279 ????						; Derived from Bob's Tiny Basic, and Lots of
      5 U4279 ????						; Free Time. Now abiut 6K Full OS features.
      6 U4279 ????						;
      7 U4279 ????						; While working on the Corsham Technologies KIM Clone
      8 U4279 ????						; project, I wanted to include a TINY BASIC since that
      9 U4279 ????						; was a highly desirable feature of early computers.
     10 U4279 ????						;
     11 U4279 ????						; Rather than negotiating copyright issues for
     12 U4279 ????						; existing BASICs, I decided to just write one from
     13 U4279 ????						; scratch.
     14 U4279 ????						;
     15 U4279 ????						; 10/07/2017
     16 U4279 ????						;
     17 U4279 ????						; This implements a stripped down Tiny BASIC
     18 U4279 ????						; interpreter using the Interpretive Language (IL)
     19 U4279 ????						; method as described in the first few issues of
     20 U4279 ????						; Dr Dobb's Journal.  The IL interpreter can be used
     21 U4279 ????						; to write various languages simply by changing the
     22 U4279 ????						; IL code rather than the interpreter itself.
     23 U4279 ????						;
     24 U4279 ????						; 10/15/2021 v0.4 - Bob Applegate
     25 U4279 ????						;		* Fixed major bug in findLine that
     26 U4279 ????						;		  caused corrupted lines, crashes, etc.
     27 U4279 ????						;		* If no parameter given to RND, assume
     28 U4279 ????						;		  32766.
     29 U4279 ????						;		* No more error 5 when a program
     30 U4279 ????						;		  reaches the end without an END.
     31 U4279 ????						;
     32 U4279 ????						; 02/15/2022 v0.5 JustLostInTime@gmail.com
     33 U4279 ????						;		 * Unexpanded version to play with everything
     34 U4279 ????						;		 * Add some usefull system level functions
     35 U4279 ????						;		 * allow a larger number of tiny basic formats
     36 U4279 ????						;		 * Add byte at start of line holding length
     37 U4279 ????						;		   for faster execution of goto and gosub
     38 U4279 ????						;		 * Re-added gosub
     39 U4279 ????						;		 * allow ; or , at end if print stmt
     40 U4279 ????						;		   without CRLF being added.
     41 U4279 ????						;		 * Added extended function erase to
     42 U4279 ????						;		   use the extended ctmon65 rm file
     43 U4279 ????						;		 * Fix quoted text to not have to backtrack
     44 U4279 ????						;		 * Add IRQ handler, Call Gosub and Iret at end
     45 U4279 ????						;		 * Add concurrency features
     46 U4279 ????						;		 * Add Compile at runtime for gosub and goto addresses
     47 U4279 ????						;
     48 U4279 ????						; www.corshamtech.com
     49 U4279 ????						; bob@corshamtech.com
     50 U4279 ????						; JustLostInTime@gmail.com
     51 U4279 ????						;
     52 U4279 ????						;=====================================================
     53 U4279 ????						;
     54 U4279 ????						; Create TRUE and FALSE values for conditionals.
     55 U4279 ????						;
     56 U4279 ????
     57 U4279 ????	       00 00	   FALSE      equ	0
     58 U4279 ????	       ff ff ff ff TRUE       equ	~FALSE
     59 U4279 ????						;
     60 U4279 ????						;---------------------------------------------------------
     61 U4279 ????						; One of these must be set to indicate which environment
     62 U4279 ????						; Tiny BASIC will be running in.  Here are the current
     63 U4279 ????						; environments:
     64 U4279 ????						;
     65 U4279 ????						; KIM - This is a bare KIM-1.	You'll need to add a few
     66 U4279 ????						; more K of RAM.
     67 U4279 ????						;
     68 U4279 ????						; XKIM - The Corsham Technologies xKIM extended monitor,
     69 U4279 ????						; which enhances, without replacing, the standard KIM
     70 U4279 ????						; monitor.  It gives access to routines to save/load files
     71 U4279 ????						; to a micro SD card.
     72 U4279 ????						;
     73 U4279 ????						; CTMON65 is a from-scratch monitor written for the
     74 U4279 ????						; Corsham Tech SS-50 6502 CPU board, but the monitor can
     75 U4279 ????						; easily be ported to other systems.  It has support for
     76 U4279 ????						; using a micro SD card for file storage/retrieval.
     77 U4279 ????						;
     78 U4279 ????	       00 00	   KIM	      equ	FALSE	;Basic KIM-1, no extensions
     79 U4279 ????	       00 00	   XKIM       equ	FALSE	;Corsham Tech xKIM monitor
     80 U4279 ????	       ff ff ff ff CTMON65    equ	TRUE	;Corsham Tech CTMON65
     81 U4279 ????	       ff ff ff ff IL_DEBUG_TEXT equ	TRUE	;Print out as text IL instructions
     82 U4279 ????						;
     83 U4279 ????						;   Need to define some macros for the dasm assembler
     84 U4279 ????						;
     85 U4279 ????				      MACRO	dw
     86 U4279 ????				      .word	{0}
     87 U4279 ????				      ENDM
     88 U4279 ????
     89 U4279 ????				      MACRO	db
     90 U4279 ????				      .byte	{0}
     91 U4279 ????				      ENDM
     92 U4279 ????
     93 U4279 ????						;
     94 U4279 ????						; If set, include disk functions.
     95 U4279 ????						;
     96 U4279 ????	       ff ff ff ff DISK_ACCESS equ	TRUE
     97 U4279 ????						;
     98 U4279 ????						; If ILTRACE is set then dump out the address of every
     99 U4279 ????						; IL opcode before executing it.
    100 U4279 ????						; 0 = off, 7=IL trace, 6 = Basic Prog Trace, 7+6 = both
    101 U4279 ????						;
    102 U4279 ????	       00 00	   ILTRACE    equ	%00000000	;%0100000 = Basic STMT Trace, %10000000 = il trace etc
    103 U4279 ????						;
    104 U4279 ????						; If FIXED is set, put the IL code and the user
    105 U4279 ????						; program space at fixed locations in memory.	This is
    106 U4279 ????						; meant only for debugging.
    107 U4279 ????						;
    108 U4279 ????	       00 00	   FIXED      equ	FALSE
    109 U4279 ????
    110 U4279 ????	       00 0f	   terminalIOblockLen equ	[TerminalIOblockEnd - TerminalIOblock]
    111 U4279 ????
    112 U4279 ????						;
    113 U4279 ????						; Sets the arithmetic stack depth.  This is *TINY*
    114 U4279 ????						; BASIC, so keep this small!
    115 U4279 ????						;
    116 U4279 ????	       00 14	   MATHSTACKSIZE equ	20	;number of entries in math stack
    117 U4279 ????	       00 32	   ILSTACKSIZE equ	50	;number of entries in ilstack
    118 U4279 ????	       00 10	   GOSUBSTACKSIZE equ	16	;Depth of gosub/For-Next nesting max is 64 times TASKTABLE LENGTH must < 256
    119 U4279 ????	       00 25	   VARIABLESSIZE equ	37	;26 variables + 1 for exit code + 10 entries (20bytes) for ioblock
    120 U4279 ????	       00 0a	   TASKCOUNT  equ	10	;Task Table count, up to 10 tasks
    121 U4279 ????	       00 ff	   TASKCYCLESDEFAULT equ	255	;Default Task Switch 0-255 uses a single byte
    122 U4279 ????	       00 02	   TASKCYCLESHIGH equ	2	;hi order count
    123 U4279 ????	       00 10	   MESSAGESMAX equ	GOSUBSTACKSIZE	;Not used msg q and gosub grow towards each other and over flow when they meet
    124 U4279 ????
    125 U4279 ????	       00 36	   taskSTDIN  equ	[[VARIABLESSIZE - 10]*2]	;io vector
    126 U4279 ????	       00 38	   taskSTDOUT equ	[[[VARIABLESSIZE - 10]*2]+2]	;io vector
    127 U4279 ????
    128 U4279 ????	       00 3f	   taskIOinPort equ	[[[VARIABLESSIZE - 10]*2]+4+5]	;Offset into the ioblock
    129 U4279 ????	       00 3b	   taskIOoutPort equ	[[[VARIABLESSIZE - 10]*2]+4+1]	;Offset into the ioblock
    130 U4279 ????	       00 46	   taskIOstatusPort equ	[[[VARIABLESSIZE - 10]*2]+4+12]	;Offset into the ioblock
    131 U4279 ????						;
    132 U4279 ????						; Gosub entry types
    133 U4279 ????
    134 U4279 ????	       00 01	   GOSUB_RTN  equ	$01	; This is a simple gosub return
    135 U4279 ????	       00 81	   GOSUB_RTN_VALUE equ	$81	; subroutine will return a value
    136 U4279 ????	       00 02	   GOSUB_FOR  equ	2	; Jump point for a for function
    137 U4279 ????	       00 03	   GOSUB_NEXT equ	3	; Next interation and jump point
    138 U4279 ????	       00 04	   GOSUB_MSG  equ	4	; this identifies the entry as an IPC message
    139 U4279 ????	       00 05	   GOSUB_STACK_FRAME equ	5	; used to contain the gosubs stackframe info when passing parameters
    140 U4279 ????						; 0 byte is the original stack offset, byte 1 is the parameter count
    141 U4279 ????						; 2 byte  is unused, 3 byte  is the type GOSUB_STACK_FRAME
    142 U4279 ????	       00 06	   GOSUB_STACK_SAVE equ	6	; SAVES THE FULL MATH STACK INFORMATION
    143 U4279 ????	       00 07	   GOSUB_SCRATCH_PAD equ	7	; Used when a work space is needed in il code
    144 U4279 ????						;
    145 U4279 ????						; Common ASCII constants
    146 U4279 ????						;
    147 U4279 ????	       00 07	   BEL	      equ	$07
    148 U4279 ????	       00 08	   BS	      equ	$08
    149 U4279 ????	       00 09	   TAB	      equ	$09
    150 U4279 ????	       00 0a	   LF	      equ	$0A
    151 U4279 ????	       00 0d	   CR	      equ	$0D
    152 U4279 ????	       00 22	   quote      equ	$22
    153 U4279 ????	       00 20	   SPACE      equ	$20
    154 U4279 ????	       00 2c	   COMMA      equ	',
    155 U4279 ????	       00 3b	   SEMICOLON  equ	';
    156 U4279 ????	       00 3a	   COLON      equ	':
    157 U4279 ????	       00 24	   DOLLAR     equ	'$
    158 U4279 ????						;
    159 U4279 ????						; These are error codes
    160 U4279 ????						;
    161 U4279 ????	       00 00	   ERR_NONE   equ	0	;No Errror
    162 U4279 ????	       00 01	   ERR_EXPR   equ	1	;expression error
    163 U4279 ????	       00 02	   ERR_UNDER  equ	2	;The Math stack underflow
    164 U4279 ????	       00 03	   ERR_OVER   equ	3	;The Math stack overflow
    165 U4279 ????	       00 04	   ERR_EXTRA_STUFF equ	4	;Stuff at end of line
    166 U4279 ????	       00 05	   ERR_SYNTAX equ	5	;various syntax errors
    167 U4279 ????	       00 06	   ERR_DIVIDE_ZERO equ	6	;divide by zero
    168 U4279 ????	       00 07	   ERR_READ_FAIL equ	7	;error loading file
    169 U4279 ????	       00 08	   ERR_WRITE_FAIL equ	8	;error saving file
    170 U4279 ????	       00 09	   ERR_NO_FILENAME equ	9	;Forgot to include the file name
    171 U4279 ????	       00 0a	   ERR_FILE_NOT_FOUND equ	10	;The file name provided not found
    172 U4279 ????	       00 0b	   ERR_STACK_UNDER_FLOW equ	11	;the gosub stack underflow
    173 U4279 ????	       00 0c	   ERR_STACK_OVER_FLOW equ	12	;the gosub Stack overflow
    174 U4279 ????	       00 0d	   ERR_BAD_LINE_NUMBER equ	13	;Bad line number specified Not found
    175 U4279 ????	       00 0e	   ERR_NO_EMPTY_TASK_SLOT equ	14	;Unable to create a new task no/slots
    176 U4279 ????	       00 0f	   ERR_INDEX_OUT_OF_RANGE equ	15	;Subscript out of range
    177 U4279 ????	       00 10	   ERR_INVALID_PID equ	16	;Invalid PID provided
    178 U4279 ????	       00 11	   ERR_OUT_OF_MSG_SPACE equ	17	;Out of space for new messsages
    179 U4279 ????	       00 12	   ERR_INVALID_STK_FRAME equ	18	;The stack frame was expected not found
    180 U4279 ????	       00 13	   ERR_NO_RETURN_VALUE_PROVIDED equ	19	;No value returned by a gofn call
    181 U4279 ????	       00 14	   ERR_LINE_NOT_FOUND equ	20	;Gosub/goto/gofn line number not found
    182 U4279 ????	       00 15	   ERR_IL_STACK_OVER_FLOW equ	21	;The IL return stack has overflowed
    183 U4279 ????	       00 16	   ERR_EXPECTVAR equ	22	;Expected a variable name or definition
    184 U4279 ????	       00 17	   ERR_CLOSINGBRACKET equ	23	;Expected a closing bracket
    185 U4279 ????	       00 18	   ERR_MISSINGEQUALSIGN equ	24	;Expected an equal sign for assignment
    186 U4279 ????	       00 19	   ERR_FUNCTION_EXPECTED_PARAMETERS equ	25	;Function expected parameters
    187 U4279 ????	       00 1a	   ERR_EXPECTED_OPENING_BRACKET equ	26	;Expected opening bracket [ or (
    188 U4279 ????						;
    189 U4279 ????						;=====================================================
    190 U4279 ????						; Zero page storage.
    191 U4279 ????						;
    192 U00f6 ????				      SEG.U	ZEROPAGE
    193 U0040					      org	$0040
    194 U0040
    195 U0040		       00	   ILTrace    ds	1	;non-zero means tracing
    196 U0041
    197 U0041							; The context is used to locate a task switch
    198 U0041							; it copies from here till all task fields are saved/swapped
    199 U0041							; The max number of tasks is 256 / context length
    200 U0041							; All positions POS values are plus one task table incldues
    201 U0041							; a leading status byte .
    202 U0041							;
    203 U0041		       00 41	   CONTEXT    equ	*
    204 U0041							;StatusCode		 db	 1  this is here to remind why everything is plus 1 this and is only in the Task table
    205 U0041
    206 U0041		       00 00	   VARIABLES  ds	2	; 2 bytes pointer to, 26 A-Z
    207 U0041		       00 01	   VARIABLEPOS equ	VARIABLES - CONTEXT + 1
    208 U0043
    209 U0043		       00 00	   ILPC       ds	2	; IL program counter
    210 U0045		       00 00	   ILSTACK    ds	2	; IL call stack
    211 U0047		       00	   ILSTACKPTR ds	1
    212 U0048
    213 U0048
    214 U0048		       00 00	   MATHSTACK  ds	2	; MATH Stack pointer
    215 U0048		       00 08	   MATHSTACKPOS equ	MATHSTACK - CONTEXT + 1
    216 U004a
    217 U004a
    218 U004a		       00	   MATHSTACKPTR ds	1
    219 U004a		       00 0a	   MATHSTACKPTRPOS equ	MATHSTACKPTR - CONTEXT + 1
    220 U004b
    221 U004b		       00 00	   GOSUBSTACK ds	2	; pointer to gosub stack
    222 U004b		       00 0b	   GOSUBSTKPOS equ	GOSUBSTACK - CONTEXT + 1	; Get the offset to the gosub/msg stack
    223 U004d
    224 U004d
    225 U004d		       00	   GOSUBSTACKPTR ds	1	; current offset in the stack, moved to task table
    226 U004d		       00 0d	   GOSUBPTRPOS equ	GOSUBSTACKPTR - CONTEXT+1	; Pointer to gosub stack pointer
    227 U004e
    228 U004e
    229 U004e		       00	   MESSAGEPTR ds	1	; Pointer to active message, from bottom of gosub stack
    230 U004e		       00 0e	   MSGPTRPOS  equ	MESSAGEPTR - CONTEXT+1	; Pointer to the message counter
    231 U004f							;
    232 U004f							; CURPTR is a pointer to curent BASIC line being
    233 U004f							; executed.  Always points to start of line, CUROFF
    234 U004f							; is the offset to the current character.
    235 U004f							; The order of these fields is important
    236 U004f		       00 00	   CURPTR     ds	2	; Pointer to current Basic line
    237 U0051		       00	   CUROFF     ds	1	; Current offset in Basic Line
    238 U0052							;
    239 U0052							;The order of these fields in important
    240 U0052
    241 U0052							;
    242 U0052							; R0, R1 and MQ are used for arithmetic operations and
    243 U0052							; general use.
    244 U0052							;
    245 U0052		       00 52	   REGISTERS  equ	*	;IL MATH REGISTERS
    246 U0052		       00 00	   R0	      ds	2	;arithmetic register 0
    247 U0054		       00 00	   R1	      ds	2	;arithmetic register 1
    248 U0056		       00 00	   MQ	      ds	2	;used for some math
    249 U0058		       00	   R2	      ds	1	;General purpose work register(tasking)
    250 U0058		       00 59	   REGISTERSEND equ	*
    251 U0058		       00 07	   REGISTERSLEN equ	REGISTERSEND-REGISTERS
    252 U0059
    253 U0059		       00 59	   CONTEXTEND equ	*	; End of swap context
    254 U0059		       00 19	   CONTEXTLEN equ	CONTEXTEND - CONTEXT + 1	; length of the context plus the status byte
    255 U0059
    256 U0059		       00 00	   dpl	      ds	2	; Used as a pointer to call il instructions
    257 U005b							;
    258 U005b							; This is zero if in immediate mode, or non-zero
    259 U005b							; if currently running a program.  Any input from
    260 U005b							; the main loop clears this, and the XFER IL
    261 U005b							; statement will set it.
    262 U005b							;
    263 U005b		       00	   RunMode    ds	1	;Basic program is running or stop
    264 U005c							;
    265 U005c							; Used for line insertion/removal.
    266 U005c							;
    267 U005c		       00 00	   FROM       ds	2	;Used for basic prog insert/remove
    268 U005e
    269 U005e							; THE ADDRESS USED BY THE PRINTER FUNCTION
    270 U005e							; TO PRINT A GENERIC STRING X,Y ADDRESS, Ac = TERMINATOR
    271 U005e							;
    272 U005e		       00 00	   PrtFrom    ds	2	; FROM
    273 U0060
    274 U0060							;
    275 U0060							;=====================================================
    276 U0060							;
    277  35a7 ????				      SEG	Code
    278  0200					      org	$0200
    279  0200							;
    280  0200							; Cold start is at $0200.  Warm start is at $0203.
    281  0200							;
    282  0200		       4c 06 02    TBasicCold jmp	cold2	;jump around vectors
    283  0203		       4c 82 02    warm       jmp	warm2	;Entry point for worm restart
    284  0206							;
    285  0206							; These are the user-supplied vectors to I/O routines.
    286  0206							; If you want, you can just patch these in the binary
    287  0206							; file, but it would be better to change the source
    288  0206							; code.
    289  0206							;
    290  0206				  -	      if	KIM
    291  0206				  -OUTCH      jmp	$1ea0	;output char in A
    292  0206				  -GETCH      jmp	$1e5a	;get char in A (blocks)
    293  0206				  -CRLF       jmp	$1e2f	;print CR/LF
    294  0206				  -OUTHEX     jmp	$1e3b	;print A as hex
    295  0206				  -MONITOR    jmp	$1c4f	;return to monitor
    296  0206					      endif
    297  0206				  -	      if	XKIM
    298  0206				  -	      include	"xkim.inc"
    299  0206				  -	      SEG	Code
    300  0206				  -OUTCH      jmp	$1ea0
    301  0206				  -GETCH      jmp	xkGETCH
    302  0206				  -CRLF       jmp	$1e2f	;print CR/LF
    303  0206				  -OUTHEX     jmp	xkPRTBYT
    304  0206				  -MONITOR    jmp	extKIM
    305  0206				  -puts       equ	putsil
    306  0206				  -BUFFER_SIZE equ	132
    307  0206					      endif
    308  0206
    309  0206					      if	CTMON65
------- FILE ctmon65.inc LEVEL 2 PASS 6
      0  0206					      include	"ctmon65.inc"
      1  0206							;*********************************************************
      2  0206							; FILE: ctmon65.inc
      3  0206							;
      4  0206							; Applications wishing to run under CTMON65 should include
      5  0206							; this file, as it defines vectors and other pieces of
      6  0206							; necessary data.
      7  0206							;*********************************************************
      8  0206							;
------- FILE config.inc LEVEL 3 PASS 6
      0  0206					      include	"config.inc"
      1  0206							;*********************************************************
      2  0206							; FILE: config.inc
      3  0206							;
      4  0206							; General configuration file for the Corsham Technologies
      5  0206							; CTMON65 monitor.
      6  0206							;*********************************************************
      7  0206							;
      8  0206							; Current version and revision
      9  0206							;
     10  0206		       00 00	   VERSION    equ	0
     11  0206		       00 01	   REVISION   equ	1
     12  0206							;
     13  0206							;FALSE		equ	0
     14  0206							;TRUE		equ	!FALSE
     15  0206							;
     16  0206							; SS-50 bus constants
     17  0206							;
     18  0206		       e0 00	   IO_BASE    equ	$e000
     19  0206		       00 10	   IO_SIZE    equ	16
     20  0206							;
     21  0206							; Memory usage
     22  0206							;
     23  0206		       00 f0	   ZERO_PAGE_START equ	$00f0
     24  0206		       f0 00	   ROM_START  equ	$f000
     25  0206		       df 00	   RAM_START  equ	$df00
     26  0206							;
     27  0206							; If enabled, turn on buffered input code.
     28  0206							;
     29  0206		       00 00	   BUFFERED_INPUT equ	FALSE
     30  0206							;
     31  0206		       00 05	   MAX_ARGC   equ	5
     32  0206							;
     33  0206							; If enabled, the debugger will display the flag register
     34  0206							; in ASCII.  Nice, but takes more code.
     35  0206							;
     36  0206		       ff ff ff ff FULL_STATUS equ	TRUE
     37  0206							;
     38  0206							; Enable EXTENDED_CMDS to allow linking external commands
     39  0206							; to the command handler.
     40  0206							;
     41  0206		       00 00	   EXTENDED_CMDS equ	FALSE
     42  0206							;
     43  0206							; Define to enable SD related functions
     44  0206							;
     45  0206		       ff ff ff ff SD_ENABLED equ	TRUE
     46  0206							;
     47  0206							; Size of the keyboard buffer
     48  0206							;
     49  0206		       00 84	   BUFFER_SIZE equ	132
     50  0206
------- FILE ctmon65.inc
     10  0206							; Zero-page data
     11  0206							;
     12  0206							;		zpage
     13 U0060					      seg.U	ZEROPAGE
     14 U00f0					      org	ZERO_PAGE_START
     15 U00f0		       00 00	   sptr       ds	2
     16 U00f2		       00	   INL	      ds	1
     17 U00f3		       00	   INH	      ds	1
     18 U00f4		       00 00	   putsp      ds	2
     19 U00f6							;
     20 Uf048 ????				      SEG.U	rom
     21 Uf000					      org	ROM_START
     22 Uf000							;
     23 Uf000							;=========================================================
     24 Uf000							; Jump table to common functions.  The entries in this
     25 Uf000							; table are used by external programs, so nothing can be
     26 Uf000							; moved or removed from this table.  New entries always
     27 Uf000							; go at the end.  Many of these are internal functions
     28 Uf000							; and I figured they might be handy for others.
     29 Uf000							;
     30 Uf000		       00 00 00    RESET      ds	3
     31 Uf003		       00 00 00    WARM       ds	3
     32 Uf006							;
     33 Uf006							; These are the major and minor revision numbers so that
     34 Uf006							; code can check to see which CTMON65 version is running.
     35 Uf006							;
     36 Uf006		       00	   CTMON65ver ds	1
     37 Uf007		       00	   CTMON65rev ds	1
     38 Uf008		       00		      ds	1	;unused
     39 Uf009							;
     40 Uf009							; Console related functions
     41 Uf009							;
     42 Uf009		       00 00 00    cin	      ds	3
     43 Uf00c		       00 00 00    cout       ds	3
     44 Uf00f		       00 00 00    cstatus    ds	3
     45 Uf012		       00 00 00    putsil     ds	3
     46 Uf015		       00 00 00    getline    ds	3
     47 Uf018		       00 00 00    crlf       ds	3
     48 Uf01b		       00 00 00    HexA       ds	3
     49 Uf01e							;
     50 Uf01e							; Low-level functions to access the SD card system
     51 Uf01e							;
     52 Uf01e					      if	SD_ENABLED	;SD ENABLED
     53 Uf01e		       00 00 00    xParInit   ds	3
     54 Uf021		       00 00 00    xParSetWrite ds	3
     55 Uf024		       00 00 00    xParSetRead ds	3
     56 Uf027		       00 00 00    xParWriteByte ds	3
     57 Uf02a		       00 00 00    xParReadByte ds	3
     58 Uf02d							;
     59 Uf02d							; Higher level SD card functions
     60 Uf02d							;
     61 Uf02d		       00 00 00    DiskPing   ds	3
     62 Uf030		       00 00 00    DiskDir    ds	3
     63 Uf033		       00 00 00    DiskDirNext ds	3
     64 Uf036		       00 00 00    DiskOpenRead ds	3
     65 Uf039		       00 00 00    DiskOpenWrite ds	3
     66 Uf03c		       00 00 00    DiskRead   ds	3
     67 Uf03f		       00 00 00    DiskWrite  ds	3
     68 Uf042		       00 00 00    DiskClose  ds	3
     69 Uf045		       00 00 00    DiskRmFile ds	3
     70 Uf048					      endif		;SD_ENABLED
     71 Uf048
     72 Uf048							;
     73 Udf8e ????				      SEG.U	Data
     74 Udf00					      org	RAM_START
     75 Udf00							;
     76 Udf00							; The use of memory starting from here will remain
     77 Udf00							; constant through different versions of CTMON65.
     78 Udf00							;
     79 Udf00		       00 00	   IRQvec     ds	2
     80 Udf02		       00 00	   NMIvec     ds	2
     81 Udf04							;
     82 Udf04							; Before a L(oad) command, these are set to $FF.
     83 Udf04							; After loading, if they are different, jump to
     84 Udf04							; that address.
     85 Udf04							;
     86 Udf04		       00 00	   AutoRun    ds	2
     87 Udf06							;
     88 Udf06							; Pointer to the subroutine that gets the next input
     89 Udf06							; character.  Used for doing disk/console input.
     90 Udf06							;
     91 Udf06		       00 00	   inputVector ds	2
     92 Udf08							;
     93 Udf08							; Same thing for output.
     94 Udf08							;
     95 Udf08		       00 00	   outputVector ds	2
     96 Udf0a							;
     97 Udf0a							; Buffer for GETLINE
     98 Udf0a							;
     99 Udf0a		       00 00 00 00*buffer     ds	BUFFER_SIZE
------- FILE mytb.asm
    311 Udf8e
    312  0206					      SEG	Code
    313  0206							;
    314  0206		       f0 0c	   OUTCH      equ	cout
    315  0206		       f0 09	   GETCH      equ	cin
    316  0206		       2c d5	   CRLF       equ	tbcrlf
    317  0206		       20 f6	   OUTHEX     equ	HexToOut
    318  0206		       f0 03	   MONITOR    equ	WARM
    319  0206		       f0 0f	   ISCHAR     equ	cstatus
    320  0206		       21 13	   puts       equ	tbputs
    321  0206					      endif
    322  0206							;
    323  0206		       20 1c 2e    cold2      jsr	SetOutConsole
    324  0209		       20 29 2e 	      jsr	SetInConsole
    325  020c		       20 13 21 	      jsr	puts
      0  020f					      db	CR,LF
      1  020f		       0d 0a		      .byte.b	CR,LF
      0  0211					      db	"Concurrent Tiny BASIC v1.1.20  IRQs/Tasks/Tokens"
      1  0211		       43 6f 6e 63*	      .byte.b	"Concurrent Tiny BASIC v1.1.20  IRQs/Tasks/Tokens"
      0  0241					      db	CR,LF,0
      1  0241		       0d 0a 00 	      .byte.b	CR,LF,0
    329  0244							;
    330  0244		       20 07 23 	      jsr	MemInit	;setup the free space available
    331  0247
    332  0247		       a9 01	   calcstack  lda	#1
    333  0249		       8d f9 36 	      sta	taskCounter	; Initialize number of tasks to 1
    334  024c		       a9 80		      lda	#TASKACTIVE	; bit 7 is set
    335  024e		       8d fb 35 	      sta	taskTable	; mark the main task as active
    336  0251		       20 54 25 	      jsr	taskSetStacks	; setup all the task stacks/Variables, Init task io block
    337  0254		       a9 4e		      lda	#IL&$ff
    338  0256		       85 43		      sta	ILPC
    339  0258		       a9 31		      lda	#IL>>8
    340  025a		       85 44		      sta	ILPC+1
    341  025c							;
    342  025c							;		  lda	  ProgramStart		     ; user prog
    343  025c							;		  sta	  ProgramEnd
    344  025c							;		  lda	  ProgramStart+1
    345  025c							;		  sta	  ProgramEnd+1
    346  025c							;
    347  025c
    348  025c							;  Init time slices defaults
    349  025c		       a9 02		      lda	#TASKCYCLESHIGH
    350  025e		       8d f8 36 	      sta	taskResetValue+1
    351  0261		       a9 ff		      lda	#TASKCYCLESDEFAULT
    352  0263		       8d f7 36 	      sta	taskResetValue
    353  0266							;
    354  0266							; Initialize the pseudo-random number sequence...
    355  0266							;
    356  0266		       a9 5a		      lda	#$5a
    357  0268		       8d 63 42 	      sta	rtemp1
    358  026b		       a9 9d		      lda	#%10011101
    359  026d		       8d 65 42 	      sta	random
    360  0270		       a9 5b		      lda	#%01011011
    361  0272		       8d 66 42 	      sta	random+1
    362  0275							;
    363  0275							;   Insert a Basic irq handler for the basic Language
    364  0275		       a9 d1		      lda	#ServiceIrq&$ff
    365  0277		       8d 00 df 	      sta	IRQvec
    366  027a		       a9 19		      lda	#ServiceIrq>>8
    367  027c		       8d 01 df 	      sta	IRQvec+1
    368  027f		       4c 95 02 	      jmp	coldtwo
    369  0282
    370  0282							;
    371  0282							;
    372  0282							; This is the warm start entry point
    373  0282							;
    374  0282		       20 1c 2e    warm2      jsr	SetOutConsole
    375  0285		       20 29 2e 	      jsr	SetInConsole
    376  0288		       20 d5 2c 	      jsr	CRLF
    377  028b		       ad 60 42 	      lda	errGoto
    378  028e		       85 43		      sta	ILPC
    379  0290		       ad 61 42 	      lda	errGoto+1
    380  0293		       85 44		      sta	ILPC+1
    381  0295							;
    382  0295							; And continue with both starts here
    383  0295							;
    384  0295				   coldtwo
    385  0295							;
    386  0295							; The ILTrace flag is now run-time settable.
    387  0295							;
    388  0295		       a9 00		      lda	#ILTRACE&$ff
    389  0297		       85 40		      sta	ILTrace
    390  0299							;
    391  0299
    392  0299		       a9 00		      lda	#0
    393  029b		       85 5b		      sta	RunMode
    394  029d		       8d d6 41 	      sta	LINBUF
    395  02a0
    396  02a0							; Clear everything from the stacks
    397  02a0
    398  02a0		       8d 6d 42 	      sta	taskIOPending	; No one waiting for io
    399  02a3		       8d 6e 42 	      sta	taskRDPending	; No one waiting for bg io
    400  02a6
    401  02a6		       20 d0 25 	      jsr	taskReset
    402  02a9							;
    403  02a9		       a9 d6		      lda	#LINBUF&$ff
    404  02ab		       85 4f		      sta	CURPTR
    405  02ad		       a9 41		      lda	#LINBUF>>8
    406  02af		       85 50		      sta	CURPTR+1	;fall through...
    407  02b1
    408  02b1							;=====================================================
    409  02b1							; This is the top of the IL interpreter.  This fetches
    410  02b1							; and executes the instruction currently pointed to
    411  02b1							; by ILPC and adjusts ILPC to point to the next
    412  02b1							; instruction to execute.
    413  02b1							;
    414  02b1				   NextIL
    415  02b1		       ba		      tsx		; Get the stack pointer value
    416  02b2		       e0 ff		      cpx	#$FF	; Should be empty
    417  02b4		       d0 29		      bne	ILbad	; Halt and catch fire now!
    418  02b6
    419  02b6		       ce f5 36 	      dec	taskCurrentCycles
    420  02b9		       d0 03		      bne	NextIlNow
    421  02bb		       20 f9 25 	      jsr	iTaskSwitch	;check for a task switch
    422  02be		       a5 40	   NextIlNow  lda	ILTrace	;Do we need to trace this
    423  02c0		       f0 03		      beq	NextIL2	;Skip if no bits set
    424  02c2
    425  02c2		       20 66 2d 	      jsr	dbgLine	;Print the IL trace information
    426  02c5
    427  02c5		       a4 51	   NextIL2    ldy	CUROFF
    428  02c7							;		  jsr	  SkipSpaces	       ; no longer needed as tokenizer takes care of this
    429  02c7							;		  sty	  CUROFF
    430  02c7							;Task IO Management
    431  02c7		       ad 6e 42 	      lda	taskRDPending	; if it is zero then Nothing pending
    432  02ca		       f0 08		      beq	NextILStr
    433  02cc		       20 0e 2b 	      jsr	ReadLine	; else Pending and poll keyboard
    434  02cf		       90 03		      bcc	NextILStr	; if carry is clear then no end of line yet
    435  02d1		       ce 6e 42 	      dec	taskRDPending	; Carry is set if CR has been recieved
    436  02d4							;
    437  02d4		       20 91 29    NextILStr  jsr	getILByte
    438  02d7							;
    439  02d7							; When the handler is called, these are the conditions
    440  02d7							; of several important items:
    441  02d7							;
    442  02d7							;    (ILPC) will point to the byte AFTER the IL
    443  02d7							;    opcode being executed.
    444  02d7							;
    445  02d7							;    (CURPTR),CUROFF will point to the start of the
    446  02d7							;    next word in the input buffer.  Ie, the next word
    447  02d7							;    in the user program.
    448  02d7							;
    449  02d7		       18		      clc		; Clear carry before shift
    450  02d8		       0a		      asl		; valid for 0-127
    451  02d9		       b0 04		      bcs	ILbad	; Out of range
    452  02db		       aa		      tax		; Move value to x
      0  02dc					      db	$7c	; jmp (ILTBL,X) ; dasm does not support 65c02 inst
      1  02dc		       7c		      .byte.b	$7c
      0  02dd					      dw	ILTBL	; Actual IL table address
      1  02dd		       20 03		      .word.w	ILTBL
    455  02df
    456  02df							;		asl
    457  02df							;		cmp	#ILTBLend-ILTBL+2
    458  02df							;		bcc	ILgood
    459  02df							;
    460  02df							; This handles an illegal IL opcode.  This is serious
    461  02df							; and there's no way to recover.
    462  02df							;
    463  02df				   iBadOP
    464  02df		       20 13 21    ILbad      jsr	puts
      0  02e2					      db	CR,LF
      1  02e2		       0d 0a		      .byte.b	CR,LF
      0  02e4					      db	"Illegal IL "
      1  02e4		       49 6c 6c 65*	      .byte.b	"Illegal IL "
      0  02ef					      db	0
      1  02ef		       00		      .byte.b	0
    468  02f0							;
    469  02f0							; Well this is awkward, we need to back up the IL
    470  02f0							; by one since it no longer points to the current
    471  02f0							; opcode.
    472  02f0							;
    473  02f0		       20 9e 29 	      jsr	decIL
    474  02f3							;
    475  02f3		       a0 00		      ldy	#0
    476  02f5		       b1 43		      lda	(ILPC),y
    477  02f7		       20 f6 20 	      jsr	OUTHEX
    478  02fa		       20 13 21 	      jsr	puts
      0  02fd					      db	" at ",0
      1  02fd		       20 61 74 20*	      .byte.b	" at ",0
    480  0302		       a5 44		      lda	ILPC+1
    481  0304		       20 f6 20 	      jsr	OUTHEX
    482  0307		       a5 43		      lda	ILPC
    483  0309		       20 f6 20 	      jsr	OUTHEX
    484  030c		       20 d5 2c 	      jsr	CRLF
    485  030f		       4c 03 f0 	      jmp	MONITOR
    486  0312							;
    487  0312							; Just jump to the address (ILPC),y.  Have to do
    488  0312							; some goofy stuff.
    489  0312							;
    490  0312		       a8	   ILgood     tay		;move index into Y
    491  0313		       b9 20 03 	      lda	ILTBL,y
    492  0316		       85 59		      sta	dpl
    493  0318		       b9 21 03 	      lda	ILTBL+1,y
    494  031b		       85 5a		      sta	dpl+1
    495  031d		       6c 59 00 	      jmp	(dpl)	;go to handler
    496  0320							;
    497  0320							;=====================================================
    498  0320							; This is the IL jump table.  The IL opcode is
    499  0320							; mulitplied by two, then looked-up in this table.
    500  0320							; There is absolutely nothing special about the order
    501  0320							; of entries here... they all decode at exactly the
    502  0320							; same speed.	However the entry number must match the
    503  0320							; values in IL.inc.
    504  0320							;
    505  0320				   ILTBL
------- FILE ilvectortable.asm LEVEL 2 PASS 6
      0  0320					      include	"ilvectortable.asm"
      1  0320					      seg	Code
      2  0320				   ILTBL1
      0  0320					      dw	iXINIT	;0
      1  0320		       58 04		      .word.w	iXINIT
      0  0322					      dw	iDONE	;1
      1  0322		       75 04		      .word.w	iDONE
      0  0324					      dw	iPRS	;2
      1  0324		       8c 04		      .word.w	iPRS
      0  0326					      dw	iPRN	;3
      1  0326		       94 04		      .word.w	iPRN
      0  0328					      dw	iSPC	;4
      1  0328		       9d 04		      .word.w	iSPC
      0  032a					      dw	iNLINE	;5
      1  032a		       3b 09		      .word.w	iNLINE
      0  032c					      dw	iNXT	;6
      1  032c		       a5 04		      .word.w	iNXT
      0  032e					      dw	iXFER	;7
      1  032e		       e7 04		      .word.w	iXFER
      0  0330					      dw	iSAV	;8
      1  0330		       05 05		      .word.w	iSAV
      0  0332					      dw	iRSTR	;9
      1  0332		       cf 24		      .word.w	iRSTR
      0  0334					      dw	iCMPR	;10
      1  0334		       4b 05		      .word.w	iCMPR
      0  0336					      dw	iINNUM	;11
      1  0336		       ca 05		      .word.w	iINNUM
      0  0338					      dw	iFIN	;12
      1  0338		       02 06		      .word.w	iFIN
      0  033a					      dw	iERR	;13
      1  033a		       16 06		      .word.w	iERR
      0  033c					      dw	iADD	;14
      1  033c		       98 06		      .word.w	iADD
      0  033e					      dw	iSUB	;15
      1  033e		       ae 06		      .word.w	iSUB
      0  0340					      dw	iNEG	;16
      1  0340		       c4 06		      .word.w	iNEG
      0  0342					      dw	iMUL	;17
      1  0342		       dc 06		      .word.w	iMUL
      0  0344					      dw	iDIV	;18
      1  0344		       1c 07		      .word.w	iDIV
      0  0346					      dw	iSTORE	;19
      1  0346		       72 07		      .word.w	iSTORE
      0  0348					      dw	iIND	;20
      1  0348		       90 07		      .word.w	iIND
      0  034a					      dw	iLST	;21
      1  034a		       31 08		      .word.w	iLST
      0  034c					      dw	iINIT	;22
      1  034c		       20 04		      .word.w	iINIT
      0  034e					      dw	iGETLINE	;23
      1  034e		       67 08		      .word.w	iGETLINE
      0  0350					      dw	iINSRT	;24
      1  0350		       84 08		      .word.w	iINSRT
      0  0352					      dw	iRTN	;25
      1  0352		       35 09		      .word.w	iRTN
      0  0354					      dw	MONITOR	;26
      1  0354		       03 f0		      .word.w	MONITOR
      0  0356					      dw	iLIT	;27
      1  0356		       5f 09		      .word.w	iLIT
      0  0358					      dw	iCALL	;28
      1  0358		       41 09		      .word.w	iCALL
      0  035a					      dw	iJMP	;29
      1  035a		       4d 09		      .word.w	iJMP
      0  035c					      dw	iVINIT	;30
      1  035c		       84 09		      .word.w	iVINIT
      0  035e					      dw	iERRGOTO	;31
      1  035e		       8d 09		      .word.w	iERRGOTO
      0  0360					      dw	iTST	;32
      1  0360		       99 09		      .word.w	iTST
      0  0362					      dw	iTSTV	;33
      1  0362		       be 0a		      .word.w	iTSTV
      0  0364					      dw	iTSTL	;34
      1  0364		       64 0b		      .word.w	iTSTL
      0  0366					      dw	iTSTN	;35
      1  0366		       7f 0b		      .word.w	iTSTN
      0  0368					      dw	iFREE	;36
      1  0368		       38 0c		      .word.w	iFREE
      0  036a					      dw	iRANDOM	;37
      1  036a		       3e 0c		      .word.w	iRANDOM
      0  036c					      dw	iABS	;38
      1  036c		       0f 0d		      .word.w	iABS
     42  036e							;
     43  036e							; Disk functions.  There must be pointers
     44  036e							; to functions even if no disk is supported.
     45  036e							; Makes things easier in IL.inc.
     46  036e							;
     47  036e					      if	DISK_ACCESS
      0  036e					      dw	iOPENREAD	;39
      1  036e		       6f 2f		      .word.w	iOPENREAD
      0  0370					      dw	iOPENWRITE	;40
      1  0370		       d0 2f		      .word.w	iOPENWRITE
      0  0372					      dw	iDCLOSE	;41
      1  0372		       61 30		      .word.w	iDCLOSE
      0  0374					      dw	iDGETLINE	;42 Life, universe, everything(hitch hiker)
      1  0374		       ef 2f		      .word.w	iDGETLINE
      0  0376					      dw	iDLIST	;43 Did you remember your towel?
      1  0376		       5b 30		      .word.w	iDLIST
      0  0378					      dw	iDDIR	;44
      1  0378		       36 30		      .word.w	iDDIR
      0  037a					      dw	iRMFILE	;45
      1  037a		       be 2f		      .word.w	iRMFILE
     55  037c				  -	      else
     56  037c				  -	      dw	NextIL	;39
     57  037c				  -	      dw	NextIL	;40
     58  037c				  -	      dw	NextIL	;41
     59  037c				  -	      dw	NextIL	;42
     60  037c				  -	      dw	NextIL	;43
     61  037c				  -	      dw	NextIL	;44
     62  037c				  -	      dw	NextIL	;45
     63  037c					      endif
     64  037c							;
      0  037c					      dw	iCLEARSCREEN	;46
      1  037c		       36 2e		      .word.w	iCLEARSCREEN
      0  037e					      dw	iPOKEMEMORY	;47
      1  037e		       9c 0c		      .word.w	iPOKEMEMORY
      0  0380					      dw	iPEEKMEMORY	;48
      1  0380		       b1 0c		      .word.w	iPEEKMEMORY
      0  0382					      dw	iTSTLET	;49	   Test if the let with no LET keyword
      1  0382		       e0 09		      .word.w	iTSTLET
      0  0384					      dw	iTSTDONE	;50	   Test if we are at the end of a line
      1  0384		       65 0a		      .word.w	iTSTDONE
      0  0386					      dw	iGETCHAR	;51	   Get a character from the terminal
      1  0386		       de 0c		      .word.w	iGETCHAR
      0  0388					      dw	iPUTCHAR	;52	   Put a char to the terminal
      1  0388		       f2 0c		      .word.w	iPUTCHAR
      0  038a					      dw	iCallFunc	;53	   call a machine rtn accumulator
      1  038a		       c7 0c		      .word.w	iCallFunc
      0  038c					      dw	iBranch	;54	   if value on stack is 0 then next line, else next instuction
      1  038c		       98 05		      .word.w	iBranch
      0  038e					      dw	iTSTStr	;55	   Test Specifically for the start of a quoted string
      1  038e		       c3 09		      .word.w	iTSTStr
      0  0390					      dw	iSetIrq	;56	   sets the irq handler
      1  0390		       b6 0d		      .word.w	iSetIrq
      0  0392					      dw	iTstIrq	;57	   test if irq is pending
      1  0392		       f6 0b		      .word.w	iTstIrq
      0  0394					      dw	iRET	;58	   return from interupt
      1  0394		       39 05		      .word.w	iRET
      0  0396					      dw	iINSTR	;59	   read a string return first char on top of stack
      1  0396		       e3 05		      .word.w	iINSTR
      0  0398					      dw	iMOD	;60	   returns remainder of division
      1  0398		       25 07		      .word.w	iMOD
      0  039a					      dw	iTaskSet	;61	   sets a line number for the start of a task
      1  039a		       4d 26		      .word.w	iTaskSet
      0  039c					      dw	iETask	;62	   Terminates a task
      1  039c		       8a 27		      .word.w	iETask
      0  039e					      dw	iNTask	;63	   goto next task
      1  039e		       3d 27		      .word.w	iNTask
     83  03a0				   ILTBL2
      0  03a0					      dw	iArray	;64	   Allow Variable to have a subscript
      1  03a0		       af 07		      .word.w	iArray
      0  03a2					      dw	iTaskKill	;65	   kill a running task
      1  03a2		       35 27		      .word.w	iTaskKill
      0  03a4					      dw	iTaskStat	;66	   return the state of a task PID
      1  03a4		       09 27		      .word.w	iTaskStat
      0  03a6					      dw	iHexOut	;67	   output the value on the stack as a hex string
      1  03a6		       fd 0c		      .word.w	iHexOut
      0  03a8					      dw	iReadComplete	;68	   Called after a background read completes
      1  03a8		       b4 05		      .word.w	iReadComplete
      0  03aa					      dw	iReadStart	;69	   Called to start a background read request
      1  03aa		       aa 05		      .word.w	iReadStart
      0  03ac					      dw	iStartIO	;70	   Lock task until io complete
      1  03ac		       6d 27		      .word.w	iStartIO
      0  03ae					      dw	iEndIO	;71	   release task lock for io
      1  03ae		       73 27		      .word.w	iEndIO
      0  03b0					      dw	iLogNot	;72	   Logical not
      1  03b0		       68 0d		      .word.w	iLogNot
      0  03b2					      dw	iLogOr	;73	   Logical Or
      1  03b2		       3e 0d		      .word.w	iLogOr
      0  03b4					      dw	iLogAnd	;74	   Logical And
      1  03b4		       29 0d		      .word.w	iLogAnd
      0  03b6					      dw	iLogXor	;75	   Logical Xor
      1  03b6		       53 0d		      .word.w	iLogXor
      0  03b8					      dw	iWTASK	;76	   Wait for a task or set of tasks to complete
      1  03b8		       48 27		      .word.w	iWTASK
      0  03ba					      dw	iTASKPID	;77	   Returns the TASK PID
      1  03ba		       7e 27		      .word.w	iTASKPID
      0  03bc					      dw	iTRACEPROG	;78	   Turn on and off il trace, bit 6 = basic trace on,  bit 7 = il trace on
      1  03bc		       f4 0d		      .word.w	iTRACEPROG
      0  03be					      dw	idbgBasic	;79	   Interactive basic debugging
      1  03be		       e2 2c		      .word.w	idbgBasic
      0  03c0					      dw	iIPCS	;80	   Sending a msg to a task
      1  03c0		       6a 28		      .word.w	iIPCS
      0  03c2					      dw	iIPCR	;81	   Recieve a message from a task
      1  03c2		       81 28		      .word.w	iIPCR
      0  03c4					      dw	iIPCC	;82	   Check if any message available for task
      1  03c4		       95 28		      .word.w	iIPCC
      0  03c6					      dw	iIPCIO	;83	   Check if ips queue is empty, suspend task if empty
      1  03c6		       a2 28		      .word.w	iIPCIO
      0  03c8					      dw	iPushMathStack	;84	   Push the match stack frame pointer and create parameter count
      1  03c8		       35 24		      .word.w	iPushMathStack
      0  03ca					      dw	iPopMathStack	;85	   Restore the Math Stack frame after parameters have been passed
      1  03ca		       65 24		      .word.w	iPopMathStack
      0  03cc					      dw	iSaveMathStack	;86	   Save all math info
      1  03cc		       82 24		      .word.w	iSaveMathStack
      0  03ce					      dw	iRestoreMathStack	;87	Restore the math stack info
      1  03ce		       a1 24		      .word.w	iRestoreMathStack
      0  03d0					      dw	iIncParmCount	;88	   Increment the parameter counter
      1  03d0		       52 24		      .word.w	iIncParmCount
      0  03d2					      dw	iTaskGetMathStack	;89   get another tasks stack pointers
      1  03d2		       aa 27		      .word.w	iTaskGetMathStack
      0  03d4					      dw	iTaskEnable	;90	   enable a suspended task
      1  03d4		       d7 26		      .word.w	iTaskEnable
      0  03d6					      dw	iTaskSuspend	;91	   Suspend a running task
      1  03d6		       f1 26		      .word.w	iTaskSuspend
      0  03d8					      dw	iTaskPutMathPtr	;92	  updates the tasks stack pointer
      1  03d8		       c4 27		      .word.w	iTaskPutMathPtr
      0  03da					      dw	iTSTVT	;93	   test for another tasks variable
      1  03da		       b5 0a		      .word.w	iTSTVT
      0  03dc					      dw	iSetR2	;94	   Set the Working register R2 to a value
      1  03dc		       57 09		      .word.w	iSetR2
      0  03de					      dw	iStk2Tmp	;95	   Move top of stack to temp
      1  03de		       17 05		      .word.w	iStk2Tmp
      0  03e0					      dw	iTmp2Stk	;96	   Move Temp to stack
      1  03e0		       28 05		      .word.w	iTmp2Stk
      0  03e2					      dw	iTSTBYTE	;97	   Test byte and branch if true
      1  03e2		       01 0a		      .word.w	iTSTBYTE
      0  03e4					      dw	iINCVAR	;98	   Increment variable
      1  03e4		       87 0a		      .word.w	iINCVAR
      0  03e6					      dw	iDECVAR	;99	   Decrement variable
      1  03e6		       9f 0a		      .word.w	iDECVAR
      0  03e8					      dw	iSLICE	;100	   set the time slice for tasks
      1  03e8		       fd 27		      .word.w	iSLICE
      0  03ea					      dw	iTSTB	;101	   Test if byte equals
      1  03ea		       20 0a		      .word.w	iTSTB
      0  03ec					      dw	iTSTW	;102	   Test If word equals
      1  03ec		       3b 0a		      .word.w	iTSTW
      0  03ee					      dw	iOnGoto	;103	   Branch to table entry based upon buffer value
      1  03ee		       b3 1e		      .word.w	iOnGoto
      0  03f0					      dw	iTSTRELOP	;104	   Test relop, push mask onto stack if true, branch otherwise
      1  03f0		       e4 1e		      .word.w	iTSTRELOP
      0  03f2					      dw	iRepeatLine	;105	   Repeat the same line again, start execution from beginning of the same line
      1  03f2		       cb 04		      .word.w	iRepeatLine
      0  03f4					      dw	iTSTBRANCH	;106	   Test for compiled branch, take branch if is, skip two bytes and following integer value(line number) goto, gosub, gofn
      1  03f4		       0b 1f		      .word.w	iTSTBRANCH
      0  03f6					      dw	iFastXfer	;107	   move top of stack to curptr
      1  03f6		       d2 04		      .word.w	iFastXfer
      0  03f8					      dw	iSetTerminal	;108	   Set the Io Terminal to be used by print and input statements
      1  03f8		       b2 2e		      .word.w	iSetTerminal
      0  03fa					      dw	iINDB	;109	   fetch a single byte from memory indirect
      1  03fa		       9d 07		      .word.w	iINDB
      0  03fc					      dw	iSetBlock	;110	   Set a block or words or byte to a value 16 bit length
      1  03fc		       5c 23		      .word.w	iSetBlock
      0  03fe					      dw	iCopyBlock	;111	   Copy a block or memory from one location to another 16 bit length
      1  03fe		       b2 23		      .word.w	iCopyBlock
      0  0400					      dw	iCmpBlock	;112	   Compare to parts of memory
      1  0400		       e6 23		      .word.w	iCmpBlock
      0  0402					      dw	iShift	;113	   Shift left 0 or right 1
      1  0402		       8c 0d		      .word.w	iShift
    134  0404
      0  0404					      dw	iBadOP	;114	   Invalid IL op code
      1  0404		       df 02		      .word.w	iBadOP
      0  0406					      dw	iBadOP	;115	   Invalid IL op code
      1  0406		       df 02		      .word.w	iBadOP
      0  0408					      dw	iBadOP	;116	   Invalid IL op code
      1  0408		       df 02		      .word.w	iBadOP
      0  040a					      dw	iBadOP	;117	   Invalid IL op code
      1  040a		       df 02		      .word.w	iBadOP
      0  040c					      dw	iBadOP	;118	   Invalid IL op code
      1  040c		       df 02		      .word.w	iBadOP
      0  040e					      dw	iBadOP	;119	   Invalid IL op code
      1  040e		       df 02		      .word.w	iBadOP
      0  0410					      dw	iBadOP	;120	   Invalid IL op code
      1  0410		       df 02		      .word.w	iBadOP
      0  0412					      dw	iBadOP	;121	   Invalid IL op code
      1  0412		       df 02		      .word.w	iBadOP
      0  0414					      dw	iBadOP	;122	   Invalid IL op code
      1  0414		       df 02		      .word.w	iBadOP
      0  0416					      dw	iBadOP	;123	   Invalid IL op code
      1  0416		       df 02		      .word.w	iBadOP
      0  0418					      dw	iBadOP	;124	   Invalid IL op code
      1  0418		       df 02		      .word.w	iBadOP
      0  041a					      dw	iBadOP	;125	   Invalid IL op code
      1  041a		       df 02		      .word.w	iBadOP
      0  041c					      dw	iBadOP	;126	   Invalid IL op code
      1  041c		       df 02		      .word.w	iBadOP
      0  041e					      dw	iBadOP	;127	   Invalid IL op code
      1  041e		       df 02		      .word.w	iBadOP
    149  0420
    150  0420
    151  0420
    152  0420
------- FILE mytb.asm
    507  0420		       04 20	   ILTBLend   equ	*
    508  0420
    509  0420							;
    510  0420							;=====================================================
    511  0420							;=====================================================
    512  0420							;=====================================================
    513  0420							; This marks the start of the handlers for IL opcodes.
    514  0420							;=====================================================
    515  0420							;=====================================================
    516  0420							;=====================================================
    517  0420							;
    518  0420							;
    519  0420		       a9 00	   iINIT      lda	#0	; clear IL stack pointer,gosub stack
    520  0422		       85 47		      sta	ILSTACKPTR
    521  0424		       85 4a		      sta	MATHSTACKPTR
    522  0426		       85 4d		      sta	GOSUBSTACKPTR
    523  0428		       a9 38		      lda	#[[GOSUBSTACKSIZE - 2] * 4]	; Reserve two entries for gosubs
    524  042a		       85 4e		      sta	MESSAGEPTR	; message ptr is bottom stack space
    525  042c							;
    526  042c		       ad 6f 42 	      lda	ProgramStart	; user prog
    527  042f		       85 4f		      sta	CURPTR
    528  0431		       8d fc 35 	      sta	taskTable+1
    529  0434		       8d 71 42 	      sta	ProgramEnd
    530  0437		       ad 70 42 	      lda	ProgramStart+1
    531  043a		       85 50		      sta	CURPTR+1
    532  043c		       8d fd 35 	      sta	taskTable+2
    533  043f		       8d 72 42 	      sta	ProgramEnd+1
    534  0442		       a9 80		      lda	#TASKACTIVE
    535  0444		       8d fb 35 	      sta	taskTable	;Mark the first slot as active
    536  0447		       a9 01		      lda	#1
    537  0449		       8d f9 36 	      sta	taskCounter	;there is always one task / Main task
    538  044c		       ad f7 36 	      lda	taskResetValue
    539  044f		       8d f5 36 	      sta	taskCurrentCycles	; set up the task switch counts
    540  0452		       ad f8 36 	      lda	taskResetValue+1
    541  0455		       8d f6 36 	      sta	taskCurrentCycles+1
    542  0458							;
    543  0458							; fall into XINIT...
    544  0458							;
    545  0458							;=====================================================
    546  0458							; This initializes for the start of the next line of
    547  0458							; BASIC text.
    548  0458							;
    549  0458		       78	   iXINIT     sei		; ensure interupts are off
    550  0459		       20 d0 25 	      jsr	taskReset	; Clear the task table
    551  045c		       a9 00		      lda	#0	; Clear the irq flags
    552  045e		       8d 56 19 	      sta	IRQPending	; reset the irq pending
    553  0461		       8d 55 19 	      sta	IRQStatus	; Make sure irqs are off
    554  0464
    555  0464		       4c b1 02    goodExit   jmp	NextIL
    556  0467							;
    557  0467							;=====================================================
    558  0467							; This check if the escape key has been entered
    559  0467							; then changes out of run mode. z Set if esc found
    560  0467				   BreakSet
    561  0467		       20 0f f0 	      jsr	ISCHAR
    562  046a		       f0 06		      beq	BreakNo
    563  046c		       20 e6 19 	      jsr	VGETCH
    564  046f		       c9 1b		      cmp	#$1B
    565  0471		       60		      rts
    566  0472				   BreakNo
    567  0472		       a9 01		      lda	#1
    568  0474		       60		      rts
    569  0475
    570  0475							;
    571  0475
    572  0475							;=====================================================
    573  0475							; Verify there is nothing else on this input line.
    574  0475							; If there is, generate an error.
    575  0475							;
    576  0475		       a4 51	   iDONE      ldy	CUROFF
    577  0477		       b1 4f		      lda	(CURPTR),y
    578  0479		       f0 0e		      beq	doneadv
    579  047b		       c9 e6		      cmp	#oColon	; is it a  ':' or eol
    580  047d		       d0 03		      bne	idoneErr
    581  047f							;		  sty	  CUROFF
    582  047f		       4c b1 02 	      jmp	NextIL	; continue on this line
    583  0482
    584  0482				   idoneErr
    585  0482		       a2 04		      ldx	#ERR_EXTRA_STUFF
    586  0484		       a9 00		      lda	#0
    587  0486		       4c 7d 06 	      jmp	iErr2
    588  0489							;
    589  0489							; Advance to the next line
    590  0489							;
    591  0489				   doneadv
    592  0489		       4c b1 02 	      jmp	NextIL
    593  048c							;
    594  048c							;=====================================================
    595  048c							; Print the string until a closing quote
    596  048c							;
    597  048c				   iPRS
    598  048c		       20 36 21 	      jsr	PrtQuoted
    599  048f		       84 51		      sty	CUROFF
    600  0491		       4c b1 02 	      jmp	NextIL
    601  0494							;
    602  0494							;=====================================================
    603  0494							; Pop the top off the stack and print it as a signed
    604  0494							; decimal number.
    605  0494							;
    606  0494				   iPRN
    607  0494		       20 1c 2c 	      jsr	popR0
    608  0497		       20 42 20 	      jsr	PrintDecimal
    609  049a		       4c b1 02 	      jmp	NextIL
    610  049d							;
    611  049d							;=====================================================
    612  049d							; Space to next zone.	Currently the code does not
    613  049d							; keep track of which column the output is on, so
    614  049d							; just print a tab.
    615  049d							;
    616  049d				   iSPC
    617  049d		       a9 09		      lda	#TAB
    618  049f		       20 e3 19 	      jsr	VOUTCH
    619  04a2		       4c b1 02 	      jmp	NextIL
    620  04a5							;
    621  04a5							;=====================================================
    622  04a5							; If in immediate mode, jump to the address following
    623  04a5							; the NXT instruction.  Else move to the next line of
    624  04a5							; user code and continue.
    625  04a5							;
    626  04a5		       a5 5b	   iNXT       lda	RunMode
    627  04a7		       d0 03		      bne	iNxtRun	;in run mode
    628  04a9							;
    629  04a9							; Get address and jump to it.
    630  04a9							;
    631  04a9		       4c 4d 09 	      jmp	iJMP
    632  04ac							;
    633  04ac				   iNxtRun
    634  04ac		       a4 51		      ldy	CUROFF
    635  04ae		       b1 4f		      lda	(CURPTR),y
    636  04b0		       c9 e6		      cmp	#oColon
    637  04b2		       d0 06		      bne	iNxtRunGo
    638  04b4		       c8		      iny
    639  04b5		       84 51		      sty	CUROFF
    640  04b7		       4c c5 04 	      jmp	iNxtRun2
    641  04ba
    642  04ba				   iNxtRunGo
    643  04ba		       20 1b 2a 	      jsr	FindNextLine
    644  04bd		       20 2f 2a 	      jsr	AtEnd
    645  04c0		       d0 03		      bne	iNxtRun2	;not at end
    646  04c2							;
    647  04c2							; At the end of the program.  Pretend an END statement
    648  04c2							; was found.
    649  04c2							;
    650  04c2		       4c 02 06    iFINv      jmp	iFIN
    651  04c5							;
    652  04c5		       20 8d 29    iNxtRun2   jsr	getILWord	;ignore next word
    653  04c8		       4c b1 02 	      jmp	NextIL
    654  04cb							;=====================================================
    655  04cb							;Repeat the same line against
    656  04cb		       a0 03	   iRepeatLine ldy	#3
    657  04cd		       84 51		      sty	CUROFF
    658  04cf		       4c b1 02 	      jmp	NextIL
    659  04d2							;
    660  04d2							;=====================================================
    661  04d2							; XFER takes the number on top of the stack and looks
    662  04d2							; for that line in the program, or the next line
    663  04d2							; higher.  Ie, if it's 1 but there is no line 1, then
    664  04d2							; find the next one after that.
    665  04d2							;
    666  04d2				   iFastXfer
    667  04d2		       20 34 2c 	      jsr	popR1	; get type of transfer
    668  04d5		       a5 54		      lda	R1
    669  04d7		       f0 0e		      beq	iXFER
    670  04d9
    671  04d9		       20 1c 2c 	      jsr	popR0	; get where to transfer
    672  04dc		       a5 52		      lda	R0
    673  04de		       85 4f		      sta	CURPTR
    674  04e0		       a5 53		      lda	R0+1
    675  04e2		       85 50		      sta	CURPTR+1
    676  04e4		       4c ed 04 	      jmp	iXFER2
    677  04e7
    678  04e7				   iXFER
    679  04e7		       20 1c 2c 	      jsr	popR0
    680  04ea		       20 d6 29 	      jsr	findLine
    681  04ed
    682  04ed				   iXFER2
    683  04ed		       20 2f 2a 	      jsr	AtEnd	;at end of user program?
    684  04f0		       f0 d0		      beq	iFINv
    685  04f2
    686  04f2		       a0 03		      ldy	#3	;Change: 2->3 to skip length byte, point to start of text
    687  04f4		       84 51		      sty	CUROFF
    688  04f6
    689  04f6							;		  lda	  #$ff
    690  04f6							;		  sta	  RunMode
    691  04f6							;
    692  04f6							; Transfer IL to STMT.  I don't like having this
    693  04f6							; hard-coded; fix it.
    694  04f6							;
    695  04f6							;		  lda	  #STMT&$ff
    696  04f6							;		  sta	  ILPC
    697  04f6							;		  lda	  #STMT>>8
    698  04f6							;		  sta	  ILPC+1
    699  04f6							;		  jmp	  NextIL
    700  04f6							;
    701  04f6							; Run
    702  04f6							;
    703  04f6				   iXferok
    704  04f6		       a9 ff		      lda	#$ff
    705  04f8		       85 5b		      sta	RunMode	;we're running
    706  04fa							;
    707  04fa							; Need a more elegant way to do this
    708  04fa							;
    709  04fa		       a9 5c		      lda	#STMT&$ff
    710  04fc		       85 43		      sta	ILPC
    711  04fe		       a9 31		      lda	#STMT>>8
    712  0500		       85 44		      sta	ILPC+1
    713  0502		       4c b1 02 	      jmp	NextIL
    714  0505							;
    715  0505							;=====================================================
    716  0505							; Save the pointer to the next line to the call stack.
    717  0505							;
    718  0505		       20 91 29    iSAV       jsr	getILByte	; load type of gosub
    719  0508		       20 a4 2b 	      jsr	pushLN	; Type passed in A
    720  050b		       b0 03		      bcs	iSAVErr
    721  050d		       4c b1 02 	      jmp	NextIL
    722  0510
    723  0510		       a2 0c	   iSAVErr    ldx	#ERR_STACK_OVER_FLOW
    724  0512		       a9 00	   iSAVErr2   lda	#0
    725  0514		       4c 7d 06 	      jmp	iErr2
    726  0517							;====================================================
    727  0517							; Move stack top to and from temp area
    728  0517				   iStk2Tmp
    729  0517		       20 1c 2c 	      jsr	popR0
    730  051a		       a5 52		      lda	R0
    731  051c		       a0 48		      ldy	#TASKEXITCODE	; can also be used as temp
    732  051e		       91 41		      sta	(VARIABLES),y
    733  0520		       c8		      iny
    734  0521		       a5 53		      lda	R0+1
    735  0523		       91 41		      sta	(VARIABLES),y
    736  0525		       4c b1 02 	      jmp	NextIL
    737  0528
    738  0528		       a0 48	   iTmp2Stk   ldy	#TASKEXITCODE
    739  052a		       b1 41		      lda	(VARIABLES),y
    740  052c		       85 52		      sta	R0
    741  052e		       c8		      iny
    742  052f		       b1 41		      lda	(VARIABLES),y
    743  0531		       85 53		      sta	R0+1
    744  0533		       20 8a 2b 	      jsr	pushR0
    745  0536		       4c b1 02 	      jmp	NextIL
    746  0539							;
    747  0539							;=====================================================
    748  0539							; Pop the next line from the call stack. IRQ return
    749  0539							;
    750  0539		       20 cd 2b    iRET       jsr	popLN
    751  053c		       b0 d2		      bcs	iSAVErr
    752  053e		       a0 03		      ldy	#3
    753  0540		       84 51		      sty	CUROFF
    754  0542		       a9 00		      lda	#0
    755  0544		       8d 56 19 	      sta	IRQPending
    756  0547		       58		      cli
    757  0548		       4c b1 02 	      jmp	NextIL
    758  054b							;
    759  054b							;=====================================================
    760  054b							; Compare items on stack.  Okay, so on input there are
    761  054b							; three things on the stack
    762  054b							;
    763  054b							;    EXPR2 <- Top of stack
    764  054b							;    OP    <- relational operator, next on stack
    765  054b							;    EXPR1 <- last item on stack
    766  054b							;
    767  054b							; Comparison is: EXPR1 <operator> EXPR2
    768  054b							;
    769  054b							; Operator is one of...
    770  054b							;
    771  054b							;    2 is =
    772  054b							;    1 is <
    773  054b							;    3 is <=
    774  054b							;    5 is <>
    775  054b							;    4 is >
    776  054b							;    6 is >=
    777  054b							;
    778  054b							; Those are bit-mapped:
    779  054b							;
    780  054b							;    xxxxxGEL
    781  054b							;
    782  054b							;    G = Greater than
    783  054b							;    E = Equal
    784  054b							;    L = Less than
    785  054b							;
    786  054b							; If the comparison is false, do a NXT, ie, move to the
    787  054b							; next line and continue.  If true, continue executing
    788  054b							; on this line.
    789  054b							;
    790  054b		       00 01	   REL_LT     equ	%001
    791  054b		       00 02	   REL_EQUAL  equ	%010
    792  054b		       00 04	   REL_GT     equ	%100
    793  054b							;
    794  054b		       20 34 2c    iCMPR      jsr	popR1
    795  054e		       20 4b 2c 	      jsr	popMQ	;operator in MQ
    796  0551		       20 1c 2c 	      jsr	popR0
    797  0554		       20 5d 05 	      jsr	iCMPRsub
    798  0557		       20 8a 2b 	      jsr	pushR0
    799  055a		       4c b1 02 	      jmp	NextIL
    800  055d							;
    801  055d							; See if they are equal or not
    802  055d							;
    803  055d				   iCMPRsub		; Called by internal functions
    804  055d
    805  055d		       a5 52		      lda	R0
    806  055f		       c5 54		      cmp	R1
    807  0561		       d0 0a		      bne	iCMPRnoteq	;try not equal
    808  0563		       a5 53		      lda	R0+1
    809  0565		       c5 55		      cmp	R1+1
    810  0567		       d0 04		      bne	iCMPRnoteq
    811  0569							;
    812  0569							; Equal, set the flag in MQ+1
    813  0569							;
    814  0569		       a9 02		      lda	#REL_EQUAL	;They Are Equal
    815  056b		       d0 14		      bne	iCMPcom	;Exit it is equal
    816  056d							;
    817  056d							; See if EXPR1 (R0) < EXPR2 (R1)
    818  056d							; See www.6502.org/tutorials/compare_beyond.html
    819  056d							;
    820  056d				   iCMPRnoteq
    821  056d		       a5 52		      lda	R0
    822  056f		       c5 54		      cmp	R1	; Sets the carry flag
    823  0571		       a5 53		      lda	R0+1
    824  0573		       e5 55		      sbc	R1+1
    825  0575
    826  0575		       50 02		      bvc	iCMPR_2	; branch if N eor V
    827  0577		       49 80		      eor	#$80
    828  0579
    829  0579		       30 04	   iCMPR_2    bmi	iCMPlt
    830  057b		       a9 04		      lda	#REL_GT
    831  057d		       d0 02		      bne	iCMPcom
    832  057f
    833  057f		       a9 01	   iCMPlt     lda	#REL_LT	; R0 < R1
    834  0581
    835  0581				   iCMPcom		;ora	    MQ+1	 ; or with original mask MQ+1 is always zero
    836  0581							;
    837  0581							; Now compare the end result with what the caller
    838  0581							; was looking for.
    839  0581							;
    840  0581		       25 56		      and	MQ
    841  0583		       f0 0c		      beq	iCMPno	; no match
    842  0585		       a9 ff		      lda	#$FF	; true is $ffff
    843  0587		       85 52		      sta	R0
    844  0589		       85 53		      sta	R0+1
    845  058b		       d0 0a		      bne	iCMPDone
    846  058d							;
    847  058d							; R0 > R1
    848  058d							;
    849  058d		       a9 04	   iCMPgt     lda	#REL_GT
    850  058f		       d0 f0		      bne	iCMPcom
    851  0591				   iCMPno
    852  0591		       a9 00		      lda	#0
    853  0593		       85 52		      sta	R0
    854  0595		       85 53		      sta	R0+1
    855  0597
    856  0597				   iCMPDone
    857  0597		       60		      rts
    858  0598
    859  0598							;
    860  0598							; if Not a match, so jump to the next line of code.
    861  0598							; Branches based upon value on top of the stack
    862  0598				   iBranch
    863  0598		       20 1c 2c 	      jsr	popR0
    864  059b		       a5 52		      lda	R0
    865  059d		       05 53		      ora	R0+1
    866  059f		       f0 03		      beq	iBranchFalse	; not true
    867  05a1		       4c b1 02 	      jmp	NextIL	; It is true if any value not zero
    868  05a4							;
    869  05a4				   iBranchFalse
    870  05a4		       20 1b 2a 	      jsr	FindNextLine
    871  05a7		       4c ed 04 	      jmp	iXFER2
    872  05aa							;
    873  05aa							;=====================================================
    874  05aa							; Start a read of data in background
    875  05aa				   iReadStart
    876  05aa		       a9 3f		      lda	#'?	; Prompt with question mark
    877  05ac		       a6 01		      ldx	1	; Indicate to start read in background
    878  05ae		       20 a7 2a 	      jsr	GetLine	; Call the getline to start read
    879  05b1		       4c b1 02 	      jmp	NextIL	; next instruction
    880  05b4							;
    881  05b4							;=====================================================
    882  05b4							; Complete the read and return the curptr, curoff pointing to data
    883  05b4				   iReadComplete
    884  05b4		       a9 01		      lda	#GOSUB_RTN
    885  05b6		       20 a4 2b 	      jsr	pushLN
    886  05b9		       90 03		      bcc	iReadOk
    887  05bb		       4c 31 0c    iReadErr   jmp	ErrStkOver	; Check if there was an error
    888  05be				   iReadOk
    889  05be		       20 c7 2a 	      jsr	ReadComplete
    890  05c1		       4c b1 02 	      jmp	NextIL
    891  05c4		       20 cd 2b 	      jsr	popLN
    892  05c7		       4c b1 02 	      jmp	NextIL
    893  05ca							;=====================================================
    894  05ca							; Get a line of text from the user, convert to a
    895  05ca							; number, leave on top of stack.
    896  05ca							;
    897  05ca				   iINNUM
    898  05ca		       a9 01		      lda	#GOSUB_RTN
    899  05cc		       20 a4 2b 	      jsr	pushLN
    900  05cf		       b0 ea		      bcs	iReadErr	; Stack over flow error
    901  05d1							;
    902  05d1		       a9 3f		      lda	#'?
    903  05d3		       a2 00		      ldx	#0	;Wait for complete
    904  05d5		       20 a7 2a 	      jsr	GetLine
    905  05d8		       20 3c 2a 	      jsr	getDecimal
    906  05db		       20 8a 2b 	      jsr	pushR0	;put onto stack
    907  05de		       b0 db		      bcs	iReadErr	;StackOverflow error
    908  05e0							;
    909  05e0		       4c fc 05 	      jmp	ExitIn
    910  05e3							;
    911  05e3							;=====================================================
    912  05e3							; Get a line of text from the user, convert to a
    913  05e3							; character value , leave on top of stack. up to 2 characters
    914  05e3							;
    915  05e3				   iINSTR
    916  05e3		       a9 01		      lda	#GOSUB_RTN
    917  05e5		       20 a4 2b 	      jsr	pushLN
    918  05e8		       b0 d1		      bcs	iReadErr	; Stack overflow error
    919  05ea		       a9 3f		      lda	#'?
    920  05ec		       a2 00		      ldx	#0	;wait for read complete
    921  05ee		       20 a7 2a 	      jsr	GetLine
    922  05f1		       b1 4f		      lda	(CURPTR),y
    923  05f3		       85 52		      sta	R0
    924  05f5		       a9 00		      lda	#0
    925  05f7		       85 53		      sta	R0+1
    926  05f9		       20 8a 2b 	      jsr	pushR0	;put onto stack
    927  05fc				   ExitIn
    928  05fc		       20 cd 2b 	      jsr	popLN
    929  05ff		       4c b1 02 	      jmp	NextIL
    930  0602							;
    931  0602							;
    932  0602							;=====================================================
    933  0602							; Stop the currently running program.	Actually very
    934  0602							; simple to do... clear the RunMode flag, then set the
    935  0602							; ILPC to the standard handler and continue running.
    936  0602							;
    937  0602		       a9 00	   iFIN       lda	#0
    938  0604		       85 5b		      sta	RunMode
    939  0606		       20 d0 25 	      jsr	taskReset
    940  0609							;
    941  0609		       ad 60 42 	      lda	errGoto
    942  060c		       85 43		      sta	ILPC
    943  060e		       ad 61 42 	      lda	errGoto+1
    944  0611		       85 44		      sta	ILPC+1
    945  0613		       4c b1 02 	      jmp	NextIL
    946  0616							;
    947  0616							;=====================================================
    948  0616							; Handle the ERR opcode.  Following the instruction is
    949  0616							; a 16 bit error number.  Print an error message, and
    950  0616							; if we're in run mode, print the line number.  Stop
    951  0616							; program execution and return to the initial state.
    952  0616							;
    953  0616		       ad 6d 42    iERR       lda	taskIOPending
    954  0619		       f0 03		      beq	iErrNext
    955  061b		       ce 6d 42 	      dec	taskIOPending
    956  061e
    957  061e		       20 8d 29    iErrNext   jsr	getILWord	;get err code
    958  0621		       20 27 06 	      jsr	DisplayError
    959  0624		       4c 80 06 	      jmp	iErrComplete
    960  0627							;
    961  0627							; Enter here with the error code in X (LSB) and A (MSB).
    962  0627							;
    963  0627				   DisplayError
    964  0627		       86 52		      stx	R0
    965  0629		       85 53		      sta	R0+1
    966  062b							;
    967  062b		       20 13 21 	      jsr	puts
      0  062e					      db	CR,LF,"Error ",0
      1  062e		       0d 0a 45 72*	      .byte.b	CR,LF,"Error ",0
    969  0637		       20 42 20 	      jsr	PrintDecimal
    970  063a							;
    971  063a		       a5 5b		      lda	RunMode	;running?
    972  063c		       f0 3b		      beq	iERR3	;nope
    973  063e		       20 13 21 	      jsr	puts
      0  0641					      db	" at line ",0
      1  0641		       20 61 74 20*	      .byte.b	" at line ",0
    975  064b		       a0 01		      ldy	#1	;Changed: Skip the leading length byte
    976  064d				   iErr2a
    977  064d		       b1 4f		      lda	(CURPTR),y
    978  064f		       85 52		      sta	R0
    979  0651		       c8		      iny
    980  0652		       b1 4f		      lda	(CURPTR),y
    981  0654		       85 53		      sta	R0+1
    982  0656		       20 42 20 	      jsr	PrintDecimal
    983  0659		       20 13 21 	      jsr	puts
      0  065c					      db	":",0
      1  065c		       3a 00		      .byte.b	":",0
    985  065e		       a9 00		      lda	#0
    986  0660		       85 53		      sta	R0+1
    987  0662		       a5 51		      lda	CUROFF
    988  0664		       18		      clc
    989  0665		       e9 03		      sbc	#3
    990  0667		       85 52		      sta	R0
    991  0669		       20 42 20 	      jsr	PrintDecimal
    992  066c		       20 13 21 	      jsr	puts
      0  066f					      db	":",0
      1  066f		       3a 00		      .byte.b	":",0
    994  0671		       ad fa 35 	      lda	taskPtr
    995  0674		       85 52		      sta	R0
    996  0676		       20 f6 20 	      jsr	HexToOut
    997  0679							;
    998  0679				   iERR3
    999  0679		       20 d5 2c 	      jsr	CRLF
   1000  067c		       60		      rts
   1001  067d
   1002  067d				   iErr2
   1003  067d		       20 27 06 	      jsr	DisplayError
   1004  0680
   1005  0680				   iErrComplete
   1006  0680		       20 c8 25 	      jsr	taskResetStacks	; some error may cause the main task to point to wrong math stack
   1007  0683		       a9 00		      lda	#0
   1008  0685		       85 5b		      sta	RunMode	; fall through...
   1009  0687							;
   1010  0687							;=====================================================
   1011  0687							; Reset the IL to be back at the idle loop.  Does not
   1012  0687							; clear variables so the user can see what state
   1013  0687							; the program is in.
   1014  0687							;
   1015  0687		       a9 00	   ResetIL    lda	#0
   1016  0689		       85 47		      sta	ILSTACKPTR
   1017  068b		       ad 60 42 	      lda	errGoto
   1018  068e		       85 43		      sta	ILPC
   1019  0690		       ad 61 42 	      lda	errGoto+1
   1020  0693		       85 44		      sta	ILPC+1
   1021  0695		       4c b1 02 	      jmp	NextIL
   1022  0698
   1023  0698							;
   1024  0698							;=====================================================
   1025  0698							; Pop two items off stack, add them, then place the
   1026  0698							; result back onto the stack.
   1027  0698							;
   1028  0698		       20 1c 2c    iADD       jsr	popR0
   1029  069b		       20 34 2c 	      jsr	popR1
   1030  069e				   iADDfast
   1031  069e		       18		      clc
   1032  069f		       a5 52		      lda	R0
   1033  06a1		       65 54		      adc	R1
   1034  06a3		       85 52		      sta	R0
   1035  06a5		       a5 53		      lda	R0+1
   1036  06a7		       65 55		      adc	R1+1
   1037  06a9		       85 53		      sta	R0+1
   1038  06ab		       4c 16 07 	      jmp	pushR0nextIl
   1039  06ae							;
   1040  06ae							;=====================================================
   1041  06ae							; Pop two items off the stack.  Subtract the top of
   1042  06ae							; stack from the lower entry.
   1043  06ae							;
   1044  06ae		       20 34 2c    iSUB       jsr	popR1
   1045  06b1		       20 1c 2c 	      jsr	popR0
   1046  06b4		       38		      sec
   1047  06b5		       a5 52		      lda	R0
   1048  06b7		       e5 54		      sbc	R1
   1049  06b9		       85 52		      sta	R0
   1050  06bb		       a5 53		      lda	R0+1
   1051  06bd		       e5 55		      sbc	R1+1
   1052  06bf		       85 53		      sta	R0+1
   1053  06c1		       4c 16 07 	      jmp	pushR0nextIl
   1054  06c4							;
   1055  06c4							;=====================================================
   1056  06c4							; Negate the top of stack.
   1057  06c4							;
   1058  06c4		       20 1c 2c    iNEG       jsr	popR0
   1059  06c7		       a5 52		      lda	R0
   1060  06c9		       49 ff		      eor	#$ff
   1061  06cb		       85 52		      sta	R0
   1062  06cd		       a5 53		      lda	R0+1
   1063  06cf		       49 ff		      eor	#$ff
   1064  06d1		       85 53		      sta	R0+1
   1065  06d3		       e6 52		      inc	R0
   1066  06d5		       d0 02		      bne	iNEG2
   1067  06d7		       e6 53		      inc	R0+1
   1068  06d9		       4c 16 07    iNEG2      jmp	pushR0nextIl
   1069  06dc							;
   1070  06dc							;=====================================================
   1071  06dc							; Multiply top two items on the stack, put the results
   1072  06dc							; on top.  This uses the algorithm documented on page
   1073  06dc							; 115 of "Microprocessor Programming for Computer
   1074  06dc							; Hobbyists" by Neill Graham.
   1075  06dc							;
   1076  06dc		       20 e2 06    iMUL       jsr	iMultiply
   1077  06df		       4c b1 02 	      jmp	NextIL
   1078  06e2
   1079  06e2				   iMultiply
   1080  06e2		       20 1c 2c 	      jsr	popR0	;AC
   1081  06e5		       20 34 2c 	      jsr	popR1	;OP
   1082  06e8							;
   1083  06e8		       a5 52		      lda	R0
   1084  06ea		       85 56		      sta	MQ
   1085  06ec		       a5 53		      lda	R0+1
   1086  06ee		       85 57		      sta	MQ+1
   1087  06f0		       a9 00		      lda	#0	;clear result
   1088  06f2		       85 52		      sta	R0
   1089  06f4		       85 53		      sta	R0+1
   1090  06f6							;
   1091  06f6		       a2 10		      ldx	#16	;number of bits in value
   1092  06f8		       06 52	   multloop   asl	R0
   1093  06fa		       26 53		      rol	R0+1
   1094  06fc		       06 56		      asl	MQ
   1095  06fe		       26 57		      rol	MQ+1
   1096  0700		       90 0d		      bcc	multno	;skip add if no carry
   1097  0702							;
   1098  0702							; Add R1 back into R0
   1099  0702							;
   1100  0702		       18		      clc
   1101  0703		       a5 52		      lda	R0
   1102  0705		       65 54		      adc	R1
   1103  0707		       85 52		      sta	R0
   1104  0709		       a5 53		      lda	R0+1
   1105  070b		       65 55		      adc	R1+1
   1106  070d		       85 53		      sta	R0+1
   1107  070f							;
   1108  070f		       ca	   multno     dex		;did all bits yet?
   1109  0710		       d0 e6		      bne	multloop
   1110  0712		       20 8a 2b 	      jsr	pushR0	;OP
   1111  0715		       60		      rts
   1112  0716							;
   1113  0716				   pushR0nextIl
   1114  0716		       20 8a 2b 	      jsr	pushR0	;OP
   1115  0719		       4c b1 02 	      jmp	NextIL
   1116  071c							;
   1117  071c							;=====================================================
   1118  071c							; Divide the top of stack into the next to top item.
   1119  071c							; Leave results on stack.  Taken from:
   1120  071c							; http://codebase64.org/doku.php?id=base:16bit_division_16-bit_result
   1121  071c							;
   1122  071c							; R0 = R0 / R1
   1123  071c							; Remainder is in MQ
   1124  071c							;
   1125  071c		       20 36 07    iDIV       jsr	iDoDiv
   1126  071f		       20 9d 2c 	      jsr	RestoreSigns
   1127  0722		       4c 16 07 	      jmp	pushR0nextIl
   1128  0725
   1129  0725		       20 36 07    iMOD       jsr	iDoDiv
   1130  0728		       20 9d 2c 	      jsr	RestoreSigns
   1131  072b		       a5 56		      lda	MQ
   1132  072d		       85 52		      sta	R0
   1133  072f		       a5 57		      lda	MQ+1
   1134  0731		       85 53		      sta	R0+1
   1135  0733		       4c 16 07 	      jmp	pushR0nextIl
   1136  0736
   1137  0736				   iDoDiv
   1138  0736		       20 34 2c 	      jsr	popR1
   1139  0739		       20 1c 2c 	      jsr	popR0
   1140  073c							;
   1141  073c							; Check for divide by zero
   1142  073c							;
   1143  073c
   1144  073c				   iDivNoPop
   1145  073c		       a5 54		      lda	R1
   1146  073e		       05 55		      ora	R1+1
   1147  0740		       f0 29		      beq	divby0
   1148  0742							;
   1149  0742		       20 62 2c 	      jsr	SaveSigns
   1150  0745		       a9 00		      lda	#0	;preset remainder to 0
   1151  0747		       85 56		      sta	MQ
   1152  0749		       85 57		      sta	MQ+1
   1153  074b		       a2 10		      ldx	#16	;repeat for each bit: ...
   1154  074d				   divloop
   1155  074d		       06 52		      asl	R0	;dividend lb & hb*2, msb -> Carry
   1156  074f		       26 53		      rol	R0+1
   1157  0751		       26 56		      rol	MQ	;remainder lb & hb * 2 + msb from carry
   1158  0753		       26 57		      rol	MQ+1
   1159  0755		       a5 56		      lda	MQ
   1160  0757		       38		      sec
   1161  0758		       e5 54		      sbc	R1	;substract divisor to see if it fits in
   1162  075a		       a8		      tay		;lb result -> Y, for we may need it later
   1163  075b		       a5 57		      lda	MQ+1
   1164  075d		       e5 55		      sbc	R1+1
   1165  075f		       90 06		      bcc	skip	;if carry=0 then divisor didn't fit in yet
   1166  0761
   1167  0761		       85 57		      sta	MQ+1	;else save substraction result as new remainder,
   1168  0763		       84 56		      sty	MQ
   1169  0765		       e6 52		      inc	R0	;and INCrement result cause divisor fit in 1 times
   1170  0767
   1171  0767		       ca	   skip       dex
   1172  0768		       d0 e3		      bne	divloop
   1173  076a		       60		      rts
   1174  076b							;
   1175  076b							; Indicate divide-by-zero error
   1176  076b							;
   1177  076b		       a2 06	   divby0     ldx	#ERR_DIVIDE_ZERO
   1178  076d		       a9 00		      lda	#0
   1179  076f		       4c 7d 06 	      jmp	iErr2
   1180  0772							;
   1181  0772							;=====================================================
   1182  0772							; This pops the top two items off the stack.  The top
   1183  0772							; item is a data value and the other is an ABSOLUTE address.
   1184  0772							; Save the value into that address.
   1185  0772							;
   1186  0772		       98	   iSTORE     tya
   1187  0773		       48		      pha
   1188  0774		       20 1c 2c 	      jsr	popR0	;data
   1189  0777		       20 34 2c 	      jsr	popR1	;Storage location
   1190  077a		       a0 01		      ldy	#1
   1191  077c		       a5 58		      lda	R2
   1192  077e		       c9 a2		      cmp	#tByte
   1193  0780		       f0 04		      beq	iStoreB
   1194  0782				   iStoreW
   1195  0782		       a5 53		      lda	R0+1
   1196  0784		       91 54		      sta	(R1),y
   1197  0786				   iStoreB
   1198  0786		       a5 52		      lda	R0
   1199  0788		       88		      dey
   1200  0789		       91 54		      sta	(R1),y
   1201  078b		       68		      pla
   1202  078c		       a8		      tay
   1203  078d		       4c b1 02 	      jmp	NextIL
   1204  0790							;
   1205  0790							;=====================================================
   1206  0790							; Replaces the top of stack with the Value
   1207  0790							; of the variable  whose absolute address it represents.
   1208  0790							;
   1209  0790
   1210  0790		       98	   iIND       tya
   1211  0791		       48		      pha
   1212  0792		       20 34 2c 	      jsr	popR1
   1213  0795		       a0 01		      ldy	#1
   1214  0797		       a5 58		      lda	R2
   1215  0799		       c9 a4		      cmp	#tInteger
   1216  079b		       f0 04		      beq	iINDW
   1217  079d				   iINDB
   1218  079d		       a9 00		      lda	#0
   1219  079f		       f0 02		      BEQ	iINDC
   1220  07a1				   iINDW
   1221  07a1		       b1 54		      lda	(R1),y
   1222  07a3				   iINDC
   1223  07a3		       85 53		      sta	R0+1
   1224  07a5		       88		      dey
   1225  07a6		       b1 54		      lda	(R1),y
   1226  07a8		       85 52		      sta	R0
   1227  07aa		       68		      pla
   1228  07ab		       a8		      tay
   1229  07ac		       4c 16 07 	      jmp	pushR0nextIl
   1230  07af
   1231  07af							;
   1232  07af							;=====================================================
   1233  07af							; Check which type of index to use byte or word and jmp to correct
   1234  07af							; function
   1235  07af		       98	   iArray     tya
   1236  07b0		       48		      pha
   1237  07b1
   1238  07b1		       20 1c 2c 	      jsr	popR0	; Get the array index
   1239  07b4		       20 34 2c 	      jsr	popR1	; Get the Variable address
   1240  07b7
   1241  07b7		       20 91 29 	      jsr	getILByte	; Get type of number to process
   1242  07ba		       c9 81		      cmp	#GOSUB_RTN_VALUE	; Are we testing a valid parameter
   1243  07bc		       f0 52		      beq	iArrayFNparm	; process a fn pramater index
   1244  07be
   1245  07be		       29 fe		      and	#$FE	; Turn off the unsigned bit
   1246  07c0		       c9 a2		      cmp	#tByte	; Test for a byte index
   1247  07c2		       f0 10		      beq	iArrayB	; yes so branch to process a byte
   1248  07c4							;=====================================================
   1249  07c4							; Process 32 bit index into memory
   1250  07c4		       c9 a6	   iArrayL    cmp	#tLong	; Are we working with 32 bit integers
   1251  07c6		       d0 06		      bne	iArrayW	; Process with sigle shift
   1252  07c8		       06 52		      asl	R0	; Do the multiply by 2
   1253  07ca		       26 53		      rol	R0+1	; Indexes can by up to max memory
   1254  07cc		       b0 39		      bcs	iArrayError	; if the carry is set we have an error
   1255  07ce							;=====================================================
   1256  07ce							; Get the array index from top of stack get Current variable
   1257  07ce							; address from next on stack, add the offset
   1258  07ce							; push the result back onto the stack
   1259  07ce				   iArrayW		; pointers, arrays etc all use 16 bit unsigned integers
   1260  07ce		       06 52		      asl	R0	; Do the multiply by 2
   1261  07d0		       26 53		      rol	R0+1	; Indexes can by up to max memory
   1262  07d2		       b0 33		      bcs	iArrayError	; if the carry is set we have an error
   1263  07d4
   1264  07d4							;=====================================================
   1265  07d4							; Get from Byte array not Integer array
   1266  07d4				   iArrayB
   1267  07d4		       18		      clc
   1268  07d5		       a5 54		      lda	R1	; Add the index onto the variable pointer
   1269  07d7		       65 52		      adc	R0
   1270  07d9		       85 52		      sta	R0
   1271  07db		       a5 55		      lda	R1+1
   1272  07dd		       65 53		      adc	R0+1
   1273  07df		       85 53		      sta	R0+1	; The new Variable Address is stored in R0
   1274  07e1		       a5 55		      lda	R1+1
   1275  07e3		       cd 72 42 	      cmp	ProgramEnd+1	; lets check if we are processing an @ buffer pointer to free memory
   1276  07e6		       d0 08		      bne	iArrayCheckVar
   1277  07e8				   iArrayExit
   1278  07e8		       20 8a 2b 	      jsr	pushR0	; Push R0 assume it is correct
   1279  07eb
   1280  07eb		       68		      pla
   1281  07ec		       a8		      tay
   1282  07ed		       4c b1 02 	      jmp	NextIL
   1283  07f0							; Check for valis variable and valid index to use
   1284  07f0		       a5 41	   iArrayCheckVar lda	VARIABLES
   1285  07f2		       18		      clc
   1286  07f3		       69 33		      adc	#[25*2]+1	; the number of actual variable valid bytes
   1287  07f5		       85 56		      sta	MQ	; mq contains the last valid byte we can use
   1288  07f7		       a9 00		      lda	#0
   1289  07f9		       65 42		      adc	VARIABLES+1	; Memory past last word R0+1 > A then invalid
   1290  07fb		       c5 53		      cmp	R0+1
   1291  07fd		       90 08		      bcc	iArrayError
   1292  07ff		       a5 52		      lda	R0	; a > m invalid past last byte of variable area
   1293  0801		       c5 56		      cmp	MQ
   1294  0803		       f0 e3		      beq	iArrayExit	; If it is equal then it is valid
   1295  0805		       90 e1		      bcc	iArrayExit	; if it is less it is valid
   1296  0807
   1297  0807							; Get here if array index is out of range
   1298  0807		       68	   iArrayError pla
   1299  0808		       98		      tya
   1300  0809		       a9 00		      lda	#0
   1301  080b		       a2 0f		      ldx	#ERR_INDEX_OUT_OF_RANGE
   1302  080d		       4c 7d 06 	      jmp	iErr2
   1303  0810							;=====================================================
   1304  0810							; Verify function paramater index is valid
   1305  0810		       20 1e 25    iArrayFNparm jsr	GosubFindParms	; Get a pointer to the current functions parameter list info
   1306  0813		       90 f2		      bcc	iArrayError	; There are no paramters for this call, should never be true
   1307  0815		       88		      dey
   1308  0816		       88		      dey		; Points to parameter count
   1309  0817		       a5 52		      lda	R0	; get parm to be accessed
   1310  0819		       d1 4b		      cmp	(GOSUBSTACK),y	; compare to max number allowed
   1311  081b		       b0 ea		      bcs	iArrayError	; the parameter index should be less than the count
   1312  081d		       06 52		      asl	R0	; Do the multiply by 2
   1313  081f		       26 53		      rol	R0+1
   1314  0821
   1315  0821		       18		      clc
   1316  0822		       a5 54		      lda	R1	; Add the index onto the variable pointer
   1317  0824		       65 52		      adc	R0
   1318  0826		       85 52		      sta	R0
   1319  0828		       a5 55		      lda	R1+1
   1320  082a		       65 53		      adc	R0+1
   1321  082c		       85 53		      sta	R0+1	; The new Variable Address is stored in R0
   1322  082e		       4c e8 07 	      jmp	iArrayExit	; Get ot we are done
   1323  0831							;
   1324  0831							;=====================================================
   1325  0831							; List the current BASIC program in memory.  Uses R0,
   1326  0831							; tempIly, and dpl.
   1327  0831							;
   1328  0831		       20 1c 2e    iLST       jsr	SetOutConsole
   1329  0834		       ad 6f 42    iLST2      lda	ProgramStart
   1330  0837		       85 59		      sta	dpl
   1331  0839		       ad 70 42 	      lda	ProgramStart+1
   1332  083c		       85 5a		      sta	dpl+1
   1333  083e							;
   1334  083e							; dpl/dph point to the current line.  See if we're at
   1335  083e							; the end of the program.
   1336  083e							;
   1337  083e		       a5 59	   iLSTloop   lda	dpl
   1338  0840		       cd 71 42 	      cmp	ProgramEnd
   1339  0843		       d0 07		      bne	iLstNotEnd
   1340  0845		       a5 5a		      lda	dpl+1
   1341  0847		       cd 72 42 	      cmp	ProgramEnd+1
   1342  084a		       f0 15		      beq	iLstdone
   1343  084c							;
   1344  084c		       20 ab 21    iLstNotEnd jsr	PrintProgramLine
   1345  084f							;		  ldy	  #1		  ;Change:  Skip first byte length
   1346  084f							;		  lda	  (dpl),y	  ;line number LSB
   1347  084f							;		  sta	  R0
   1348  084f							;		  iny
   1349  084f							;		  lda	  (dpl),y		 ;line number MSB
   1350  084f							;		  sta	  R0+1
   1351  084f							;		  iny
   1352  084f							;		  sty	  tempIlY
   1353  084f							;		  jsr	  PrintDecimal
   1354  084f							;		  lda	  #SPACE
   1355  084f							;		  jsr	  VOUTCH
   1356  084f							;		  ldy	  tempIlY
   1357  084f							;iLSTl2	  lda	  (dpl),y
   1358  084f							;		  beq	  iLST3 	  ;end of this line 0 value
   1359  084f							;		  sty	  tempIlY
   1360  084f							;		  jsr	  VOUTCH
   1361  084f							;		  ldy	  tempIlY
   1362  084f							;		  iny
   1363  084f							;		  bne	  iLSTl2	  ;do next char
   1364  084f							;
   1365  084f							; End of this line.  Print CR/LF, then move to the
   1366  084f							; next line.
   1367  084f							;
   1368  084f		       a0 00	   iLST3      ldy	#0	;Move to next line
   1369  0851		       b1 59		      lda	(dpl),y	;Current line length
   1370  0853		       18		      clc		;Clear the carry flag
   1371  0854							;		  tya
   1372  0854		       65 59		      adc	dpl	;Add the offset to the pointer
   1373  0856		       85 59		      sta	dpl	;Save the new value
   1374  0858		       a5 5a		      lda	dpl+1	;Next byte
   1375  085a		       69 00		      adc	#0	;ad in the carry if any
   1376  085c		       85 5a		      sta	dpl+1	;Save it
   1377  085e							;
   1378  085e							; Have to manually do CR/LF so it uses the vectored
   1379  085e							; output function.
   1380  085e							;
   1381  085e							;		  lda	  #CR
   1382  085e							;		  jsr	  VOUTCH
   1383  085e							;		  lda	  #LF
   1384  085e							;		  jsr	  VOUTCH
   1385  085e		       4c 3e 08 	      jmp	iLSTloop	;do next line
   1386  0861							;
   1387  0861		       20 1c 2e    iLstdone   jsr	SetOutConsole
   1388  0864		       4c b1 02 	      jmp	NextIL
   1389  0867							;
   1390  0867							;=====================================================
   1391  0867							; Get a line of text into LINBUF.  Terminate with a
   1392  0867							; null byte.
   1393  0867							;
   1394  0867				   iGETLINE
   1395  0867		       a9 3e		      lda	#'>	;prompt character
   1396  0869		       a6 00		      ldx	0	;Wait for read to complete
   1397  086b		       20 a7 2a 	      jsr	GetLine
   1398  086e							;
   1399  086e		       a9 00		      lda	#0
   1400  0870		       85 5b		      sta	RunMode
   1401  0872				   iGetParseLine
   1402  0872							; lda	   CUROFF
   1403  0872							; pha
   1404  0872		       20 bd 1c 	      jsr	ParseInputLine
   1405  0875							; pla
   1406  0875							;  sta     CUROFF
   1407  0875		       a9 ba		      lda	#TOKENBUFFER&$FF
   1408  0877		       85 4f		      sta	CURPTR
   1409  0879		       a9 1b		      lda	#TOKENBUFFER>>8
   1410  087b		       85 50		      sta	CURPTR+1
   1411  087d		       a9 01		      lda	#1
   1412  087f		       85 51		      sta	CUROFF
   1413  0881		       4c b1 02 	      jmp	NextIL
   1414  0884							;
   1415  0884							;=====================================================
   1416  0884							; This is called when the input buffer contains a line
   1417  0884							; typed in by the user that starts with a line number.
   1418  0884							; Insert the line into the program or delete the line
   1419  0884							; if there is nothing after the line number,
   1420  0884							;
   1421  0884				   iINSRT		; On entry here the TOKEBUFFER contains the Parsed input line completely
   1422  0884		       ad bb 1b 	      lda	TOKENBUFFER+1	; Get the first byte of the line number
   1423  0887		       85 52		      sta	R0	; place the number into R0
   1424  0889		       ad bc 1b 	      lda	TOKENBUFFER+2	; Get hi byte of line number
   1425  088c		       85 53		      STA	R0+1	; Place it into
   1426  088e							;
   1427  088e							; Now find the line OR the next higher line OR the
   1428  088e							; end of the program.
   1429  088e							;
   1430  088e		       20 d6 29 	      jsr	findLine	; Look for the line number in the current program
   1431  0891							; Returns Z and curptr point to the line if found
   1432  0891							; Returns C and curptr at next higher line if not found and there is a higher line
   1433  0891							; Returns ZC clear and curptr to end of program if higher than all other lines
   1434  0891							;
   1435  0891							; If the line exists, it needs to be removed.
   1436  0891							;
   1437  0891		       d0 44		      bne	insert2	;jump if no line found higer or a higher line number found, at end of program curptr points to program end
   1438  0893							;
   1439  0893							; Get length of line to be removed, we fall thru to here if we find a matching line
   1440  0893							;
   1441  0893							;		 jsr	 getCURPTRLength ;results in Y , curptr is pointing to point we need to insert the line
   1442  0893		       a0 00		      ldy	#0
   1443  0895		       b1 4f		      lda	(CURPTR),y	;Change the length is now at beginning of the line
   1444  0897		       a8		      tay
   1445  0898							;If it is equal we delete the line and replace it, get length
   1446  0898							;then adjust all program line after up or down depending on len of line
   1447  0898							;If next higher then just move everythimg down by length bytes
   1448  0898							;This call will return how many bytes in the line we found
   1449  0898		       8c 6c 42 	      sty	lineLength	;Save the length of the line we found
   1450  089b							;
   1451  089b							; Compute the new end of the program first.
   1452  089b							;
   1453  089b		       38		      sec		;Set the carry bit
   1454  089c		       ad 71 42 	      lda	ProgramEnd	;Get low byte of program end
   1455  089f		       ed 6c 42 	      sbc	lineLength	;Subtract the length of the current line
   1456  08a2		       8d 71 42 	      sta	ProgramEnd	;save it
   1457  08a5		       ad 72 42 	      lda	ProgramEnd+1
   1458  08a8		       e9 00		      sbc	#0	;Process the carry
   1459  08aa		       8d 72 42 	      sta	ProgramEnd+1	;We now have the new end of program with the line removed
   1460  08ad							;
   1461  08ad							; Copy CURPTR into R1 for working
   1462  08ad							;
   1463  08ad		       a5 4f		      lda	CURPTR	;Save the current position to r1 copy destination
   1464  08af		       85 54		      sta	R1
   1465  08b1		       a5 50		      lda	CURPTR+1
   1466  08b3		       85 55		      sta	R1+1
   1467  08b5							;
   1468  08b5							; See if we're at the end.
   1469  08b5							;
   1470  08b5		       a5 54	   InsDelChk  lda	R1	;Compare the copy dest to end of memory to check if we are finished copy
   1471  08b7		       cd 71 42 	      cmp	ProgramEnd
   1472  08ba		       d0 07		      bne	InsDelLoop
   1473  08bc		       a5 55		      lda	R1+1
   1474  08be		       cd 72 42 	      cmp	ProgramEnd+1
   1475  08c1		       f0 14		      beq	insert2	;Now the existing line was removed lets go insert the new line
   1476  08c3							;
   1477  08c3							; Move one byte, move to next location.
   1478  08c3							;
   1479  08c3		       ac 6c 42    InsDelLoop ldy	lineLength	;Move a byte up to remove the space
   1480  08c6		       f0 0f		      beq	insert2	;if this is zero it is a big oops
   1481  08c8		       b1 54		      lda	(R1),y
   1482  08ca		       a0 00		      ldy	#0
   1483  08cc		       91 54		      sta	(R1),y
   1484  08ce		       e6 54		      inc	R1
   1485  08d0		       d0 e3		      bne	InsDelChk
   1486  08d2		       e6 55		      inc	R1+1
   1487  08d4		       4c b5 08 	      jmp	InsDelChk	; Check if we have moved the last byte
   1488  08d7							;
   1489  08d7							; Deletion is done.
   1490  08d7							; If the new line is empty we're done.  Now we have to open a space for the line we are inserting
   1491  08d7							;
   1492  08d7				   insert2		; ldy	   offset		; get back ptr	Get the current offset
   1493  08d7		       ad ba 1b 	      lda	TOKENBUFFER	; Get the length
   1494  08da		       c9 04		      cmp	#4	; empty lines only have 4 bytes { len(1), linenum(2) ,null(1) }
   1495  08dc							;		 lda	 LINBUF,y	      ;next byte     Get the next byte to be stored
   1496  08dc		       f0 54		      beq	mvUpFini	;empty line	if there is a null then we were deleting a line, no content
   1497  08de							;
   1498  08de							; CURPTR points to where the line will be inserted.
   1499  08de							;
   1500  08de							;		 jsr	 getLineLength	 ;get bytes needed Reload the number of bytes required for the new line
   1501  08de		       ae ba 1b 	      ldx	TOKENBUFFER
   1502  08e1		       8e 6c 42 	      stx	lineLength	; So update, the TOKENBUFFER already has the line length
   1503  08e4							;
   1504  08e4		       ad 71 42 	      lda	ProgramEnd	;Load the start address for the copy
   1505  08e7							;At this point curptr still contains the location we will insert data
   1506  08e7		       85 5c		      sta	FROM
   1507  08e9		       ad 72 42 	      lda	ProgramEnd+1
   1508  08ec		       85 5d		      sta	FROM+1
   1509  08ee							;
   1510  08ee		       a0 00	   mvup1      ldy	#0	;always zero from From copy position to use indirect addressing
   1511  08f0		       b1 5c		      lda	(FROM),y
   1512  08f2		       ac 6c 42 	      ldy	lineLength	;Now load y with new offset downward to store the byte
   1513  08f5		       91 5c		      sta	(FROM),y	;Save the new byte
   1514  08f7							;
   1515  08f7		       a5 5c		      lda	FROM	;Check if we have copied the last byte
   1516  08f9		       c5 4f		      cmp	CURPTR
   1517  08fb		       d0 06		      bne	mvUpMore
   1518  08fd		       a5 5d		      lda	FROM+1
   1519  08ff		       c5 50		      cmp	CURPTR+1
   1520  0901		       f0 0b		      beq	mvUpDone	; yes from now equals curptr where we insert the new line
   1521  0903							;
   1522  0903							; Not done yet
   1523  0903							;
   1524  0903		       a5 5c	   mvUpMore   lda	FROM	;decrement FROM to copy the next byte
   1525  0905		       d0 02		      bne	mvUpMore2
   1526  0907		       c6 5d		      dec	FROM+1
   1527  0909		       c6 5c	   mvUpMore2  dec	FROM
   1528  090b		       4c ee 08 	      jmp	mvup1	;Loop until everything is moved
   1529  090e							;
   1530  090e							; All done with copy.
   1531  090e							;
   1532  090e				   mvUpDone
   1533  090e		       18		      clc		;Ok, We are now ready to copy the new line to the program
   1534  090f		       ad 6c 42 	      lda	lineLength	;Number of bytes to copy from line buff
   1535  0912		       6d 71 42 	      adc	ProgramEnd	;Now pdate the end of program address for space we just opened
   1536  0915		       8d 71 42 	      sta	ProgramEnd
   1537  0918		       ad 72 42 	      lda	ProgramEnd+1
   1538  091b		       69 00		      adc	#0
   1539  091d		       8d 72 42 	      sta	ProgramEnd+1	;Program end now points to the correct enpty space
   1540  0920							;
   1541  0920							;===================jlit use length before line newline
   1542  0920
   1543  0920		       a0 00		      ldy	#0	;Set offset of copy
   1544  0922							;		  lda	  lineLength	  ;We will insert the actual length of the line first
   1545  0922							;		  sta	  (CURPTR),y	  ;Store the length
   1546  0922							;		  iny
   1547  0922							;		  lda	  R0		  ;Store the line number next
   1548  0922							;		  sta	  (CURPTR),y
   1549  0922							;		  iny
   1550  0922							;		  lda	  R0+1
   1551  0922							;		  sta	  (CURPTR),y
   1552  0922							;		  iny
   1553  0922							;
   1554  0922							;		  ldx	  offset	 ; Load the offset into line buffer in page zero
   1555  0922		       a2 00		      ldx	#0	; the token buffer is ready to copy
   1556  0924				   mvUpLoop2
   1557  0924							;		  lda	  LINBUF,x	 ;get a byte
   1558  0924		       bd ba 1b 	      lda	TOKENBUFFER,x	;get a byte
   1559  0927		       91 4f		      sta	(CURPTR),y	;Store into Space opened, copies the closing null as well
   1560  0929
   1561  0929		       e8		      inx
   1562  092a		       ec ba 1b 	      cpx	TOKENBUFFER	; Check if we have copied all that we need to
   1563  092d		       b0 03		      bcs	mvUpFini	;hit the null at end of line then we are done
   1564  092f		       c8		      iny
   1565  0930		       d0 f2		      bne	mvUpLoop2	;in case y wraps past 256 bytes stop
   1566  0932							;
   1567  0932		       4c b1 02    mvUpFini   jmp	NextIL
   1568  0935							;
   1569  0935							;=====================================================
   1570  0935							; Pops the top value of the ILPC stack and stores it
   1571  0935							; in ILPC.  Ie, return from an IL subroutine.
   1572  0935							;
   1573  0935		       20 c4 29    iRTN       jsr	popILPC
   1574  0938		       4c b1 02 	      jmp	NextIL
   1575  093b							;
   1576  093b							;=====================================================
   1577  093b							; NLINE print a newline
   1578  093b							;
   1579  093b		       20 d5 2c    iNLINE     jsr	CRLF	;user supplied sub
   1580  093e		       4c b1 02 	      jmp	NextIL
   1581  0941							;
   1582  0941							;=====================================================
   1583  0941							; This saves the current ILPC value on the stack, then
   1584  0941							; jumps to the address specified by the next two bytes.
   1585  0941							;
   1586  0941		       20 a7 29    iCALL      jsr	pushILPC	;save ILPC
   1587  0944		       90 07		      bcc	iJMP
   1588  0946
   1589  0946							;If the push failed not enough stack space
   1590  0946		       a2 15	   ErrILStkOver ldx	#ERR_IL_STACK_OVER_FLOW	; Flag any error in line number
   1591  0948		       a9 00		      lda	#0	; stop the execution
   1592  094a		       4c 7d 06 	      jmp	iErr2
   1593  094d							;
   1594  094d							; Jmp to a specific location in the IL code.  The new
   1595  094d							; address immediately follows the opcode.
   1596  094d							;
   1597  094d		       20 8d 29    iJMP       jsr	getILWord
   1598  0950		       86 43		      stx	ILPC
   1599  0952		       85 44		      sta	ILPC+1
   1600  0954		       4c b1 02 	      jmp	NextIL
   1601  0957
   1602  0957
   1603  0957							;
   1604  0957							;=====================================================
   1605  0957							; Push the next two bytes onto the arithmetic stack.
   1606  0957							;
   1607  0957		       20 91 29    iSetR2     jsr	getILByte
   1608  095a		       85 58		      sta	R2
   1609  095c		       4c b1 02 	      jmp	NextIL
   1610  095f							;
   1611  095f							;=====================================================
   1612  095f							; Push the next two bytes onto the arithmetic stack.
   1613  095f							;
   1614  095f		       20 8d 29    iLIT       jsr	getILWord
   1615  0962		       86 52		      stx	R0
   1616  0964		       85 53		      sta	R0+1
   1617  0966		       20 8a 2b 	      jsr	pushR0
   1618  0969		       4c b1 02 	      jmp	NextIL
   1619  096c							;
   1620  096c							;=====================================================
   1621  096c							; Initialize all variables for a single task.	Ie, set to zero.
   1622  096c							; And internal stack pointers
   1623  096c							;
   1624  096c		       98	   subVINIT   tya
   1625  096d		       48		      pha
   1626  096e
   1627  096e		       a9 00		      lda	#0
   1628  0970		       a0 00		      ldy	#0
   1629  0972		       91 41	   Vinit2     sta	(VARIABLES),y
   1630  0974		       c8		      iny
   1631  0975		       c0 48		      cpy	#[[VARIABLESSIZE * 2] - 2]	; skip the old exit code
   1632  0977		       90 f9		      bcc	Vinit2
   1633  0979		       85 4a		      sta	MATHSTACKPTR	; Clear the math stack
   1634  097b		       85 4d		      sta	GOSUBSTACKPTR	; Clear the gosub stack
   1635  097d		       a9 38		      lda	#[[GOSUBSTACKSIZE - 2] * 4]	; Reset the message queue
   1636  097f		       85 4e		      STA	MESSAGEPTR
   1637  0981
   1638  0981		       68		      pla
   1639  0982		       a8		      tay
   1640  0983		       60		      rts
   1641  0984
   1642  0984				   iVINIT
   1643  0984		       20 6c 09 	      jsr	subVINIT
   1644  0987		       20 4d 1f 	      jsr	Compile	; compile line numbers to memory pointers
   1645  098a		       4c b1 02 	      jmp	NextIL
   1646  098d							;
   1647  098d							;=====================================================
   1648  098d							; Set the address of the error handler.  After any
   1649  098d							; error, set to the ILPC to the specified location.
   1650  098d							;
   1651  098d		       20 8d 29    iERRGOTO   jsr	getILWord
   1652  0990		       8e 60 42 	      stx	errGoto
   1653  0993		       8d 61 42 	      sta	errGoto+1
   1654  0996		       4c b1 02 	      jmp	NextIL
   1655  0999							;
   1656  0999							;=====================================================
   1657  0999							; TST is followed by an 8 bit signed offset, then a
   1658  0999							; null terminated string.  Compare the string against
   1659  0999							; the string starting at (CURPTR),CUROFF.  If the
   1660  0999							; strings match, continue executing the next IL
   1661  0999							; opcode.  Else, add the offset to ILPC.
   1662  0999							;
   1663  0999		       20 91 29    iTST       jsr	getILByte	;Get the relative jump address
   1664  099c		       8d 6b 42 	      sta	offset	;save it to use if test faile
   1665  099f		       20 74 2b 	      jsr	saveIL	;in case of failure, to restore before jump calculation
   1666  09a2
   1667  09a2		       a4 51		      ldy	CUROFF
   1668  09a4		       84 59		      sty	dpl	;save for later
   1669  09a6							;
   1670  09a6		       20 91 29    iTSTloop   jsr	getILByte	;get next char
   1671  09a9		       f0 11		      beq	iTSTm	;match!
   1672  09ab		       a4 59		      ldy	dpl
   1673  09ad		       d1 4f		      cmp	(CURPTR),y
   1674  09af		       f0 06		      beq	iTSTUpper	; JLIT added 02/08/2022
   1675  09b1		       09 20		      ora	#$20	; lets allow lowercase as well
   1676  09b3		       d1 4f		      cmp	(CURPTR),y
   1677  09b5		       d0 23		      bne	iTSTfail	;mismatch
   1678  09b7		       c8	   iTSTUpper  iny
   1679  09b8		       84 59		      sty	dpl
   1680  09ba		       d0 ea		      bne	iTSTloop
   1681  09bc							;
   1682  09bc							; It's a match!  Clean up a bit.
   1683  09bc							;
   1684  09bc		       a4 59	   iTSTm      ldy	dpl
   1685  09be		       84 51		      sty	CUROFF
   1686  09c0		       4c b1 02 	      jmp	NextIL
   1687  09c3
   1688  09c3							; Test for a single quote string
   1689  09c3		       20 91 29    iTSTStr    jsr	getILByte
   1690  09c6		       8d 6b 42 	      sta	offset
   1691  09c9		       20 74 2b 	      jsr	saveIL
   1692  09cc		       a4 51		      ldy	CUROFF
   1693  09ce		       a9 22		      lda	#'"
   1694  09d0		       d1 4f		      cmp	(CURPTR),y
   1695  09d2		       d0 06		      bne	iTSTfail
   1696  09d4		       c8		      iny
   1697  09d5		       84 51		      sty	CUROFF
   1698  09d7		       4c d4 02 	      jmp	NextILStr
   1699  09da							;
   1700  09da							; Not a match, reset ILPC and then move to the
   1701  09da							; offset.
   1702  09da							;
   1703  09da		       20 7f 2b    iTSTfail   jsr	restoreIL
   1704  09dd		       4c d7 0b 	      jmp	tstBranch
   1705  09e0							;
   1706  09e0							;=================================================JLIT=
   1707  09e0							; Test if we have a let statement without the let keyword
   1708  09e0		       20 91 29    iTSTLET    jsr	getILByte	; Get the relative offset byte
   1709  09e3		       8d 6b 42 	      sta	offset	; Save the jump offset for fails
   1710  09e6		       20 74 2b 	      jsr	saveIL	; save to restore when done if fail
   1711  09e9
   1712  09e9		       a4 51		      ldy	CUROFF	; Get the current offset into the buffer
   1713  09eb		       b1 4f		      lda	(CURPTR),y	; Get the byte
   1714  09ed		       c9 01		      cmp	#kLet	; Is it a let keyword
   1715  09ef		       f0 0a		      beq	iTSTLETGOOD	; We have a good let statement
   1716  09f1		       c9 80		      cmp	#tVa	; lets check for a variable
   1717  09f3		       90 e5		      bcc	iTSTfail	; Less than variable range
   1718  09f5		       c9 9e		      cmp	#tVat+1	; Test if it is greater that the last variable
   1719  09f7		       90 05		      bcc	iTSTGOODVAR	; No it failed get out Fast
   1720  09f9		       b0 df		      bcs	iTSTfail	; return it failed
   1721  09fb
   1722  09fb				   iTSTLETGOOD
   1723  09fb		       c8		      iny
   1724  09fc		       84 51		      sty	CUROFF	; If it was a let then inc past the let word
   1725  09fe				   iTSTGOODVAR
   1726  09fe		       4c b1 02 	      jmp	NextIL	; Then next instruction
   1727  0a01
   1728  0a01							;=================================================JLIT=
   1729  0a01							; Test a byte at an indirect address
   1730  0a01							; fails if byte is not equal to the value at the address
   1731  0a01							; The tests an indirect byte and branches if true
   1732  0a01		       20 91 29    iTSTBYTE   jsr	getILByte	; Get the relative offset byte
   1733  0a04		       8d 6b 42 	      sta	offset	; Save the jump offset for fails
   1734  0a07		       20 74 2b 	      jsr	saveIL	; save to restore when done if fail
   1735  0a0a		       20 8d 29 	      jsr	getILWord	; Get a word into RO
   1736  0a0d		       86 52		      stx	R0
   1737  0a0f		       85 53		      sta	R0+1
   1738  0a11		       20 91 29 	      jsr	getILByte	; Get byte into A
   1739  0a14		       a0 00		      ldy	#0
   1740  0a16		       d1 52		      cmp	(R0),y
   1741  0a18		       d0 03		      bne	iTSTByteNotEqual
   1742  0a1a		       4c da 09 	      jmp	iTSTfail
   1743  0a1d
   1744  0a1d				   iTSTByteNotEqual
   1745  0a1d		       4c b1 02 	      jmp	NextIL	; Then next instruction
   1746  0a20
   1747  0a20							;=================================================JLIT=
   1748  0a20							; Test a byte	branch if it fails
   1749  0a20		       20 91 29    iTSTB      jsr	getILByte	; Get the relative offset byte
   1750  0a23		       8d 6b 42 	      sta	offset	; Save the jump offset for fails
   1751  0a26		       20 74 2b 	      jsr	saveIL	; save to restore when done if fail
   1752  0a29		       20 91 29 	      jsr	getILByte	; Get a byte into Acc
   1753  0a2c		       a4 51		      ldy	CUROFF	; Get offset in the stream
   1754  0a2e		       d1 4f		      cmp	(CURPTR),y
   1755  0a30		       f0 03		      beq	iTSTBMatch	; Yes it matched move on
   1756  0a32		       4c da 09 	      jmp	iTSTfail	; REcover and move on to next test
   1757  0a35
   1758  0a35				   iTSTBMatch
   1759  0a35		       c8		      iny
   1760  0a36		       84 51		      sty	CUROFF	; Point to the next byte
   1761  0a38		       4c b1 02 	      jmp	NextIL	; Then next instruction
   1762  0a3b
   1763  0a3b							;=================================================JLIT=
   1764  0a3b							; Test a byte	branch if it fails
   1765  0a3b		       20 91 29    iTSTW      jsr	getILByte	; Get the relative offset byte
   1766  0a3e		       8d 6b 42 	      sta	offset	; Save the jump offset for fails
   1767  0a41		       20 74 2b 	      jsr	saveIL	; save to restore when done if fail
   1768  0a44		       20 8d 29 	      jsr	getILWord	; Get a word into RO
   1769  0a47		       86 52		      stx	R0
   1770  0a49		       85 53		      sta	R0+1
   1771  0a4b		       a4 51		      ldy	CUROFF	; Get offset in the stream
   1772  0a4d		       8a		      txa
   1773  0a4e		       d1 4f		      cmp	(CURPTR),y	; Test if low order byte matches
   1774  0a50		       f0 e3		      beq	iTSTBMatch	; Yes it matched move on
   1775  0a52		       4c da 09 	      jmp	iTSTfail	; REcover and move on to next test
   1776  0a55		       c8	   iTSTWM1    iny
   1777  0a56		       a5 53		      lda	R0+1
   1778  0a58		       d1 4f		      cmp	(CURPTR),y	; Check high order byte
   1779  0a5a		       f0 03		      beq	iTSTWMatch
   1780  0a5c		       4c da 09 	      jmp	iTSTfail
   1781  0a5f
   1782  0a5f				   iTSTWMatch
   1783  0a5f		       c8		      iny
   1784  0a60		       84 51		      sty	CUROFF
   1785  0a62		       4c b1 02 	      jmp	NextIL	; Then next instruction
   1786  0a65
   1787  0a65							;================================================jLIT=
   1788  0a65							;Test for end of line
   1789  0a65							;
   1790  0a65				   iTSTDONE
   1791  0a65		       20 91 29 	      jsr	getILByte
   1792  0a68		       8d 6b 42 	      sta	offset
   1793  0a6b		       20 74 2b 	      jsr	saveIL
   1794  0a6e		       a4 51		      ldy	CUROFF
   1795  0a70		       84 59		      sty	dpl
   1796  0a72		       b1 4f		      lda	(CURPTR),y
   1797  0a74		       f0 0b		      beq	iTSTDONEtrue
   1798  0a76		       c9 e6		      cmp	#oColon
   1799  0a78		       f0 07		      beq	iTSTDONEtrue
   1800  0a7a		       a4 59		      ldy	dpl
   1801  0a7c		       84 51		      sty	CUROFF
   1802  0a7e		       4c da 09 	      jmp	iTSTfail
   1803  0a81							;
   1804  0a81							; Advance to the next line
   1805  0a81							;
   1806  0a81				   iTSTDONEtrue
   1807  0a81		       4c b1 02 	      jmp	NextIL
   1808  0a84
   1809  0a84		       4c d7 0b    tstBranchLink jmp	tstBranch
   1810  0a87							;
   1811  0a87							;=====================================================
   1812  0a87							; Inc and dec a variable , faster than a = a + 1
   1813  0a87				   iINCVAR
   1814  0a87		       20 1c 2c 	      jsr	popR0
   1815  0a8a		       a0 00		      ldy	#0
   1816  0a8c		       18		      clc
   1817  0a8d		       a9 01		      lda	#1
   1818  0a8f		       71 52		      adc	(R0),y
   1819  0a91		       91 52		      sta	(R0),y
   1820  0a93		       90 07		      bcc	iINCDONE
   1821  0a95		       c8		      iny
   1822  0a96		       a9 00		      lda	#0
   1823  0a98		       71 52		      adc	(R0),y
   1824  0a9a		       91 52		      sta	(R0),y
   1825  0a9c				   iINCDONE
   1826  0a9c		       4c b1 02 	      jmp	NextIL
   1827  0a9f
   1828  0a9f				   iDECVAR
   1829  0a9f		       20 1c 2c 	      jsr	popR0
   1830  0aa2		       a0 00		      ldy	#0
   1831  0aa4		       38		      sec
   1832  0aa5		       b1 52		      lda	(R0),y
   1833  0aa7		       e9 01		      sbc	#1
   1834  0aa9		       91 52		      sta	(R0),y
   1835  0aab		       c8		      iny
   1836  0aac		       b1 52		      lda	(R0),y
   1837  0aae		       e9 00		      sbc	#0
   1838  0ab0		       91 52		      sta	(R0),y
   1839  0ab2		       4c b1 02 	      jmp	NextIL
   1840  0ab5
   1841  0ab5
   1842  0ab5							;
   1843  0ab5							;=====================================================
   1844  0ab5							; TSTV is followed by an 8 bit signed offset.	If the
   1845  0ab5							; value at (CURPTR),CUROFF appears to be a variable
   1846  0ab5							; name, move to the next IL statement.  Else, add the
   1847  0ab5							; offset to ILPC. Converted to use actual absolute memory addresses
   1848  0ab5							; TSTVT Looks for the task context
   1849  0ab5							;
   1850  0ab5		       20 34 2c    iTSTVT     jsr	popR1	; The task top has the context id(PID)
   1851  0ab8		       a9 00		      lda	#0
   1852  0aba		       85 58		      sta	R2
   1853  0abc		       f0 04		      beq	iTSTVV
   1854  0abe
   1855  0abe							; Test for simple variable
   1856  0abe		       a9 01	   iTSTV      lda	#1	; set a process Flag
   1857  0ac0		       85 58		      sta	R2
   1858  0ac2
   1859  0ac2		       20 91 29    iTSTVV     jsr	getILByte	;offset
   1860  0ac5		       8d 6b 42 	      sta	offset
   1861  0ac8							;
   1862  0ac8		       a4 51		      ldy	CUROFF	; Get the pointer into the program
   1863  0aca		       b1 4f		      lda	(CURPTR),y	; Get the next byte to process
   1864  0acc		       d0 03		      bne	iTSTVnext	; if is not null then process it
   1865  0ace		       4c 84 0a 	      jmp	tstBranchLink	; if we are at the end of line just get out with error
   1866  0ad1							;
   1867  0ad1				   iTSTVnext
   1868  0ad1		       c9 9d		      cmp	#tVat	; allow access to all unused memory as an array or integers
   1869  0ad3		       f0 4f		      beq	iTSTVat	; Setup to do a pointer to unused memory
   1870  0ad5
   1871  0ad5		       c9 9c		      cmp	#tVhash	; parameters passed to this task
   1872  0ad7		       f0 5b		      beq	iTSTVParm
   1873  0ad9
   1874  0ad9		       c9 9b		      cmp	#tVhat	; task exit code
   1875  0adb		       d0 04		      bne	iTSTV_A2Z
   1876  0add		       a9 48		      lda	#TASKEXITCODE
   1877  0adf		       d0 0b		      bne	iTSTVContinue
   1878  0ae1
   1879  0ae1				   iTSTV_A2Z
   1880  0ae1
   1881  0ae1		       c9 80		      cmp	#tVa
   1882  0ae3		       90 9f		      bcc	tstBranchLink
   1883  0ae5		       c9 9a		      cmp	#tVz+1
   1884  0ae7		       b0 9b		      bcs	tstBranchLink
   1885  0ae9
   1886  0ae9
   1887  0ae9							;
   1888  0ae9							; The condition is true, so convert to an index, push
   1889  0ae9							; it onto the stack and continue running.
   1890  0ae9							;
   1891  0ae9		       29 7f		      and	#%01111111	; Mask off the high bit
   1892  0aeb		       0a		      asl		; multiply by two
   1893  0aec
   1894  0aec				   iTSTVContinue
   1895  0aec		       c8		      iny
   1896  0aed		       84 51		      sty	CUROFF	; it is a valid variable
   1897  0aef		       48		      pha		; save the last variable pointer value
   1898  0af0		       a5 58		      lda	R2
   1899  0af2		       d0 1e		      bne	iTSTVLocalValue	; Value local to this task
   1900  0af4
   1901  0af4		       20 66 29 	      jsr	ipc_ValidateContext	; Lets make sure R1 has a valid context value
   1902  0af7		       90 08		      bcc	iTSTVGOODPID	; Invalid PID provided
   1903  0af9
   1904  0af9		       68		      pla		; We have an invalid pid for getting variable value
   1905  0afa		       a2 10		      ldx	#ERR_INVALID_PID
   1906  0afc		       a9 00		      lda	#0
   1907  0afe		       4c 7d 06 	      jmp	iErr2
   1908  0b01
   1909  0b01				   iTSTVGOODPID
   1910  0b01		       20 4e 29 	      jsr	ipc_getcontext	; Get the other tasks variables
   1911  0b04		       a0 01		      ldy	#VARIABLEPOS
   1912  0b06		       b1 56		      lda	(MQ),y
   1913  0b08		       85 52		      sta	R0
   1914  0b0a		       c8		      iny
   1915  0b0b		       b1 56		      lda	(MQ),y
   1916  0b0d		       85 53		      sta	R0+1
   1917  0b0f		       4c 1a 0b 	      jmp	iTSTVAddOffset
   1918  0b12
   1919  0b12				   iTSTVLocalValue
   1920  0b12		       a5 41		      lda	VARIABLES	; Get the local tasks variables
   1921  0b14		       85 52		      sta	R0
   1922  0b16		       a5 42		      lda	VARIABLES+1
   1923  0b18		       85 53		      sta	R0+1
   1924  0b1a
   1925  0b1a				   iTSTVAddOffset
   1926  0b1a		       68		      pla
   1927  0b1b		       85 54		      sta	R1
   1928  0b1d		       a9 00		      lda	#0
   1929  0b1f		       85 55		      sta	R1+1
   1930  0b21
   1931  0b21				   iTSTVcontinue
   1932  0b21
   1933  0b21		       4c 9e 06 	      jmp	iADDfast	; Fast add for value/place on stack
   1934  0b24
   1935  0b24							; When we get here then we are using the root address of the Lowest addresses free bytes as
   1936  0b24							; an array of integer values or byte.
   1937  0b24				   iTSTVat
   1938  0b24		       c8		      iny
   1939  0b25		       84 51		      sty	CUROFF	;it is a valid variable
   1940  0b27		       ad 71 42 	      lda	ProgramEnd	;set flag to let evaluator to use PROGRAMEND as the root
   1941  0b2a		       85 52		      sta	R0
   1942  0b2c		       ad 72 42 	      lda	ProgramEnd+1
   1943  0b2f		       85 53		      sta	R0+1
   1944  0b31		       4c 16 07 	      jmp	pushR0nextIl	;place this onto the stack
   1945  0b34
   1946  0b34							; When we get parameters passed we can access them using the # variable with[]
   1947  0b34							; example #[0] #[1] etc, we dont check yet if there is too many
   1948  0b34		       c8	   iTSTVParm  iny
   1949  0b35		       84 51		      sty	CUROFF	;it is a valid variable
   1950  0b37
   1951  0b37							; upon return the y register  point to the gosub Parms entry value entry
   1952  0b37		       20 1e 25 	      jsr	GosubFindParms
   1953  0b3a		       90 21		      bcc	iTSTMissingParms
   1954  0b3c
   1955  0b3c		       88		      dey
   1956  0b3d		       88		      dey
   1957  0b3e		       88		      dey		;Point to the actual index of first parameter in math stack
   1958  0b3f
   1959  0b3f		       a5 48		      lda	MATHSTACK
   1960  0b41		       85 52		      sta	R0
   1961  0b43		       a5 49		      lda	MATHSTACK+1
   1962  0b45		       85 53		      sta	R0+1
   1963  0b47		       b1 4b		      lda	(GOSUBSTACK),y	; Get the correct Offset to start of parameters
   1964  0b49		       f0 0b		      beq	iTSTVindex0	; no math if no offset
   1965  0b4b		       18		      clc
   1966  0b4c		       65 52		      adc	R0	; Point to the actual address that the variables start, not just top of stack
   1967  0b4e		       85 52		      sta	R0
   1968  0b50		       a9 00		      lda	#0
   1969  0b52		       65 53		      adc	R0+1
   1970  0b54		       85 53		      sta	R0+1
   1971  0b56				   iTSTVindex0
   1972  0b56		       a9 81		      lda	#GOSUB_RTN_VALUE
   1973  0b58		       85 58		      sta	R2	; Set the data type as a parameter to a function
   1974  0b5a		       4c 16 07 	      jmp	pushR0nextIl
   1975  0b5d
   1976  0b5d
   1977  0b5d				   iTSTMissingParms
   1978  0b5d		       a9 00		      lda	#0
   1979  0b5f		       a2 19		      ldx	#ERR_FUNCTION_EXPECTED_PARAMETERS
   1980  0b61		       4c 7d 06 	      jmp	iErr2
   1981  0b64
   1982  0b64							;
   1983  0b64							;=====================================================
   1984  0b64							; TSTL seems basically the same as TSTN, but leave the
   1985  0b64							; value in R0 instead of pushing onto stack.
   1986  0b64							; This tests for a valid line number
   1987  0b64							;
   1988  0b64		       20 91 29    iTSTL      jsr	getILByte
   1989  0b67		       8d 6b 42 	      sta	offset
   1990  0b6a							;
   1991  0b6a		       a4 51		      ldy	CUROFF
   1992  0b6c		       b1 4f		      lda	(CURPTR),y
   1993  0b6e		       c8		      iny
   1994  0b6f		       11 4f		      ora	(CURPTR),y
   1995  0b71		       f0 06		      beq	iTSTLNotLineNo
   1996  0b73
   1997  0b73
   1998  0b73							; In Both cases we need to point to the first usefull byte to process.
   1999  0b73		       c8		      iny
   2000  0b74		       84 51		      sty	CUROFF
   2001  0b76		       4c b1 02 	      jmp	NextIL
   2002  0b79				   iTSTLNotLineNo
   2003  0b79		       c8		      iny
   2004  0b7a		       84 51		      sty	CUROFF
   2005  0b7c		       4c d7 0b 	      jmp	tstBranch
   2006  0b7f
   2007  0b7f							;
   2008  0b7f							;=====================================================
   2009  0b7f							; TSTN checks for a number.  This is very simplistic;
   2010  0b7f							; if the character is a digit, assume it's a number.
   2011  0b7f							; Convert to a number and push it onto the stack.
   2012  0b7f							;
   2013  0b7f		       20 91 29    iTSTN      jsr	getILByte
   2014  0b82		       8d 6b 42 	      sta	offset
   2015  0b85							;
   2016  0b85		       a9 00		      lda	#0
   2017  0b87		       85 59		      sta	dpl
   2018  0b89		       a4 51		      ldy	CUROFF
   2019  0b8b				   chkType
   2020  0b8b		       b1 4f		      lda	(CURPTR),y
   2021  0b8d		       c9 a2		      cmp	#tByte
   2022  0b8f		       f0 0e		      beq	chkByte
   2023  0b91		       c9 a4		      cmp	#tInteger
   2024  0b93		       f0 16		      beq	chkInteger
   2025  0b95		       c9 eb		      cmp	#oMinus
   2026  0b97		       d0 3e		      bne	tstBranch
   2027  0b99		       e6 59		      inc	dpl
   2028  0b9b		       c8		      iny
   2029  0b9c		       4c 8b 0b 	      jmp	chkType
   2030  0b9f
   2031  0b9f				   chkByte
   2032  0b9f		       a9 00		      lda	#0
   2033  0ba1		       85 53		      sta	R0+1
   2034  0ba3		       c8		      iny
   2035  0ba4		       b1 4f		      lda	(CURPTR),y
   2036  0ba6		       85 52		      sta	R0
   2037  0ba8		       c8		      iny
   2038  0ba9		       d0 0b		      bne	iTSTN_1
   2039  0bab
   2040  0bab				   chkInteger
   2041  0bab		       c8		      iny
   2042  0bac		       b1 4f		      lda	(CURPTR),y
   2043  0bae		       85 52		      sta	R0
   2044  0bb0		       c8		      iny
   2045  0bb1		       b1 4f		      lda	(CURPTR),y
   2046  0bb3		       85 53		      sta	R0+1
   2047  0bb5		       c8		      iny
   2048  0bb6							;
   2049  0bb6							; Check if it is negative and make it so
   2050  0bb6							;
   2051  0bb6				   iTSTN_1
   2052  0bb6		       84 51		      sty	CUROFF
   2053  0bb8
   2054  0bb8		       a5 59		      lda	dpl
   2055  0bba		       f0 18		      beq	iTSTN_2	;positive
   2056  0bbc							;
   2057  0bbc		       a5 52		      lda	R0
   2058  0bbe		       05 53		      ora	R0+1
   2059  0bc0		       f0 12		      beq	iTSTN_2	;zero
   2060  0bc2
   2061  0bc2							; Invert all the bits, then add one.
   2062  0bc2							;
   2063  0bc2		       a5 52		      lda	R0
   2064  0bc4		       49 ff		      eor	#$ff
   2065  0bc6		       85 52		      sta	R0
   2066  0bc8		       a5 53		      lda	R0+1
   2067  0bca		       49 ff		      eor	#$ff
   2068  0bcc		       85 53		      sta	R0+1
   2069  0bce							;
   2070  0bce		       e6 52		      inc	R0
   2071  0bd0		       d0 02		      bne	iTSTN_2
   2072  0bd2		       e6 53		      inc	R0+1
   2073  0bd4				   iTSTN_2
   2074  0bd4		       4c 16 07 	      jmp	pushR0nextIl	;save onto stack
   2075  0bd7
   2076  0bd7							;
   2077  0bd7							; Common jump point for all TSTx instructions that
   2078  0bd7							; fail to meet the requirements.  This takes the
   2079  0bd7							; offset and adds/subtracts to/from ILPC.
   2080  0bd7							;
   2081  0bd7		       ad 6b 42    tstBranch  lda	offset	;get signed offset
   2082  0bda		       10 0e		      bpl	tstPositive
   2083  0bdc							;
   2084  0bdc							; Do negative branch.	Do sign extension.
   2085  0bdc							;
   2086  0bdc		       18	   tstNegative clc
   2087  0bdd		       65 43		      adc	ILPC
   2088  0bdf		       85 43		      sta	ILPC
   2089  0be1							;		  bcc	  tstBothDone
   2090  0be1							;		  dec	  ILPC+1
   2091  0be1							;		  jmp	  NextIL
   2092  0be1
   2093  0be1		       a5 44		      lda	ILPC+1
   2094  0be3		       69 ff		      adc	#$ff
   2095  0be5		       85 44		      sta	ILPC+1
   2096  0be7		       4c b1 02 	      jmp	NextIL	;keep going
   2097  0bea							;
   2098  0bea		       18	   tstPositive clc
   2099  0beb		       65 43		      adc	ILPC
   2100  0bed		       85 43		      sta	ILPC
   2101  0bef		       90 02		      bcc	tstBothDone
   2102  0bf1		       e6 44		      inc	ILPC+1
   2103  0bf3				   tstBothDone
   2104  0bf3		       4c b1 02 	      jmp	NextIL
   2105  0bf6
   2106  0bf6							;
   2107  0bf6							;====================================================
   2108  0bf6							; Test for IRQ pending, and test if a break key pressed
   2109  0bf6							; Yes I know but this handles all sorts of irq/break issues
   2110  0bf6							;
   2111  0bf6		       20 91 29    iTstIrq    jsr	getILByte	; get the offset to next instruction when not in irq
   2112  0bf9		       8d 6b 42 	      sta	offset	; Store the not true jump address offset
   2113  0bfc		       ad 56 19    irqNo      lda	IRQPending	; Check if the pending value is set
   2114  0bff		       f0 20		      beq	tstBreak	; if no irq then check for an escape key pressed
   2115  0c01		       c9 01		      cmp	#1	; only do this if set to first time
   2116  0c03		       d0 1c		      bne	tstBreak	; We are in a irq service already
   2117  0c05				   iTSTProcessIRQ
   2118  0c05		       78		      sei		; disable the interupt until ireturn resets it
   2119  0c06		       ee 56 19 	      inc	IRQPending	; Set the pending to 2, so this ignores it, iret sets it to 0
   2120  0c09		       a9 01		      lda	#GOSUB_RTN	; Save as gosub
   2121  0c0b		       20 a4 2b 	      jsr	pushLN	; Push the next line to be executed
   2122  0c0e		       b0 21		      bcs	ErrStkOver	; Check if there was an error
   2123  0c10		       ad 57 19 	      lda	IRQEntry	; Get the line number to branch to
   2124  0c13		       85 4f		      sta	CURPTR	; put line number into r0
   2125  0c15		       ad 58 19 	      lda	IRQEntry+1
   2126  0c18		       85 50		      sta	CURPTR+1
   2127  0c1a		       a9 03		      lda	#3	; Point to first byte of program text
   2128  0c1c		       85 51		      sta	CUROFF
   2129  0c1e		       4c b1 02 	      jmp	NextIL	; Execute the next instruction should jmp statement
   2130  0c21
   2131  0c21				   tstBreak
   2132  0c21		       20 67 04 	      jsr	BreakSet	; Check if the escape key was pressed
   2133  0c24		       d0 b1		      bne	tstBranch	; z not set of no break found
   2134  0c26		       ad 6d 42 	      lda	taskIOPending
   2135  0c29		       f0 03		      beq	tstBrkComplete
   2136  0c2b		       ce 6d 42 	      dec	taskIOPending
   2137  0c2e		       4c 02 06    tstBrkComplete jmp	iFIN	; Exit out of run mode
   2138  0c31
   2139  0c31		       a2 0c	   ErrStkOver ldx	#ERR_STACK_OVER_FLOW	; Flag any error in line number
   2140  0c33		       a9 00		      lda	#0	; stop the execution
   2141  0c35		       4c 7d 06 	      jmp	iErr2
   2142  0c38							;
   2143  0c38
   2144  0c38							;=====================================================
   2145  0c38							; This places the number of free bytes on top of the
   2146  0c38							; stack.
   2147  0c38							;
   2148  0c38		       20 2c 23    iFREE      jsr	MemFree
   2149  0c3b		       4c 16 07 	      jmp	pushR0nextIl
   2150  0c3e							;
   2151  0c3e							;=====================================================
   2152  0c3e							; Generate a random number from 0-FFFF and then MOD
   2153  0c3e							; it with the value on top of stack.  Leaves number on
   2154  0c3e							; stack
   2155  0c3e							;
   2156  0c3e		       20 34 2c    iRANDOM    jsr	popR1	;mod value
   2157  0c41							;
   2158  0c41							; If the value is zero, just return a one.
   2159  0c41							;
   2160  0c41		       a5 54		      lda	R1
   2161  0c43		       05 55		      ora	R1+1
   2162  0c45		       f0 4a		      beq	irandom1
   2163  0c47							;
   2164  0c47		       ad 66 42 	      lda	random+1
   2165  0c4a		       8d 63 42 	      sta	rtemp1
   2166  0c4d		       ad 65 42 	      lda	random
   2167  0c50		       0a		      asl
   2168  0c51		       2e 63 42 	      rol	rtemp1
   2169  0c54		       0a		      asl
   2170  0c55		       2e 63 42 	      rol	rtemp1
   2171  0c58		       18		      clc
   2172  0c59		       6d 65 42 	      adc	random
   2173  0c5c
   2174  0c5c		       48		      pha
   2175  0c5d
   2176  0c5d		       ad 63 42 	      lda	rtemp1
   2177  0c60		       6d 66 42 	      adc	random+1
   2178  0c63		       8d 66 42 	      sta	random+1
   2179  0c66
   2180  0c66		       68		      pla
   2181  0c67
   2182  0c67		       69 11		      adc	#$11
   2183  0c69		       8d 65 42 	      sta	random
   2184  0c6c		       ad 66 42 	      lda	random+1
   2185  0c6f		       69 36		      adc	#$36
   2186  0c71		       8d 66 42 	      sta	random+1
   2187  0c74
   2188  0c74		       ad 65 42 	      lda	random
   2189  0c77		       85 52		      sta	R0
   2190  0c79		       ad 66 42 	      lda	random+1
   2191  0c7c		       29 7f		      and	#$7f	;make positive
   2192  0c7e		       85 53		      sta	R0+1
   2193  0c80							;
   2194  0c80							; R0 contains the number and R1 contains the max value.
   2195  0c80							;
   2196  0c80		       20 3c 07 	      jsr	iDivNoPop
   2197  0c83		       20 9d 2c 	      jsr	RestoreSigns
   2198  0c86		       a5 56		      lda	MQ
   2199  0c88		       85 52		      sta	R0
   2200  0c8a		       a5 57		      lda	MQ+1
   2201  0c8c		       85 53		      sta	R0+1
   2202  0c8e		       4c 16 07 	      jmp	pushR0nextIl
   2203  0c91				   irandom1
   2204  0c91		       a9 00		      lda	#0
   2205  0c93		       85 53		      sta	R0+1
   2206  0c95		       a9 01		      lda	#1
   2207  0c97		       85 52		      sta	R0
   2208  0c99		       4c 16 07 	      jmp	pushR0nextIl
   2209  0c9c
   2210  0c9c							; The following replaced by call to division/modulo
   2211  0c9c							;iRANDOM_2	lda	R0
   2212  0c9c							;		cmp	R1
   2213  0c9c							;		bne	iRANDOM_1
   2214  0c9c							;		lda	R0+1
   2215  0c9c							;		cmp	R1+1
   2216  0c9c							;		bne	iRANDOM_1	;need to subtract
   2217  0c9c							;
   2218  0c9c							; Subtract R1 from R0
   2219  0c9c							;
   2220  0c9c							;iRANDOM_sub	sec
   2221  0c9c							;		lda	R0
   2222  0c9c							;		sbc	R1
   2223  0c9c							;		sta	R0
   2224  0c9c							;		lda	R0+1
   2225  0c9c							;		sbc	R1+1
   2226  0c9c							;		sta	R0+1
   2227  0c9c							;		jmp	iRANDOM_2
   2228  0c9c							;
   2229  0c9c							; See if R1 > R0.  If so, branch to subtract.
   2230  0c9c							;
   2231  0c9c							;iRANDOM_1	lda	R0
   2232  0c9c							;		cmp	R1
   2233  0c9c							;		lda	R0+1
   2234  0c9c							;		sbc	R1+1
   2235  0c9c							;		bvc	iRANDOM_4
   2236  0c9c							;		eor	#$80
   2237  0c9c							;iRANDOM_4	bpl	iRANDOM_sub
   2238  0c9c							;
   2239  0c9c							; All done.  Almost.  Add one, then push the result.
   2240  0c9c							;
   2241  0c9c							;irandom1	inc	R0
   2242  0c9c							;		bne	iRANDOM_3
   2243  0c9c							;		inc	R0+1
   2244  0c9c							;iRANDOM_3
   2245  0c9c							;		  jsr	pushR0	;return value
   2246  0c9c							;		jmp	NextIL
   2247  0c9c							;
   2248  0c9c							; Poke a value into a memory location
   2249  0c9c		       8c 67 42    iPOKEMEMORY sty	tempy
   2250  0c9f		       20 1c 2c 	      jsr	popR0
   2251  0ca2		       20 34 2c 	      jsr	popR1
   2252  0ca5		       a0 00		      ldy	#0
   2253  0ca7		       a5 52		      lda	R0
   2254  0ca9		       91 54		      sta	(R1),y
   2255  0cab		       ac 67 42 	      ldy	tempy
   2256  0cae		       4c b1 02 	      jmp	NextIL
   2257  0cb1							;
   2258  0cb1							; Get a value from a memory location
   2259  0cb1							;
   2260  0cb1		       8c 67 42    iPEEKMEMORY sty	tempy
   2261  0cb4		       20 1c 2c 	      jsr	popR0
   2262  0cb7		       a0 00		      ldy	#0
   2263  0cb9		       b1 52		      lda	(R0),y
   2264  0cbb		       ac 67 42 	      ldy	tempy
   2265  0cbe		       85 52		      sta	R0
   2266  0cc0		       a9 00		      lda	#0
   2267  0cc2		       85 53		      sta	R0+1
   2268  0cc4		       4c 16 07 	      jmp	pushR0nextIl
   2269  0cc7							;
   2270  0cc7							; Call to address return what ever is in a to the stack
   2271  0cc7							; func2 will load a value into a before the call
   2272  0cc7		       20 34 2c    iCallFunc  jsr	popR1
   2273  0cca		       a5 54		      lda	R1
   2274  0ccc		       20 d8 0c 	      jsr	iCallRtn
   2275  0ccf		       85 52		      sta	R0
   2276  0cd1		       a9 00		      lda	#0
   2277  0cd3		       85 53		      sta	R0+1
   2278  0cd5		       20 16 07 	      jsr	pushR0nextIl
   2279  0cd8				   iCallRtn
   2280  0cd8		       20 1c 2c 	      jsr	popR0
   2281  0cdb		       6c 52 00 	      jmp	(R0)
   2282  0cde
   2283  0cde
   2284  0cde							;===========================================jlit======
   2285  0cde							;Get a character from the terminal convert to value
   2286  0cde							;leave the number on top of the stack
   2287  0cde							;
   2288  0cde				   iGETCHAR
   2289  0cde		       20 e6 19 	      jsr	VGETCH
   2290  0ce1					      if	CTMON65
   2291  0ce1		       48		      pha
   2292  0ce2		       20 e3 19 	      jsr	VOUTCH	;echo echo echo
   2293  0ce5		       68		      pla
   2294  0ce6					      endif
   2295  0ce6		       85 52		      sta	R0
   2296  0ce8		       a9 00		      lda	#0
   2297  0cea		       85 53		      sta	R0+1
   2298  0cec		       20 8a 2b 	      jsr	pushR0
   2299  0cef							;
   2300  0cef		       4c b1 02 	      jmp	NextIL
   2301  0cf2							;===========================================jusilostintim======
   2302  0cf2							;Put a character to the terminal convert to
   2303  0cf2							;
   2304  0cf2		       20 1c 2c    iPUTCHAR   jsr	popR0
   2305  0cf5		       a5 52		      lda	R0
   2306  0cf7		       20 e3 19 	      jsr	VOUTCH
   2307  0cfa		       4c b1 02 	      jmp	NextIL
   2308  0cfd							;=====================================================
   2309  0cfd							; Put the number on the stack out as hex, suppress leading 0
   2310  0cfd				   iHexOut
   2311  0cfd		       20 1c 2c 	      jsr	popR0
   2312  0d00		       a5 53		      lda	R0+1
   2313  0d02		       f0 03		      beq	iHexSecondByte
   2314  0d04		       20 f6 20 	      jsr	OUTHEX
   2315  0d07				   iHexSecondByte
   2316  0d07		       a5 52		      lda	R0
   2317  0d09		       20 f6 20 	      jsr	OUTHEX
   2318  0d0c		       4c b1 02 	      jmp	NextIL
   2319  0d0f							;
   2320  0d0f							;=====================================================
   2321  0d0f							; Replace TOS with its absolute value.
   2322  0d0f							;
   2323  0d0f		       20 1c 2c    iABS       jsr	popR0
   2324  0d12		       a5 53		      lda	R0+1
   2325  0d14		       10 10		      bpl	iABS_1	;already positive
   2326  0d16		       49 ff		      eor	#$ff
   2327  0d18		       85 53		      sta	R0+1
   2328  0d1a		       a5 52		      lda	R0
   2329  0d1c		       49 ff		      eor	#$ff
   2330  0d1e		       85 52		      sta	R0
   2331  0d20		       e6 52		      inc	R0
   2332  0d22		       d0 02		      bne	iABS_1
   2333  0d24		       e6 53		      inc	R0+1
   2334  0d26		       4c 16 07    iABS_1     jmp	pushR0nextIl
   2335  0d29
   2336  0d29							;
   2337  0d29							;================================================================
   2338  0d29							; The set of logical operators
   2339  0d29				   iLogAnd
   2340  0d29		       20 1c 2c 	      jsr	popR0
   2341  0d2c		       20 34 2c 	      jsr	popR1
   2342  0d2f		       a5 52		      lda	R0
   2343  0d31		       25 54		      and	R1
   2344  0d33		       85 52		      sta	R0
   2345  0d35		       a5 53		      lda	R0+1
   2346  0d37		       25 55		      and	R1+1
   2347  0d39		       85 53		      sta	R0+1
   2348  0d3b		       4c 16 07 	      jmp	pushR0nextIl
   2349  0d3e				   iLogOr
   2350  0d3e		       20 1c 2c 	      jsr	popR0
   2351  0d41		       20 34 2c 	      jsr	popR1
   2352  0d44		       a5 52		      lda	R0
   2353  0d46		       05 54		      ora	R1
   2354  0d48		       85 52		      sta	R0
   2355  0d4a		       a5 53		      lda	R0+1
   2356  0d4c		       05 55		      ora	R1+1
   2357  0d4e		       85 53		      sta	R0+1
   2358  0d50		       4c 16 07 	      jmp	pushR0nextIl
   2359  0d53				   iLogXor
   2360  0d53		       20 1c 2c 	      jsr	popR0
   2361  0d56		       20 34 2c 	      jsr	popR1
   2362  0d59		       a5 52		      lda	R0
   2363  0d5b		       45 54		      eor	R1
   2364  0d5d		       85 52		      sta	R0
   2365  0d5f		       a5 53		      lda	R0+1
   2366  0d61		       45 55		      eor	R1+1
   2367  0d63		       85 53		      sta	R0+1
   2368  0d65		       4c 16 07 	      jmp	pushR0nextIl
   2369  0d68				   iLogNot
   2370  0d68		       20 1c 2c 	      jsr	popR0
   2371  0d6b		       a5 52		      lda	R0
   2372  0d6d		       49 ff		      eor	#$FF
   2373  0d6f		       85 52		      sta	R0
   2374  0d71		       a5 53		      lda	R0+1
   2375  0d73		       49 ff		      eor	#$FF
   2376  0d75		       85 53		      sta	R0+1
   2377  0d77		       4c 16 07 	      jmp	pushR0nextIl
   2378  0d7a
   2379  0d7a				   iTruth
   2380  0d7a		       a9 ff		      lda	#$FF
   2381  0d7c		       85 52		      sta	R0
   2382  0d7e		       85 53		      sta	R0+1
   2383  0d80		       4c 16 07 	      jmp	pushR0nextIl
   2384  0d83				   iFalse
   2385  0d83		       a9 00		      lda	#$00
   2386  0d85		       85 52		      sta	R0
   2387  0d87		       85 53		      sta	R0+1
   2388  0d89		       4c 16 07 	      jmp	pushR0nextIl
   2389  0d8c							;===============================================================
   2390  0d8c							;Shift instruction right 1, left 0
   2391  0d8c							;
   2392  0d8c		       8a	   iShift     txa
   2393  0d8d		       48		      pha
   2394  0d8e		       20 1c 2c 	      jsr	popR0	; number of places to shift 0 to 16 really
   2395  0d91		       20 34 2c 	      jsr	popR1	; value to shift
   2396  0d94		       a6 52		      ldx	R0	; get number of times to shift
   2397  0d96		       20 91 29 	      jsr	getILByte	; get direction to shift
   2398  0d99		       c9 01		      cmp	#1	; Should we be doing left
   2399  0d9b		       f0 0a		      beq	iShiftRight
   2400  0d9d							;
   2401  0d9d							; Shift r1 left n bits
   2402  0d9d				   iShiftLeft
   2403  0d9d		       18	   iShiftLloop clc
   2404  0d9e		       26 54		      rol	R1
   2405  0da0		       26 55		      rol	R1+1
   2406  0da2		       ca		      dex
   2407  0da3		       d0 f8		      bne	iShiftLloop
   2408  0da5		       f0 07		      beq	iShiftExit
   2409  0da7							;
   2410  0da7							; Shift R1 right n bits
   2411  0da7							;
   2412  0da7				   iShiftRight
   2413  0da7		       46 55	   iShiftRloop lsr	R1+1
   2414  0da9		       46 54		      lsr	R1
   2415  0dab		       ca		      dex
   2416  0dac		       d0 f9		      bne	iShiftRloop
   2417  0dae				   iShiftExit
   2418  0dae		       68		      pla
   2419  0daf		       aa		      tax
   2420  0db0		       20 02 2c 	      jsr	pushR1
   2421  0db3		       4c b1 02 	      jmp	NextIL
   2422  0db6
   2423  0db6							;================================================================
   2424  0db6							;Set the IRQ service rtn line number
   2425  0db6							;
   2426  0db6		       78	   iSetIrq    sei		; disable the interupts
   2427  0db7		       a9 00		      lda	#0	; Zero the Status flag
   2428  0db9		       8d 55 19 	      sta	IRQStatus
   2429  0dbc		       20 1c 2c 	      jsr	popR0	; get the line number
   2430  0dbf		       a5 52		      lda	R0
   2431  0dc1		       05 53		      ora	R0+1
   2432  0dc3		       f0 22		      beq	iSetExt	; if it is zero disable all
   2433  0dc5		       a9 01		      lda	#GOSUB_RTN	; default push type
   2434  0dc7		       20 a4 2b 	      jsr	pushLN	; Save the current line pointer
   2435  0dca		       90 03		      bcc	iSetIrqOk	; Check if there was an error
   2436  0dcc		       4c 31 0c 	      jmp	ErrStkOver	; Check if there was an error
   2437  0dcf				   iSetIrqOk
   2438  0dcf		       20 d6 29 	      jsr	findLine	; Find the IRQ func Line Pointer
   2439  0dd2		       d0 16		      bne	iSetIrqErr	; Error if exact line not found
   2440  0dd4		       a5 50		      lda	CURPTR+1	; Copy it to the Entry pointer
   2441  0dd6		       8d 58 19 	      sta	IRQEntry+1
   2442  0dd9		       a5 4f		      lda	CURPTR
   2443  0ddb		       8d 57 19 	      sta	IRQEntry
   2444  0dde		       a9 01		      lda	#1	; Indicate there is an irq gosub
   2445  0de0		       8d 55 19 	      sta	IRQStatus
   2446  0de3		       20 cd 2b 	      jsr	popLN	; Restore the old line number
   2447  0de6		       58		      cli		; Enable the interupts
   2448  0de7		       4c b1 02    iSetExt    jmp	NextIL
   2449  0dea
   2450  0dea		       20 cd 2b    iSetIrqErr jsr	popLN
   2451  0ded		       a2 0d		      ldx	#ERR_BAD_LINE_NUMBER
   2452  0def		       a9 00		      lda	#0
   2453  0df1		       4c 7d 06 	      jmp	iErr2
   2454  0df4							;
   2455  0df4		       20 1c 2c    iTRACEPROG jsr	popR0
   2456  0df7		       a5 52		      lda	R0
   2457  0df9		       85 40		      sta	ILTrace
   2458  0dfb		       4c b1 02 	      jmp	NextIL
   2459  0dfe
   2460  0dfe							;=====================================================
   2461  0dfe							; Define start of non page zero data
   2462 U4279 ????				      seg.u	TBData
   2463 U35a7					      org	PROGEND
   2464 U35a7							;=================================================================
   2465 U35a7							;
   2466 U35a7					      if	IL_DEBUG_TEXT
------- FILE ILKeyText.inc LEVEL 2 PASS 6
      0 U35a7					      include	"ILKeyText.inc"
      1  0dfe					      seg	Code
      2  0dfe					      if	IL_DEBUG_TEXT
      3  0dfe				   ILTEXTTABLE
      0  0dfe					      db	0,23,"iXINIT		   ",0
      1  0dfe		       00 17 69 58*	      .byte.b	0,23,"iXINIT		   ",0
      0  0e15					      db	1,23,"iDONE		   ",0
      1  0e15		       01 17 69 44*	      .byte.b	1,23,"iDONE		   ",0
      0  0e2c					      db	2,23,"iPRS		   ",0
      1  0e2c		       02 17 69 50*	      .byte.b	2,23,"iPRS		   ",0
      0  0e43					      db	3,23,"iPRN		   ",0
      1  0e43		       03 17 69 50*	      .byte.b	3,23,"iPRN		   ",0
      0  0e5a					      db	4,23,"iSPC		   ",0
      1  0e5a		       04 17 69 53*	      .byte.b	4,23,"iSPC		   ",0
      0  0e71					      db	5,23,"iNLINE		   ",0
      1  0e71		       05 17 69 4e*	      .byte.b	5,23,"iNLINE		   ",0
      0  0e88					      db	6,23,"iNXT		   ",0
      1  0e88		       06 17 69 4e*	      .byte.b	6,23,"iNXT		   ",0
      0  0e9f					      db	7,23,"iXFER		   ",0
      1  0e9f		       07 17 69 58*	      .byte.b	7,23,"iXFER		   ",0
      0  0eb6					      db	8,23,"iSAV		   ",0
      1  0eb6		       08 17 69 53*	      .byte.b	8,23,"iSAV		   ",0
      0  0ecd					      db	9,23,"iRSTR		   ",0
      1  0ecd		       09 17 69 52*	      .byte.b	9,23,"iRSTR		   ",0
      0  0ee4					      db	10,23,"iCMPR		    ",0
      1  0ee4		       0a 17 69 43*	      .byte.b	10,23,"iCMPR		    ",0
      0  0efb					      db	11,23,"iINNUM		    ",0
      1  0efb		       0b 17 69 49*	      .byte.b	11,23,"iINNUM		    ",0
      0  0f12					      db	12,23,"iFIN		    ",0
      1  0f12		       0c 17 69 46*	      .byte.b	12,23,"iFIN		    ",0
      0  0f29					      db	13,23,"iERR		    ",0
      1  0f29		       0d 17 69 45*	      .byte.b	13,23,"iERR		    ",0
      0  0f40					      db	14,23,"iADD		    ",0
      1  0f40		       0e 17 69 41*	      .byte.b	14,23,"iADD		    ",0
      0  0f57					      db	15,23,"iSUB		    ",0
      1  0f57		       0f 17 69 53*	      .byte.b	15,23,"iSUB		    ",0
      0  0f6e					      db	16,23,"iNEG		    ",0
      1  0f6e		       10 17 69 4e*	      .byte.b	16,23,"iNEG		    ",0
      0  0f85					      db	17,23,"iMUL		    ",0
      1  0f85		       11 17 69 4d*	      .byte.b	17,23,"iMUL		    ",0
      0  0f9c					      db	18,23,"iDIV		    ",0
      1  0f9c		       12 17 69 44*	      .byte.b	18,23,"iDIV		    ",0
      0  0fb3					      db	19,23,"iSTORE		    ",0
      1  0fb3		       13 17 69 53*	      .byte.b	19,23,"iSTORE		    ",0
      0  0fca					      db	20,23,"iIND		    ",0
      1  0fca		       14 17 69 49*	      .byte.b	20,23,"iIND		    ",0
      0  0fe1					      db	21,23,"iLST		    ",0
      1  0fe1		       15 17 69 4c*	      .byte.b	21,23,"iLST		    ",0
      0  0ff8					      db	22,23,"iINIT		    ",0
      1  0ff8		       16 17 69 49*	      .byte.b	22,23,"iINIT		    ",0
      0  100f					      db	23,23,"iGETLINE	    ",0
      1  100f		       17 17 69 47*	      .byte.b	23,23,"iGETLINE	    ",0
      0  1026					      db	24,23,"iINSRT		    ",0
      1  1026		       18 17 69 49*	      .byte.b	24,23,"iINSRT		    ",0
      0  103d					      db	25,23,"iRTN		    ",0
      1  103d		       19 17 69 52*	      .byte.b	25,23,"iRTN		    ",0
      0  1054					      db	26,23,"MONITOR 	    ",0
      1  1054		       1a 17 4d 4f*	      .byte.b	26,23,"MONITOR 	    ",0
      0  106b					      db	27,23,"iLIT		    ",0
      1  106b		       1b 17 69 4c*	      .byte.b	27,23,"iLIT		    ",0
      0  1082					      db	28,23,"iCALL		    ",0
      1  1082		       1c 17 69 43*	      .byte.b	28,23,"iCALL		    ",0
      0  1099					      db	29,23,"iJMP		    ",0
      1  1099		       1d 17 69 4a*	      .byte.b	29,23,"iJMP		    ",0
      0  10b0					      db	30,23,"iVINIT		    ",0
      1  10b0		       1e 17 69 56*	      .byte.b	30,23,"iVINIT		    ",0
      0  10c7					      db	31,23,"iERRGOTO	    ",0
      1  10c7		       1f 17 69 45*	      .byte.b	31,23,"iERRGOTO	    ",0
      0  10de					      db	32,23,"iTST		    ",0
      1  10de		       20 17 69 54*	      .byte.b	32,23,"iTST		    ",0
      0  10f5					      db	33,23,"iTSTV		    ",0
      1  10f5		       21 17 69 54*	      .byte.b	33,23,"iTSTV		    ",0
      0  110c					      db	34,23,"iTSTL		    ",0
      1  110c		       22 17 69 54*	      .byte.b	34,23,"iTSTL		    ",0
      0  1123					      db	35,23,"iTSTN		    ",0
      1  1123		       23 17 69 54*	      .byte.b	35,23,"iTSTN		    ",0
      0  113a					      db	36,23,"iFREE		    ",0
      1  113a		       24 17 69 46*	      .byte.b	36,23,"iFREE		    ",0
      0  1151					      db	37,23,"iRANDOM 	    ",0
      1  1151		       25 17 69 52*	      .byte.b	37,23,"iRANDOM 	    ",0
      0  1168					      db	38,23,"iABS		    ",0
      1  1168		       26 17 69 41*	      .byte.b	38,23,"iABS		    ",0
      0  117f					      db	39,23,"iOPENREAD	    ",0
      1  117f		       27 17 69 4f*	      .byte.b	39,23,"iOPENREAD	    ",0
      0  1196					      db	40,23,"iOPENWRITE	    ",0
      1  1196		       28 17 69 4f*	      .byte.b	40,23,"iOPENWRITE	    ",0
      0  11ad					      db	41,23,"iDCLOSE 	    ",0
      1  11ad		       29 17 69 44*	      .byte.b	41,23,"iDCLOSE 	    ",0
      0  11c4					      db	42,23,"iDGETLINE	    ",0
      1  11c4		       2a 17 69 44*	      .byte.b	42,23,"iDGETLINE	    ",0
      0  11db					      db	43,23,"iDLIST		    ",0
      1  11db		       2b 17 69 44*	      .byte.b	43,23,"iDLIST		    ",0
      0  11f2					      db	44,23,"iDDIR		    ",0
      1  11f2		       2c 17 69 44*	      .byte.b	44,23,"iDDIR		    ",0
      0  1209					      db	45,23,"iRMFILE 	    ",0
      1  1209		       2d 17 69 52*	      .byte.b	45,23,"iRMFILE 	    ",0
      0  1220					      db	39,23,"NextIL		    ",0
      1  1220		       27 17 4e 65*	      .byte.b	39,23,"NextIL		    ",0
      0  1237					      db	40,23,"NextIL		    ",0
      1  1237		       28 17 4e 65*	      .byte.b	40,23,"NextIL		    ",0
      0  124e					      db	41,23,"NextIL		    ",0
      1  124e		       29 17 4e 65*	      .byte.b	41,23,"NextIL		    ",0
      0  1265					      db	42,23,"NextIL		    ",0
      1  1265		       2a 17 4e 65*	      .byte.b	42,23,"NextIL		    ",0
      0  127c					      db	43,23,"NextIL		    ",0
      1  127c		       2b 17 4e 65*	      .byte.b	43,23,"NextIL		    ",0
      0  1293					      db	44,23,"NextIL		    ",0
      1  1293		       2c 17 4e 65*	      .byte.b	44,23,"NextIL		    ",0
      0  12aa					      db	45,23,"NextIL		    ",0
      1  12aa		       2d 17 4e 65*	      .byte.b	45,23,"NextIL		    ",0
      0  12c1					      db	46,23,"iCLEARSCREEN	    ",0
      1  12c1		       2e 17 69 43*	      .byte.b	46,23,"iCLEARSCREEN	    ",0
      0  12d8					      db	47,23,"iPOKEMEMORY	    ",0
      1  12d8		       2f 17 69 50*	      .byte.b	47,23,"iPOKEMEMORY	    ",0
      0  12ef					      db	48,23,"iPEEKMEMORY	    ",0
      1  12ef		       30 17 69 50*	      .byte.b	48,23,"iPEEKMEMORY	    ",0
      0  1306					      db	49,23,"iTSTLET 	    ",0
      1  1306		       31 17 69 54*	      .byte.b	49,23,"iTSTLET 	    ",0
      0  131d					      db	50,23,"iTSTDONE	    ",0
      1  131d		       32 17 69 54*	      .byte.b	50,23,"iTSTDONE	    ",0
      0  1334					      db	51,23,"iGETCHAR	    ",0
      1  1334		       33 17 69 47*	      .byte.b	51,23,"iGETCHAR	    ",0
      0  134b					      db	52,23,"iPUTCHAR	    ",0
      1  134b		       34 17 69 50*	      .byte.b	52,23,"iPUTCHAR	    ",0
      0  1362					      db	53,23,"iCallFunc	    ",0
      1  1362		       35 17 69 43*	      .byte.b	53,23,"iCallFunc	    ",0
      0  1379					      db	54,23,"iBranch 	    ",0
      1  1379		       36 17 69 42*	      .byte.b	54,23,"iBranch 	    ",0
      0  1390					      db	55,23,"iTSTStr 	    ",0
      1  1390		       37 17 69 54*	      .byte.b	55,23,"iTSTStr 	    ",0
      0  13a7					      db	56,23,"iSetIrq 	    ",0
      1  13a7		       38 17 69 53*	      .byte.b	56,23,"iSetIrq 	    ",0
      0  13be					      db	57,23,"iTstIrq 	    ",0
      1  13be		       39 17 69 54*	      .byte.b	57,23,"iTstIrq 	    ",0
      0  13d5					      db	58,23,"iRET		    ",0
      1  13d5		       3a 17 69 52*	      .byte.b	58,23,"iRET		    ",0
      0  13ec					      db	59,23,"iINSTR		    ",0
      1  13ec		       3b 17 69 49*	      .byte.b	59,23,"iINSTR		    ",0
      0  1403					      db	60,23,"iMOD		    ",0
      1  1403		       3c 17 69 4d*	      .byte.b	60,23,"iMOD		    ",0
      0  141a					      db	61,23,"iTaskSet	    ",0
      1  141a		       3d 17 69 54*	      .byte.b	61,23,"iTaskSet	    ",0
      0  1431					      db	62,23,"iETask		    ",0
      1  1431		       3e 17 69 45*	      .byte.b	62,23,"iETask		    ",0
      0  1448					      db	63,23,"iNTask		    ",0
      1  1448		       3f 17 69 4e*	      .byte.b	63,23,"iNTask		    ",0
      0  145f					      db	64,23,"iArray		    ",0
      1  145f		       40 17 69 41*	      .byte.b	64,23,"iArray		    ",0
      0  1476					      db	65,23,"iTaskKill	    ",0
      1  1476		       41 17 69 54*	      .byte.b	65,23,"iTaskKill	    ",0
      0  148d					      db	66,23,"iTaskStat	    ",0
      1  148d		       42 17 69 54*	      .byte.b	66,23,"iTaskStat	    ",0
      0  14a4					      db	67,23,"iHexOut 	    ",0
      1  14a4		       43 17 69 48*	      .byte.b	67,23,"iHexOut 	    ",0
      0  14bb					      db	68,23,"iReadComplete	    ",0
      1  14bb		       44 17 69 52*	      .byte.b	68,23,"iReadComplete	    ",0
      0  14d2					      db	69,23,"iReadStart	    ",0
      1  14d2		       45 17 69 52*	      .byte.b	69,23,"iReadStart	    ",0
      0  14e9					      db	70,23,"iStartIO	    ",0
      1  14e9		       46 17 69 53*	      .byte.b	70,23,"iStartIO	    ",0
      0  1500					      db	71,23,"iEndIO		    ",0
      1  1500		       47 17 69 45*	      .byte.b	71,23,"iEndIO		    ",0
      0  1517					      db	72,23,"iLogNot 	    ",0
      1  1517		       48 17 69 4c*	      .byte.b	72,23,"iLogNot 	    ",0
      0  152e					      db	73,23,"iLogOr		    ",0
      1  152e		       49 17 69 4c*	      .byte.b	73,23,"iLogOr		    ",0
      0  1545					      db	74,23,"iLogAnd 	    ",0
      1  1545		       4a 17 69 4c*	      .byte.b	74,23,"iLogAnd 	    ",0
      0  155c					      db	75,23,"iLogXor 	    ",0
      1  155c		       4b 17 69 4c*	      .byte.b	75,23,"iLogXor 	    ",0
      0  1573					      db	76,23,"iWTASK		    ",0
      1  1573		       4c 17 69 57*	      .byte.b	76,23,"iWTASK		    ",0
      0  158a					      db	77,23,"iTASKPID	    ",0
      1  158a		       4d 17 69 54*	      .byte.b	77,23,"iTASKPID	    ",0
      0  15a1					      db	78,23,"iTRACEPROG	    ",0
      1  15a1		       4e 17 69 54*	      .byte.b	78,23,"iTRACEPROG	    ",0
      0  15b8					      db	79,23,"idbgBasic	    ",0
      1  15b8		       4f 17 69 64*	      .byte.b	79,23,"idbgBasic	    ",0
      0  15cf					      db	80,23,"iIPCS		    ",0
      1  15cf		       50 17 69 49*	      .byte.b	80,23,"iIPCS		    ",0
      0  15e6					      db	81,23,"iIPCR		    ",0
      1  15e6		       51 17 69 49*	      .byte.b	81,23,"iIPCR		    ",0
      0  15fd					      db	82,23,"iIPCC		    ",0
      1  15fd		       52 17 69 49*	      .byte.b	82,23,"iIPCC		    ",0
      0  1614					      db	83,23,"iIPCIO		    ",0
      1  1614		       53 17 69 49*	      .byte.b	83,23,"iIPCIO		    ",0
      0  162b					      db	84,23,"iPushMathStack	    ",0
      1  162b		       54 17 69 50*	      .byte.b	84,23,"iPushMathStack	    ",0
      0  1642					      db	85,23,"iPopMathStack	    ",0
      1  1642		       55 17 69 50*	      .byte.b	85,23,"iPopMathStack	    ",0
      0  1659					      db	86,23,"iSaveMathStack	    ",0
      1  1659		       56 17 69 53*	      .byte.b	86,23,"iSaveMathStack	    ",0
      0  1670					      db	87,23,"iRestoreMathStack   ",0
      1  1670		       57 17 69 52*	      .byte.b	87,23,"iRestoreMathStack   ",0
      0  1687					      db	88,23,"iIncParmCount	    ",0
      1  1687		       58 17 69 49*	      .byte.b	88,23,"iIncParmCount	    ",0
      0  169e					      db	89,23,"iTaskGetMathStack   ",0
      1  169e		       59 17 69 54*	      .byte.b	89,23,"iTaskGetMathStack   ",0
      0  16b5					      db	90,23,"iTaskEnable	    ",0
      1  16b5		       5a 17 69 54*	      .byte.b	90,23,"iTaskEnable	    ",0
      0  16cc					      db	91,23,"iTaskSuspend	    ",0
      1  16cc		       5b 17 69 54*	      .byte.b	91,23,"iTaskSuspend	    ",0
      0  16e3					      db	92,23,"iTaskPutMathPtr     ",0
      1  16e3		       5c 17 69 54*	      .byte.b	92,23,"iTaskPutMathPtr     ",0
      0  16fa					      db	93,23,"iTSTVT		    ",0
      1  16fa		       5d 17 69 54*	      .byte.b	93,23,"iTSTVT		    ",0
      0  1711					      db	94,23,"iSetR2		    ",0
      1  1711		       5e 17 69 53*	      .byte.b	94,23,"iSetR2		    ",0
      0  1728					      db	95,23,"iStk2Tmp	    ",0
      1  1728		       5f 17 69 53*	      .byte.b	95,23,"iStk2Tmp	    ",0
      0  173f					      db	96,23,"iTmp2Stk	    ",0
      1  173f		       60 17 69 54*	      .byte.b	96,23,"iTmp2Stk	    ",0
      0  1756					      db	97,23,"iTSTBYTE	    ",0
      1  1756		       61 17 69 54*	      .byte.b	97,23,"iTSTBYTE	    ",0
      0  176d					      db	98,23,"iINCVAR 	    ",0
      1  176d		       62 17 69 49*	      .byte.b	98,23,"iINCVAR 	    ",0
      0  1784					      db	99,23,"iDECVAR 	    ",0
      1  1784		       63 17 69 44*	      .byte.b	99,23,"iDECVAR 	    ",0
      0  179b					      db	100,23,"iSLICE 	     ",0
      1  179b		       64 17 69 53*	      .byte.b	100,23,"iSLICE 	     ",0
      0  17b2					      db	101,23,"iTSTB		     ",0
      1  17b2		       65 17 69 54*	      .byte.b	101,23,"iTSTB		     ",0
      0  17c9					      db	102,23,"iTSTW		     ",0
      1  17c9		       66 17 69 54*	      .byte.b	102,23,"iTSTW		     ",0
      0  17e0					      db	103,23,"iOnGoto	     ",0
      1  17e0		       67 17 69 4f*	      .byte.b	103,23,"iOnGoto	     ",0
      0  17f7					      db	104,23,"iTSTRELOP	     ",0
      1  17f7		       68 17 69 54*	      .byte.b	104,23,"iTSTRELOP	     ",0
      0  180e					      db	105,23,"iRepeatLine	     ",0
      1  180e		       69 17 69 52*	      .byte.b	105,23,"iRepeatLine	     ",0
      0  1825					      db	106,23,"iTSTBRANCH	     ",0
      1  1825		       6a 17 69 54*	      .byte.b	106,23,"iTSTBRANCH	     ",0
      0  183c					      db	107,23,"iFastXfer	     ",0
      1  183c		       6b 17 69 46*	      .byte.b	107,23,"iFastXfer	     ",0
      0  1853					      db	108,23,"iSetTerminal	     ",0
      1  1853		       6c 17 69 53*	      .byte.b	108,23,"iSetTerminal	     ",0
      0  186a					      db	109,23,"iINDB		     ",0
      1  186a		       6d 17 69 49*	      .byte.b	109,23,"iINDB		     ",0
      0  1881					      db	110,23,"iSetBlock	     ",0
      1  1881		       6e 17 69 53*	      .byte.b	110,23,"iSetBlock	     ",0
      0  1898					      db	111,23,"iCopyBlock	     ",0
      1  1898		       6f 17 69 43*	      .byte.b	111,23,"iCopyBlock	     ",0
      0  18af					      db	112,23,"iCmpBlock	     ",0
      1  18af		       70 17 69 43*	      .byte.b	112,23,"iCmpBlock	     ",0
      0  18c6					      db	113,23,"iShift 	     ",0
      1  18c6		       71 17 69 53*	      .byte.b	113,23,"iShift 	     ",0
      0  18dd					      db	$FF,23,"0		     ",0
      1  18dd		       ff 17 30 20*	      .byte.b	$FF,23,"0		     ",0
    126  18f4
    127  18f4							; Search for the il instruction and print the correct text for it
    128  18f4							; on entry a contains the ip instruction to print
    129  18f4
    130 U35a7					      seg.u	TBData
    131 U35a7		       00 00	   R0TempIL   ds	2
    132 U35a9		       00	   ILSTA      ds	1
    133 U35aa
    134  18f4					      Seg	Code
    135  18f4
    136  18f4		       8d a9 35    PrintILText sta	ILSTA
    137  18f7		       98		      tya
    138  18f8		       48		      pha
    139  18f9		       8a		      txa
    140  18fa		       48		      pha
    141  18fb		       a5 52		      lda	R0
    142  18fd		       8d a7 35 	      sta	R0TempIL
    143  1900		       a5 53		      lda	R0+1
    144  1902		       8d a7 35 	      sta	R0TempIL
    145  1905		       a9 fe		      lda	#ILTEXTTABLE&$FF
    146  1907		       85 52		      sta	R0
    147  1909		       a9 0d		      LDA	#ILTEXTTABLE>>8
    148  190b		       85 53		      sta	R0+1
    149  190d							;Loop Here for each entry
    150  190d		       a0 00	   PrintILLoop ldy	#0
    151  190f		       b1 52		      lda	(R0),y
    152  1911		       c9 ff		      cmp	#$FF
    153  1913		       f0 2a		      beq	PrintILNotFound
    154  1915		       cd a9 35 	      cmp	ILSTA
    155  1918		       f0 11		      beq	PrintILFound
    156  191a		       c8		      iny
    157  191b		       b1 52		      lda	(R0),y
    158  191d		       18		      clc
    159  191e		       65 52		      adc	R0
    160  1920		       85 52		      sta	R0
    161  1922		       a9 00		      lda	#0
    162  1924		       65 53		      adc	R0+1
    163  1926		       85 53		      sta	R0+1
    164  1928		       4c 0d 19 	      jmp	PrintILLoop
    165  192b							; The text was discovered
    166  192b		       c8	   PrintILFound iny		; point to length of instruction
    167  192c		       c8		      iny		; Point to start of text
    168  192d		       98		      tya
    169  192e		       18		      clc
    170  192f		       65 52		      adc	R0
    171  1931		       a8		      tay		; Low order byte of address
    172  1932		       a9 00		      lda	#0
    173  1934		       65 53		      adc	R0+1
    174  1936		       aa		      tax		; High order byte of address
    175  1937		       a9 00		      lda	#0	; Termination byte of string
    176  1939		       20 51 21 	      jsr	PrtStr	; print the string
    177  193c		       4c 45 19 	      jmp	PrintILDone
    178  193f
    179  193f		       ad a9 35    PrintILNotFound lda	ILSTA
    180  1942		       20 f6 20 	      jsr	HexToOut
    181  1945
    182  1945		       ad a7 35    PrintILDone lda	R0TempIL
    183  1948		       85 52		      sta	R0
    184  194a		       ad a8 35 	      lda	R0TempIL+1
    185  194d		       85 52		      sta	R0
    186  194f		       68		      pla
    187  1950		       aa		      tax
    188  1951		       68		      pla
    189  1952		       a8		      tay
    190  1953		       60		      rts
    191  1954					      endif
------- FILE mytb.asm
   2468  1954					      endif
------- FILE io.asm LEVEL 2 PASS 6
      0  1954					      include	"io.asm"
      1  1954							; This is the io blocks and function for reading and writing
      2  1954							; to devices attached to this computer.
      3  1954							; This supports devices mapped at e000 thru efff in slot sizes of 16 byte
      4  1954							;
      5  1954							;=====================================================================
      6  1954							; Device configuration equates
      7  1954		       00 00	   ConsoleID  equ	0
      8  1954		       00 08	   SerialID   equ	[1<<3]
      9  1954		       00 10	   ClockID    equ	[2<<3]
     10  1954		       00 18	   TimerID    equ	[3<<3]
     11  1954		       00 20	   DiskID     equ	[4<<3]
     12  1954
     13  1954		       00 0a	   IO_MAX_DEVICES equ	10
     14  1954		       00 06	   IO_VECT_LEN equ	6
     15  1954
     16  1954		       00 01	   IO_DEVICE_CLOSED equ	1	; The device is not open
     17  1954		       00 02	   IO_DEVICE_INVALID equ	2	; The Device number provided is invalid
     18  1954
     19  1954							;========================================================================================
     20  1954							; Uninitialized data segment
     21 U35aa					      seg.u	TBData
     22 U35aa
     23 U35aa		       00 00	   BInVec     ds	2	; This is used by fuction to vector to current input rtn
     24 U35ac		       00 00	   BOutVec    ds	2	; This is used by functions to vector to the current output rtn
     25 U35ae		       00 00	   BStatVec   ds	2	; This is used by inteface to read write status/config information
      0 U35b0				   BActiveDevice db	1	; the index of the current device block
      1 U35b0		       01		      .byte.b	1
      0 U35b1				   BActiveDriver db	1	; Index of the device drive block
      1 U35b1		       01		      .byte.b	1
     28 U35b2
     29 U35b2							;============================================================================================
     30  1954					      Seg	Code
     31  1954							; IRQ BASIC Code Service RTN Support
      0  1954				   SaveIrqReg db	0	; Store current setting
      1  1954		       00		      .byte.b	0
      0  1955				   IRQStatus  db	0	; 1 = enabled, 0 = dissabled
      1  1955		       00		      .byte.b	0
      0  1956				   IRQPending db	0	; Irq recieved, Called at next Basic Line
      1  1956		       00		      .byte.b	0
      0  1957				   IRQEntry   db	0,0	; Basic code offset of IRQ Handler
      1  1957		       00 00		      .byte.b	0,0
     36  1959
     37  1959							;============================================================================================
     38  1959							; Define the device interface blocks
     39  1959				   DeviceDriverBlocks
     40  1959				   ConsoleDevice		; Block 0
      0  1959					      dw	ConsoleID	; device idenifier Console
      1  1959		       00 00		      .word.w	ConsoleID
      0  195b					      dw	cin	; read function vector
      1  195b		       09 f0		      .word.w	cin
      0  195d					      dw	cout	; write function vector
      1  195d		       0c f0		      .word.w	cout
      0  195f					      dw	cstatus	; Get current Status info/Write config
      1  195f		       0f f0		      .word.w	cstatus
     45  1961
     46  1961				   SerialDevice 		; Block 1
      0  1961					      dw	SerialID	; device idenifier Serial
      1  1961		       08 00		      .word.w	SerialID
      0  1963					      dw	SerialIn	; read function vector
      1  1963		       3f 1a		      .word.w	SerialIn
      0  1965					      dw	SerialOut	; write function vector
      1  1965		       3f 1a		      .word.w	SerialOut
      0  1967					      dw	SerialStatus	; Get current Status info/Write config
      1  1967		       3f 1a		      .word.w	SerialStatus
     51  1969
     52  1969				   ClockDevice		; Block 2
      0  1969					      dw	ClockID	; Day/date Clock
      1  1969		       10 00		      .word.w	ClockID
      0  196b					      dw	ClockRead	; Read the date from clock
      1  196b		       3f 1a		      .word.w	ClockRead
      0  196d					      dw	ClockWrite	; Set the date/time of clock
      1  196d		       3f 1a		      .word.w	ClockWrite
      0  196f					      dw	#0	; No Status/Config Function
      1  196f		       00 00		      .word.w	#0
     57  1971
     58  1971				   TimerDevice		; Block 3
      0  1971					      dw	TimerID	; Timer/interrupt interface
      1  1971		       18 00		      .word.w	TimerID
      0  1973					      dw	TimerStart	; Start the timer
      1  1973		       3f 1a		      .word.w	TimerStart
      0  1975					      dw	TimerStop	; Stop the timer
      1  1975		       3f 1a		      .word.w	TimerStop
      0  1977					      dw	TimerStatus	; Config/read status
      1  1977		       3f 1a		      .word.w	TimerStatus
     63  1979
      0  1979				   DiskDevice dw	DiskID	; Block 4
      1  1979		       20 00		      .word.w	DiskID
      0  197b					      dw	DIN	; Disk Input / read function
      1  197b		       ba 30		      .word.w	DIN
      0  197d					      dw	DOUT	; Disk Output / write function
      1  197d		       a1 30		      .word.w	DOUT
      0  197f					      dw	DSTAT	; Disk Status/open/close etc information
      1  197f		       d3 30		      .word.w	DSTAT
     68  1981							;
     69  1981							;======================================================================
     70  1981							; Define the Device/Slot,driver control blocks
     71  1981							; entry format: ControlWord,DeviceDriver,PortAddress,StatusWord
     72  1981							; Fixed at 10 devices memory usage is getting pretty big!!!!!!
     73  1981							; Control word : bit 0 = active 1, Free 0
     74  1981
     75  1981				   DeviceIoBlocks
      0  1981					      dw	1, ConsoleID, $E000, 0	; Console device is 0 file
      1  1981		       01 00 00 00*	      .word.w	1, ConsoleID, $E000, 0
      0  1989					      dw	1, ClockID, $E010, 0	; Port for the day/time clock
      1  1989		       01 00 10 00*	      .word.w	1, ClockID, $E010, 0
      0  1991					      dw	1, TimerID, $E010, 0	; Timer interface
      1  1991		       01 00 18 00*	      .word.w	1, TimerID, $E010, 0
      0  1999					      dw	1, DiskID, $E010, 0	; Disk Driver interface
      1  1999		       01 00 20 00*	      .word.w	1, DiskID, $E010, 0
      0  19a1					      dw	1, SerialID, $E020, 0	; Second terminal(default Basic debug)
      1  19a1		       01 00 08 00*	      .word.w	1, SerialID, $E020, 0
      0  19a9					      dw	0, SerialID, $E030, 0	; Unused slot
      1  19a9		       00 00 08 00*	      .word.w	0, SerialID, $E030, 0
      0  19b1					      dw	0, SerialID, $E040, 0	; Unused slot
      1  19b1		       00 00 08 00*	      .word.w	0, SerialID, $E040, 0
      0  19b9					      dw	0, SerialID, $E050, 0	; Unused slot
      1  19b9		       00 00 08 00*	      .word.w	0, SerialID, $E050, 0
      0  19c1					      dw	0, SerialID, $E060, 0	; Unused slot
      1  19c1		       00 00 08 00*	      .word.w	0, SerialID, $E060, 0
      0  19c9					      dw	0, SerialID, $E070, 0	; Unused slot
      1  19c9		       00 00 08 00*	      .word.w	0, SerialID, $E070, 0
     86  19d1							;
     87  19d1							;======================================================================
     88  19d1							;
     89  19d1					      Seg	Code
     90  19d1							;======================================================================
     91  19d1							; This is the Basic IRQ handler, works with task manager
     92  19d1							;
     93  19d1		       48	   ServiceIrq pha
     94  19d2		       ad 55 19 	      lda	IRQStatus
     95  19d5		       f0 0a		      BEQ	RetIrq
     96  19d7		       ad 56 19 	      lda	IRQPending
     97  19da		       d0 05		      bne	RetIrq
     98  19dc		       a9 01		      lda	#1
     99  19de		       8d 56 19 	      sta	IRQPending
    100  19e1		       68	   RetIrq     pla
    101  19e2		       40		      rti
    102  19e3							;======================================================================
    103  19e3							; Jump to the output/input function in BOutVec/BInVec
    104  19e3							;
    105  19e3		       6c ac 35    VOUTCH     jmp	(BOutVec)	; Primary block io vectors
    106  19e6		       6c aa 35    VGETCH     jmp	(BInVec)
    107  19e9		       6c ae 35    VSTAT      jmp	(BStatVec)
    108  19ec							;
    109  19ec							;======================================================================
    110  19ec							; IO Service functions
    111  19ec							; Validate the device index and set x to offest in table
    112  19ec							; does not return to ioInterface if invalid, returns to original caller
    113  19ec							; should be called immediatly after entering the ioInterface call
    114  19ec				   ioValidateDevice
    115  19ec		       e0 0a		      cpx	#IO_MAX_DEVICES
    116  19ee		       90 04		      bcc	ioValidIndex
    117  19f0		       a2 02		      ldx	#IO_DEVICE_INVALID
    118  19f2		       b0 13		      bcs	ioInvalidDevice
    119  19f4				   ioValidIndex
    120  19f4		       8a		      txa
    121  19f5		       0a		      asl		; Multiply by 8
    122  19f6		       0a		      asl
    123  19f7		       0a		      asl
    124  19f8		       aa		      tax		; Point to actual offset in the table
    125  19f9		       ec b0 35 	      cpx	BActiveDevice	; is it already active ?
    126  19fc		       f0 0d		      beq	ioValidDevice	; Shortcut if this is the active device already
    127  19fe		       a9 01		      lda	#1	; Active flag
    128  1a00		       3d 81 19 	      and	DeviceIoBlocks,x	; Check if the device is active
    129  1a03		       d0 06		      bne	ioValidDevice	; The device is active and valid index
    130  1a05		       a2 01		      ldx	#IO_DEVICE_CLOSED
    131  1a07
    132  1a07				   ioInvalidDevice
    133  1a07		       68		      pla		; Remove return address of IO interface
    134  1a08		       68		      pla
    135  1a09		       38		      sec		; ensure that carry is set
    136  1a0a		       60		      rts
    137  1a0b
    138  1a0b				   ioValidDevice
    139  1a0b		       18		      clc
    140  1a0c		       60		      rts
    141  1a0d							;
    142  1a0d							;===================================================================================
    143  1a0d							; Set the io device jmp vectors
    144  1a0d							; input x contains the vector to the active Device IO Block
    145  1a0d							; output a, x undefined y unchanged
    146  1a0d				   ioSetDeviceVectors
    147  1a0d		       ec b0 35 	      cpx	BActiveDevice	; Check if already set
    148  1a10		       f0 1b		      beq	ioSetDevExit	; if already set then do nothing
    149  1a12
    150  1a12		       8e b0 35 	      stx	BActiveDevice	; set the active device vector
    151  1a15		       98		      tya
    152  1a16		       48		      pha
    153  1a17
    154  1a17		       bc 83 19 	      ldy	DeviceIoBlocks+2,x	; Get the device driver index
    155  1a1a		       8c b1 35 	      sty	BActiveDriver	; Pointer to active Device driver
    156  1a1d		       a2 00		      ldx	#0	; Transfer the 6 pointers to the Vectors
    157  1a1f				   ioSetDevLoop
    158  1a1f		       b9 5b 19 	      lda	DeviceDriverBlocks+2,y
    159  1a22		       9d aa 35 	      sta	BInVec,x
    160  1a25		       e8		      inx
    161  1a26		       c8		      iny
    162  1a27		       e0 06		      cpx	#IO_VECT_LEN	; Transfer the vector length to copy
    163  1a29		       d0 f4		      bne	ioSetDevLoop
    164  1a2b
    165  1a2b		       68		      pla
    166  1a2c		       a8		      tay
    167  1a2d				   ioSetDevExit
    168  1a2d		       60		      rts
    169  1a2e							;
    170  1a2e							;======================================================================
    171  1a2e							; Generic call interface for devices
    172  1a2e							; input x = DeviceIoBlockIndex
    173  1a2e							; Carry set if error, x contains the error code
    174  1a2e							; all other parameters are dependant upon the actual device interface
    175  1a2e							;
    176  1a2e							; ioPutCH  a contains the character to send
    177  1a2e		       20 ec 19    ioPutCH    jsr	ioValidateDevice
    178  1a31		       48		      pha
    179  1a32		       20 0d 1a 	      jsr	ioSetDeviceVectors
    180  1a35		       68		      pla
    181  1a36		       20 e3 19 	      jsr	VOUTCH
    182  1a39		       18		      clc
    183  1a3a		       60		      rts
    184  1a3b
    185  1a3b							; io Getch returns the character read from device
    186  1a3b		       20 ec 19    ioGetCH    jsr	ioValidateDevice
    187  1a3e
    188  1a3e		       60		      rts
    189  1a3f							;
    190  1a3f							;======================================================================
    191  1a3f							;TTY interface functions,
    192  1a3f							;	a contains the character to send
    193  1a3f							;	x contains the Device ID (equals index into io blocks)	of the io block to used
    194  1a3f							;
    195  1a3f				   SerialIn
    196  1a3f
    197  1a3f				   SerialOut
    198  1a3f
    199  1a3f				   SerialStatus
    200  1a3f
    201  1a3f							;
    202  1a3f							;======================================================================
    203  1a3f							; Date/Time clock interface
    204  1a3f				   ClockRead
    205  1a3f
    206  1a3f				   ClockWrite
    207  1a3f
    208  1a3f							;
    209  1a3f							;======================================================================
    210  1a3f							;
    211  1a3f				   TimerStart
    212  1a3f
    213  1a3f				   TimerStop
    214  1a3f
    215  1a3f				   TimerStatus
    216  1a3f
    217  1a3f
------- FILE mytb.asm
------- FILE tokenizer.asm LEVEL 2 PASS 6
      0  1a3f					      include	"tokenizer.asm"
      1  1a3f					      seg	Code
      2  1a3f		       00 00	   DEBUGPARSER equ	FALSE	; Print debugging information
      3  1a3f
      4  1a3f							; Define the types of tokens found, and identifiers
      5  1a3f		       00 7f	   KeywordsMax equ	$7F	; Allow to be range  1 to 127	key words, high order bit must be 0 for it to be a key word
      6  1a3f		       00 80	   tVa	      equ	$80	; Variable A = 1, .... Z = 26	 ^ = 27
      7  1a3f		       00 81	   tVb	      equ	$81	; Variables 128 - 157	$80-$9D
      8  1a3f		       00 99	   tVz	      equ	tVa+25	; Value of the last variable
      9  1a3f
     10  1a3f		       00 9b	   tVhat      equ	$9B	; Variable ^
     11  1a3f		       00 9c	   tVhash     equ	$9C	; Variable #
     12  1a3f		       00 9d	   tVat       equ	$9D	; Variable @ = 0
     13  1a3f
     14  1a3f							; Base variable type supported by This basic
     15  1a3f							; Unsigned types always have the 0 bit set to 1
     16  1a3f		       00 a0	   tString    equ	$A0	; Strings all start with this byte and end with  byte value 0 strings can be accessed with array slicing
     17  1a3f		       00 a2	   tByte      equ	$A2	; Signed Byte value
     18  1a3f		       00 a4	   tInteger   equ	$A4	; all tokenized integers start with 251 as first byte 16 bit signed number
     19  1a3f		       00 a6	   tLong      equ	$A6	; Signed 32 bit integer
     20  1a3f
     21  1a3f		       00 a1	   tArray     equ	$A1	; Identifies Array Type, the byte following defines the length of each element
     22  1a3f							; Arrays of string are arrays of pointers 2 bytes each
     23  1a3f		       00 a3	   tPointer   equ	$A3	; Pointer  unsigned 16 bit
     24  1a3f		       00 a5	   tIndirect  equ	$A5	; Points to an address that points to the data 16 bits
     25  1a3f		       00 a7	   tuByte     equ	$A7	; Unsigned byte value 8 bit unsigned value
     26  1a3f		       00 a9	   tUint      equ	$A9	; unsigned integer type 16 bit
     27  1a3f		       00 ab	   tUlong     equ	$AB	; Unsigned 32 bit integer
     28  1a3f
     29  1a3f		       3c 3e	   Operators  BYTE.b	"<>"
     30  1a41		       3c 3d		      BYTE.b	"<="
     31  1a43		       3e 3d		      BYTE.b	">="
     32  1a45		       3c 00		      BYTE.b	"<",0
     33  1a47		       3d 00		      BYTE.b	"=",0
     34  1a49		       3e 00		      BYTE.b	">",0
     35  1a4b		       2b 00		      BYTE.b	"+",0
     36  1a4d		       2d 00		      BYTE.b	"-",0
     37  1a4f		       2f 00		      BYTE.b	"/",0
     38  1a51		       25 00		      BYTE.b	"%",0
     39  1a53		       2a 00		      BYTE.b	"*",0
     40  1a55		       28 00		      BYTE.b	"(",0
     41  1a57		       29 00		      BYTE.b	")",0
     42  1a59		       2c 00		      BYTE.b	",",0
     43  1a5b		       3b 00		      BYTE.b	";",0
     44  1a5d		       5b 00		      BYTE.b	"[",0
     45  1a5f		       5d 00		      BYTE.b	"]",0
     46  1a61		       3a 00		      BYTE.b	":",0
     47  1a63		       24 00		      BYTE.b	"$",0
     48  1a65		       21 00		      BYTE.b	"!",0
     49  1a67		       3f 00		      BYTE.b	"?",0
     50  1a69		       2e 00		      BYTE.b	".",0
     51  1a6b		       00 00		      BYTE.b	0,0
     52  1a6d
     53  1a6d		       f5 f3 f6 f1*OperValues BYTE.b	oNotEqual,oLessEqual,oGreaterEqual,oLess,oEqual,oGreater
     54  1a73		       ea eb ec ed*	      BYTE.b	oPlus, oMinus, oDivide, oModulo, oMultiply
     55  1a78		       e0 e1 e2 e3*	      BYTE.b	oLeftBracket, oRightBracket, oComma, oSemiColon, oLeftSQBracket, oRightSQBracket
     56  1a7e		       e6 e7 e8 0b*	      BYTE.b	oColon, oDollar, oBang, oQuestion, oPeriod
     57  1a83
     58  1a83		       00 0b	   oQuestion  equ	kPrint
     59  1a83							;    2 is =
     60  1a83							;    1 is <
     61  1a83							;    3 is <=
     62  1a83							;    5 is <>
     63  1a83							;    4 is >
     64  1a83							;    6 is >=
     65  1a83		       00 f1	   oLess      equ	$F1
     66  1a83		       00 f2	   oEqual     equ	$F2
     67  1a83		       00 f3	   oLessEqual equ	$F3
     68  1a83		       00 f4	   oGreater   equ	$F4
     69  1a83		       00 f5	   oNotEqual  equ	$F5
     70  1a83		       00 f6	   oGreaterEqual equ	$F6
     71  1a83
     72  1a83		       00 e0	   oLeftBracket equ	$E0
     73  1a83		       00 e1	   oRightBracket equ	$E1
     74  1a83		       00 e2	   oComma     equ	$E2
     75  1a83		       00 e3	   oSemiColon equ	$E3
     76  1a83		       00 e4	   oLeftSQBracket equ	$E4
     77  1a83		       00 e5	   oRightSQBracket equ	$E5
     78  1a83		       00 e6	   oColon     equ	$E6
     79  1a83		       00 e7	   oDollar    equ	$E7
     80  1a83		       00 e8	   oBang      equ	$E8
     81  1a83		       00 e9	   oPeriod    equ	$E9
     82  1a83
     83  1a83
     84  1a83		       00 ea	   oPlus      equ	$EA
     85  1a83		       00 eb	   oMinus     equ	$EB
     86  1a83		       00 ec	   oDivide    equ	$EC
     87  1a83		       00 ed	   oModulo    equ	$ED
     88  1a83		       00 ee	   oMultiply  equ	$EE
     89  1a83
     90  1a83		       00 ed	   oPercent   equ	oModulo
     91  1a83
     92  1a83		       00 f0	   tOperatorX equ	$F0	;+ operator Value  ; stores the value used to do the relational operator compare
     93  1a83
     94  1a83		       00 ff	   tError     equ	$FF	; Error should never happen
     95  1a83							;============================================================================================
     96  1a83							; Keyword and seperator values
     97  1a83				   '
     98  1a83		       00 01	   kBeginKey  equ	kLet
     99  1a83							;
    100  1a83		       00 01	   kLet       equ	1
    101  1a83		       00 02	   kInc       equ	kLet+1
    102  1a83		       00 03	   kDec       equ	kInc+1
    103  1a83		       00 04	   kIreturn   equ	kDec+1
    104  1a83		       00 05	   kIf	      equ	kIreturn+1
    105  1a83		       00 06	   kThen      equ	kIf+1
    106  1a83		       00 07	   kGoto      equ	kThen+1
    107  1a83		       00 08	   kGosub     equ	kGoto+1
    108  1a83		       00 09	   kReturn    equ	kGosub+1
    109  1a83		       00 0a	   kRem       equ	kReturn+1
    110  1a83		       00 0b	   kPrint     equ	kRem+1
    111  1a83		       00 0c	   kTaske     equ	kPrint+1
    112  1a83		       00 0d	   kTaskn     equ	kTaske+1
    113  1a83		       00 0e	   kTaskw     equ	kTaskn+1
    114  1a83		       00 0f	   kPoke      equ	kTaskw+1
    115  1a83		       00 10	   kPutch     equ	kPoke+1
    116  1a83		       00 11	   kCls       equ	kPutch+1
    117  1a83		       00 12	   kInput     equ	kCls+1
    118  1a83		       00 13	   kEnd       equ	kInput+1
    119  1a83		       00 14	   kIrq       equ	kEnd+1
    120  1a83		       00 15	   kKill      equ	kIrq+1
    121  1a83		       00 16	   kList      equ	kKill+1
    122  1a83		       00 17	   kRun       equ	kList+1
    123  1a83		       00 18	   kNew       equ	kRun+1
    124  1a83		       00 19	   kSlice     equ	kNew+1
    125  1a83		       00 1a	   kTrace     equ	kSlice+1
    126  1a83		       00 1b	   kExit      equ	kTrace+1
    127  1a83		       00 1c	   kSave      equ	kExit+1
    128  1a83		       00 1d	   kLoad      equ	kSave+1
    129  1a83		       00 1e	   kErase     equ	kLoad+1
    130  1a83		       00 1f	   kDir       equ	kErase+1
    131  1a83		       00 20	   kSetTerm   equ	kDir+1
    132  1a83		       00 21	   kSetMemB   equ	kSetTerm+1
    133  1a83		       00 22	   kSetMemW   equ	kSetMemB+1
    134  1a83		       00 23	   kCopyMem   equ	kSetMemW+1
    135  1a83							;
    136  1a83							; End of actual key words
    137  1a83							;
    138  1a83		       00 22	   kKeyCount  equ	kCopyMem-kBeginKey
    139  1a83							;
    140  1a83							; Logical operators
    141  1a83							;
    142  1a83		       00 24	   kNot       equ	kCopyMem+1
    143  1a83		       00 25	   kOr	      equ	kNot+1
    144  1a83		       00 26	   kXor       equ	kOr+1
    145  1a83		       00 27	   kAnd       equ	kXor+1
    146  1a83							;
    147  1a83							; Shift operators
    148  1a83							;
    149  1a83		       00 28	   kShr       equ	kAnd+1
    150  1a83		       00 29	   kShl       equ	kShr+1
    151  1a83
    152  1a83							; numeric functions
    153  1a83							;
    154  1a83		       00 2a	   kBeginFunc equ	kTrue
    155  1a83							;
    156  1a83							; Truth operators
    157  1a83							;
    158  1a83		       00 2a	   kTrue      equ	kShl+1
    159  1a83		       00 2b	   kFalse     equ	kTrue+1
    160  1a83							; Functions
    161  1a83		       00 2c	   kFree      equ	kFalse+1
    162  1a83		       00 2d	   kGetch     equ	kFree+1
    163  1a83		       00 2e	   kPeek      equ	kGetch+1
    164  1a83		       00 2f	   kTask      equ	kPeek+1
    165  1a83		       00 30	   kIpcc      equ	kTask+1
    166  1a83		       00 31	   kIpcs      equ	kIpcc+1
    167  1a83		       00 32	   kIpcr      equ	kIpcs+1
    168  1a83		       00 33	   kRnd       equ	kIpcr+1
    169  1a83		       00 34	   kStat      equ	kRnd+1
    170  1a83		       00 35	   kAbs       equ	kStat+1
    171  1a83		       00 36	   kCall      equ	kAbs+1
    172  1a83		       00 37	   kGofn      equ	kCall+1
    173  1a83		       00 38	   kPid       equ	kGofn+1
    174  1a83		       00 39	   kAddr      equ	kPid+1
    175  1a83		       00 3a	   kCmpMem    equ	kAddr+1
    176  1a83							;
    177  1a83		       00 11	   kFuncCount equ	((kCmpMem - kBeginFunc) + 1)
    178  1a83
    179  1a83							;
    180  1a83							; Keyword table contains 54 keywords
    181  1a83				   KeyWordTable
      0  1a83					      db	kLet,"leT"	; 1, we only have 0 at end of program or line
      1  1a83		       01 6c 65 54	      .byte.b	kLet,"leT"
      0  1a87					      db	kInc,"inC"
      1  1a87		       02 69 6e 43	      .byte.b	kInc,"inC"
      0  1a8b					      db	kDec,"deC"
      1  1a8b		       03 64 65 43	      .byte.b	kDec,"deC"
      0  1a8f					      db	kIreturn,"ireturN"
      1  1a8f		       04 69 72 65*	      .byte.b	kIreturn,"ireturN"
      0  1a97					      db	kIf,"iF"
      1  1a97		       05 69 46 	      .byte.b	kIf,"iF"
      0  1a9a					      db	kThen,"theN"
      1  1a9a		       06 74 68 65*	      .byte.b	kThen,"theN"
      0  1a9f					      db	kGoto,"gotO"
      1  1a9f		       07 67 6f 74*	      .byte.b	kGoto,"gotO"
      0  1aa4					      db	kGosub,"gosuB"
      1  1aa4		       08 67 6f 73*	      .byte.b	kGosub,"gosuB"
      0  1aaa					      db	kReturn,"returN"
      1  1aaa		       09 72 65 74*	      .byte.b	kReturn,"returN"
      0  1ab1					      db	kRem,"reM"
      1  1ab1		       0a 72 65 4d	      .byte.b	kRem,"reM"
      0  1ab5					      db	kPrint,"prinT"
      1  1ab5		       0b 70 72 69*	      .byte.b	kPrint,"prinT"
      0  1abb					      db	kTaske,"taskE"
      1  1abb		       0c 74 61 73*	      .byte.b	kTaske,"taskE"
      0  1ac1					      db	kTaskn,"taskN"
      1  1ac1		       0d 74 61 73*	      .byte.b	kTaskn,"taskN"
      0  1ac7					      db	kTaskw,"taskW"
      1  1ac7		       0e 74 61 73*	      .byte.b	kTaskw,"taskW"
      0  1acd					      db	kPoke,"pokE"
      1  1acd		       0f 70 6f 6b*	      .byte.b	kPoke,"pokE"
      0  1ad2					      db	kPutch,"putcH"
      1  1ad2		       10 70 75 74*	      .byte.b	kPutch,"putcH"
      0  1ad8					      db	kCls,"clS"
      1  1ad8		       11 63 6c 53	      .byte.b	kCls,"clS"
      0  1adc					      db	kInput,"inpuT"
      1  1adc		       12 69 6e 70*	      .byte.b	kInput,"inpuT"
      0  1ae2					      db	kEnd,"enD"
      1  1ae2		       13 65 6e 44	      .byte.b	kEnd,"enD"
      0  1ae6					      db	kIrq,"irQ"
      1  1ae6		       14 69 72 51	      .byte.b	kIrq,"irQ"
      0  1aea					      db	kKill,"kilL"
      1  1aea		       15 6b 69 6c*	      .byte.b	kKill,"kilL"
      0  1aef					      db	kList,"lisT"
      1  1aef		       16 6c 69 73*	      .byte.b	kList,"lisT"
      0  1af4					      db	kRun,"ruN"
      1  1af4		       17 72 75 4e	      .byte.b	kRun,"ruN"
      0  1af8					      db	kNew,"neW"
      1  1af8		       18 6e 65 57	      .byte.b	kNew,"neW"
      0  1afc					      db	kSlice,"slicE"
      1  1afc		       19 73 6c 69*	      .byte.b	kSlice,"slicE"
      0  1b02					      db	kTrace,"tracE"
      1  1b02		       1a 74 72 61*	      .byte.b	kTrace,"tracE"
      0  1b08					      db	kExit,"exiT"
      1  1b08		       1b 65 78 69*	      .byte.b	kExit,"exiT"
      0  1b0d					      db	kSave,"savE"
      1  1b0d		       1c 73 61 76*	      .byte.b	kSave,"savE"
      0  1b12					      db	kLoad,"loaD"
      1  1b12		       1d 6c 6f 61*	      .byte.b	kLoad,"loaD"
      0  1b17					      db	kErase,"erasE"
      1  1b17		       1e 65 72 61*	      .byte.b	kErase,"erasE"
      0  1b1d					      db	kDir,"diR"
      1  1b1d		       1f 64 69 52	      .byte.b	kDir,"diR"
    213  1b21							;Short form for statements:
      0  1b21					      db	kIreturn,"ireT"
      1  1b21		       04 69 72 65*	      .byte.b	kIreturn,"ireT"
      0  1b26					      db	kReturn,"reT"
      1  1b26		       09 72 65 54	      .byte.b	kReturn,"reT"
      0  1b2a					      db	kPrint,"pR"	; some dialects of tiny basic use this for print
      1  1b2a		       0b 70 52 	      .byte.b	kPrint,"pR"
      0  1b2d					      db	kSetTerm, "setterM"
      1  1b2d		       20 73 65 74*	      .byte.b	kSetTerm, "setterM"
      0  1b35					      db	kSetMemB, "setmemB"
      1  1b35		       21 73 65 74*	      .byte.b	kSetMemB, "setmemB"
      0  1b3d					      db	kSetMemW, "setmemW"
      1  1b3d		       22 73 65 74*	      .byte.b	kSetMemW, "setmemW"
      0  1b45					      db	kCopyMem, "copymeM"
      1  1b45		       23 63 6f 70*	      .byte.b	kCopyMem, "copymeM"
    221  1b4d
    222  1b4d							; Shift operators
      0  1b4d					      db	kShr,"shR"
      1  1b4d		       28 73 68 52	      .byte.b	kShr,"shR"
      0  1b51					      db	kShl,"shL"
      1  1b51		       29 73 68 4c	      .byte.b	kShl,"shL"
    225  1b55
    226  1b55							;Logical and truth operators
      0  1b55					      db	kNot,"noT"
      1  1b55		       24 6e 6f 54	      .byte.b	kNot,"noT"
      0  1b59					      db	kOr,"oR"
      1  1b59		       25 6f 52 	      .byte.b	kOr,"oR"
      0  1b5c					      db	kXor,"xoR"
      1  1b5c		       26 78 6f 52	      .byte.b	kXor,"xoR"
      0  1b60					      db	kAnd,"anD"
      1  1b60		       27 61 6e 44	      .byte.b	kAnd,"anD"
    231  1b64
    232  1b64							; Truth values
      0  1b64					      db	kTrue,"truE"
      1  1b64		       2a 74 72 75*	      .byte.b	kTrue,"truE"
      0  1b69					      db	kFalse,"falsE"
      1  1b69		       2b 66 61 6c*	      .byte.b	kFalse,"falsE"
    235  1b6f
    236  1b6f
    237  1b6f
    238  1b6f							;functions returning values
    239  1b6f
      0  1b6f					      db	kFree,"freE"
      1  1b6f		       2c 66 72 65*	      .byte.b	kFree,"freE"
      0  1b74					      db	kGetch,"getcH"
      1  1b74		       2d 67 65 74*	      .byte.b	kGetch,"getcH"
      0  1b7a					      db	kPeek,"peeK"
      1  1b7a		       2e 70 65 65*	      .byte.b	kPeek,"peeK"
      0  1b7f					      db	kTask,"tasK"
      1  1b7f		       2f 74 61 73*	      .byte.b	kTask,"tasK"
      0  1b84					      db	kIpcc,"ipcC"
      1  1b84		       30 69 70 63*	      .byte.b	kIpcc,"ipcC"
      0  1b89					      db	kIpcs,"ipcS"
      1  1b89		       31 69 70 63*	      .byte.b	kIpcs,"ipcS"
      0  1b8e					      db	kIpcr,"ipcR"
      1  1b8e		       32 69 70 63*	      .byte.b	kIpcr,"ipcR"
      0  1b93					      db	kRnd,"rnD"
      1  1b93		       33 72 6e 44	      .byte.b	kRnd,"rnD"
      0  1b97					      db	kStat,"staT"
      1  1b97		       34 73 74 61*	      .byte.b	kStat,"staT"
      0  1b9c					      db	kAbs,"abS"
      1  1b9c		       35 61 62 53	      .byte.b	kAbs,"abS"
      0  1ba0					      db	kCall,"calL"
      1  1ba0		       36 63 61 6c*	      .byte.b	kCall,"calL"
      0  1ba5					      db	kGofn,"fN"
      1  1ba5		       37 66 4e 	      .byte.b	kGofn,"fN"
      0  1ba8					      db	kPid,"piD"
      1  1ba8		       38 70 69 44	      .byte.b	kPid,"piD"
      0  1bac					      db	kAddr,"addR"
      1  1bac		       39 61 64 64*	      .byte.b	kAddr,"addR"
      0  1bb1					      db	kCmpMem, "cmpmeM"
      1  1bb1		       3a 63 6d 70*	      .byte.b	kCmpMem, "cmpmeM"
      0  1bb8					      db	0,0
      1  1bb8		       00 00		      .byte.b	0,0
    256  1bba
    257  1bba		       1b ba	   KeyWordTableEnd equ	*
    258  1bba		       01 37	   KeyWordTableLength equ	* - KeyWordTable
    259  1bba		       00 00 00 00*TOKENBUFFER ds	256	; placed here as temp for testing the Code
    260  1cba		       00 00 00    printStorage ds	3
    261  1cbd							;==================================================================================================================
    262  1cbd							; Read accross the inputline and output to TOKENBUFFER
    263  1cbd							; Format   byte      Description
    264  1cbd							;	     0	      length of line 1-255
    265  1cbd							;	    0-1       Line Number
    266  1cbd							;	    Tokens and litteral values encoded into the line
    267  1cbd							;
    268  1cbd							;  First test for numbers    for numbers insert type byte plus value 1 or 2 byte, byte, integer, string(pointers)
    269  1cbd							;  if fails then test for keywords
    270  1cbd							;  if fails then test for variables and arrays
    271  1cbd							;  if fails check for operators/seperators  + - < > = % / * () [] , ; : >> <<
    272  1cbd
    273  1cbd				   ParseInputLine
    274  1cbd				  -	      if	DEBUGPARSER
    275  1cbd				  -	      jsr	SetOutDebug
    276  1cbd				  -	      jsr	DebugClearBuffer
    277  1cbd					      endif
    278  1cbd		       a5 51		      lda	CUROFF
    279  1cbf		       48		      pha
    280  1cc0		       8a		      txa
    281  1cc1		       48		      pha
    282  1cc2		       98		      tya
    283  1cc3		       48		      pha
    284  1cc4		       a2 01		      ldx	#1	; point to beginning of Token buffer + 1 reserve space for length byte
    285  1cc6		       20 3c 2a 	      jsr	getDecimal	; Check for a line number, none is ok too
    286  1cc9		       84 51		      sty	CUROFF
    287  1ccb		       20 89 1e 	      jsr	R02TOKEN	; Move R0 to token buffer
    288  1cce
    289  1cce				   ParseInputLoop
    290  1cce		       a4 51		      ldy	CUROFF
    291  1cd0		       20 cc 2c 	      jsr	SkipSpaces	; Skip any spaces
    292  1cd3		       84 51		      sty	CUROFF	; Even if it fails at least remove the spaces
    293  1cd5		       b9 d6 41 	      lda	LINBUF,y	; Check for end of line
    294  1cd8		       f0 25		      beq	ParseComplete	; Finish token buffer and return
    295  1cda
    296  1cda				   ParseForNumber
    297  1cda		       20 dd 1d 	      jsr	ParseNumeric	; Check for a numeric value
    298  1cdd		       90 ef		      bcc	ParseInputLoop	; Go Back for next element
    299  1cdf
    300  1cdf				   ParseForString
    301  1cdf		       20 b3 1d 	      jsr	ParseString	; Check for a string
    302  1ce2		       90 ea		      bcc	ParseInputLoop	; It was a string
    303  1ce4
    304  1ce4				   ParseForOp
    305  1ce4		       20 1b 1e 	      jsr	ParseForOperator	; Check for operator or punctuation
    306  1ce7		       90 e5		      bcc	ParseInputLoop	; it was an operator/punctuation
    307  1ce9
    308  1ce9				   ParseForKey
    309  1ce9		       20 10 1d 	      jsr	ParseLookupKey	; Check for a keyword value
    310  1cec		       90 e0		      bcc	ParseInputLoop	; Go back for next token, we are not syntax checking
    311  1cee
    312  1cee				   ParseForVar
    313  1cee		       20 52 1e 	      jsr	ParseForVariable	; Check for variable and convert to Index, as task centric
    314  1cf1		       90 db		      bcc	ParseInputLoop
    315  1cf3
    316  1cf3				   ParseKeepChar		; if it does not parse just keep it safe
    317  1cf3		       b9 d6 41 	      lda	LINBUF,y
    318  1cf6		       9d ba 1b 	      sta	TOKENBUFFER,x
    319  1cf9		       e8		      inx
    320  1cfa		       c8		      iny
    321  1cfb		       84 51		      sty	CUROFF
    322  1cfd		       d0 cf		      bne	ParseInputLoop
    323  1cff
    324  1cff				   ParseComplete
    325  1cff		       a9 00		      lda	#0
    326  1d01		       9d ba 1b 	      sta	TOKENBUFFER,x	; null terminate the line of tokens
    327  1d04		       e8		      inx
    328  1d05		       8e ba 1b 	      stx	TOKENBUFFER	; Place size including null into buffer start
    329  1d08
    330  1d08		       68		      pla
    331  1d09		       a8		      tay
    332  1d0a		       68		      pla
    333  1d0b		       aa		      tax
    334  1d0c		       68		      pla
    335  1d0d		       85 51		      sta	CUROFF
    336  1d0f
    337  1d0f				  -	      if	DEBUGPARSER
    338  1d0f				  -
    339  1d0f				  -	      jsr	printTokenBuffer
    340  1d0f				  -			;jsr	  DebugPrintProgramLine
    341  1d0f				  -	      jsr	SetOutDebugEnd
    342  1d0f				  -
    343  1d0f					      endif
    344  1d0f		       60		      rts
    345  1d10
    346  1d10							;==================================================================================================================
    347  1d10							; Look at curptr, curpos and check for a valid KeyWord
    348  1d10							; A contains the index value. c is clear
    349  1d10							;		     not found c set  A undefined
    350  1d10							; X is prerserved
    351  1d10							;
    352  1d10				   ParseLookupKey
    353  1d10		       86 58		      stx	R2
    354  1d12		       a0 00		      ldy	#0
    355  1d14		       a9 83		      lda	#KeyWordTable&$FF	; Key Table longer than 256 bytes
    356  1d16		       85 54		      sta	R1
    357  1d18		       a9 1a		      lda	#KeyWordTable>>8
    358  1d1a		       85 55		      sta	R1+1	; R1 points to first entry in keyword table
    359  1d1c		       b1 54		      lda	(R1),y	; Get the Key Token value for first keyword
    360  1d1e		       85 52		      sta	R0	; Save until next keyword
    361  1d20		       c8		      iny		; Point to first character of keyword
    362  1d21		       a6 51		      ldx	CUROFF	; X points to the character in the input buffer
    363  1d23
    364  1d23				  -	      if	DEBUGPARSER
    365  1d23				  -			;    jsr DebugKeyword
    366  1d23					      endif
    367  1d23
    368  1d23				   ParseLookupLoop
    369  1d23		       b1 54		      lda	(R1),y	; Get the first character of the keyword
    370  1d25		       29 df		      and	#%11011111	; Force Keyword to upper case
    371  1d27		       dd d6 41 	      cmp	LINBUF,x	; Check the input buffer
    372  1d2a		       f0 07		      beq	ParseNextLetter	; If it equals then do next letter
    373  1d2c		       09 20		      ora	#%00100000	; Force Keyword to lowercase
    374  1d2e		       dd d6 41 	      cmp	LINBUF,x	; Compare value to upercase
    375  1d31		       d0 34		      bne	ParseNextEntry	; Not equal then move to next entry in the keyword table
    376  1d33
    377  1d33				   ParseNextLetter
    378  1d33		       b1 54		      lda	(R1),y	; Check if we just processed the last letter is upper
    379  1d35		       29 20		      and	#%00100000	; if this bit not set then end of keyword, Last char is always uppercase
    380  1d37		       f0 0b		      beq	ParseKeyFound	; If we are at end of keyword and all match then we found the key
    381  1d39		       e8		      inx		; Point to next char in the input buffer
    382  1d3a		       c8		      iny		; Point to the next character in the Keyword table
    383  1d3b		       a9 00		      lda	#0	; Check if we are at the end of the input buffer
    384  1d3d		       dd d6 41 	      cmp	LINBUF,x	; Check if we are at the end of the input buffer
    385  1d40		       f0 25		      beq	ParseNextEntry	; End of buffer but no keyword, ext keyword entry
    386  1d42		       d0 df		      bne	ParseLookupLoop	; Go back and check the next characters
    387  1d44
    388  1d44				   ParseKeyFound
    389  1d44		       a5 52		      lda	R0	; get the keyword index
    390  1d46
    391  1d46				   ParseKeyDone
    392  1d46		       e8		      inx		; point past the last character
    393  1d47		       86 51		      stx	CUROFF	; update to point to next character in the input buffer
    394  1d49		       a6 58		      ldx	R2	; Restore the original x pointer
    395  1d4b		       9d ba 1b 	      sta	TOKENBUFFER,x	; store the Token into the compiled buffer
    396  1d4e		       e8		      inx		; Point to next position in the output buffer
    397  1d4f		       86 58		      stx	R2	; Save next position in buffer
    398  1d51		       c9 0a		      cmp	#kRem	; remark statement
    399  1d53		       f0 3a		      beq	ParseMoveLine	; Move everything until the end of line to the token buffer
    400  1d55		       c9 07		      cmp	#kGoto
    401  1d57		       f0 4a		      beq	ParseHandleBranches	; Jump allow space for memory address in token buffer
    402  1d59		       c9 08		      cmp	#kGosub
    403  1d5b		       f0 46		      beq	ParseHandleBranches	; Handle the gosub branch address
    404  1d5d		       c9 37		      cmp	#kGofn
    405  1d5f		       f0 42		      beq	ParseHandleBranches	; Handle the gosub branch address
    406  1d61		       c9 2f		      cmp	#kTask
    407  1d63		       f0 3e		      beq	ParseHandleBranches	; We may have the ability to also compile task vectors Bracket between the space and the value
    408  1d65
    409  1d65		       18		      clc		; C flag clear, we found it
    410  1d66		       60		      rts
    411  1d67
    412  1d67							; Move forward to the next entry in table
    413  1d67				   ParseNextEntry
    414  1d67		       b1 54		      lda	(R1),y	; Get the next character in the token
    415  1d69		       29 20		      and	#%00100000	; Is it the last character
    416  1d6b		       f0 03		      beq	ParseEndOfEntry	; Yes then end of this entry found
    417  1d6d		       c8		      iny		; Point to next char in the entry
    418  1d6e		       d0 f7		      bne	ParseNextEntry	; loop until we find the end character
    419  1d70
    420  1d70				   ParseEndOfEntry
    421  1d70		       c8		      iny		; Point to the byte after the last character
    422  1d71		       98		      tya		; Move into a as we must add this to the pointer in R1, more that 256 keyword characters in table
    423  1d72		       18		      clc		; table May be longer than 256 so increment r1 to next entry
    424  1d73		       65 54		      adc	R1
    425  1d75		       85 54		      sta	R1
    426  1d77		       a5 55		      lda	R1+1
    427  1d79		       69 00		      adc	#0
    428  1d7b		       85 55		      sta	R1+1	; Now pointing to start of next entry in the table
    429  1d7d		       a0 00		      ldy	#0	; Reset the index back to zero
    430  1d7f		       b1 54		      lda	(R1),y	; get keyword value
    431  1d81		       f0 08		      beq	ParseNoneFound	; Check for end of the table -> 0
    432  1d83		       85 52		      sta	R0	; save the next token value
    433  1d85		       c8		      iny		; Inc past token value
    434  1d86
    435  1d86				  -	      if	DEBUGPARSER
    436  1d86				  -			;    jsr DebugKeyword
    437  1d86					      endif
    438  1d86		       a6 51		      ldx	CUROFF	; Restore x to last position in the input buffer
    439  1d88		       4c 23 1d 	      jmp	ParseLookupLoop	; branch back for next key word
    440  1d8b
    441  1d8b				   ParseNoneFound
    442  1d8b		       a6 58		      ldx	R2	; it did not find one, restore x to position in output buffer
    443  1d8d		       38		      sec		; c clear, not found
    444  1d8e		       60		      rts
    445  1d8f
    446  1d8f							;===============================================================================
    447  1d8f							; Move everything from current position until the end of line into the token buffer
    448  1d8f							;
    449  1d8f		       a4 51	   ParseMoveLine ldy	CUROFF	; next byte to parse
    450  1d91		       a6 58		      ldx	R2	; where to place in the buffer
    451  1d93				   ParseMoveLoop
    452  1d93		       b9 d6 41 	      lda	LINBUF,y	; get the next byte
    453  1d96		       f0 07		      beq	ParseMoveDone	; if we load a zero then done
    454  1d98		       9d ba 1b 	      sta	TOKENBUFFER,x	; save the byte
    455  1d9b		       c8		      iny
    456  1d9c		       e8		      inx
    457  1d9d		       d0 f4		      bne	ParseMoveLoop
    458  1d9f				   ParseMoveDone
    459  1d9f		       84 51		      sty	CUROFF
    460  1da1		       18		      clc
    461  1da2		       60		      rts
    462  1da3							;================================================================================================
    463  1da3							; Add two bytes after the gosub and goto to allow the "compiler" to place mem address, to directly
    464  1da3							; transfer to a memory address
    465  1da3				   ParseHandleBranches
    466  1da3		       a6 58		      ldx	R2
    467  1da5		       a9 00		      lda	#0
    468  1da7		       9d ba 1b 	      sta	TOKENBUFFER,x
    469  1daa		       e8		      inx
    470  1dab		       9d ba 1b 	      sta	TOKENBUFFER,x
    471  1dae		       e8		      inx
    472  1daf		       86 58		      stx	R2
    473  1db1		       18		      clc
    474  1db2		       60		      rts
    475  1db3
    476  1db3							;=========================================================================================================
    477  1db3							;ParseString Parse a quotes string
    478  1db3							; on input X = outbuf position
    479  1db3							; y = inbuf position
    480  1db3							; Copies string to output buffer, updates x and y
    481  1db3				   ParseString
    482  1db3		       a4 51		      ldy	CUROFF
    483  1db5		       a9 a0		      lda	#tString
    484  1db7		       9d ba 1b 	      sta	TOKENBUFFER,X
    485  1dba		       b9 d6 41 	      lda	LINBUF,y
    486  1dbd		       c9 22		      cmp	#'"
    487  1dbf		       d0 1a		      bne	ParseStringInvalid
    488  1dc1		       e8		      inx
    489  1dc2		       9d ba 1b 	      sta	TOKENBUFFER,x
    490  1dc5		       e8		      inx
    491  1dc6		       c8		      iny
    492  1dc7
    493  1dc7				   ParseStringLoop
    494  1dc7		       b9 d6 41 	      lda	LINBUF,y
    495  1dca		       9d ba 1b 	      sta	TOKENBUFFER,x
    496  1dcd		       c9 22		      cmp	#'"
    497  1dcf		       f0 04		      beq	ParseStringDone
    498  1dd1		       c8		      iny
    499  1dd2		       e8		      inx
    500  1dd3		       d0 f2		      bne	ParseStringLoop
    501  1dd5
    502  1dd5				   ParseStringDone
    503  1dd5		       e8		      inx
    504  1dd6		       c8		      iny
    505  1dd7		       84 51		      sty	CUROFF
    506  1dd9		       18		      clc
    507  1dda		       60		      rts
    508  1ddb
    509  1ddb				   ParseStringInvalid
    510  1ddb		       38		      sec
    511  1ddc		       60		      rts
    512  1ddd
    513  1ddd							;=========================================================================================================
    514  1ddd							; Get numeric values and return value in RO and type in a
    515  1ddd							;
    516  1ddd				   ParseNumeric
    517  1ddd		       a4 51		      ldy	CUROFF
    518  1ddf		       b9 d6 41 	      lda	LINBUF,y
    519  1de2		       c9 30		      cmp	#'0
    520  1de4		       90 33		      bcc	ParseNumInvalid
    521  1de6		       c9 3a		      cmp	#'9+1
    522  1de8		       b0 2f		      bcs	ParseNumInvalid
    523  1dea		       86 58		      stx	R2
    524  1dec		       20 3c 2a 	      jsr	getDecimal
    525  1def		       a6 58		      ldx	R2
    526  1df1		       84 51		      sty	CUROFF
    527  1df3		       a5 53		      lda	R0+1
    528  1df5		       f0 14		      beq	ParseByteValue
    529  1df7
    530  1df7				   ParseIntegerValue
    531  1df7		       a9 a4		      lda	#tInteger
    532  1df9		       9d ba 1b 	      sta	TOKENBUFFER,x
    533  1dfc		       e8		      inx
    534  1dfd		       a5 52		      lda	R0
    535  1dff		       9d ba 1b 	      sta	TOKENBUFFER,x
    536  1e02		       e8		      inx
    537  1e03		       a5 53		      lda	R0+1
    538  1e05		       9d ba 1b 	      sta	TOKENBUFFER,X
    539  1e08		       e8		      inx
    540  1e09		       18		      clc
    541  1e0a		       60		      rts
    542  1e0b
    543  1e0b				   ParseByteValue
    544  1e0b		       a9 a2		      lda	#tByte
    545  1e0d		       9d ba 1b 	      sta	TOKENBUFFER,x
    546  1e10		       e8		      inx
    547  1e11		       a5 52		      lda	R0
    548  1e13		       9d ba 1b 	      sta	TOKENBUFFER,x
    549  1e16		       e8		      inx
    550  1e17		       18		      clc
    551  1e18		       60		      rts
    552  1e19
    553  1e19				   ParseNumInvalid		;Not a valid Numeric
    554  1e19		       38		      sec
    555  1e1a		       60		      rts
    556  1e1b
    557  1e1b							;=========================================================================================================
    558  1e1b							;Parse for operators and seperators
    559  1e1b							; on exit the A has the oper code, c is clear
    560  1e1b							;		 not found then c is set
    561  1e1b							;	x is preserved
    562  1e1b							;
    563  1e1b				   ParseForOperator
    564  1e1b		       86 58		      stx	R2
    565  1e1d		       a4 51		      ldy	CUROFF
    566  1e1f		       a2 00		      ldx	#0
    567  1e21				  -	      if	DEBUGPARSER
    568  1e21				  -			;	jsr    DebugPrintOP
    569  1e21					      endif
    570  1e21
    571  1e21				   ParseOpLoop
    572  1e21		       bd 3f 1a 	      lda	Operators,x	; First byte of operator
    573  1e24		       f0 28		      beq	ParseOpNotFound	; Last entry os 0,0
    574  1e26
    575  1e26		       d9 d6 41 	      cmp	LINBUF,y	; Check the first byte
    576  1e29		       d0 1c		      bne	ParseOpNext
    577  1e2b
    578  1e2b		       c8		      iny
    579  1e2c
    580  1e2c		       bd 40 1a 	      lda	Operators+1,x
    581  1e2f		       f0 06		      beq	ParseOpFoundSingle	; Single Character op
    582  1e31
    583  1e31		       d9 d6 41 	      cmp	LINBUF,y
    584  1e34		       d0 11		      bne	ParseOpNext
    585  1e36
    586  1e36				   ParseOpFound
    587  1e36		       c8		      iny
    588  1e37
    589  1e37				   ParseOpFoundSingle
    590  1e37		       84 51		      sty	CUROFF
    591  1e39
    592  1e39		       8a		      txa
    593  1e3a		       4a		      lsr
    594  1e3b		       aa		      tax
    595  1e3c		       bd 6d 1a 	      lda	OperValues,x
    596  1e3f		       a6 58		      ldx	R2
    597  1e41		       9d ba 1b 	      sta	TOKENBUFFER,x
    598  1e44		       e8		      inx
    599  1e45		       18		      clc
    600  1e46		       60		      rts
    601  1e47
    602  1e47				   ParseOpNext
    603  1e47		       e8		      inx
    604  1e48		       e8		      inx
    605  1e49
    606  1e49				  -	      if	DEBUGPARSER
    607  1e49				  -			;	 jsr	DebugPrintOP
    608  1e49					      endif
    609  1e49		       a4 51		      ldy	CUROFF	; reset the y pointer to beginning
    610  1e4b		       4c 21 1e 	      jmp	ParseOpLoop
    611  1e4e
    612  1e4e				   ParseOpNotFound
    613  1e4e		       a6 58		      ldx	R2
    614  1e50		       38		      sec
    615  1e51		       60		      rts
    616  1e52							;=========================================================================================================
    617  1e52				  -	      if	DEBUGPARSER
    618  1e52				  -			;Print the text of a keyword
    619  1e52				  -			;Input R1    = offset into table
    620  1e52				  -DebugKeyword
    621  1e52				  -	      tya
    622  1e52				  -	      pha
    623  1e52				  -	      ldy	#1
    624  1e52				  -DebugKeyLoop
    625  1e52				  -	      lda	(R1),y
    626  1e52				  -	      jsr	VOUTCH
    627  1e52				  -	      and	#%00100000
    628  1e52				  -	      beq	DebugKeyDone
    629  1e52				  -	      iny
    630  1e52				  -	      bne	DebugKeyLoop
    631  1e52				  -
    632  1e52				  -DebugKeyDone
    633  1e52				  -	      jsr	CRLF
    634  1e52				  -	      pla
    635  1e52				  -	      tay
    636  1e52				  -	      rts
    637  1e52				  -			;========================================
    638  1e52				  -DebugPrintOP
    639  1e52				  -	      pha
    640  1e52				  -	      lda	Operators,x
    641  1e52				  -	      jsr	VOUTCH
    642  1e52				  -	      lda	Operators+1,x
    643  1e52				  -	      beq	DbgPrtOpDone
    644  1e52				  -	      jsr	VOUTCH
    645  1e52				  -
    646  1e52				  -DbgPrtOpDone
    647  1e52				  -	      jsr	CRLF
    648  1e52				  -	      pla
    649  1e52				  -	      rts
    650  1e52				  -			;=======================================
    651  1e52				  -DebugClearBuffer
    652  1e52				  -	      txa
    653  1e52				  -	      pha
    654  1e52				  -	      ldx	#$FF
    655  1e52				  -	      lda	#0
    656  1e52				  -DebugClrLoop
    657  1e52				  -	      sta	TOKENBUFFER,x
    658  1e52				  -	      dex
    659  1e52				  -	      bne	DebugClrLoop
    660  1e52				  -	      sta	TOKENBUFFER,x
    661  1e52				  -	      pla
    662  1e52				  -	      tax
    663  1e52				  -	      rts
    664  1e52				  -
    665  1e52				  -			;=====================================================
    666  1e52				  -			; Print the parser buffer as hex values
    667  1e52				  -printTokenBuffer
    668  1e52				  -	      stx	printStorage
    669  1e52				  -	      sty	printStorage+1
    670  1e52				  -	      sta	printStorage+2
    671  1e52				  -
    672  1e52				  -	      ldx	TOKENBUFFER	; get the length of the buffer
    673  1e52				  -	      inx		; we want to show the last zero byte
    674  1e52				  -	      ldy	#0
    675  1e52				  -
    676  1e52				  -printHexLoop
    677  1e52				  -	      lda	TOKENBUFFER,y	; get the character
    678  1e52				  -	      jsr	HexToOut	; print it
    679  1e52				  -	      lda	#$20
    680  1e52				  -	      jsr	VOUTCH
    681  1e52				  -	      iny
    682  1e52				  -	      dex
    683  1e52				  -	      cpx	#0
    684  1e52				  -	      bne	printHexLoop
    685  1e52				  -	      jsr	CRLF
    686  1e52				  -
    687  1e52				  -	      ldy	printStorage+1
    688  1e52				  -	      ldx	printStorage
    689  1e52				  -	      lda	printStorage+2
    690  1e52				  -printHexDone
    691  1e52				  -	      clc
    692  1e52				  -	      rts
    693  1e52					      endif
    694  1e52
    695  1e52
    696  1e52							;=========================================================================================================
    697  1e52							; Parse for variables A-Z @, ^  x!x x[op]
    698  1e52				   ParseForVariable
    699  1e52		       a4 51		      ldy	CUROFF
    700  1e54		       b9 d6 41 	      lda	LINBUF,y
    701  1e57		       c9 5e		      cmp	#'^	; is it an exit code
    702  1e59		       d0 04		      bne	ParseVarMem
    703  1e5b		       a9 9b		      lda	#tVhat	; Mark the index as 27th slot
    704  1e5d		       d0 1f		      bne	ParseVarSpecial
    705  1e5f
    706  1e5f				   ParseVarMem
    707  1e5f		       c9 40		      cmp	#'@	; are we indirect through program end eg. @[0] ..
    708  1e61		       d0 04		      bne	ParseVarStack
    709  1e63		       a9 9d		      lda	#tVat
    710  1e65		       d0 17		      bne	ParseVarSpecial
    711  1e67
    712  1e67				   ParseVarStack
    713  1e67		       c9 23		      cmp	#'#	; Indirect var through top of stack eg. #[0]
    714  1e69		       d0 04		      bne	ParseVarLetters
    715  1e6b		       a9 9c		      lda	#tVhash
    716  1e6d		       d0 0f		      bne	ParseVarSpecial
    717  1e6f
    718  1e6f				   ParseVarLetters
    719  1e6f		       29 df		      and	#%11011111	; Force upper case
    720  1e71		       c9 41		      cmp	#'A
    721  1e73		       90 12		      bcc	ParseVarInvalid
    722  1e75		       c9 5b		      cmp	#'Z+1
    723  1e77		       b0 0e		      bcs	ParseVarInvalid
    724  1e79							;
    725  1e79							; The condition is true, so convert to an index, push
    726  1e79							; it onto the stack and continue running.
    727  1e79							;
    728  1e79		       38		      sec
    729  1e7a		       e9 41		      sbc	#'A	;index is zero based
    730  1e7c		       09 80		      ora	#$80
    731  1e7e
    732  1e7e				   ParseVarSpecial
    733  1e7e		       9d ba 1b 	      sta	TOKENBUFFER,x
    734  1e81		       e8		      inx
    735  1e82		       c8		      iny
    736  1e83		       84 51		      sty	CUROFF
    737  1e85		       18		      clc
    738  1e86		       60		      rts
    739  1e87
    740  1e87				   ParseVarInvalid
    741  1e87		       38		      sec
    742  1e88		       60		      rts
    743  1e89
    744  1e89
    745  1e89							;=========================================================================================================
    746  1e89							; Transfer R0 to the TOKENBUFFER
    747  1e89							;
    748  1e89				   R02TOKEN
    749  1e89		       a5 52		      lda	R0
    750  1e8b		       9d ba 1b 	      sta	TOKENBUFFER,x
    751  1e8e		       e8		      inx
    752  1e8f		       a5 53		      lda	R0+1
    753  1e91		       9d ba 1b 	      sta	TOKENBUFFER,x
    754  1e94		       e8		      inx
    755  1e95		       18		      clc
    756  1e96		       60		      rts
    757  1e97							;=========================================================================
    758  1e97							; Transfer word in Token Buffer to R0
    759  1e97				   TOKEN2R0
    760  1e97		       b9 ba 1b 	      lda	TOKENBUFFER,y
    761  1e9a		       85 52		      sta	R0
    762  1e9c		       c8		      iny
    763  1e9d		       ca		      dex
    764  1e9e		       b9 ba 1b 	      lda	TOKENBUFFER,y
    765  1ea1		       c8		      iny
    766  1ea2		       ca		      dex
    767  1ea3		       85 53		      sta	R0+1
    768  1ea5		       60		      rts
    769  1ea6							;==========================================================================
    770  1ea6							; Transfer	Display Buffer position to R0
    771  1ea6							;
    772  1ea6				   DPL2R0
    773  1ea6		       b1 59		      lda	(dpl),y
    774  1ea8		       85 52		      sta	R0
    775  1eaa		       c8		      iny
    776  1eab		       ca		      dex
    777  1eac		       b1 59		      lda	(dpl),y
    778  1eae		       c8		      iny
    779  1eaf		       ca		      dex
    780  1eb0		       85 53		      sta	R0+1
    781  1eb2		       60		      rts
    782  1eb3
    783  1eb3
    784  1eb3							;=========================================================================
    785  1eb3							; Read an IL byte lookit up in the table, of words
    786  1eb3							; set the next ilpc to point to that address
    787  1eb3							; if not found then do ussual filter stuff
    788  1eb3							; ongoto ilvectortable, not found address
    789  1eb3		       20 8d 29    iOnGoto    jsr	getILWord	; places the word into r0, pointer to table
    790  1eb6		       86 52		      stx	R0
    791  1eb8		       85 53		      sta	R0+1
    792  1eba
    793  1eba		       a4 51		      ldy	CUROFF
    794  1ebc		       b1 4f		      lda	(CURPTR),y	; get the operation byte
    795  1ebe		       a0 00		      ldy	#0
    796  1ec0		       38		      sec
    797  1ec1		       f1 52		      sbc	(R0),y	; Subract the base value
    798  1ec3		       c8		      iny
    799  1ec4		       d1 52		      cmp	(R0),y	; Check if we are in range
    800  1ec6		       b0 12		      bcs	iOnGotoInvalid
    801  1ec8		       e6 51		      inc	CUROFF	; Save the offset
    802  1eca
    803  1eca		       0a		      asl
    804  1ecb		       a8		      tay		; Turn into vector
    805  1ecc		       c8		      iny		; Inc must include the table base and entry count
    806  1ecd		       c8		      iny
    807  1ece
    808  1ece		       b1 52		      lda	(R0),y
    809  1ed0		       85 43		      sta	ILPC
    810  1ed2		       c8		      iny
    811  1ed3		       b1 52		      lda	(R0),y
    812  1ed5		       85 44		      sta	ILPC+1
    813  1ed7		       4c b1 02 	      jmp	NextIL
    814  1eda
    815  1eda				   iOnGotoInvalid
    816  1eda		       20 8d 29 	      jsr	getILWord
    817  1edd		       86 43		      stx	ILPC
    818  1edf		       85 44		      sta	ILPC+1
    819  1ee1		       4c b1 02 	      jmp	NextIL
    820  1ee4							;
    821  1ee4							;==========================================================================================
    822  1ee4							; Test the token for relop and push the value onto the stack if true
    823  1ee4							;
    824  1ee4				   iTSTRELOP
    825  1ee4		       20 91 29 	      jsr	getILByte
    826  1ee7		       8d 6b 42 	      sta	offset
    827  1eea
    828  1eea		       a4 51		      ldy	CUROFF
    829  1eec		       b1 4f		      lda	(CURPTR),y
    830  1eee		       48		      pha
    831  1eef		       29 f0		      and	#$F0
    832  1ef1		       c9 f0		      cmp	#$F0
    833  1ef3		       d0 12		      bne	iTSTRELOPNOT
    834  1ef5		       68		      pla
    835  1ef6		       29 0f		      and	#$0F	; get the actual value
    836  1ef8		       85 52		      sta	R0	; save it for later
    837  1efa		       a9 00		      lda	#0
    838  1efc		       85 53		      sta	R0+1
    839  1efe		       20 8a 2b 	      jsr	pushR0
    840  1f01		       c8		      iny
    841  1f02		       84 51		      sty	CUROFF	; save the y pointer
    842  1f04		       4c b1 02 	      jmp	NextIL
    843  1f07
    844  1f07				   iTSTRELOPNOT
    845  1f07		       68		      pla
    846  1f08		       4c d7 0b 	      jmp	tstBranch
    847  1f0b
    848  1f0b							;
    849  1f0b							;===================================================================================================
    850  1f0b							; Test the token and following info for precompiled address information
    851  1f0b							; skip it if zero, transfer and skip next integer value if not zero
    852  1f0b							; used by both gosub, goto and gofN
    853  1f0b							;
    854  1f0b				   iTSTBRANCH
    855  1f0b		       20 91 29 	      jsr	getILByte	; Get jump address if vector is valid
    856  1f0e		       8d 6b 42 	      sta	offset	; Mark offset for later if vector found
    857  1f11		       a4 51		      ldy	CUROFF	; get offset of first byte of compiled value
    858  1f13		       88		      dey		; point back to the type of branch
    859  1f14		       b1 4f		      lda	(CURPTR),y	; get the actual instructions
    860  1f16		       48		      pha		; Save till needed
    861  1f17		       c8		      iny		; back to memory vectors
    862  1f18				   ITSTBRANCHCont
    863  1f18		       b1 4f		      lda	(CURPTR),y	; Get first byte of compiled value
    864  1f1a		       85 52		      sta	R0	; R0 will contain mem pointer of present
    865  1f1c		       c8		      iny		; Point to next byte of mem vector
    866  1f1d		       b1 4f		      lda	(CURPTR),y	; It was compiled so get the hi byte value
    867  1f1f		       85 53		      sta	R0+1	; Move it into R0, R0 now contains vector address
    868  1f21		       c8		      iny		; Point to the byte past memory vector
    869  1f22		       84 51		      sty	CUROFF	; At least point past the memory vector built in
    870  1f24
    871  1f24		       05 52		      ora	R0	; Get the second byte of the mem
    872  1f26		       f0 21		      BEQ	iTSTBRANCHNoCompile	; If both are zero then not compiled
    873  1f28		       68		      pla
    874  1f29		       c9 2f		      cmp	#kTask	; Task defied with Task() so bypass the first bracket
    875  1f2b		       d0 07		      bne	iTSTBRANCHCont
    876  1f2d		       b1 4f		      lda	(CURPTR),y
    877  1f2f		       c9 e0		      cmp	#oLeftBracket
    878  1f31		       d0 17		      bne	iTSTBRANCHErr	; Well in that case something is very wrong
    879  1f33		       c8		      iny		; Increment past the bracket
    880  1f34				   iTSTBRANCHCont
    881  1f34		       b1 4f		      lda	(CURPTR),y	; We should get a datatype, if not memvector is invalid
    882  1f36		       c9 a2		      cmp	#tByte	; A byte value is valid
    883  1f38		       f0 05		      beq	ITSTBRANCHBYTE	; Skip the byte
    884  1f3a		       c9 a4		      cmp	#tInteger	; An integer value is valid
    885  1f3c		       d0 0c		      bne	iTSTBRANCHErr	; If not then we can not use the memory vector
    886  1f3e		       c8		      iny		; skip type indicator for
    887  1f3f				   ITSTBRANCHBYTE
    888  1f3f		       c8		      iny		; skip first byte of value line number
    889  1f40		       c8		      iny		; Skip second byte of line number
    890  1f41
    891  1f41				   iTSTBRANCHVALID
    892  1f41		       84 51		      sty	CUROFF
    893  1f43		       20 8a 2b 	      jsr	pushR0	; place transfer address on top of stack
    894  1f46		       4c d7 0b 	      jmp	tstBranch
    895  1f49
    896  1f49				   iTSTBRANCHNoCompile
    897  1f49		       68		      pla
    898  1f4a				   iTSTBRANCHErr
    899  1f4a		       4c b1 02 	      jmp	NextIL
    900  1f4d
    901  1f4d
    902  1f4d
    903  1f4d
    904  1f4d
    905  1f4d
    906  1f4d
    907  1f4d
    908  1f4d
    909  1f4d
------- FILE mytb.asm
------- FILE compile.asm LEVEL 2 PASS 6
      0  1f4d					      include	"compile.asm"
      1  1f4d					      Seg	Code
      2  1f4d							;
      3  1f4d							;=====================================================================
      4  1f4d							; Scan the loaded program just before running and insert memory locations of each
      5  1f4d							; line number branched to. goto gosub, gofn
      6  1f4d							; These have the format  in memory  example 81{key word token} 0000{pointer to memory location} A1{number type} 92 00{byte or integer value}
      7  1f4d				   Compile
      8  1f4d		       a9 00		      lda	#0
      9  1f4f		       85 52		      sta	R0	; keep track of how many errors we find
     10  1f51		       a5 5b		      lda	RunMode
     11  1f53		       48		      pha
     12  1f54		       e6 5b		      inc	RunMode	; force run mode for error reporting
     13  1f56		       a5 4f		      lda	CURPTR
     14  1f58		       48		      pha
     15  1f59		       a5 50		      lda	CURPTR+1
     16  1f5b		       48		      pha
     17  1f5c		       a5 51		      lda	CUROFF
     18  1f5e		       48		      pha
     19  1f5f		       ad 6f 42 	      lda	ProgramStart
     20  1f62		       85 59		      sta	dpl
     21  1f64		       ad 70 42 	      lda	ProgramStart+1
     22  1f67		       85 5a		      sta	dpl+1
     23  1f69
     24  1f69				   CompileLineStart
     25  1f69		       a5 59		      lda	dpl
     26  1f6b		       cd 71 42 	      cmp	ProgramEnd
     27  1f6e		       d0 07		      bne	CompileContinue
     28  1f70		       a5 5a		      lda	dpl+1
     29  1f72		       cd 72 42 	      cmp	ProgramEnd+1
     30  1f75		       f0 3f		      beq	CompileComplete
     31  1f77
     32  1f77				   CompileContinue
     33  1f77		       a0 03		      ldy	#3	; first real character in the line
     34  1f79
     35  1f79				   CompileLoop
     36  1f79		       b1 59		      lda	(dpl),y	; get the byte
     37  1f7b		       f0 27		      beq	CompileEndOfLine	; End of line, so goto next line for scan
     38  1f7d		       c8		      iny		; Pass this byte
     39  1f7e		       c9 07		      cmp	#kGoto
     40  1f80		       f0 58		      beq	CompileField	; Will update the memory address and move pointer to next value
     41  1f82		       c9 08		      cmp	#kGosub
     42  1f84		       f0 54		      beq	CompileField	; Will update the memory address and move pointer to next value
     43  1f86		       c9 37		      cmp	#kGofn
     44  1f88		       f0 50		      beq	CompileField	; Will update the memory address and move pointer to next value
     45  1f8a		       c9 2f		      cmp	#kTask
     46  1f8c		       f0 4c		      beq	CompileField
     47  1f8e		       c9 0a		      cmp	#kRem
     48  1f90		       f0 12		      beq	CompileRem	; Skip until end of line
     49  1f92		       c9 a0		      cmp	#tString
     50  1f94		       f0 2f		      beq	CompileString
     51  1f96		       c9 a4		      cmp	#tInteger
     52  1f98		       f0 06		      beq	CompileInteger
     53  1f9a		       c9 a2		      cmp	#tByte
     54  1f9c		       f0 03		      beq	CompileByte
     55  1f9e		       d0 d9		      bne	CompileLoop	; Next character
     56  1fa0
     57  1fa0				   CompileInteger
     58  1fa0		       c8		      iny
     59  1fa1				   CompileByte
     60  1fa1		       c8		      iny
     61  1fa2		       d0 d5		      bne	CompileLoop
     62  1fa4				   CompileRem
     63  1fa4				   CompileEndOfLine
     64  1fa4		       a0 00		      ldy	#0
     65  1fa6		       b1 59		      lda	(dpl),y
     66  1fa8		       18		      clc
     67  1fa9		       65 59		      adc	dpl
     68  1fab		       85 59		      sta	dpl
     69  1fad		       a9 00		      lda	#0
     70  1faf		       65 5a		      adc	dpl+1
     71  1fb1		       85 5a		      sta	dpl+1
     72  1fb3
     73  1fb3		       4c 69 1f 	      jmp	CompileLineStart
     74  1fb6
     75  1fb6				   CompileComplete
     76  1fb6		       68		      pla
     77  1fb7		       85 51		      sta	CUROFF
     78  1fb9		       68		      pla
     79  1fba		       85 50		      sta	CURPTR+1
     80  1fbc		       68		      pla
     81  1fbd		       85 4f		      sta	CURPTR
     82  1fbf		       68		      pla
     83  1fc0		       85 5b		      sta	RunMode
     84  1fc2		       a5 52		      lda	R0	; returning the number of errors
     85  1fc4		       60		      rts
     86  1fc5
     87  1fc5
     88  1fc5				   CompileString
     89  1fc5		       c8		      iny		; point past first "
     90  1fc6				   CompileStringLoop
     91  1fc6		       b1 59		      lda	(dpl),y
     92  1fc8		       f0 0d		      beq	CompileStrDone2	; end of line
     93  1fca		       c9 22		      cmp	#'"	; end of string
     94  1fcc		       f0 08		      beq	CompileStrDone
     95  1fce		       c9 5c		      cmp	#'\	; escape character
     96  1fd0		       d0 01		      bne	CompileStrNext
     97  1fd2		       c8		      iny		; skip the escape character
     98  1fd3				   CompileStrNext
     99  1fd3		       c8		      iny		; Next character
    100  1fd4		       d0 f0		      bne	CompileStringLoop	; test for end
    101  1fd6				   CompileStrDone
    102  1fd6		       c8		      iny
    103  1fd7				   CompileStrDone2
    104  1fd7		       4c 79 1f 	      Jmp	CompileLoop
    105  1fda							;
    106  1fda							;===============================================================
    107  1fda							; on entry y points to storage location y+2 points to line number
    108  1fda							; on exit y points to line number type
    109  1fda
    110  1fda		       85 52	   CompileField sta	R0
    111  1fdc		       98		      tya		; save the y pointer to store the memory value
    112  1fdd		       48		      pha
    113  1fde		       c8		      iny		; Skip over the memory vector
    114  1fdf		       c8		      iny
    115  1fe0		       a5 52		      lda	R0
    116  1fe2		       c9 2f		      cmp	#kTask	; for a task it is the next byte after a bracket
    117  1fe4		       d0 07		      bne	CompNoBracket
    118  1fe6
    119  1fe6		       b1 59		      lda	(dpl),y	; Lets make sure it is a )
    120  1fe8		       c9 e0		      cmp	#oLeftBracket
    121  1fea		       d0 01		      bne	CompNoBracket	; in case of error
    122  1fec		       c8		      iny		; skip the bracket
    123  1fed
    124  1fed				   CompNoBracket
    125  1fed		       a9 00		      lda	#0	; In case the value is a byte
    126  1fef		       85 53		      sta	R0+1
    127  1ff1
    128  1ff1		       b1 59		      lda	(dpl),Y	; get the type of the next byte t something or other
    129  1ff3		       c9 a2		      cmp	#tByte
    130  1ff5		       f0 15		      beq	CompByteLoad
    131  1ff7		       c9 a4		      cmp	#tInteger
    132  1ff9		       f0 04		      beq	CompIntLoad	; If it is not a number then get out of here
    133  1ffb		       68		      pla
    134  1ffc		       4c 79 1f 	      jmp	CompileLoop	; Ignore the saved stack
    135  1fff				   CompIntLoad
    136  1fff		       c8		      iny
    137  2000		       b1 59		      lda	(dpl),y
    138  2002		       85 52		      sta	R0
    139  2004		       c8		      iny
    140  2005		       b1 59		      lda	(dpl),y
    141  2007		       85 53		      sta	R0+1
    142  2009		       4c 11 20 	      jmp	CompFindLine
    143  200c				   CompByteLoad
    144  200c		       c8		      iny
    145  200d		       b1 59		      lda	(dpl),y
    146  200f		       85 52		      sta	R0
    147  2011				   CompFindLine
    148  2011		       20 d6 29 	      jsr	findLine
    149  2014		       f0 1d		      beq	CompFoundLine
    150  2016		       e6 52		      inc	R0	; number of errors
    151  2018
    152  2018		       a5 59		      lda	dpl
    153  201a		       85 4f		      sta	CURPTR
    154  201c		       a5 5a		      lda	dpl+1
    155  201e		       85 50		      sta	CURPTR+1
    156  2020		       84 51		      sty	CUROFF
    157  2022
    158  2022		       a2 14		      ldx	#ERR_LINE_NOT_FOUND
    159  2024		       a9 00		      lda	#0
    160  2026
    161  2026		       20 27 06 	      jsr	DisplayError
    162  2029		       20 ab 21 	      jsr	PrintProgramLine
    163  202c
    164  202c		       68		      pla
    165  202d		       a8		      tay
    166  202e		       c8		      iny
    167  202f		       c8		      iny
    168  2030		       4c 79 1f 	      jmp	CompileLoop
    169  2033
    170  2033				   CompFoundLine
    171  2033		       68		      pla
    172  2034		       a8		      tay
    173  2035		       a5 4f		      lda	CURPTR
    174  2037		       91 59		      sta	(dpl),y
    175  2039		       c8		      iny
    176  203a		       a5 50		      lda	CURPTR+1
    177  203c		       91 59		      sta	(dpl),y
    178  203e		       c8		      iny
    179  203f		       4c 79 1f 	      jmp	CompileLoop
    180  2042
    181  2042
    182  2042
    183  2042
    184  2042
    185  2042
    186  2042
    187  2042
    188  2042
    189  2042
    190  2042
    191  2042
    192  2042
    193  2042
    194  2042
    195  2042
    196  2042
    197  2042
    198  2042
    199  2042
    200  2042
    201  2042
    202  2042
    203  2042
    204  2042
    205  2042
    206  2042
    207  2042
    208  2042
    209  2042
    210  2042
    211  2042
    212  2042
    213  2042
    214  2042
    215  2042
    216  2042
    217  2042
    218  2042
    219  2042
    220  2042
------- FILE mytb.asm
------- FILE print.asm LEVEL 2 PASS 6
      0  2042					      include	"print.asm"
      1  2042					      Seg	Code
      2  2042							;---------------------------
      3  2042							; Print 24-bit decimal number or  16bit unsigned
      4  2042							; ---------------------------
      5  2042							; On entry, R0=number to print
      6  2042							;	     Defaults to pad=0 , y=21 default
      7  2042							;	     R2 = 1 unsigned 16 bit
      8  2042							;	     R2 = 0 Signed   16 bit
      9  2042
     10  2042							; On entry at PrintDecPadded:
     11  2042							;	     X = padding, Y=(number of digits)*3-3, eg 21 for 8 digits
     12  2042
     13  2042							; On exit,  A,X,Y,num,pad corrupted
     14  2042							; Size      129 bytes, Table 24 bytes	--- total 153
     15  2042							; -----------------------------------------------------------------
     16  2042
     17  2042				   PrintDecimal
     18  2042		       8a		      TXA
     19  2043		       48		      pha
     20  2044		       98		      tya
     21  2045		       48		      pha
     22  2046		       a9 00		      lda	#0
     23  2048		       8d dd 20 	      sta	pad
     24  204b		       a0 15		      LDY	#21	; Offset to powers of ten
     25  204d		       4c 53 20 	      JMP	PrintDo
     26  2050
     27  2050				   PrintDecPadded
     28  2050		       8e dd 20 	      stx	pad
     29  2053
     30  2053				   PrintDo
     31  2053		       a9 00		      lda	#0
     32  2055		       85 54		      sta	R1
     33  2057
     34  2057		       a5 58		      lda	R2
     35  2059		       c9 a9		      cmp	#tUint
     36  205b		       f0 29		      beq	PrintPos
     37  205d
     38  205d		       a5 53		      lda	R0+1	;MSB has sign
     39  205f		       10 25		      bpl	PrintPos	;it's a positive number;
     40  2061
     41  2061
     42  2061							; Negative numbers need more work.  Invert all the bits,
     43  2061							; then add one.
     44  2061
     45  2061		       a9 2d		      lda	#'-
     46  2063		       20 e3 19 	      jsr	VOUTCH	;print the negative sign
     47  2066
     48  2066		       a9 ff		      lda	#$FF
     49  2068		       85 54		      sta	R1
     50  206a		       a5 52		      lda	R0	;invert bits
     51  206c		       49 ff		      eor	#$ff
     52  206e		       85 52		      sta	R0
     53  2070		       a5 53		      lda	R0+1
     54  2072		       49 ff		      eor	#$ff
     55  2074		       85 53		      sta	R0+1
     56  2076		       a5 54		      lda	R1
     57  2078		       49 ff		      eor	#$ff
     58  207a		       85 54		      sta	R1
     59  207c		       e6 52		      inc	R0	;add one
     60  207e		       d0 06		      bne	PrintPos
     61  2080		       e6 53		      inc	R0+1
     62  2082		       d0 02		      bne	PrintPos
     63  2084		       e6 54		      inc	R1
     64  2086				   PrintPos
     65  2086
     66  2086				   PrDec24Lp1
     67  2086		       a2 ff		      LDX	#$FF
     68  2088		       38		      SEC		; Start with digit=-1
     69  2089				   PrDec24Lp2
     70  2089		       a5 52		      LDA	R0+0
     71  208b		       f9 de 20 	      SBC	PrDec24Tens+0,Y
     72  208e		       85 52		      STA	R0+0	; Subtract current tens
     73  2090		       a5 53		      LDA	R0+1
     74  2092		       f9 df 20 	      SBC	PrDec24Tens+1,Y
     75  2095		       85 53		      STA	R0+1
     76  2097		       a5 54		      LDA	R0+2
     77  2099		       f9 e0 20 	      SBC	PrDec24Tens+2,Y
     78  209c		       85 54		      STA	R0+2
     79  209e		       e8		      INX
     80  209f		       b0 e8		      BCS	PrDec24Lp2	; Loop until <0
     81  20a1		       a5 52		      LDA	R0+0
     82  20a3		       79 de 20 	      ADC	PrDec24Tens+0,Y
     83  20a6		       85 52		      STA	R0+0	; Add current tens back in
     84  20a8		       a5 53		      LDA	R0+1
     85  20aa		       79 df 20 	      ADC	PrDec24Tens+1,Y
     86  20ad		       85 53		      STA	R0+1
     87  20af		       a5 54		      LDA	R0+2
     88  20b1		       79 e0 20 	      ADC	PrDec24Tens+2,Y
     89  20b4		       85 54		      STA	R0+2
     90  20b6		       8a		      TXA
     91  20b7		       d0 07		      BNE	PrDec24Digit	; Not zero, print it
     92  20b9		       ad dd 20 	      LDA	pad
     93  20bc		       d0 09		      BNE	PrDec24Print
     94  20be		       f0 0a		      BEQ	PrDec24Next	; pad<>0, use it
     95  20c0				   PrDec24Digit
     96  20c0		       a2 30		      LDX	#'0
     97  20c2		       8e dd 20 	      STX	pad	; No more zero padding
     98  20c5		       09 30		      ORA	#'0	; Print this digit
     99  20c7				   PrDec24Print
    100  20c7		       20 e3 19 	      JSR	VOUTCH
    101  20ca				   PrDec24Next
    102  20ca		       88		      DEY
    103  20cb		       88		      DEY
    104  20cc		       88		      DEY
    105  20cd		       f0 07		      beq	PrDec24LastDigit
    106  20cf		       10 b5		      BPL	PrDec24Lp1	; Loop for next digit
    107  20d1		       68		      pla
    108  20d2		       a8		      tay
    109  20d3		       68		      pla
    110  20d4		       aa		      tax
    111  20d5		       60		      RTS
    112  20d6				   PrDec24LastDigit
    113  20d6		       a2 30		      LDX	#'0
    114  20d8		       8e dd 20 	      STX	pad	; No more zero padding
    115  20db		       d0 a9		      BNE	PrDec24Lp1	; Loop for last digit
    116  20dd
      0  20dd				   pad	      db	0
      1  20dd		       00		      .byte.b	0
    118  20de
    119  20de				   PrDec24Tens
      0  20de					      dw	1
      1  20de		       01 00		      .word.w	1
      0  20e0					      db	(1 / 65536)
      1  20e0		       00		      .byte.b	(1 / 65536)
      0  20e1					      dw	10
      1  20e1		       0a 00		      .word.w	10
      0  20e3					      db	(10 / 65536)
      1  20e3		       00		      .byte.b	(10 / 65536)
      0  20e4					      dw	100
      1  20e4		       64 00		      .word.w	100
      0  20e6					      db	(100 / 65536)
      1  20e6		       00		      .byte.b	(100 / 65536)
      0  20e7					      dw	1000
      1  20e7		       e8 03		      .word.w	1000
      0  20e9					      db	(1000 / 65536)
      1  20e9		       00		      .byte.b	(1000 / 65536)
      0  20ea					      dw	10000
      1  20ea		       10 27		      .word.w	10000
      0  20ec					      db	(10000 / 65536)
      1  20ec		       00		      .byte.b	(10000 / 65536)
      0  20ed					      dw	100000
      1  20ed		       a0 86		      .word.w	100000
      0  20ef					      db	(100000 / 65536)
      1  20ef		       01		      .byte.b	(100000 / 65536)
      0  20f0					      dw	1000000
      1  20f0		       40 42		      .word.w	1000000
      0  20f2					      db	(1000000 / 65536)
      1  20f2		       0f		      .byte.b	(1000000 / 65536)
      0  20f3					      dw	10000000
      1  20f3		       80 96		      .word.w	10000000
      0  20f5					      db	(10000000 / 65536)
      1  20f5		       98		      .byte.b	(10000000 / 65536)
    136  20f6							;=====================================================
    137  20f6							; Print character in A as two hex digits to the Console
    138  20f6
    139  20f6		       48	   HexToOut   pha		;save return value
    140  20f7		       48		      pha
    141  20f8		       4a		      lsr		;a  ;move top nibble to bottom
    142  20f9		       4a		      lsr		;a
    143  20fa		       4a		      lsr		;a
    144  20fb		       4a		      lsr		;a
    145  20fc		       20 05 21 	      jsr	hexta	;output nibble
    146  20ff		       68		      pla
    147  2100		       20 05 21 	      jsr	hexta
    148  2103		       68		      pla		;restore
    149  2104		       60		      rts
    150  2105							;
    151  2105		       29 0f	   hexta      and	#%0001111
    152  2107		       c9 0a		      cmp	#$0a
    153  2109		       18		      clc
    154  210a		       30 02		      bmi	hexta1
    155  210c		       69 07		      adc	#7
    156  210e		       69 30	   hexta1     adc	#'0	;then fall into...
    157  2110		       4c e3 19 	      jmp	VOUTCH
    158  2113							;
    159  2113							;=====================================================
    160  2113							; Print the string that immediately follows the JSR to
    161  2113							; this function.  Stops when a null byte is found,
    162  2113							; then returns to the instruction immediately
    163  2113							; following the null.
    164  2113							;
    165  2113							; Thanks to Ross Archer for this code.
    166  2113							; http://www.6502.org/source/io/primm.htm
    167  2113							;
    168  2113
    169  2113		       68	   tbputs     pla		;Get the low part of "return" address
    170  2114							;(data start address)
    171  2114		       85 5e		      sta	PrtFrom
    172  2116		       68		      pla
    173  2117		       85 5f		      sta	PrtFrom+1	;Get the high part of "return" address
    174  2119							;(data start address)
    175  2119							;Note: actually we're pointing one short
    176  2119		       a0 01	   PSINB      ldy	#1
    177  211b		       b1 5e		      lda	(PrtFrom),y	;Get the next string character
    178  211d		       e6 5e		      inc	PrtFrom	;update the pointer
    179  211f		       d0 02		      bne	PSICHO	;if not, we're pointing to next character
    180  2121		       e6 5f		      inc	PrtFrom+1	;account for page crossing
    181  2123		       09 00	   PSICHO     ora	#0	;Set flags according to contents of
    182  2125							;   Accumulator
    183  2125		       f0 06		      beq	PSIX1	;don't print the final NULL
    184  2127		       20 e3 19 	      jsr	VOUTCH	;write it out
    185  212a		       4c 19 21 	      jmp	PSINB	;back around
    186  212d		       e6 5e	   PSIX1      inc	PrtFrom
    187  212f		       d0 02		      bne	PSIX2
    188  2131		       e6 5f		      inc	PrtFrom+1	;account for page crossing
    189  2133		       6c 5e 00    PSIX2      jmp	(PrtFrom)	;return to byte following final NULL
    190  2136
    191  2136							;+
    192  2136							;====================================================
    193  2136		       42 67	   PrtTerm    equ	tempy
    194  2136
    195  2136							; on exit Print Y has the offset to use
    196  2136							; input y =	 addr low
    197  2136							;	 x =	 addr high
    198  2136							;	 a =	 termination string
    199  2136
    200  2136
    201  2136				   PrtQuoted		; Print a quoted string from the current program space
    202  2136		       a9 22		      lda	#'"
    203  2138		       a4 51		      ldy	CUROFF
    204  213a		       d1 4f		      cmp	(CURPTR),y	; the opening quote, can to " or ' so long as they match
    205  213c		       d0 03		      bne	PrtNoInc
    206  213e		       c8		      iny
    207  213f		       84 51		      sty	CUROFF
    208  2141				   PrtNoInc
    209  2141		       8d 67 42 	      sta	PrtTerm
    210  2144
    211  2144				   PrtPrgString 		; Print a terminated string from the static program space
    212  2144		       a4 51		      ldy	CUROFF
    213  2146		       a5 4f		      lda	CURPTR
    214  2148		       85 5e		      sta	PrtFrom
    215  214a		       a5 50		      lda	CURPTR+1
    216  214c		       85 5f		      sta	PrtFrom+1
    217  214e		       4c 5a 21 	      jmp	PrtLoop
    218  2151
    219  2151							; Print a string pointed to by x= h, y=l terminated by value in  accumulator
    220  2151							; Return y as the length
    221  2151
    222  2151		       86 5f	   PrtStr     stx	PrtFrom+1
    223  2153		       84 5e		      sty	PrtFrom
    224  2155		       8d 67 42 	      sta	PrtTerm
    225  2158		       a0 00		      ldy	#0
    226  215a							;
    227  215a							; On entry here ptrfrom and prtterm point to area to print
    228  215a							;
    229  215a		       b1 5e	   PrtLoop    lda	(PrtFrom),y
    230  215c		       cd 67 42 	      cmp	PrtTerm
    231  215f		       f0 0b		      beq	PrtEnd
    232  2161		       c9 00		      cmp	#0	; always end if 0 is found
    233  2163		       f0 07		      beq	PrtEnd
    234  2165		       20 e3 19 	      jsr	VOUTCH
    235  2168		       c8		      iny
    236  2169		       4c 5a 21 	      jmp	PrtLoop
    237  216c		       c8	   PrtEnd     iny		;return byte after the write
    238  216d		       60		      rts
    239  216e
    240  216e							;
    241  216e							;=======================================================
    242  216e							; Print all Variables
    243  216e				   PrintAllVars
    244  216e		       a0 00		      ldy	#0
    245  2170		       a9 41		      lda	#'A
    246  2172				   PrintAllVarsLoop
    247  2172		       48		      pha
    248  2173		       b1 41		      lda	(VARIABLES),y
    249  2175		       85 52		      sta	R0
    250  2177		       c8		      iny
    251  2178		       b1 41		      lda	(VARIABLES),y
    252  217a		       85 53		      sta	R0+1
    253  217c
    254  217c		       68		      pla		;get the current letter
    255  217d		       48		      pha
    256  217e		       20 e3 19 	      jsr	VOUTCH
    257  2181		       20 13 21 	      jsr	puts
      0  2184					      db	"=",0
      1  2184		       3d 00		      .byte.b	"=",0
    259  2186		       68		      pla
    260  2187		       aa		      tax
    261  2188		       e8		      inx
    262  2189		       8a		      txa
    263  218a		       48		      pha		;
    264  218b
    265  218b		       98		      tya
    266  218c		       48		      pha
    267  218d		       20 42 20 	      jsr	PrintDecimal
    268  2190		       20 13 21 	      jsr	puts
      0  2193					      db	" ",0
      1  2193		       20 00		      .byte.b	" ",0
    270  2195		       68		      pla
    271  2196		       a8		      tay
    272  2197		       c8		      iny
    273  2198		       c0 34		      cpy	#26<<1	; A-Z 2 bytes each
    274  219a		       90 d6		      bcc	PrintAllVarsLoop
    275  219c		       20 d5 2c 	      jsr	CRLF
    276  219f
    277  219f		       68		      pla
    278  21a0		       60		      rts
    279  21a1							;==========================================================================================================
    280  21a1							;Debug   Print a Program Line from compile buffer
    281  21a1							;
    282  21a1				   DebugPrintProgramLine
    283  21a1		       48		      pha
    284  21a2		       a9 ba		      lda	#TOKENBUFFER&$FF
    285  21a4		       85 59		      sta	dpl
    286  21a6		       a9 1b		      lda	#TOKENBUFFER>>8
    287  21a8		       85 5a		      sta	dpl+1
    288  21aa		       68		      pla
    289  21ab
    290  21ab							; Decode and print a line of program text
    291  21ab							; on entry	 dpl points to line of code to print
    292  21ab							; on exit	 no change in reg or dpl
    293  21ab							;
    294  21ab				   PrintProgramLine
    295  21ab
    296  21ab		       8e ba 1c 	      stx	printStorage
    297  21ae		       8c bb 1c 	      sty	printStorage+1
    298  21b1		       48		      pha
    299  21b2
    300  21b2		       a0 01		      ldy	#1	; index into the token buffer
    301  21b4		       84 58		      sty	R2	; print unsigned decimal
    302  21b6		       a0 00		      ldy	#0
    303  21b8		       b1 59		      lda	(dpl),y	; get number of bytes
    304  21ba		       aa		      tax		; place pointer into x
    305  21bb		       c8		      iny
    306  21bc		       ca		      dex		; Deduct the length byte
    307  21bd		       20 a6 1e 	      jsr	DPL2R0	; Print the line number
    308  21c0		       20 42 20 	      jsr	PrintDecimal
    309  21c3		       a9 20		      lda	#$20
    310  21c5		       20 e3 19 	      jsr	VOUTCH
    311  21c8
    312  21c8				   PrintProgLoop
    313  21c8		       b1 59		      lda	(dpl),y	; Get a character
    314  21ca		       f0 4a		      beq	PrintProgramComplete	; If zero then at end of line
    315  21cc		       29 80		      and	#%10000000	; check for Keyword or Variable/operator
    316  21ce		       f0 76		      beq	PrintKeyword	; It uses the index in a to find a keyword
    317  21d0
    318  21d0				   PrintProgVars
    319  21d0		       b1 59		      lda	(dpl),y
    320  21d2		       29 e0		      and	#$E0	; Check for operators and punctuation
    321  21d4		       c9 e0		      cmp	#$E0
    322  21d6		       f0 6b		      beq	PrintProgOperatorVect
    323  21d8
    324  21d8		       b1 59		      lda	(dpl),y	; Get char back again and check for var
    325  21da		       c9 9e		      cmp	#$9D+1
    326  21dc		       90 62		      bcc	PrintProgVariableVec
    327  21de		       29 a0		      and	#$A0	; Check for a valid datatype
    328  21e0		       c9 a0		      cmp	#$A0
    329  21e2		       f0 06		      beq	PrintDataType	; if not just print the character
    330  21e4		       b1 59		      lda	(dpl),y	; Get char back again and check for data type
    331  21e6		       ca		      dex		; Ok we are processing it
    332  21e7		       c8		      iny
    333  21e8		       d0 25		      bne	PrintContinue	; Print and do the next character
    334  21ea
    335  21ea				   PrintDataType
    336  21ea		       b1 59		      lda	(dpl),y	; Get char back again and check for data type
    337  21ec		       c9 a0		      cmp	#tString
    338  21ee		       f0 31		      beq	PrintStringVariable
    339  21f0
    340  21f0				   PrintProgNumber
    341  21f0		       c8		      iny		; we have a numerical integer value
    342  21f1		       ca		      dex
    343  21f2		       48		      pha
    344  21f3		       a9 00		      lda	#0
    345  21f5		       85 53		      sta	R0+1
    346  21f7		       85 58		      sta	R2	; Set to print signed number
    347  21f9		       b1 59		      lda	(dpl),y
    348  21fb		       85 52		      sta	R0
    349  21fd		       68		      pla
    350  21fe		       c9 a4		      cmp	#tInteger
    351  2200		       d0 06		      bne	PrintProgNumDone
    352  2202		       c8		      iny
    353  2203		       ca		      dex
    354  2204		       b1 59		      lda	(dpl),y
    355  2206		       85 53		      sta	R0+1
    356  2208
    357  2208				   PrintProgNumDone
    358  2208		       c8		      iny
    359  2209		       ca		      dex
    360  220a		       20 42 20 	      jsr	PrintDecimal
    361  220d
    362  220d				   PrintProgNext
    363  220d		       a9 20		      lda	#$20
    364  220f				   PrintContinue
    365  220f		       20 e3 19 	      jsr	VOUTCH
    366  2212				   PrintProgSkipSpace
    367  2212		       e0 00		      cpx	#0
    368  2214		       d0 b2		      bne	PrintProgLoop
    369  2216				   PrintProgramComplete
    370  2216		       20 d5 2c 	      jsr	CRLF
    371  2219
    372  2219		       ae ba 1c 	      ldx	printStorage
    373  221c		       ac bb 1c 	      ldy	printStorage+1
    374  221f		       68		      pla
    375  2220
    376  2220		       60		      rts
    377  2221							;=================================================================================================================
    378  2221							; Print a string variable including the quotes
    379  2221							; On Input	 y is offset into buffer
    380  2221							; On Exit	 y is updated to new offset
    381  2221
    382  2221				   PrintStringVariable
    383  2221		       c8		      iny
    384  2222		       a9 22		      lda	#'"
    385  2224		       20 e3 19 	      jsr	VOUTCH
    386  2227		       c8		      iny
    387  2228		       a5 59		      lda	dpl
    388  222a		       85 5e		      sta	PrtFrom
    389  222c		       a5 5a		      lda	dpl+1
    390  222e		       85 5f		      sta	PrtFrom+1
    391  2230		       a9 22		      lda	#'"
    392  2232		       8d 67 42 	      sta	PrtTerm
    393  2235		       20 5a 21 	      jsr	PrtLoop
    394  2238		       a9 22		      lda	#'"
    395  223a		       20 e3 19 	      jsr	VOUTCH
    396  223d		       4c 0d 22 	      jmp	PrintProgNext
    397  2240
    398  2240				   PrintProgVariableVec
    399  2240		       4c e0 22 	      jmp	PrintProgVariable
    400  2243
    401  2243				   PrintProgOperatorVect
    402  2243		       4c b7 22 	      jmp	PrintProgOperator
    403  2246							;===============================================================================================================
    404  2246							; On entry dpl points to the buffer we are printing from
    405  2246							;	    y	current offset into the dpl buffer
    406  2246							; all registers preserved
    407  2246							;
    408  2246				   PrintKeyword
    409  2246
    410  2246		       b1 59		      lda	(dpl),y	; Get the Keyword token to lookup
    411  2248		       85 52		      sta	R0	; The value we are looking for
    412  224a		       c9 07		      cmp	#kGoto	; Test if we must skip an extra two bytes for branch type instructions
    413  224c		       f0 0c		      beq	PrintKeyBranch
    414  224e		       c9 08		      cmp	#kGosub
    415  2250		       f0 08		      beq	PrintKeyBranch
    416  2252		       c9 2f		      cmp	#kTask
    417  2254		       f0 04		      beq	PrintKeyBranch
    418  2256		       c9 37		      cmp	#kGofn
    419  2258		       d0 04		      bne	PrintKeySkipped
    420  225a				   PrintKeyBranch
    421  225a		       c8		      iny		; Skip the compiled memory address
    422  225b		       c8		      iny
    423  225c		       ca		      dex		; Change number of bytes to print
    424  225d		       ca		      dex		; Remove the bytes to print
    425  225e
    426  225e				   PrintKeySkipped
    427  225e		       c8		      iny		; Inc y to point to the next char to be printed
    428  225f		       ca		      dex		; Reduce number of bytes to print
    429  2260		       98		      tya		; Save y and x for the return
    430  2261		       48		      pha
    431  2262		       8a		      txa
    432  2263		       48		      pha
    433  2264
    434  2264		       a9 83		      lda	#KeyWordTable&$FF	; R1 to point to the entry in the keyword table
    435  2266		       85 54		      sta	R1
    436  2268		       a9 1a		      lda	#KeyWordTable>>8
    437  226a		       85 55		      sta	R1+1
    438  226c
    439  226c
    440  226c				   PrintKeyLoop
    441  226c		       a0 00		      ldy	#0	; Index into the keyword entry
    442  226e		       b1 54		      lda	(R1),y	; Get token value for this entry
    443  2270		       c8		      iny		; Point to first byte of key
    444  2271		       c5 52		      cmp	R0	; Compare to the token we are looking for
    445  2273		       f0 16		      Beq	PrintKeyFound	; We have the correct Token, now print it
    446  2275
    447  2275				   PrintKeyNext
    448  2275		       b1 54		      lda	(R1),y	; Get key letter
    449  2277		       c8		      iny		; Point to next byte always
    450  2278		       29 20		      and	#%00100000	; Check for last character in key work
    451  227a		       d0 f9		      bne	PrintKeyNext	; If it is not set then get next character
    452  227c
    453  227c		       98		      tya		; Trabsfer y to a for the addition
    454  227d		       18		      clc		; Table > 256 bytes
    455  227e		       65 54		      adc	R1
    456  2280		       85 54		      sta	R1
    457  2282		       a9 00		      lda	#0
    458  2284		       65 55		      adc	R1+1
    459  2286		       85 55		      sta	R1+1
    460  2288		       4c 6c 22 	      jmp	PrintKeyLoop
    461  228b
    462  228b				   PrintKeyFound
    463  228b		       b1 54		      lda	(R1),y	; letter from key table
    464  228d		       48		      pha		; Save it for later check
    465  228e		       09 20		      ora	#%00100000	; Force it to lower case
    466  2290		       20 e3 19 	      jsr	VOUTCH	; Print it out
    467  2293		       c8		      iny		; Point to next character
    468  2294		       68		      pla		; Restore the value
    469  2295		       29 20		      and	#%00100000	; Check if it was last char in keyword
    470  2297		       d0 f2		      bne	PrintKeyFound	; Yes, then goto all done printing
    471  2299
    472  2299		       68		      pla		; Restore the x and y values
    473  229a		       aa		      tax
    474  229b		       68		      pla
    475  229c		       a8		      tay
    476  229d
    477  229d				   PrintChkRem
    478  229d		       a9 0a		      lda	#kRem
    479  229f		       c5 52		      cmp	R0
    480  22a1		       d0 11		      bne	PrintKeyDone
    481  22a3				   PrintKeyRem
    482  22a3		       a5 59		      lda	dpl	; if it is a rem then we must print the entire line
    483  22a5		       85 5e		      sta	PrtFrom
    484  22a7		       a5 5a		      lda	dpl+1
    485  22a9		       85 5f		      sta	PrtFrom+1
    486  22ab		       a9 00		      lda	#0
    487  22ad		       8d 67 42 	      sta	PrtTerm
    488  22b0		       20 5a 21 	      jsr	PrtLoop
    489  22b3		       88		      dey		; point back to the terminating null value
    490  22b4				   PrintKeyDone
    491  22b4		       4c 0d 22 	      jmp	PrintProgNext
    492  22b7							;==================================================================================================================
    493  22b7							;Print Variable, number or operator
    494  22b7				   PrintProgOperator
    495  22b7		       b1 59		      lda	(dpl),y
    496  22b9		       c8		      iny
    497  22ba		       ca		      dex
    498  22bb		       8e bc 1c 	      stx	printStorage+2
    499  22be		       a2 00		      ldx	#0
    500  22c0				   PrintOprLoop
    501  22c0		       dd 6d 1a 	      cmp	OperValues,x
    502  22c3		       f0 03		      beq	PrintOprFound
    503  22c5		       e8		      inx
    504  22c6		       d0 f8		      bne	PrintOprLoop
    505  22c8				   PrintOprFound
    506  22c8		       8a		      txa
    507  22c9		       0a		      asl
    508  22ca		       aa		      tax
    509  22cb		       bd 3f 1a 	      lda	Operators,x
    510  22ce		       20 e3 19 	      jsr	VOUTCH
    511  22d1		       e8		      inx
    512  22d2		       bd 3f 1a 	      lda	Operators,x
    513  22d5		       f0 03		      beq	PrintOprDone
    514  22d7		       20 e3 19 	      jsr	VOUTCH
    515  22da				   PrintOprDone
    516  22da		       ae bc 1c 	      ldx	printStorage+2
    517  22dd		       4c 0d 22 	      jmp	PrintProgNext
    518  22e0
    519  22e0							;=================================================================================================================
    520  22e0							;KeywordsMax	    equ     128 		   ; Allow to be range	1 to 127  key words, high order bit must be 0 for it to be a key word
    521  22e0							;tVa		    equ     128 		   ; Variable A = 1, .... Z = 26   ^ = 27
    522  22e0							;tVb		    equ     130 		   ; Variables 128 - 157  $80-$9D
    523  22e0							;tVhat 	    equ     155 		   ; Variable ^
    524  22e0							;tVhash	    equ     156 		   ; Variable #
    525  22e0							;tVat		    equ     157 		   ; Variable @ = 0
    526  22e0				   PrintProgVariable
    527  22e0		       b1 59		      lda	(dpl),y
    528  22e2		       c8		      iny
    529  22e3		       ca		      dex
    530  22e4		       c9 9b		      cmp	#tVhat
    531  22e6		       d0 04		      bne	PrintProgChkHash
    532  22e8		       a9 5e		      lda	#'^
    533  22ea		       d0 15		      bne	PrintTheVar
    534  22ec				   PrintProgChkHash
    535  22ec		       c9 9c		      cmp	#tVhash
    536  22ee		       d0 04		      bne	PrintProgChkAt
    537  22f0		       a9 23		      lda	#'#
    538  22f2		       d0 0d		      bne	PrintTheVar
    539  22f4				   PrintProgChkAt
    540  22f4		       c9 9d		      cmp	#tVat
    541  22f6		       d0 04		      bne	PrintProgVarLetter
    542  22f8		       a9 40		      lda	#'@
    543  22fa		       d0 05		      bne	PrintTheVar
    544  22fc				   PrintProgVarLetter
    545  22fc		       29 7f		      and	#%01111111
    546  22fe		       18		      clc
    547  22ff		       69 41		      adc	#'A
    548  2301				   PrintTheVar
    549  2301		       20 e3 19 	      jsr	VOUTCH
    550  2304		       4c 0d 22 	      jmp	PrintProgNext
    551  2307
    552  2307
    553  2307							;==================================================================================================
    554  2307							; Size of print functions
    555  2307		       02 c5	   PrintFunctionsSize equ	* - PrintDecimal	; should use label of first fuction in file
------- FILE mytb.asm
------- FILE mem.asm LEVEL 2 PASS 6
      0  2307					      include	"mem.asm"
      1  2307							;===================================================================
      2  2307							;This file contains the memory allocation and free functions
      3  2307							;in herant in this is the management of free memory in the system
      4  2307							; the interface to these functions
      5  2307							; a,x returns or provides the low hi bytes of the managed addresses
      6  2307							; This uses the programend, to memory end as the area to manage
      7  2307							;===================================================================
      8 U35b2					      Seg.u	TBData
      9 U35b2							;
     10 U35b2							;=====================================================
     11 U35b2							;Pointers for memory Management
     12 U35b2							;Allocated block are not chained but can be followed for all memory by the associated length
     13 U35b2							; Mem block format is
     14 U35b2							;	 0-1   pointer to next block for free blocks
     15 U35b2							;	 0-1   for allocated blocks
     16 U35b2							;	   0   type of block, blob | array bytes, ints ,string | single type byte or integer
     17 U35b2							;	   1   refrence counter ... lol only up to 256 but it is something
     18 U35b2							;	 2-3   length constant for exevy type of memory block
     19 U35b2							; Memory is recombined as it is released
     20 U35b2							; The memory manager is not interupted durring allocation
     21 U35b2							; or freeing of memory
     22 U35b2							;====================================================
     23 U35b2		       00 00	   MemFreeList ds	2	; list of free blocks of memory
     24 U35b4		       00 00	   MemR0      ds	2	; source for copy/move/Init
     25 U35b6		       00 00	   MemR1      ds	2	; Destination for copy/move
     26 U35b8							;=====================================================
     27  2307					      Seg	Code
     28  2307							;=====================================================
     29  2307				   MemInit
     30  2307		       a9 79		      lda	#FreeMemStart&$FF
     31  2309		       8d 6f 42 	      sta	ProgramStart
     32  230c		       8d 71 42 	      sta	ProgramEnd
     33  230f		       a9 42		      lda	#FreeMemStart>>8
     34  2311		       8d 70 42 	      sta	ProgramStart+1
     35  2314		       8d 72 42 	      sta	ProgramEnd+1
     36  2317
     37  2317		       20 21 23 	      jsr	GetSizes
     38  231a		       20 2c 23 	      jsr	MemFree
     39  231d		       20 44 23 	      jsr	MemUsed
     40  2320				   MemInitEnd
     41  2320		       60		      rts
     42  2321
     43  2321
     44  2321							;
     45  2321							;=====================================================
     46  2321							; This function might go away eventually, but was
     47  2321							; added to provide data for other pieces of code.
     48  2321							; It has some ties to the operating environment that
     49  2321							; will need to be customized for the target system.
     50  2321							;
     51  2321				   GetSizes
     52  2321							;
     53  2321							; Here is machine specific code to get the highest
     54  2321							; memory location that can be used by BASIC.
     55  2321							;
     56  2321				  -	      if	ProgramStart < $2000
     57  2321				  -	      lda	#$ff
     58  2321				  -	      sta	HighMem	;$13ff for KIM-1
     59  2321				  -	      sta	MemFreeList
     60  2321				  -	      lda	#$DE	;#$13
     61  2321				  -	      sta	HighMem+1
     62  2321				  -	      sta	MemFreeList+1
     63  2321					      else
     64  2321		       a9 ff		      lda	#$ff
     65  2323		       8d 73 42 	      sta	HighMem	;$CFFF otherwise
     66  2326		       a9 cf		      lda	#$cf
     67  2328		       8d 74 42 	      sta	HighMem+1
     68  232b					      endif
     69  232b		       60		      rts
     70  232c							;
     71  232c							; This computes the available memory remaining.
     72  232c							;
     73  232c				   MemFree
     74  232c		       38		      sec
     75  232d		       ad 73 42 	      lda	HighMem
     76  2330		       ed 71 42 	      sbc	ProgramEnd
     77  2333		       8d 77 42 	      sta	FreeMem
     78  2336		       85 52		      sta	R0
     79  2338		       ad 74 42 	      lda	HighMem+1
     80  233b		       ed 72 42 	      sbc	ProgramEnd+1
     81  233e		       8d 78 42 	      sta	FreeMem+1
     82  2341		       85 53		      sta	R0+1
     83  2343		       60		      rts
     84  2344							;
     85  2344							; This computes the size of the current user program.
     86  2344							;
     87  2344				   MemUsed
     88  2344		       38		      sec
     89  2345		       ad 71 42 	      lda	ProgramEnd
     90  2348		       ed 6f 42 	      sbc	ProgramStart
     91  234b		       8d 75 42 	      sta	UsedMem
     92  234e		       85 52		      sta	R0
     93  2350		       ad 72 42 	      lda	ProgramEnd+1
     94  2353		       ed 70 42 	      sbc	ProgramStart+1
     95  2356		       8d 76 42 	      sta	UsedMem+1
     96  2359		       85 53		      sta	R0+1
     97  235b							;
     98  235b		       60		      rts
     99  235c							;
    100  235c							;=====================================================
    101  235c							; Set a block of memory to a value
    102  235c		       8a	   iSetBlock  txa
    103  235d		       48		      pha
    104  235e		       98		      tya
    105  235f		       48		      pha
    106  2360		       20 1c 2c 	      jsr	popR0	; the address to write to
    107  2363		       a5 52		      lda	R0
    108  2365		       85 59		      sta	dpl
    109  2367		       a5 53		      lda	R0+1
    110  2369		       85 5a		      sta	dpl+1
    111  236b		       20 34 2c 	      jsr	popR1	; Number of bytes to write
    112  236e		       20 1c 2c 	      jsr	popR0	; Get the value to store into memory
    113  2371		       20 91 29 	      jsr	getILByte
    114  2374		       85 58		      sta	R2	; store the data type into R2
    115  2376		       c9 a4		      cmp	#tInteger
    116  2378		       f0 08		      beq	memset	; skip this if we have an integer
    117  237a		       a5 52		      lda	R0	; Revers the order so they can be copied in correct order
    118  237c		       a6 53		      ldx	R0+1
    119  237e		       86 52		      stx	R0
    120  2380		       85 53		      sta	R0+1
    121  2382
    122  2382				   memset
    123  2382		       a0 00		      ldy	#0	; Set for length of block to copy
    124  2384		       a2 00		      ldx	#0	; set for number of block of 256 to copy
    125  2386
    126  2386		       a5 58	   iSetBlockLoop lda	R2	; Get Datatype
    127  2388		       c9 a2		      cmp	#tByte
    128  238a		       f0 09		      beq	iSetBlockB
    129  238c
    130  238c		       a5 52	   iSetBlockW lda	R0
    131  238e		       91 59		      sta	(dpl),y
    132  2390		       20 a5 23 	      jsr	iSetBlockEnd
    133  2393		       f0 09		      beq	iSetBlockComplete
    134  2395
    135  2395		       a5 53	   iSetBlockB lda	R0+1
    136  2397		       91 59		      sta	(dpl),y
    137  2399		       20 a5 23 	      jsr	iSetBlockEnd
    138  239c		       d0 e8		      bne	iSetBlockLoop
    139  239e
    140  239e				   iSetBlockComplete
    141  239e		       68		      pla
    142  239f		       a8		      tay
    143  23a0		       68		      pla
    144  23a1		       aa		      tax
    145  23a2		       4c b1 02 	      jmp	NextIL
    146  23a5							;
    147  23a5							; Check if we have reached the end of the initialization/Copy
    148  23a5							;
    149  23a5		       c8	   iSetBlockEnd iny
    150  23a6		       d0 03		      bne	iSetBlockEndChk
    151  23a8		       e8		      inx
    152  23a9		       e6 5a		      inc	dpl+1
    153  23ab				   iSetBlockEndChk
    154  23ab		       c4 54		      cpy	R1
    155  23ad		       d0 02		      bne	iSetBlockEndExit
    156  23af		       e4 55		      cpx	R1+1
    157  23b1				   iSetBlockEndExit
    158  23b1		       60		      rts
    159  23b2							;
    160  23b2							;================================================================
    161  23b2							; Copy a block of memory from one location to another
    162  23b2							;
    163  23b2		       8a	   iCopyBlock txa
    164  23b3		       48		      pha
    165  23b4		       98		      tya
    166  23b5		       48		      pha
    167  23b6		       20 1c 2c 	      jsr	popR0	; get the source address
    168  23b9		       20 34 2c 	      jsr	popR1	; Destination address
    169  23bc		       a5 54		      lda	R1
    170  23be		       85 59		      sta	dpl
    171  23c0		       a5 55		      lda	R1+1
    172  23c2		       85 5a		      sta	dpl+1
    173  23c4		       20 34 2c 	      jsr	popR1	; Number of bytes to copy
    174  23c7				   memcpy
    175  23c7		       a2 00		      ldx	#0
    176  23c9		       a0 00		      ldy	#0
    177  23cb				   iCopyBlockLoop
    178  23cb		       b1 52		      lda	(R0),y	;  Get the byte to copy
    179  23cd		       91 59		      sta	(dpl),y	;  Store the byte
    180  23cf		       c8		      iny
    181  23d0		       d0 05		      bne	iCopyChkEnd
    182  23d2		       e8		      inx
    183  23d3		       e6 53		      inc	R0+1
    184  23d5		       e6 5a		      inc	dpl+1
    185  23d7		       c4 54	   iCopyChkEnd cpy	R1
    186  23d9		       d0 f0		      bne	iCopyBlockLoop
    187  23db		       e4 55		      cpx	R1+1
    188  23dd		       d0 ec		      bne	iCopyBlockLoop
    189  23df				   iCopyBlockDone
    190  23df		       68		      pla
    191  23e0		       a8		      tay
    192  23e1		       68		      pla
    193  23e2		       aa		      tax
    194  23e3		       4c b1 02 	      jmp	NextIL
    195  23e6							;
    196  23e6							;=============================================================================
    197  23e6							; Compare memory block location
    198  23e6							; returns on the stack
    199  23e6							; 0 - equals
    200  23e6							; -1 - s1  <  s2
    201  23e6							; 1   s1  >  s2
    202  23e6		       8a	   iCmpBlock  txa
    203  23e7		       48		      pha
    204  23e8		       98		      tya
    205  23e9		       48		      pha
    206  23ea		       20 34 2c 	      jsr	popR1	; Get the Source 2 pointer
    207  23ed		       a5 54		      lda	R1
    208  23ef		       85 59		      sta	dpl	; store the secon source in dpl
    209  23f1		       a5 55		      lda	R1+1
    210  23f3		       85 5a		      sta	dpl+1
    211  23f5		       20 1c 2c 	      jsr	popR0	; Get the Source 1 pointer
    212  23f8		       20 34 2c 	      jsr	popR1	; Get the length of the compare to do
    213  23fb		       a0 00		      ldy	#0
    214  23fd		       a2 00		      ldx	#0
    215  23ff		       4c 0c 24 	      jmp	iCmpCheckEnd
    216  2402
    217  2402		       b1 59	   iCmpLoop   lda	(dpl),y
    218  2404		       d1 52		      cmp	(R0),y
    219  2406		       d0 19		      bne	iCmpDone
    220  2408		       c8		      iny
    221  2409		       d0 01		      bne	iCmpCheckEnd
    222  240b		       e8		      inx
    223  240c				   iCmpCheckEnd
    224  240c		       c4 54		      cpy	R1
    225  240e		       d0 f2		      bne	iCmpLoop
    226  2410		       e4 55		      cpx	R1+1
    227  2412		       d0 ee		      bne	iCmpLoop
    228  2414		       a5 00		      lda	0
    229  2416		       85 53		      sta	R0+1
    230  2418		       85 52		      sta	R0
    231  241a				   iCmpReturn
    232  241a		       68		      pla
    233  241b		       a8		      tay
    234  241c		       68		      pla
    235  241d		       aa		      tax
    236  241e		       4c 16 07 	      jmp	pushR0nextIl
    237  2421
    238  2421				   iCmpDone
    239  2421		       90 0a		      bcc	iCmpGreater
    240  2423				   iCmpLess
    241  2423		       a9 00		      lda	#0
    242  2425		       85 53		      sta	R0+1
    243  2427		       a9 01		      lda	#1
    244  2429		       85 52		      sta	R0
    245  242b		       d0 ed		      bne	iCmpReturn
    246  242d				   iCmpGreater
    247  242d		       a9 ff		      lda	#-1
    248  242f		       85 52		      sta	R0
    249  2431		       85 53		      sta	R0+1
    250  2433		       d0 e5		      bne	iCmpReturn
    251  2435
------- FILE mytb.asm
------- FILE gosub.asm LEVEL 2 PASS 6
      0  2435					      include	"gosub.asm"
      1  2435					      seg	Code
      2  2435
      3  2435							; Gosub and return related functions
      4  2435							;==========================================================
      5  2435							; Push the current math stack frame onto the gosub stack
      6  2435				   iPushMathStack
      7  2435		       98		      tya
      8  2436		       48		      pha
      9  2437		       a4 4d		      ldy	GOSUBSTACKPTR
     10  2439		       a5 4a		      lda	MATHSTACKPTR
     11  243b		       91 4b		      sta	(GOSUBSTACK),y
     12  243d		       a9 00		      lda	#0
     13  243f		       c8		      iny
     14  2440		       91 4b		      sta	(GOSUBSTACK),y
     15  2442		       c8		      iny
     16  2443		       91 4b		      sta	(GOSUBSTACK),y
     17  2445		       c8		      iny
     18  2446		       a9 05		      lda	#GOSUB_STACK_FRAME
     19  2448		       91 4b		      sta	(GOSUBSTACK),y
     20  244a		       c8		      iny
     21  244b		       84 4d		      sty	GOSUBSTACKPTR
     22  244d		       68		      pla
     23  244e		       a8		      tay
     24  244f		       4c b1 02 	      jmp	NextIL
     25  2452							;
     26  2452							;==========================================================
     27  2452							; Increment parameter count. Assume Stack frame is top of stack
     28  2452				   iIncParmCount
     29  2452		       98		      tya
     30  2453		       48		      pha
     31  2454
     32  2454		       a4 4d		      ldy	GOSUBSTACKPTR
     33  2456		       88		      dey
     34  2457		       88		      dey
     35  2458		       88		      dey
     36  2459		       b1 4b		      lda	(GOSUBSTACK),y
     37  245b		       18		      clc
     38  245c		       69 01		      adc	#1
     39  245e		       91 4b		      sta	(GOSUBSTACK),y
     40  2460
     41  2460		       68		      pla
     42  2461		       a8		      tay
     43  2462		       4c b1 02 	      jmp	NextIL
     44  2465							;
     45  2465							;==========================================================
     46  2465							;Restore the math stack frame
     47  2465		       20 6b 24    iPopMathStack jsr	PopMathStackNow
     48  2468		       4c b1 02 	      jmp	NextIL
     49  246b
     50  246b				   PopMathStackNow
     51  246b		       98		      tya
     52  246c		       48		      pha
     53  246d
     54  246d		       a4 4d		      ldy	GOSUBSTACKPTR
     55  246f		       88		      dey
     56  2470		       b1 4b		      lda	(GOSUBSTACK),y
     57  2472		       c9 05		      cmp	#GOSUB_STACK_FRAME
     58  2474		       d0 09		      bne	iPopMathStackNoFrame
     59  2476		       88		      dey
     60  2477		       88		      dey
     61  2478		       88		      dey
     62  2479		       b1 4b		      lda	(GOSUBSTACK),y
     63  247b		       85 4a		      sta	MATHSTACKPTR
     64  247d		       84 4d		      sty	GOSUBSTACKPTR
     65  247f
     66  247f				   iPopMathStackNoFrame
     67  247f
     68  247f		       68		      pla
     69  2480		       a8		      tay
     70  2481		       60		      rts
     71  2482
     72  2482
     73  2482							;==========================================================
     74  2482							; Push the current math stack information onto the gosub stack
     75  2482				   iSaveMathStack
     76  2482		       98		      tya
     77  2483		       48		      pha
     78  2484
     79  2484		       a4 4d		      ldy	GOSUBSTACKPTR
     80  2486		       a5 4a		      lda	MATHSTACKPTR
     81  2488		       91 4b		      sta	(GOSUBSTACK),y
     82  248a		       a5 48		      lda	MATHSTACK
     83  248c		       c8		      iny
     84  248d
     85  248d		       91 4b		      sta	(GOSUBSTACK),y
     86  248f		       c8		      iny
     87  2490
     88  2490		       a5 49		      lda	MATHSTACK+1
     89  2492		       91 4b		      sta	(GOSUBSTACK),y
     90  2494		       c8		      iny
     91  2495
     92  2495		       a9 06		      lda	#GOSUB_STACK_SAVE
     93  2497		       91 4b		      sta	(GOSUBSTACK),y
     94  2499		       c8		      iny
     95  249a
     96  249a		       84 4d		      sty	GOSUBSTACKPTR
     97  249c
     98  249c		       68		      pla
     99  249d		       a8		      tay
    100  249e		       4c b1 02 	      jmp	NextIL
    101  24a1							;
    102  24a1							;==========================================================
    103  24a1							;Restore the math stack information from the gosub stack
    104  24a1				   iRestoreMathStack
    105  24a1		       98		      tya
    106  24a2		       48		      pha
    107  24a3
    108  24a3		       a5 4a		      lda	MATHSTACKPTR
    109  24a5		       85 58		      sta	R2	; save the current offset for whatever task to R2
    110  24a7
    111  24a7		       a4 4d		      ldy	GOSUBSTACKPTR
    112  24a9		       88		      dey
    113  24aa		       b1 4b		      lda	(GOSUBSTACK),y
    114  24ac		       c9 06		      cmp	#GOSUB_STACK_SAVE
    115  24ae		       d0 16		      bne	iPopMathStack_Err
    116  24b0		       88		      dey
    117  24b1		       b1 4b		      lda	(GOSUBSTACK),y
    118  24b3		       85 49		      sta	MATHSTACK+1
    119  24b5		       88		      dey
    120  24b6		       b1 4b		      lda	(GOSUBSTACK),y
    121  24b8		       85 48		      sta	MATHSTACK
    122  24ba		       88		      dey
    123  24bb		       b1 4b		      lda	(GOSUBSTACK),y
    124  24bd		       85 4a		      sta	MATHSTACKPTR
    125  24bf		       84 4d		      sty	GOSUBSTACKPTR
    126  24c1
    127  24c1		       68		      pla
    128  24c2		       a8		      tay
    129  24c3		       4c b1 02 	      jmp	NextIL
    130  24c6
    131  24c6				   iPopMathStack_Err
    132  24c6		       68		      pla
    133  24c7		       a8		      tay
    134  24c8		       a9 00		      lda	#0
    135  24ca		       a2 12		      ldx	#ERR_INVALID_STK_FRAME
    136  24cc		       4c 7d 06 	      jmp	iErr2
    137  24cf							;=========================================
    138  24cf							; For functions and tasks the variable address of # means
    139  24cf							; a passed parameter so #[0] is the first parameter etc
    140  24cf							; will try for a better way later
    141  24cf							;=====================================================
    142  24cf							; On entry il, branch to if function
    143  24cf							;	    il+1, value to be returned or not true or false
    144  24cf							;
    145  24cf							; Return from GOSUB  or function function
    146  24cf							; format   RSTR 0   --- return form gosub
    147  24cf							;	    RSTR 1   --- return from Function
    148  24cf							;
    149  24cf		       20 91 29    iRSTR      jsr	getILByte	; get where to go if 0 = gosub/1=function call
    150  24d2		       8d 6b 42 	      sta	offset
    151  24d5		       20 74 2b 	      jsr	saveIL	; for later jump if needed add extra entry to	the return stack
    152  24d8
    153  24d8		       20 cd 2b 	      jsr	popLN	; get the next item from the stack into curptr and curroff, returns call type func or stmt
    154  24db		       85 54		      sta	R1	; keep the type of call returning from
    155  24dd		       b0 2b		      bcs	iRSTRErr	; stack underflow error possible
    156  24df
    157  24df		       20 91 29 	      jsr	getILByte	; get if a value is being returned
    158  24e2
    159  24e2		       48		      pha		; save if a value was passed to be returned
    160  24e3
    161  24e3		       c9 00		      cmp	#0	; yes attemping to return a value
    162  24e5		       f0 03		      beq	iRSTRPOP	; no value to return
    163  24e7		       20 1c 2c 	      jsr	popR0	; Get the value from the stack save if needed
    164  24ea
    165  24ea				   iRSTRPOP
    166  24ea		       20 6b 24 	      jsr	PopMathStackNow	; adjust the stack frame from the call
    167  24ed		       a5 54		      lda	R1	; called as a statement ?
    168  24ef		       c9 01		      cmp	#GOSUB_RTN	; Called as a statement
    169  24f1		       f0 13		      beq	iRSTRExit
    170  24f3
    171  24f3		       68		      pla		; get back if value returned or not
    172  24f4		       c9 01		      cmp	#1	; we have a value to return
    173  24f6		       f0 05		      beq	iRSTRVALUE
    174  24f8
    175  24f8		       a2 13		      ldx	#ERR_NO_RETURN_VALUE_PROVIDED	; well no value provided and we need one
    176  24fa		       4c 12 05 	      jmp	iSAVErr2	; jump to general error reporting function
    177  24fd
    178  24fd				   iRSTRVALUE
    179  24fd		       20 8a 2b 	      jsr	pushR0	; return value back to top of stack
    180  2500		       20 7f 2b 	      jsr	restoreIL	; get the correct il
    181  2503		       4c d7 0b 	      jmp	tstBranch	; And called as a function
    182  2506
    183  2506				   iRSTRExit
    184  2506		       68		      pla		; throw away gosub/func flag
    185  2507		       4c b1 02 	      jmp	NextIL
    186  250a
    187  250a				   iRSTRNORETURNVALUE
    188  250a
    189  250a
    190  250a		       ad fa 35    iRSTRErr   lda	taskPtr	; Check if this is task zero
    191  250d		       f0 0a		      beq	taskZeroEnd	; this is task zero just stop with error
    192  250f		       a5 56		      lda	MQ
    193  2511		       d0 03		      bne	taskRet
    194  2513		       20 51 2e 	      jsr	pushFalse	; the result code by default is 0
    195  2516				   taskRet
    196  2516		       4c 8a 27 	      jmp	iETask	; not task zero then do a task end instead
    197  2519				   taskZeroEnd
    198  2519		       a2 0b		      ldx	#ERR_STACK_UNDER_FLOW
    199  251b		       4c 12 05 	      jmp	iSAVErr2
    200  251e							;
    201  251e							;==========================================================================================
    202  251e							; Find the next gosub function parameter info	position on the stack
    203  251e							; Returns y = index and c set if found clear c otherwise
    204  251e		       a4 4d	   GosubFindParms ldy	GOSUBSTACKPTR	;Get the Pointer to the top of stack
    205  2520		       88		      dey		;Point to stack entry type
    206  2521
    207  2521							;Veryify the stack size and position for the call
    208  2521							;Loops here until it finds a GOSUB with value entry or gosub-rtn entry
    209  2521
    210  2521		       c0 00	   GosubFindLoop cpy	#0	;If we reach the top of the stack then no parametrs
    211  2523		       f0 2d		      beq	GosubNotFunc
    212  2525		       c0 10		      cpy	#GOSUBSTACKSIZE	;Tst if we are outside the stack size
    213  2527		       b0 29		      bcs	GosubNotFunc	;Not valid
    214  2529
    215  2529							;Look for the	 GOSUB_RTN_VALUE stack position
    216  2529		       b1 4b		      lda	(GOSUBSTACK),y	;Get the type of call - if it is not a fn call error
    217  252b		       c9 01		      cmp	#GOSUB_RTN	;if we find this then this function had no parameters
    218  252d		       f0 0f		      beq	GosubParmFnd	;We can pass parameters to a function that returns nothing
    219  252f
    220  252f		       c9 81		      cmp	#GOSUB_RTN_VALUE	;Parameters with the gosub call
    221  2531		       f0 0b		      beq	GosubParmFnd	;Skip any non Gosub related entries
    222  2533
    223  2533		       c9 05		      cmp	#GOSUB_STACK_FRAME	;Stack frame pointer So should contain the start position of Variables
    224  2535		       f0 13		      beq	GosubParmSkip	;We have a stackframe good
    225  2537
    226  2537		       88		      dey
    227  2538		       88		      dey
    228  2539		       88		      dey
    229  253a		       88		      dey
    230  253b		       4c 21 25 	      jmp	GosubFindLoop
    231  253e
    232  253e		       c0 03	   GosubParmFnd cpy	#3	; Check if we are outside the stack
    233  2540		       90 10		      bcc	GosubNotFunc	; if y < 3 then error not found
    234  2542		       c0 10		      cpy	#GOSUBSTACKSIZE	; Largest value
    235  2544		       b0 0c		      bcs	GosubNotFunc	; no parameters passed
    236  2546
    237  2546		       88		      dey		; Point to hopefully Math Stack frame information
    238  2547		       88		      dey
    239  2548		       88		      dey
    240  2549		       88		      dey
    241  254a				   GosubParmSkip
    242  254a		       b1 4b		      lda	(GOSUBSTACK),y	;This should be a stack frame pointer
    243  254c		       c9 05		      cmp	#GOSUB_STACK_FRAME	;Stack frame pointer So should contain the start position of Variables
    244  254e		       d0 02		      bne	GosubNotFunc	;No parameters passed but expected
    245  2550		       38		      sec
    246  2551		       60		      rts
    247  2552
    248  2552		       18	   GosubNotFunc clc
    249  2553		       60		      rts
------- FILE mytb.asm
------- FILE tasks.asm LEVEL 2 PASS 6
      0  2554					      include	"tasks.asm"
      1  2554							;=====================================================
      2  2554							; Tiny Basic IL task management
      3  2554							; Data required by task management
      4  2554							; currently each context is about 30 bytes and is swapped
      5  2554							; into and out of page zero on each task switch....
      6  2554							; LOL yes it is slow, but works for this iteration.
      7  2554							;
      8  2554
      9  2554					      Seg	Code
     10  2554							;=====================================================
     11  2554							; Sets the pointers to the math,IL and gosub stacks
     12  2554							; Creates the initial Context for each task slot
     13  2554				   taskSetStacks
     14  2554		       a9 fa		      lda	#mathStack&$FF
     15  2556		       85 48		      sta	MATHSTACK
     16  2558		       a9 36		      lda	#mathStack>>8
     17  255a		       85 49		      sta	MATHSTACK+1
     18  255c
     19  255c		       a9 8a		      lda	#ilStack&$ff
     20  255e		       85 45		      sta	ILSTACK
     21  2560		       a9 38		      lda	#ilStack>>8
     22  2562		       85 46		      sta	ILSTACK+1
     23  2564
     24  2564		       a9 72		      lda	#gosubStack&$FF
     25  2566		       85 4b		      sta	GOSUBSTACK
     26  2568		       a9 3c		      lda	#gosubStack>>8
     27  256a		       85 4c		      sta	GOSUBSTACK+1
     28  256c
     29  256c		       a9 f2		      lda	#variableStack&$FF
     30  256e		       85 41		      sta	VARIABLES
     31  2570		       a9 3e		      lda	#variableStack>>8
     32  2572		       85 42		      sta	VARIABLES+1
     33  2574		       a2 0a		      ldx	#TASKCOUNT
     34  2576		       a0 00		      ldy	#0
     35  2578		       20 48 28 	      jsr	ContextSave	; Save the Task 0 context
     36  257b
     37  257b		       c0 fa	   taskSetLoop cpy	#TASKTABLELEN
     38  257d		       b0 3a		      bcs	taskSetDone
     39  257f
     40  257f		       a5 4b		      lda	GOSUBSTACK
     41  2581		       18		      clc
     42  2582		       69 40		      adc	#GOSUBSTACKSIZE*4	; must be less than 256
     43  2584		       85 4b		      sta	GOSUBSTACK
     44  2586		       a5 4c		      lda	GOSUBSTACK+1
     45  2588		       69 00		      adc	#0
     46  258a		       85 4c		      sta	GOSUBSTACK+1
     47  258c
     48  258c		       a5 45		      lda	ILSTACK	; must be less than 256
     49  258e		       18		      clc
     50  258f		       69 64		      adc	#ILSTACKSIZE*2
     51  2591		       85 45		      sta	ILSTACK
     52  2593		       a5 46		      lda	ILSTACK+1
     53  2595		       69 00		      adc	#0
     54  2597		       85 46		      sta	ILSTACK+1
     55  2599
     56  2599		       a5 48		      lda	MATHSTACK	; must be less than 256
     57  259b		       18		      clc
     58  259c		       69 28		      adc	#MATHSTACKSIZE*2
     59  259e		       85 48		      sta	MATHSTACK
     60  25a0		       a5 49		      lda	MATHSTACK+1
     61  25a2		       69 00		      adc	#0
     62  25a4		       85 49		      sta	MATHSTACK+1
     63  25a6
     64  25a6		       a5 41		      lda	VARIABLES	; must be less than 256
     65  25a8		       18		      clc
     66  25a9		       69 4a		      adc	#VARIABLESSIZE*2
     67  25ab		       85 41		      sta	VARIABLES
     68  25ad		       a5 42		      lda	VARIABLES+1
     69  25af		       69 00		      adc	#0
     70  25b1		       85 42		      sta	VARIABLES+1
     71  25b3		       20 48 28 	      jsr	ContextSave
     72  25b6		       4c 7b 25 	      jmp	taskSetLoop
     73  25b9
     74  25b9				   taskSetDone
     75  25b9		       a0 00		      ldy	#0	; reload the main loop context
     76  25bb		       20 57 28 	      jsr	ContextLoad
     77  25be		       60		      rts
     78  25bf							;
     79  25bf							;============================================================
     80  25bf							; Saves the io block to the context
     81  25bf
     82  25bf
     83  25bf		       98	   SaveIOblock tya
     84  25c0		       48		      pha
     85  25c1		       8a		      txa
     86  25c2		       48		      pha
     87  25c3
     88  25c3
     89  25c3
     90  25c3		       68		      pla
     91  25c4		       aa		      tax
     92  25c5		       68		      pla
     93  25c6		       a8		      tay
     94  25c7		       60		      rts
     95  25c8
     96  25c8							;
     97  25c8							;=====================================================
     98  25c8							; In some error cases the math stacks may be left pointing to the wrong stack
     99  25c8							; This function will reset those stack addresses but not the actual pointer
    100  25c8				   taskResetStacks
    101  25c8		       a0 00		      ldy	#0
    102  25ca		       20 57 28 	      jsr	ContextLoad
    103  25cd		       4c 54 25 	      jmp	taskSetStacks
    104  25d0							;
    105  25d0							;=====================================================
    106  25d0							; Clear all task entries and task stacks
    107  25d0		       98	   taskReset  tya		; Save Y
    108  25d1		       48		      pha
    109  25d2		       a9 01		      lda	#1
    110  25d4		       8d f9 36 	      sta	taskCounter	; Set number of active tasks to 1
    111  25d7		       ac fa 35 	      ldy	taskPtr	; Set the active task to 0 MAIN
    112  25da		       c0 00		      cpy	#0	; check if we are the main context
    113  25dc		       f0 08		      beq	taskResetCont	; if we are just continue
    114  25de
    115  25de		       a0 00		      ldy	#0	; else we need to switch to the main context
    116  25e0		       8c fa 35 	      sty	taskPtr
    117  25e3		       20 57 28 	      jsr	ContextLoad	; load the System Task context
    118  25e6				   taskResetCont
    119  25e6		       a0 19		      ldy	#CONTEXTLEN	; Start at the second task +1 account for task control byte
    120  25e8
    121  25e8				   taskResetLoop
    122  25e8		       a9 00		      lda	#TASKINACTIVE
    123  25ea		       99 fb 35 	      sta	taskTable,y	; Ensure that the task is made inactive
    124  25ed		       18		      clc
    125  25ee		       98		      tya
    126  25ef		       69 19		      adc	#CONTEXTLEN
    127  25f1		       a8		      tay
    128  25f2		       c0 fa		      cpy	#TASKTABLELEN	; Are we at the end yet
    129  25f4		       90 f2		      bcc	taskResetLoop	; Go for more
    130  25f6
    131  25f6				   taskResetComplete
    132  25f6
    133  25f6		       68		      pla		; Restore y
    134  25f7		       a8		      tay
    135  25f8		       60		      rts
    136  25f9
    137  25f9							;
    138  25f9							;======================================================
    139  25f9							; iTaskSwitch	 switch to new task if not interrupt and
    140  25f9							;		 count is exceded for task time slice gets here
    141  25f9							;		 when time slice has reached zero
    142  25f9							;
    143  25f9		       98	   iTaskSwitch tya
    144  25fa		       48		      pha
    145  25fb
    146  25fb		       ad f7 36 	      lda	taskResetValue	; Always reset the counter value
    147  25fe		       8d f5 36 	      sta	taskCurrentCycles	; Update the counter with the new value
    148  2601		       ce f6 36 	      dec	taskCurrentCycles+1	; dec high order byte
    149  2604		       d0 44		      bne	iTaskSwitchDone	; Exit if not zero
    150  2606
    151  2606		       ad f8 36 	      lda	taskResetValue+1
    152  2609		       8d f6 36 	      sta	taskCurrentCycles+1
    153  260c
    154  260c		       ad 56 19 	      lda	IRQPending	; Skip this if we are processing an irq
    155  260f		       0d 6d 42 	      ora	taskIOPending	; If set then don't switch
    156  2612		       d0 36		      bne	iTaskSwitchDone	; DO irq Higher priority than the Tasks
    157  2614
    158  2614		       ad f9 36    iTaskMain  lda	taskCounter	; Number of tasks
    159  2617		       c9 01		      cmp	#1	; if there is only one task must be main
    160  2619		       d0 07		      bne	itasknext	; if it some other number continue to next
    161  261b
    162  261b		       ac fa 35 	      ldy	taskPtr	; check if we have not just ended some other task
    163  261e		       d0 02		      bne	itasknext	; 0 = main task if so then do a next anyway
    164  2620		       f0 28		      beq	iTaskSwitchDone	; Skip this if main is only task
    165  2622							;
    166  2622							; Save the current context this is moved from BASIC STMT LEVEL TO IL INSTRUCTION LEVEL
    167  2622							;
    168  2622				   itasknext
    169  2622		       ac fa 35 	      ldy	taskPtr
    170  2625		       20 48 28 	      jsr	ContextSave	; Save the current context, y points to next context
    171  2628				   itaskLoop
    172  2628		       c0 fa		      cpy	#TASKTABLELEN	; Are we at end of task table
    173  262a		       90 04		      bcc	iTaskNextChk
    174  262c
    175  262c		       a0 00	   iTaskResetTop ldy	#0	; reset to top of taskTable
    176  262e		       f0 0d		      beq	iTaskLoadEntry	; Go Ahead and just start this As we Can back and it is always active
    177  2630
    178  2630				   iTaskNextChk
    179  2630		       b9 fb 35 	      lda	taskTable,y	; there is always at least one entry in table
    180  2633		       d0 08		      bne	iTaskLoadEntry	; get next slot if this one empty
    181  2635		       18	   iTaskNext  clc
    182  2636		       98		      tya
    183  2637		       69 19		      adc	#CONTEXTLEN	; Next Table entry
    184  2639		       a8		      tay
    185  263a		       4c 28 26 	      jmp	itaskLoop	; Check for busy entry
    186  263d
    187  263d		       a9 80	   iTaskLoadEntry lda	#TASKACTIVE
    188  263f		       59 fb 35 	      eor	taskTable,y	; Check for anything waiting io
    189  2642		       d0 f1		      bne	iTaskNext
    190  2644		       20 57 28 	      jsr	ContextLoad	; load the next context
    191  2647		       8c fa 35 	      sty	taskPtr	; update the task pointer
    192  264a
    193  264a				   iTaskSwitchDone
    194  264a		       68		      pla
    195  264b		       a8		      tay
    196  264c		       60		      rts
    197  264d							;
    198  264d							;================================================================
    199  264d							; Task Set task number to line number to start
    200  264d							; on entry stack contains, type of line description and  memvector or linenumber
    201  264d							; Task Table structure:
    202  264d							;    byte 0	-   Active inactive
    203  264d							;    byte 1-2	-   Basic code line pointer
    204  264d							;    byte 3	-   Offset on current line
    205  264d		       98	   iTaskSet   tya		;preserve Y
    206  264e		       48		      pha		; push a
    207  264f		       20 34 2c 	      jsr	popR1	; Get if compiled or line number expression
    208  2652		       20 1c 2c 	      jsr	popR0	; Get the line number to be saved
    209  2655
    210  2655
    211  2655
    212  2655		       ac fa 35 	      ldy	taskPtr	; find out where we are
    213  2658		       20 48 28 	      jsr	ContextSave	; Save the current context
    214  265b
    215  265b							;Find the pointer to the line we need to start at
    216  265b		       a5 54		      lda	R1
    217  265d		       f0 0b		      beq	iTaskLineNum
    218  265f		       a5 52		      lda	R0
    219  2661		       85 4f		      sta	CURPTR
    220  2663		       a5 53		      lda	R0+1
    221  2665		       85 50		      sta	CURPTR+1
    222  2667		       4c 7a 26 	      jmp	iTaskCont
    223  266a
    224  266a				   iTaskLineNum
    225  266a		       20 d6 29 	      jsr	findLine	; Get the offset of the line to start task at
    226  266d		       f0 0b		      beq	iTaskCont
    227  266f
    228  266f		       ac fa 35 	      ldy	taskPtr	; Restore the original Context Error Exit
    229  2672		       20 57 28 	      jsr	ContextLoad
    230  2675
    231  2675		       68		      pla		; pop a - exit
    232  2676		       a8		      tay
    233  2677		       4c ea 0d 	      jmp	iSetIrqErr	; Bad line number provided
    234  267a
    235  267a				   iTaskCont
    236  267a		       20 1a 28 	      jsr	TaskEmpty	; Find an empty slot, y = new slot
    237  267d		       90 49		      bcc	iTaskNoEmpty	; There are no more empty slots
    238  267f
    239  267f		       a9 82		      lda	#TASKRUNPENDING+TASKACTIVE	; Mark as enabled but suspended
    240  2681		       99 fb 35 	      sta	taskTable,y	; new task as active
    241  2684
    242  2684		       a5 4f		      lda	CURPTR
    243  2686		       48		      pha		; push a
    244  2687		       a5 50		      lda	CURPTR+1
    245  2689		       48		      pha		; push a
    246  268a
    247  268a		       20 57 28 	      jsr	ContextLoad	; load the context of the new task
    248  268d
    249  268d		       68		      pla		; pop a
    250  268e		       85 50		      sta	CURPTR+1
    251  2690		       68		      pla		; pop a
    252  2691		       85 4f		      sta	CURPTR
    253  2693		       a9 03		      lda	#3	; Offset to first instruction
    254  2695		       85 51		      sta	CUROFF
    255  2697
    256  2697		       a9 00		      lda	#0
    257  2699		       85 47		      sta	ILSTACKPTR
    258  269b		       85 4a		      sta	MATHSTACKPTR
    259  269d		       85 4d		      sta	GOSUBSTACKPTR
    260  269f		       a9 40		      lda	#GOSUBSTACKSIZE*4
    261  26a1		       85 4e		      sta	MESSAGEPTR
    262  26a3
    263  26a3		       20 6c 09 	      jsr	subVINIT	; Clear the variables
    264  26a6
    265  26a6		       a9 5c		      lda	#STMT&$FF
    266  26a8		       85 43		      sta	ILPC
    267  26aa		       a9 31		      lda	#STMT>>8	; set ilpc to point to the STATEMENT processor
    268  26ac		       85 44		      sta	ILPC+1
    269  26ae
    270  26ae		       98		      tya		; Save the new context offset to return to user
    271  26af		       48		      pha		; push a
    272  26b0
    273  26b0		       20 48 28    itaskSetSave jsr	ContextSave	; save the updated context
    274  26b3		       ee f9 36 	      inc	taskCounter	; Update the number of Tasks running
    275  26b6
    276  26b6		       ac fa 35 	      ldy	taskPtr
    277  26b9		       20 57 28 	      jsr	ContextLoad	; restore the original context
    278  26bc
    279  26bc		       a9 00		      lda	#0	; Set the R0 upper to zero
    280  26be		       85 53		      sta	R0+1
    281  26c0		       68		      pla		; Get the task pid we stored				 ; pop a
    282  26c1		       85 52		      sta	R0	; Get the table entry value
    283  26c3
    284  26c3		       68		      pla		; Restore the y register we saved			 ; pop a   - exit
    285  26c4		       a8		      tay
    286  26c5
    287  26c5		       4c 16 07 	      jmp	pushR0nextIl	; Push R0 and continue
    288  26c8				   iTaskNoEmpty
    289  26c8		       ac fa 35 	      ldy	taskPtr
    290  26cb		       20 57 28 	      jsr	ContextLoad
    291  26ce
    292  26ce		       68		      pla		; pop a    -- exit
    293  26cf		       a8		      tay
    294  26d0
    295  26d0		       a2 0e		      ldx	#ERR_NO_EMPTY_TASK_SLOT
    296  26d2		       a9 00		      lda	#0
    297  26d4		       4c 7d 06 	      jmp	iErr2
    298  26d7							;
    299  26d7							;===============================================================
    300  26d7							; Run the task whos PID is on the stack, preserve the stack
    301  26d7							;
    302  26d7				   iTaskEnable
    303  26d7		       98		      tya
    304  26d8		       48		      pha
    305  26d9		       20 34 2c 	      jsr	popR1
    306  26dc		       20 02 2c 	      jsr	pushR1
    307  26df		       20 4e 29 	      jsr	ipc_getcontext	; get context pointer into mq
    308  26e2		       a0 00		      ldy	#0
    309  26e4		       b1 56		      lda	(MQ),y
    310  26e6		       49 02		      eor	#TASKRUNPENDING	; Turn off the Suspend flags
    311  26e8		       09 80		      ora	#TASKACTIVE
    312  26ea		       91 56		      sta	(MQ),y
    313  26ec		       68		      pla
    314  26ed		       a8		      tay
    315  26ee		       4c b1 02 	      jmp	NextIL
    316  26f1
    317  26f1							;
    318  26f1							;===============================================================
    319  26f1							; Suspend the task whos PID  is on the stack, preserve the stack
    320  26f1							;
    321  26f1				   iTaskSuspend
    322  26f1		       98		      tya
    323  26f2		       48		      pha
    324  26f3		       20 34 2c 	      jsr	popR1
    325  26f6		       20 02 2c 	      jsr	pushR1
    326  26f9		       20 4e 29 	      jsr	ipc_getcontext	; get context pointer into mq
    327  26fc		       a0 00		      ldy	#0
    328  26fe		       b1 56		      lda	(MQ),y
    329  2700		       09 02		      ora	#TASKRUNPENDING	; Turn off the Suspend flags
    330  2702		       09 80		      ora	#TASKACTIVE
    331  2704		       68		      pla
    332  2705		       a8		      tay
    333  2706		       4c b1 02 	      jmp	NextIL
    334  2709
    335  2709							;================================================================
    336  2709							; Returns task Status
    337  2709				   iTaskStat
    338  2709		       98		      tya
    339  270a		       48		      pha
    340  270b		       20 1d 27 	      jsr	iTaskValid	; returns pointer to task entry
    341  270e		       b9 fb 35 	      lda	taskTable,y
    342  2711		       f0 05		      beq	iTaskStatExit
    343  2713		       68		      pla
    344  2714		       a8		      tay
    345  2715		       4c 7a 0d 	      jmp	iTruth
    346  2718				   iTaskStatExit
    347  2718		       68		      pla
    348  2719		       a8		      tay
    349  271a		       4c 83 0d 	      jmp	iFalse
    350  271d
    351  271d							;
    352  271d							;================================================================
    353  271d							; Validate the task number on top of the stack
    354  271d							; on exit y points to the requested task entry
    355  271d							;
    356  271d		       20 1c 2c    iTaskValid jsr	popR0	; get result of the multiply
    357  2720		       a5 53		      lda	R0+1
    358  2722		       d0 06		      bne	iTaskValidErr	; high byte must be zero
    359  2724		       a5 52		      lda	R0
    360  2726		       c9 fa		      cmp	#TASKTABLELEN
    361  2728		       90 09		      bcc	iTaskIsValid
    362  272a
    363  272a		       68	   iTaskValidErr pla		;remove return address
    364  272b		       68		      pla
    365  272c		       a2 10		      ldx	#ERR_INVALID_PID
    366  272e		       a9 00		      lda	#0
    367  2730		       4c 7d 06 	      jmp	iErr2
    368  2733
    369  2733		       a8	   iTaskIsValid tay
    370  2734		       60		      rts
    371  2735							;
    372  2735							;================================================================
    373  2735							; Kill a running task, do nothing if already stopped
    374  2735		       20 1d 27    iTaskKill  jsr	iTaskValid
    375  2738		       a9 00		      lda	#0
    376  273a		       99 fb 35 	      sta	taskTable,y	; Fall thru to go to ntask - nexttask
    377  273d							;
    378  273d							;================================================================
    379  273d							;Skip to next task
    380  273d				   iNTask
    381  273d		       a9 01		      lda	#1
    382  273f		       8d f5 36 	      sta	taskCurrentCycles
    383  2742		       8d f6 36 	      sta	taskCurrentCycles+1
    384  2745		       4c b1 02 	      jmp	NextIL
    385  2748							;
    386  2748							;=======================================================
    387  2748							; Wait for a task to complete
    388  2748				   iWTASK
    389  2748		       20 91 29 	      jsr	getILByte
    390  274b		       8d 6b 42 	      sta	offset
    391  274e							;
    392  274e		       20 74 2b 	      jsr	saveIL	;in case of failure
    393  2751
    394  2751		       20 1d 27 	      jsr	iTaskValid	; returns pointer to task entry from stack, y is offset
    395  2754		       b9 fb 35 	      lda	taskTable,y
    396  2757		       d0 03		      bne	iWTASKWAIT
    397  2759				   iWTASKEXITED
    398  2759		       4c b1 02 	      jmp	NextIL
    399  275c				   iWTASKWAIT
    400  275c		       20 8a 2b 	      jsr	pushR0	; Push R0 back onto the stack
    401  275f		       a9 01		      lda	#1
    402  2761		       8d f5 36 	      sta	taskCurrentCycles	; Give up the cycles
    403  2764		       8d f6 36 	      sta	taskCurrentCycles+1
    404  2767		       20 7f 2b 	      jsr	restoreIL
    405  276a		       4c d7 0b 	      jmp	tstBranch
    406  276d							;
    407  276d							;=======================================================
    408  276d							; Set task io lock
    409  276d		       ee 6d 42    iStartIO   inc	taskIOPending
    410  2770		       4c b1 02 	      jmp	NextIL
    411  2773							;
    412  2773							;=======================================================
    413  2773							; Release the io lock
    414  2773		       ad 6d 42    iEndIO     lda	taskIOPending
    415  2776		       f0 03		      beq	iEndIOExit
    416  2778		       ce 6d 42 	      dec	taskIOPending
    417  277b		       4c b1 02    iEndIOExit jmp	NextIL
    418  277e							;
    419  277e							;===============================================================
    420  277e							; Return the task PID
    421  277e				   iTASKPID
    422  277e		       a9 00		      lda	#0
    423  2780		       85 53		      sta	R0+1
    424  2782		       ad fa 35 	      lda	taskPtr
    425  2785		       85 52		      sta	R0
    426  2787		       4c 16 07 	      jmp	pushR0nextIl
    427  278a							;
    428  278a							;================================================================
    429  278a							; Terminate a task
    430  278a		       ac fa 35    iETask     ldy	taskPtr
    431  278d		       c0 00		      cpy	#0
    432  278f		       d0 03		      bne	iETaskCont
    433  2791		       4c 02 06 	      jmp	iFIN	; if the main task does a ETASK then stop
    434  2794				   iETaskCont
    435  2794		       a9 00		      lda	#TASKINACTIVE
    436  2796		       99 fb 35 	      sta	taskTable,y	; mark entry as free
    437  2799		       ce f9 36 	      dec	taskCounter	; reduce the number of active tasks
    438  279c		       a9 01		      lda	#1
    439  279e		       8d f5 36 	      sta	taskCurrentCycles	; Make it 1 as rtn will dec and check
    440  27a1		       8d f6 36 	      sta	taskCurrentCycles+1
    441  27a4		       20 35 28 	      jsr	TaskSetExitCode
    442  27a7				   iETaskExit
    443  27a7		       4c b1 02 	      jmp	NextIL
    444  27aa							;================================================================
    445  27aa							; make the current tasks math stack equal another tasks stack
    446  27aa							; The task to get is stored on the math stack
    447  27aa
    448  27aa				   iTaskGetMathStack
    449  27aa		       20 55 2e 	      jsr	CopyStackR1	; Get the top of stack to R1
    450  27ad		       20 4e 29 	      jsr	ipc_getcontext	; MQ now has the context address
    451  27b0		       a0 0a		      ldy	#MATHSTACKPTRPOS
    452  27b2		       b1 56		      lda	(MQ),y
    453  27b4		       85 4a		      sta	MATHSTACKPTR
    454  27b6		       a0 08		      ldy	#MATHSTACKPOS
    455  27b8		       b1 56		      lda	(MQ),y
    456  27ba		       85 48		      sta	MATHSTACK
    457  27bc		       c8		      iny
    458  27bd		       b1 56		      lda	(MQ),y
    459  27bf		       85 49		      sta	MATHSTACK+1
    460  27c1		       4c b1 02 	      jmp	NextIL
    461  27c4							;==================================================================
    462  27c4							; Updates the tasks math stack pointer with contents of R2
    463  27c4							; PID is on top of the stack
    464  27c4				   iTaskPutMathPtr
    465  27c4		       20 55 2e 	      jsr	CopyStackR1	; Get the top of stack to R1
    466  27c7		       20 4e 29 	      jsr	ipc_getcontext	; MQ now has the context address
    467  27ca		       a5 58		      lda	R2	; R2 contains the number of parameters/offset
    468  27cc		       a0 0a		      ldy	#MATHSTACKPTRPOS	; Pointer to new tasks stack pointer
    469  27ce		       91 56		      sta	(MQ),y	; update it to point to the free space on stack
    470  27d0							;if parm count > 0 then we need to create a parameter block on the tasks gosubStack
    471  27d0		       c9 00		      cmp	#0	; if no parameters then
    472  27d2		       f0 26		      beq	iTaskPutMathPtrExit	; just get out of here
    473  27d4
    474  27d4		       a0 0b		      ldy	#GOSUBSTKPOS
    475  27d6		       b1 56		      lda	(MQ),y	; get the address of the new tasks gosub stack into R1
    476  27d8		       85 54		      sta	R1
    477  27da		       c8		      iny
    478  27db		       b1 56		      lda	(MQ),y
    479  27dd		       85 55		      sta	R1+1
    480  27df
    481  27df		       a9 00		      lda	#0	; Store the math stack offset into new gosub stack, always 0
    482  27e1		       91 54		      sta	(R1),y
    483  27e3
    484  27e3		       c8		      iny
    485  27e4		       18		      clc		; We need to turn stack ptr to actual parm count
    486  27e5		       e9 01		      sbc	#1	; Stack pointer always point to next free byte
    487  27e7		       0a		      asl
    488  27e8		       91 54		      sta	(R1),y
    489  27ea
    490  27ea		       c8		      iny
    491  27eb		       a9 ff		      lda	#$FF	; Dummy field, not used
    492  27ed		       91 54		      sta	(R1),y
    493  27ef		       c8		      iny
    494  27f0		       a9 05		      lda	#GOSUB_STACK_FRAME	; Tell its a stck frame, ie identify param cnt etc
    495  27f2		       91 54		      sta	(R1),y
    496  27f4		       c8		      iny
    497  27f5		       98		      tya
    498  27f6		       a0 0d		      ldy	#GOSUBPTRPOS
    499  27f8		       91 56		      sta	(MQ),y	; update the new tasks gosub stk pointer
    500  27fa
    501  27fa				   iTaskPutMathPtrExit
    502  27fa		       4c b1 02 	      jmp	NextIL
    503  27fd							;
    504  27fd							;================================================================
    505  27fd							; Set the time slice for each task
    506  27fd				   iSLICE
    507  27fd		       20 1c 2c 	      jsr	popR0
    508  2800		       a5 52		      lda	R0
    509  2802		       8d f7 36 	      sta	taskResetValue
    510  2805		       a5 53		      lda	R0+1
    511  2807		       8d f8 36 	      sta	taskResetValue+1
    512  280a		       d0 0b		      bne	iSliceSet
    513  280c		       ee f8 36 	      inc	taskResetValue+1	; must be at least 1 high counter
    514  280f		       a9 01		      lda	#1
    515  2811		       8d f5 36 	      sta	taskCurrentCycles
    516  2814		       8d f6 36 	      sta	taskCurrentCycles+1
    517  2817				   iSliceSet
    518  2817		       4c b1 02 	      jmp	NextIL
    519  281a							;================================================================
    520  281a							; Find an empty slot in the taskTable
    521  281a							; Return the index in y
    522  281a							; on exit   c set if an empty slot is found
    523  281a							;	     c clear if not found
    524  281a							;================================================================
    525  281a							;
    526  281a		       ad f9 36    TaskEmpty  lda	taskCounter
    527  281d		       c9 0a		      cmp	#TASKCOUNT
    528  281f		       b0 10		      bcs	TaskNoSlot
    529  2821		       a0 19		      ldy	#CONTEXTLEN	;The first slot is always the main line SKIP
    530  2823				   TaskLoop
    531  2823		       b9 fb 35 	      lda	taskTable,y
    532  2826		       f0 0b		      beq	TaskEmptyFnd
    533  2828		       98		      tya
    534  2829		       18		      clc
    535  282a		       69 19		      adc	#CONTEXTLEN
    536  282c		       a8		      tay
    537  282d		       c0 fa		      cpy	#TASKTABLELEN
    538  282f		       90 f2		      bcc	TaskLoop	; Y is never zero
    539  2831				   TaskNoSlot
    540  2831		       18		      clc
    541  2832		       60		      rts
    542  2833				   TaskEmptyFnd
    543  2833		       38		      sec
    544  2834		       60		      rts
    545  2835							;====================================================
    546  2835							; Set the task exit code called from the return command
    547  2835							; on entry stack top hold exit value
    548  2835				   TaskSetExitCode
    549  2835		       98		      tya
    550  2836		       48		      pha
    551  2837		       20 1c 2c 	      jsr	popR0
    552  283a		       a0 48		      ldy	#TASKEXITCODE
    553  283c		       a5 52		      lda	R0
    554  283e		       91 41		      sta	(VARIABLES),y
    555  2840		       c8		      iny
    556  2841		       a5 53		      lda	R0+1
    557  2843		       91 41		      sta	(VARIABLES),y
    558  2845		       68		      pla
    559  2846		       98		      tya
    560  2847		       60		      rts
    561  2848
    562  2848							;
    563  2848							;=====================================================
    564  2848							; Save Context Store the context to the TASK Table
    565  2848							; on entry y contains the task table entry to save to
    566  2848							; on exit y points to next task table entry
    567  2848							;	   x contains the number of bytes copied
    568  2848		       a2 00	   ContextSave ldx	#0
    569  284a		       c8		      iny		;inc past the task flags
    570  284b		       b5 41	   ContextSvLoop lda	CONTEXT,x
    571  284d		       99 fb 35 	      sta	taskTable,y
    572  2850		       c8		      iny
    573  2851		       e8		      inx
    574  2852		       e0 18		      cpx	#[CONTEXTLEN-1]
    575  2854		       90 f5		      bcc	ContextSvLoop
    576  2856		       60		      rts
    577  2857							;
    578  2857							; Load Context transfer context from task table to the Current Context
    579  2857							; on entry y contains the task table entry to transfer
    580  2857							; on exit y points to the original task table entry
    581  2857							;	   x contains the number of bytes copied
    582  2857		       98	   ContextLoad tya
    583  2858		       48		      pha
    584  2859		       a2 00		      ldx	#0
    585  285b		       c8		      iny		;inc past the task flags
    586  285c		       b9 fb 35    ContextLDLoop lda	taskTable,y
    587  285f		       95 41		      sta	CONTEXT,x
    588  2861		       c8		      iny
    589  2862		       e8		      inx
    590  2863		       e0 18		      cpx	#[CONTEXTLEN-1]
    591  2865		       90 f5		      bcc	ContextLDLoop
    592  2867		       68		      pla
    593  2868		       a8		      tay
    594  2869		       60		      rts
------- FILE mytb.asm
------- FILE ipc.asm LEVEL 2 PASS 6
      0  286a					      include	"ipc.asm"
      1  286a							;======================================================
      2  286a							; Inter process communications.
      3  286a							; Tasks may write/read integer messages among
      4  286a							; them selves.
      5  286a							; This uses each tasks gosub stack as a message queue
      6  286a							; Gosub calls start at the highest address and the
      7  286a							; msg queue starts at the highest address.
      8  286a							;
      9  286a							;======================================================
     10  286a							; ipcs   - Send msg to another task or many tasks
     11  286a							; on entry  math stack contains the  top PID
     12  286a							;				      2ND Message value
     13  286a							; on exit   math stack contain top True-good or False-failed
     14  286a							;
     15  286a							; it may not be sent if queue is full
     16  286a							;
     17  286a							; a = ipcs(<message-expression>,<task PID-expression>)
     18  286a							;
     19  286a				   iIPCS
     20  286a		       98		      tya
     21  286b		       48		      pha
     22  286c		       20 d3 28 	      jsr	ipc_enqueue
     23  286f		       b0 08		      bcs	iIPC_BAD
     24  2871		       20 47 2e 	      jsr	pushTrue
     25  2874		       68		      pla
     26  2875		       a8		      tay
     27  2876		       4c b1 02 	      jmp	NextIL
     28  2879				   iIPC_BAD
     29  2879		       68		      pla
     30  287a		       a8		      tay
     31  287b		       20 51 2e 	      jsr	pushFalse
     32  287e		       4c b1 02 	      jmp	NextIL
     33  2881
     34  2881							;======================================================
     35  2881							; ipcr   - Recieve msg from task
     36  2881							; on exit  the message value is returned from message queue
     37  2881							;	    message -1	is reserved meaning no entry found
     38  2881							; The provided variable contains the pid of the sending
     39  2881							; task. This is optional. This always waits for a message
     40  2881							; before returning.
     41  2881							;
     42  2881							; a = ipcr(<variable name>)
     43  2881							;
     44  2881				   iIPCR
     45  2881		       98		      tya
     46  2882		       48		      pha
     47  2883		       20 15 29 	      jsr	ipc_dequeue
     48  2886		       b0 05		      bcs	iIPCR_Q_Empty
     49  2888		       68		      pla
     50  2889		       a8		      tay
     51  288a		       4c b1 02 	      jmp	NextIL
     52  288d				   iIPCR_Q_Empty
     53  288d		       68		      pla
     54  288e		       a8		      tay
     55  288f		       20 47 2e 	      jsr	pushTrue	; puts -1 on the stack
     56  2892		       4c b1 02 	      jmp	NextIL
     57  2895
     58  2895							;=======================================================
     59  2895							; ipcc   - Check if message available
     60  2895							; on exit  Stack contains number of messages
     61  2895							;
     62  2895							; a = ipcc()
     63  2895							;
     64  2895				   iIPCC
     65  2895		       98		      tya
     66  2896		       48		      pha
     67  2897		       20 c0 28 	      jsr	ipc_queue_count
     68  289a		       20 8a 2b 	      jsr	pushR0	; return the count
     69  289d		       68		      pla
     70  289e		       a8		      tay
     71  289f		       4c b1 02 	      jmp	NextIL
     72  28a2
     73  28a2							;=======================================================
     74  28a2							;ipcio    Turns on the tasks wait ips if nothing in queue
     75  28a2				   iIPCIO
     76  28a2		       98		      tya
     77  28a3		       48		      pha
     78  28a4		       20 c0 28 	      jsr	ipc_queue_count
     79  28a7		       a5 52		      lda	R0
     80  28a9		       d0 10		      bne	iIPCIO_No_Halt
     81  28ab		       a9 01		      lda	#1
     82  28ad		       8d f5 36 	      sta	taskCurrentCycles	; force a task switch
     83  28b0		       a9 01		      lda	#TASKWAITIPC
     84  28b2		       ac fa 35 	      ldy	taskPtr
     85  28b5		       19 fb 35 	      ora	taskTable,y
     86  28b8		       99 fb 35 	      sta	taskTable,y
     87  28bb
     88  28bb				   iIPCIO_No_Halt
     89  28bb		       68		      pla
     90  28bc		       a8		      tay
     91  28bd		       4c b1 02 	      jmp	NextIL
     92  28c0							;======================================================
     93  28c0							;ipc_queue_count
     94  28c0				   ipc_queue_count
     95  28c0		       a5 4e		      lda	MESSAGEPTR
     96  28c2		       18		      clc
     97  28c3		       4a		      lsr		; divide by 4
     98  28c4		       4a		      lsr
     99  28c5		       85 52		      sta	R0	; store into R0
    100  28c7		       a9 10		      lda	#GOSUBSTACKSIZE
    101  28c9		       38		      sec
    102  28ca		       e5 52		      sbc	R0	; Get how many entries on queue
    103  28cc		       85 52		      sta	R0
    104  28ce		       a9 00		      lda	#0
    105  28d0		       85 53		      sta	R0+1
    106  28d2		       60		      rts
    107  28d3							;=======================================================
    108  28d3							; Support functions for messaging
    109  28d3							;
    110  28d3							; Enqueue message -> onto PID's MSG Q
    111  28d3							; on entry top of stack contains the PID
    112  28d3							;	    second contains the Message of the task
    113  28d3							; on exit contains c set if failed
    114  28d3							;		    c cleared if success
    115  28d3							;		    PID's MSG Q PTR points to the message
    116  28d3							;
    117  28d3				   ipc_enqueue
    118  28d3		       20 34 2c 	      jsr	popR1	; Get the pid
    119  28d6		       20 4e 29 	      jsr	ipc_getcontext	; Get the PID's context into MQ
    120  28d9
    121  28d9		       a0 0d		      ldy	#GOSUBPTRPOS	; pointer to required information
    122  28db		       b1 56		      lda	(MQ),Y	; Get the stk ptr gosub queue
    123  28dd		       a0 0e		      ldy	#MSGPTRPOS	; Get the offset to the msg q ptr
    124  28df		       d1 56		      cmp	(MQ),y	; Test if there is already the max messages on stack
    125  28e1		       b0 30		      bcs	ipc_enq_full	; Exit with queue full message
    126  28e3
    127  28e3
    128  28e3							; Get the PID'S stack address into R0
    129  28e3		       a0 0b		      ldy	#GOSUBSTKPOS
    130  28e5		       b1 56		      lda	(MQ),y
    131  28e7		       85 52		      sta	R0
    132  28e9		       c8		      iny
    133  28ea		       b1 56		      lda	(MQ),y
    134  28ec		       85 53		      sta	R0+1	; R0 now points to Task gosub/msg stack
    135  28ee
    136  28ee							; Set y to point to the msg q entry
    137  28ee		       a0 0e		      ldy	#MSGPTRPOS	; Get the offset to the msg q ptr
    138  28f0		       b1 56		      lda	(MQ),y	; Get the index
    139  28f2		       a8		      tay		; Set y to queue offset
    140  28f3
    141  28f3							; enqueue the message
    142  28f3		       88		      dey		; First byte to save to
    143  28f4		       a9 04		      lda	#GOSUB_MSG	; Get the Entry type
    144  28f6		       91 52		      sta	(R0),y	; Set the entry type
    145  28f8
    146  28f8		       88		      dey
    147  28f9		       ad fa 35 	      lda	taskPtr	; Store the PID into queue
    148  28fc		       91 52		      sta	(R0),y
    149  28fe		       20 34 2c 	      jsr	popR1	; Get the actual message value
    150  2901		       20 82 29 	      jsr	ipc_pushR1	; Store Message value into queue
    151  2904
    152  2904		       98		      tya		; Save the new q ptr
    153  2905		       a0 0e		      ldy	#MSGPTRPOS
    154  2907		       91 56		      sta	(MQ),y	; Update the message stack pointer
    155  2909		       a0 00		      ldy	#0	; points to context root
    156  290b		       a9 01		      lda	#TASKWAITIPC	; Turn off the ipc wait flag
    157  290d		       51 56		      eor	(MQ),y	; Turn off the bit
    158  290f		       91 56		      sta	(MQ),y	; Clear the ipc wait flag
    159  2911		       18		      clc
    160  2912		       60		      rts
    161  2913				   ipc_enq_full
    162  2913		       38		      sec
    163  2914		       60		      rts
    164  2915							;=============================================================
    165  2915							; De-queue for message stack -> local tasks msg q
    166  2915							;  on entry  top of math stack contains the Variable to place, or 0 if not to save
    167  2915							;  message into
    168  2915							;  on exit   math stack contains value of message
    169  2915							;				  Variable if provided is pid
    170  2915				   ipc_dequeue
    171  2915		       20 4b 2c 	      jsr	popMQ	; Variable address to put PID into
    172  2918
    173  2918		       a4 4e		      ldy	MESSAGEPTR
    174  291a		       c0 38		      cpy	#[[GOSUBSTACKSIZE - 2] * 4]	; see if anything to pop from stack
    175  291c		       b0 2e		      bcs	ipc_deq_empty
    176  291e		       b1 4b		      lda	(GOSUBSTACK),y	; get the message value
    177  2920		       85 52		      sta	R0
    178  2922		       c8		      iny
    179  2923		       b1 4b		      lda	(GOSUBSTACK),y
    180  2925		       85 53		      sta	R0+1
    181  2927		       c8		      iny
    182  2928		       b1 4b		      lda	(GOSUBSTACK),y	; get the pid value
    183  292a		       85 54		      sta	R1
    184  292c		       c8		      iny
    185  292d		       b1 4b		      lda	(GOSUBSTACK),y	; Get the type of message
    186  292f		       c8		      iny
    187  2930		       84 4e		      sty	MESSAGEPTR	; Save the message q ptr
    188  2932
    189  2932		       c9 04		      cmp	#GOSUB_MSG	; Should be a message
    190  2934		       d0 16		      bne	ipc_deq_empty
    191  2936
    192  2936		       20 8a 2b 	      jsr	pushR0	; place value on stack
    193  2939
    194  2939		       a5 56		      lda	MQ
    195  293b		       05 57		      ora	MQ+1
    196  293d		       f0 0b		      beq	ipc_deq_done
    197  293f		       a5 54		      lda	R1
    198  2941		       a0 00		      ldy	#0
    199  2943		       91 56		      sta	(MQ),y
    200  2945		       c8		      iny
    201  2946		       a9 00		      lda	#0
    202  2948		       91 56		      sta	(MQ),y
    203  294a				   ipc_deq_done
    204  294a		       18		      clc
    205  294b		       60		      rts
    206  294c
    207  294c				   ipc_deq_empty
    208  294c		       38		      sec
    209  294d		       60		      rts
    210  294e
    211  294e							;=============================================
    212  294e							;  Get the context address into MQ from R1 with
    213  294e							;  context/index/pid
    214  294e				   ipc_getcontext
    215  294e		       18		      clc		; Get pointer to Task context
    216  294f		       a9 fb		      lda	#taskTable&$FF	; change ptr to address
    217  2951		       65 54		      adc	R1
    218  2953		       85 56		      sta	MQ
    219  2955		       a9 35		      lda	#taskTable>>8
    220  2957		       65 55		      adc	R1+1
    221  2959		       85 57		      sta	MQ+1	; We now have a pointer into the context
    222  295b		       60		      rts
    223  295c							;
    224  295c							;==============================================
    225  295c							; on entry R1 has a context value,
    226  295c							; on exit c is set if fails
    227  295c							;
    228  295c				   ipc_CONTEXTVALUES
      0  295c					      db	$00,CONTEXTLEN,[CONTEXTLEN*2],(CONTEXTLEN*3)
      1  295c		       00 19 32 4b	      .byte.b	$00,CONTEXTLEN,[CONTEXTLEN*2],(CONTEXTLEN*3)
      0  2960					      db	(CONTEXTLEN*4),(CONTEXTLEN*5),(CONTEXTLEN*6),(CONTEXTLEN*7)
      1  2960		       64 7d 96 af	      .byte.b	(CONTEXTLEN*4),(CONTEXTLEN*5),(CONTEXTLEN*6),(CONTEXTLEN*7)
      0  2964					      db	(CONTEXTLEN*8),(CONTEXTLEN*9)
      1  2964		       c8 e1		      .byte.b	(CONTEXTLEN*8),(CONTEXTLEN*9)
    232  2966
    233  2966				   ipc_ValidateContext
    234  2966		       48		      pha
    235  2967		       8a		      txa
    236  2968		       48		      pha
    237  2969		       a5 55		      lda	R1+1
    238  296b		       d0 0e		      bne	ipc_Validate_Fail
    239  296d		       a2 00		      ldx	#0
    240  296f		       a5 54		      lda	R1
    241  2971				   ipc_ValidateLoop
    242  2971		       dd 5c 29 	      cmp	ipc_CONTEXTVALUES,x
    243  2974		       f0 09		      beq	ipc_Valid_Context
    244  2976		       e8		      inx
    245  2977		       e0 0a		      cpx	#TASKCOUNT
    246  2979		       90 f6		      bcc	ipc_ValidateLoop
    247  297b
    248  297b				   ipc_Validate_Fail
    249  297b		       68		      pla
    250  297c		       aa		      tax
    251  297d		       68		      pla
      0  297e					      rtn
      0  297e					      db	25
      1  297e		       19		      .byte.b	25
    253  297f
    254  297f				   ipc_Valid_Context
    255  297f		       18		      clc
    256  2980		       90 f9		      bcc	ipc_Validate_Fail
    257  2982							;
    258  2982							;==============================================
    259  2982							;Push R1 onto the stack
    260  2982							;on entry y = next entry
    261  2982							;R0 points to the stack space
    262  2982							;on exit y points to next free byte
    263  2982				   ipc_pushR1
    264  2982		       88		      dey
    265  2983		       a5 55		      lda	R1+1	; PID first
    266  2985		       91 52		      sta	(R0),y
    267  2987		       88		      dey
    268  2988		       a5 54		      lda	R1
    269  298a		       91 52		      sta	(R0),y
    270  298c		       60		      rts
    271  298d
    272  298d
    273  298d
    274  298d
    275  298d
    276  298d
    277  298d
------- FILE mytb.asm
------- FILE support.asm LEVEL 2 PASS 6
      0  298d					      include	"support.asm"
      1  298d							;
      2  298d							;=====================================================
      3  298d							;=====================================================
      4  298d							;=====================================================
      5  298d							; This marks the start of support functions used by
      6  298d							; the IL opcodes.  These are support functions, NOT
      7  298d							; the IL code.
      8  298d							;=====================================================
      9  298d							;GOSUBSTACKSIZE  equ	  16	    ;Depth of gosub nesting
     10  298d							;=====================================================
     11  298d					      Seg	Code
     12  298d							;=====================================================
     13  298d							; This gets the next two bytes pointed to by ILPC and
     14  298d							; returns them; X contains LSB, A contains MSB.  ILPC
     15  298d							; is advanced by two, and Y contains 0 on return.
     16  298d
     17  298d							;
     18  298d		       20 91 29    getILWord  jsr	getILByte	;LSB
     19  2990		       aa		      tax
     20  2991							;
     21  2991							;=====================================================
     22  2991							; This gets the next byte pointed to by ILPC and
     23  2991							; returns it in A.  On return, X is unchanged but Y
     24  2991							; contains 0.
     25  2991							;
     26  2991		       a0 00	   getILByte  ldy	#0
     27  2993		       b1 43		      lda	(ILPC),y	;get byte
     28  2995		       08		      php		;save status
     29  2996		       e6 43		      inc	ILPC	;inc LSB
     30  2998		       d0 02		      bne	getILb2	;branch if no overflow
     31  299a		       e6 44		      inc	ILPC+1	;inc MSB
     32  299c		       28	   getILb2    plp		;restore status
     33  299d		       60		      rts
     34  299e							;
     35  299e							;=====================================================
     36  299e							; Decrement ILPC by one.
     37  299e							;
     38  299e		       a5 43	   decIL      lda	ILPC
     39  29a0		       d0 02		      bne	decIL2
     40  29a2		       c6 44		      dec	ILPC+1
     41  29a4		       c6 43	   decIL2     dec	ILPC
     42  29a6		       60		      rts
     43  29a7							;
     44  29a7							;=====================================================
     45  29a7							; Push the ILPC onto the return stack.  Actually, this
     46  29a7							; pushes the address of ILPC+2 since that's the next
     47  29a7							; address to execute.
     48  29a7							;
     49  29a7		       a4 47	   pushILPC   ldy	ILSTACKPTR
     50  29a9		       c0 64		      cpy	#ILSTACKSIZE<<1
     51  29ab		       b0 15		      bcs	pushErr
     52  29ad		       a5 43		      lda	ILPC
     53  29af		       18		      clc
     54  29b0		       69 02		      adc	#2
     55  29b2		       91 45		      sta	(ILSTACK),y
     56  29b4		       08		      php		;save C bit
     57  29b5		       c8		      iny
     58  29b6		       a5 44		      lda	ILPC+1
     59  29b8		       28		      plp		;restore C
     60  29b9		       69 00		      adc	#0
     61  29bb		       91 45		      sta	(ILSTACK),y
     62  29bd		       c8		      iny
     63  29be		       84 47		      sty	ILSTACKPTR
     64  29c0		       18		      clc
     65  29c1		       60		      rts
     66  29c2				   pushErr
     67  29c2		       38		      sec
     68  29c3		       60		      rts
     69  29c4							;
     70  29c4							;=====================================================
     71  29c4							; Pull the top entry from return stack and put into
     72  29c4							; ILPC.
     73  29c4							;
     74  29c4		       a4 47	   popILPC    ldy	ILSTACKPTR
     75  29c6		       f0 fa		      beq	pushErr
     76  29c8		       88		      dey
     77  29c9		       b1 45		      lda	(ILSTACK),y
     78  29cb		       85 44		      sta	ILPC+1
     79  29cd		       88		      dey
     80  29ce		       b1 45		      lda	(ILSTACK),y
     81  29d0		       85 43		      sta	ILPC
     82  29d2		       84 47		      sty	ILSTACKPTR
     83  29d4		       18		      clc
     84  29d5		       60		      rts
     85  29d6							;
     86  29d6							;=====================================================
     87  29d6							; This searches for a specific line number that is in
     88  29d6							; R0.	There are three possible return conditions:
     89  29d6							; Line numbers are now the third byte, the first byte is now
     90  29d6							; a pointer to the next line, of course no longer than 255 byte
     91  29d6							; per line.
     92  29d6							;
     93  29d6							; Exact match was found:
     94  29d6							;    * Z set
     95  29d6							;    * CURPTR points to two-byte line number for that
     96  29d6							;	line.
     97  29d6							;
     98  29d6							; Next highest line found:
     99  29d6							;    * Z cleared
    100  29d6							;    * C set
    101  29d6							;    * CURPTR points to two-byte line number for that
    102  29d6							;	line.
    103  29d6							;
    104  29d6							; End of program reached:
    105  29d6							;    * Z cleared
    106  29d6							;    * C cleared
    107  29d6							;    * CURPTR points to first free byte at end of
    108  29d6							;	program.  Ie, it has save value as PROGRAMEND.
    109  29d6							;
    110  29d6							; A, X, and Y are all undefined on return.
    111  29d6							;
    112  29d6
    113  29d6				   findLine
    114  29d6		       ad 6f 42 	      lda	ProgramStart	;Start of program -> CURPTR
    115  29d9		       85 4f		      sta	CURPTR
    116  29db		       ad 70 42 	      lda	ProgramStart+1
    117  29de		       85 50		      sta	CURPTR+1
    118  29e0							;
    119  29e0							; At end of code?
    120  29e0							;
    121  29e0				   iXFER1
    122  29e0		       a5 4f		      lda	CURPTR	; chk CURPTR = END PROGRAM
    123  29e2		       cd 71 42 	      cmp	ProgramEnd	; at end of program then stop run
    124  29e5		       d0 0b		      bne	xfer2	; not end
    125  29e7		       a5 50		      lda	CURPTR+1
    126  29e9		       cd 72 42 	      cmp	ProgramEnd+1
    127  29ec		       d0 04		      bne	xfer2	;Not at end
    128  29ee							;
    129  29ee							; Line not found and the end of the program was
    130  29ee							; reached.  Return Z and C both clear.
    131  29ee							;
    132  29ee		       a9 01		      lda	#1	;clear Z
    133  29f0		       18		      clc		;clear C
    134  29f1		       60		      rts
    135  29f2							;
    136  29f2							; Check for an exact line number match
    137  29f2							;
    138  29f2		       a5 52	   xfer2      lda	R0
    139  29f4		       a0 01		      ldy	#1	; changed to skip extra length byte
    140  29f6		       d1 4f		      cmp	(CURPTR),y
    141  29f8		       d0 08		      bne	xfernotit
    142  29fa		       c8		      iny
    143  29fb		       a5 53		      lda	R0+1
    144  29fd		       d1 4f		      cmp	(CURPTR),y
    145  29ff		       d0 01		      bne	xfernotit	; not a matching line number
    146  2a01							;
    147  2a01							; This is exactly the line we want.
    148  2a01							;
    149  2a01		       60		      rts		;it matches exactly
    150  2a02							;
    151  2a02							; See if this line is greater than the one we're
    152  2a02							; searching for.
    153  2a02							;
    154  2a02		       a0 02	   xfernotit  ldy	#2	;Changed from to skip leading length and least significat digit
    155  2a04		       b1 4f		      lda	(CURPTR),y	;compare MSB first
    156  2a06		       c5 53		      cmp	R0+1
    157  2a08		       90 0b		      bcc	xfer3
    158  2a0a		       d0 07		      bne	xfer4
    159  2a0c		       88		      dey
    160  2a0d		       b1 4f		      lda	(CURPTR),y	;compare LSB
    161  2a0f		       c5 52		      cmp	R0
    162  2a11		       90 02		      bcc	xfer3
    163  2a13							;
    164  2a13							; This line is greater than the one we want, so
    165  2a13							; return Z clear and C set.
    166  2a13							;
    167  2a13		       38	   xfer4      sec		;We found a line number greater
    168  2a14		       60		      rts		;both conditions set
    169  2a15							;
    170  2a15							; Not the line (or droid) we're looking for.  Move to
    171  2a15							; the next line.
    172  2a15							;
    173  2a15		       20 1b 2a    xfer3      jsr	FindNextLine
    174  2a18		       4c e0 29 	      jmp	iXFER1
    175  2a1b							;
    176  2a1b							;=====================================================
    177  2a1b							; This advances CURPTR to the next line.  If there
    178  2a1b							; are no more lines, this leaves CURPTR equal to
    179  2a1b							; ProgramEnd.	Returns CUROFF set to 3.  This assumes
    180  2a1b							; CURPTR is pointing to a valid line on entry.  This
    181  2a1b							; pointer points to the two-byte line number.
    182  2a1b							; Update this points to the 1 byte line length  ****************
    183  2a1b							;
    184  2a1b				   FindNextLine
    185  2a1b		       a0 03		      ldy	#3	;skip line number and length byte
    186  2a1d		       84 51		      sty	CUROFF	;this is the new offset
    187  2a1f		       a0 00		      ldy	#0
    188  2a21		       b1 4f		      lda	(CURPTR),y	;Get the length
    189  2a23		       18		      clc
    190  2a24		       65 4f		      adc	CURPTR
    191  2a26		       85 4f		      sta	CURPTR
    192  2a28		       a5 50		      lda	CURPTR+1
    193  2a2a		       69 00		      adc	#0
    194  2a2c		       85 50		      sta	CURPTR+1
    195  2a2e		       60	   FindNext4  rts
    196  2a2f							;
    197  2a2f							;=====================================================
    198  2a2f							; This compares CURPTR to PROGRAMEND and returns Z set
    199  2a2f							; if they are equal, Z clear if not.
    200  2a2f							;
    201  2a2f		       a5 4f	   AtEnd      lda	CURPTR
    202  2a31		       cd 71 42 	      cmp	ProgramEnd
    203  2a34		       d0 05		      bne	atendexit
    204  2a36		       a5 50		      lda	CURPTR+1
    205  2a38		       cd 72 42 	      cmp	ProgramEnd+1
    206  2a3b		       60	   atendexit  rts
    207  2a3c							;
    208  2a3c
    209  2a3c							;
    210  2a3c							;=====================================================
    211  2a3c							; Convert an ASCII string to a number.  On input,
    212  2a3c							; (CURPTR),Y points to the first digit.  This gets
    213  2a3c							; digit-by-digit until finding a non-number.  Returns
    214  2a3c							; Y pointing to the non-digit, and R0 contains the
    215  2a3c							; number.  This does NOT check for valid ranges, so
    216  2a3c							; a value like "123456789" will produce something,
    217  2a3c							; but not what you had expected.
    218  2a3c							;
    219  2a3c		       a9 00	   getDecimal lda	#0
    220  2a3e		       85 52		      sta	R0
    221  2a40		       85 53		      sta	R0+1
    222  2a42		       85 59		      sta	dpl	;temporary negative flag
    223  2a44							;
    224  2a44							; See if it's negative...
    225  2a44							;
    226  2a44							;sty	  $0013 	Removed as no idea why here JUSTLOSTINTIME
    227  2a44		       b1 4f		      lda	(CURPTR),y
    228  2a46		       c9 2d		      cmp	#'-
    229  2a48		       d0 02		      bne	getDecLoop
    230  2a4a		       e6 59		      inc	dpl	;it's negative
    231  2a4c							;
    232  2a4c		       b1 4f	   getDecLoop lda	(CURPTR),y
    233  2a4e		       f0 3a		      beq	getDdone	;Added this incase we hit eol JUSTLOSTINTIME
    234  2a50		       c9 30		      cmp	#'0
    235  2a52		       90 36		      bcc	getDdone
    236  2a54		       c9 3a		      cmp	#'9+1
    237  2a56		       b0 32		      bcs	getDdone
    238  2a58		       38		      sec
    239  2a59		       e9 30		      sbc	#'0	;convert to binary
    240  2a5b		       48		      pha
    241  2a5c							;
    242  2a5c							; Now multiply R0 by 10.  Remember that
    243  2a5c							; 2*N + 8*N = 10*N.
    244  2a5c							;
    245  2a5c		       06 52		      asl	R0
    246  2a5e		       26 53		      rol	R0+1	;*2
    247  2a60		       a5 52		      lda	R0
    248  2a62		       85 54		      sta	R1
    249  2a64		       a5 53		      lda	R0+1
    250  2a66		       85 55		      sta	R1+1
    251  2a68		       06 52		      asl	R0
    252  2a6a		       26 53		      rol	R0+1	;*4
    253  2a6c		       06 52		      asl	R0
    254  2a6e		       26 53		      rol	R0+1	;*8
    255  2a70		       18		      clc		;now add the partial sums...
    256  2a71		       a5 52		      lda	R0	;...to get *10
    257  2a73		       65 54		      adc	R1
    258  2a75		       85 52		      sta	R0
    259  2a77		       a5 53		      lda	R0+1
    260  2a79		       65 55		      adc	R1+1
    261  2a7b		       85 53		      sta	R0+1
    262  2a7d							;
    263  2a7d							; Add in the new digit
    264  2a7d							;
    265  2a7d		       68		      pla
    266  2a7e		       18		      clc
    267  2a7f		       65 52		      adc	R0
    268  2a81		       85 52		      sta	R0
    269  2a83		       90 02		      bcc	getD2
    270  2a85		       e6 53		      inc	R0+1
    271  2a87							;
    272  2a87							; Move to next character
    273  2a87							;
    274  2a87		       c8	   getD2      iny
    275  2a88		       d0 c2		      bne	getDecLoop
    276  2a8a							;
    277  2a8a							; All done with digits, so now deal with it being
    278  2a8a							; negative.  If zero, then don't check for negative
    279  2a8a							; flag.  Ie, -0 is stored as 0.
    280  2a8a							;
    281  2a8a		       a5 52	   getDdone   lda	R0
    282  2a8c		       05 53		      ora	R0+1
    283  2a8e		       f0 16		      beq	getDone2	;zero
    284  2a90		       a5 59		      lda	dpl
    285  2a92		       f0 12		      beq	getDone2	;positive
    286  2a94							;
    287  2a94							; Invert all the bits, then add one.
    288  2a94							;
    289  2a94		       a5 52		      lda	R0
    290  2a96		       49 ff		      eor	#$ff
    291  2a98		       85 52		      sta	R0
    292  2a9a		       a5 53		      lda	R0+1
    293  2a9c		       49 ff		      eor	#$ff
    294  2a9e		       85 53		      sta	R0+1
    295  2aa0							;
    296  2aa0		       e6 52		      inc	R0
    297  2aa2		       d0 02		      bne	getDone2
    298  2aa4		       e6 53		      inc	R0+1
    299  2aa6				   getDone2
    300  2aa6							; removed next few lines as no idea why they are here JUSTLOSTINTIME
    301  2aa6							;lda	  R0
    302  2aa6							;sta	  $0010
    303  2aa6							;lda	  R0+1
    304  2aa6							;sta	  $0011
    305  2aa6							;lda	  dpl
    306  2aa6							;sta	  $012
    307  2aa6
    308  2aa6		       60		      rts
    309  2aa7
    310  2aa7							;=====================================================
    311  2aa7							; Gets a line of input into LINBUF.
    312  2aa7							;
    313  2aa7							; On entry:
    314  2aa7							;    A contains the prompt character, or 0 if none.
    315  2aa7							;    X = 1 Background read
    316  2aa7							;    x = 0 Forground read with wait
    317  2aa7							;
    318  2aa7							; On exit:
    319  2aa7							;    CURPTR points to LINBUF
    320  2aa7							;    LINBUF contains the line with 0 at the end.
    321  2aa7							;    Y has offset to first non-space character
    322  2aa7							;    CURROFF has the same as Y.
    323  2aa7							;
    324  2aa7		       20 f6 2a    GetLine    jsr	ReadPrompt
    325  2aaa		       e0 00		      cpx	#0
    326  2aac		       f0 14		      beq	GetLineRetry
    327  2aae		       ae fa 35 	      ldx	taskPtr
    328  2ab1		       bd fb 35 	      lda	taskTable,x
    329  2ab4		       29 40		      and	#TASKWAITIO	;Task Active and waiting for IO
    330  2ab6		       d0 3d		      bne	taskWaitingIO
    331  2ab8		       09 40		      ora	#TASKWAITIO	;Mark Task as waiting for IO
    332  2aba		       9d fb 35 	      sta	taskTable,x	;Mark the state for task as waiting io
    333  2abd		       ce f5 2a 	      dec	taskWaitingIO	;Start polling the input and make task wait
    334  2ac0		       f0 33		      beq	taskWaitingIO	;Get out of here and wait for io to complete
    335  2ac2
    336  2ac2							;
    337  2ac2							; Now read a line and wait for the CR
    338  2ac2							;
    339  2ac2				   GetLineRetry
    340  2ac2		       a9 00		      lda	#0	;Wait for input to complete
    341  2ac4		       20 0e 2b 	      jsr	ReadLine
    342  2ac7
    343  2ac7							;
    344  2ac7							; Point to the line we just read
    345  2ac7							; Set the current pointer to point to the input line
    346  2ac7							;
    347  2ac7		       a0 00	   ReadComplete ldy	#0
    348  2ac9		       84 51		      sty	CUROFF
    349  2acb		       a2 d6		      ldx	#LINBUF&$ff
    350  2acd		       86 4f		      stx	CURPTR
    351  2acf		       a2 41		      ldx	#LINBUF>>8
    352  2ad1		       86 50		      stx	CURPTR+1
    353  2ad3							;
    354  2ad3							; Output a CR/LF
    355  2ad3							;
    356  2ad3		       20 d5 2c 	      jsr	CRLF
    357  2ad6							;
    358  2ad6							; If a blank line, prompt again.
    359  2ad6							;
    360  2ad6		       20 cc 2c 	      jsr	SkipSpaces
    361  2ad9		       b1 4f		      lda	(CURPTR),y
    362  2adb		       d0 10		      bne	GetLineDone	;We have data then exit
    363  2add		       20 f9 2a 	      jsr	ReadPromptRetry
    364  2ae0		       ae fa 35 	      ldx	taskPtr	;if this task is waiting for IO
    365  2ae3		       bd fb 35 	      lda	taskTable,x	;then get out, wait for line to
    366  2ae6		       29 40		      and	#TASKWAITIO	;Complete again
    367  2ae8		       d0 0b		      bne	taskWaitingIO
    368  2aea		       4c c2 2a 	      jmp	GetLineRetry	;If the IO is wait then jump to start
    369  2aed
    370  2aed				   GetLineDone
    371  2aed		       ae fa 35 	      ldx	taskPtr
    372  2af0		       a9 80		      lda	#TASKACTIVE
    373  2af2		       9d fb 35 	      sta	taskTable,x	;IO is complete
    374  2af5
    375  2af5				   taskWaitingIO
    376  2af5		       60		      rts
    377  2af6
    378  2af6							;
    379  2af6							;=======================================================================
    380  2af6							; Display the prompt character
    381  2af6							; On entry
    382  2af6							;	    A contains the prompt character
    383  2af6							; On exit
    384  2af6							;	    The readbuffer index is reset to 0
    385  2af6							;
    386  2af6		       8d 5d 42    ReadPrompt sta	promptChar
    387  2af9
    388  2af9							;
    389  2af9							; Prompt
    390  2af9							;
    391  2af9
    392  2af9		       ad 5d 42    ReadPromptRetry lda	promptChar
    393  2afc		       09 00		      ora	#0	;any prompt?
    394  2afe		       f0 08		      beq	getlinenp
    395  2b00		       20 e3 19 	      jsr	VOUTCH
    396  2b03		       a9 20		      lda	#$20
    397  2b05		       20 e3 19 	      jsr	VOUTCH	;Space after prompt
    398  2b08							;
    399  2b08		       a2 00	   getlinenp  ldx	#0	;offset into LINBUF
    400  2b0a		       8e 5a 42 	      stx	getlinx
    401  2b0d		       60		      rts
    402  2b0e							;
    403  2b0e							;===============================================================
    404  2b0e							; This fuction is the driver for the line input
    405  2b0e							; on call if a = 0 then it waits for all input
    406  2b0e							;	      a = 1 then nowait for input
    407  2b0e							; On exit
    408  2b0e							;		       c clear if not complete line
    409  2b0e							;		       c set if it was a complete line
    410  2b0e
    411  2b0e				   ReadLine
    412  2b0e		       8d 5c 42 	      sta	inputNoWait
    413  2b11		       c9 00		      cmp	#0
    414  2b13		       f0 05		      beq	getline1
    415  2b15		       20 0f f0 	      jsr	ISCHAR	; if there is no character just get out
    416  2b18		       f0 2b		      beq	GetLineNoWait
    417  2b1a		       20 e6 19    getline1   jsr	VGETCH
    418  2b1d					      if	CTMON65
    419  2b1d		       48		      pha
    420  2b1e		       20 e3 19 	      jsr	VOUTCH	;echo echo echo
    421  2b21		       68		      pla
    422  2b22					      endif
    423  2b22		       c9 0d		      cmp	#CR
    424  2b24		       f0 15		      beq	getlind	;end of line
    425  2b26		       c9 08		      cmp	#BS	;backspace?
    426  2b28		       f0 1d		      beq	getlinebs
    427  2b2a		       ae 5a 42 	      ldx	getlinx
    428  2b2d		       9d d6 41 	      sta	LINBUF,x
    429  2b30		       e8		      inx
    430  2b31		       8e 5a 42 	      stx	getlinx
    431  2b34		       ad 5c 42 	      lda	inputNoWait
    432  2b37		       f0 e1		      beq	getline1
    433  2b39		       d0 0a		      bne	GetLineNoWait
    434  2b3b							;
    435  2b3b							; CR was hit
    436  2b3b							;
    437  2b3b		       a9 00	   getlind    lda	#0	; set the end pf buffer
    438  2b3d		       ae 5a 42 	      ldx	getlinx
    439  2b40		       9d d6 41 	      sta	LINBUF,x
    440  2b43
    441  2b43		       38		      sec		; Carry set then cr received
    442  2b44		       60		      rts
    443  2b45
    444  2b45				   GetLineNoWait
    445  2b45		       18		      clc		; Carry clear no end of line
    446  2b46		       60		      rts
    447  2b47							;
    448  2b47							; Backspace was hit
    449  2b47							;
    450  2b47		       ae 5a 42    getlinebs  ldx	getlinx
    451  2b4a		       f0 0e		      beq	getlineEOL	;at start of line
    452  2b4c		       ca		      dex
    453  2b4d		       8e 5a 42 	      stx	getlinx
    454  2b50		       20 13 21    getlinepbs jsr	puts
      0  2b53					      db	27,"[K",0
      1  2b53		       1b 5b 4b 00	      .byte.b	27,"[K",0
    456  2b57		       4c 1a 2b 	      jmp	getline1
    457  2b5a		       a9 20	   getlineEOL lda	#SPACE
    458  2b5c		       20 e3 19 	      jsr	VOUTCH
    459  2b5f		       d0 ef		      bne	getlinepbs
    460  2b61							;
    461  2b61							;=====================================================
    462  2b61							; Count the length of the line currently in LINBUF
    463  2b61							; starting at offset Y.  Returns the length in X.  The
    464  2b61							; starting offset in Y should point past the ASCII
    465  2b61							; line number.  Also counts the trailing NULL and two
    466  2b61							; extra bytes for where the line number will be.
    467  2b61							; Update must now include leading length byte not the null at end ****************
    468  2b61							;
    469  2b61				   getLineLength
    470  2b61		       a2 00		      ldx	#0	;size
    471  2b63		       b9 d6 41    getLineL2  lda	LINBUF,y
    472  2b66		       f0 04		      beq	getLineL3
    473  2b68		       c8		      iny
    474  2b69		       e8		      inx
    475  2b6a		       d0 f7		      bne	getLineL2
    476  2b6c		       e8	   getLineL3  inx		;count null at end
    477  2b6d		       e8		      inx		;line number LSB
    478  2b6e		       e8		      inx		;MSB
    479  2b6f		       e8		      inx		;change: count new leading line length
    480  2b70		       8e 6c 42 	      stx	lineLength
    481  2b73		       60		      rts
    482  2b74							;
    483  2b74							;=====================================================
    484  2b74							; Count the length of the line pointed to by CURPTR.
    485  2b74							; This also counts the line number and the terminating
    486  2b74							; null.  Ie, this string returns 8:
    487  2b74							;
    488  2b74							; <lineLow><lineHi>Hello<null>
    489  2b74							;
    490  2b74							; Another way of looking at it: add the return value
    491  2b74							; to the CURPTR and it'll point to the next line's
    492  2b74							; line number.  Returns the value in Y.
    493  2b74							; Update to ject get the leading byte length ********************
    494  2b74							;
    495  2b74							;getCURPTRLength
    496  2b74							;		ldy	CURPTR
    497  2b74							;		ldy	#3	;change: skip line number and leading length byte
    498  2b74							;getCLineL2	lda	(CURPTR),y
    499  2b74							;		beq	getCLineL3
    500  2b74							;		iny
    501  2b74							;		bne	getCLineL2
    502  2b74							;getCLineL3	iny		;count null at end
    503  2b74							;		rts
    504  2b74
    505  2b74							;
    506  2b74							;=====================================================
    507  2b74							; This saves ILPC.  This saves to a single save area,
    508  2b74							; so it can't be called more than once.
    509  2b74							;
    510  2b74		       a5 43	   saveIL     lda	ILPC
    511  2b76		       8d 68 42 	      sta	tempIL
    512  2b79		       a5 44		      lda	ILPC+1
    513  2b7b		       8d 69 42 	      sta	tempIL+1
    514  2b7e		       60		      rts
    515  2b7f							;
    516  2b7f							;=====================================================
    517  2b7f							; This restores ILPC.
    518  2b7f							;
    519  2b7f		       ad 68 42    restoreIL  lda	tempIL
    520  2b82		       85 43		      sta	ILPC
    521  2b84		       ad 69 42 	      lda	tempIL+1
    522  2b87		       85 44		      sta	ILPC+1
    523  2b89		       60		      rts
    524  2b8a							;
    525  2b8a							;=====================================================
    526  2b8a							; This pushes R0 onto the stack.
    527  2b8a							;
    528  2b8a		       8c 63 42    pushR0     sty	rtemp1
    529  2b8d		       a4 4a		      ldy	MATHSTACKPTR
    530  2b8f		       c0 28		      cpy	#MATHSTACKSIZE<<1
    531  2b91		       b0 38		      bcs	pusherr
    532  2b93		       a5 52		      lda	R0
    533  2b95		       91 48		      sta	(MATHSTACK),y
    534  2b97		       c8		      iny
    535  2b98		       a5 53		      lda	R0+1
    536  2b9a		       91 48		      sta	(MATHSTACK),y
    537  2b9c		       c8		      iny
    538  2b9d		       84 4a		      sty	MATHSTACKPTR
    539  2b9f		       ac 63 42 	      ldy	rtemp1
    540  2ba2		       18		      clc
    541  2ba3		       60		      rts
    542  2ba4
    543  2ba4							;=====================================================
    544  2ba4							; This pushes curptr basic current line onto the call stack.
    545  2ba4							; and CUROFF. Also marks entry type as 1 = GOSUB
    546  2ba4
    547  2ba4				   pushLN
    548  2ba4		       8d 64 42 	      STA	rtemp1+1	; Store type of push being done
    549  2ba7		       8c 63 42 	      sty	rtemp1
    550  2baa		       a5 4e		      lda	MESSAGEPTR	; stack and msg Q grow together see if they cross!
    551  2bac		       c5 4d		      cmp	GOSUBSTACKPTR
    552  2bae		       90 1b		      bcc	pusherr	; No error
    553  2bb0		       a4 4d		      ldy	GOSUBSTACKPTR	; Get the Go Stack Pointer
    554  2bb2		       a2 00		      ldx	#0	; Start of bytes to copy
    555  2bb4				   pushLoop
    556  2bb4		       b5 4f		      lda	CURPTR,x	; Get the current pointer Start address
    557  2bb6		       91 4b		      sta	(GOSUBSTACK),y	; put it onto the stack
    558  2bb8		       c8		      iny		; Next destination
    559  2bb9		       e8		      inx		; Next Source byte
    560  2bba		       e0 03		      cpx	#3	; 4 bytes per entry on the stack
    561  2bbc		       d0 f6		      bne	pushLoop	; Jump if not done for next byte
    562  2bbe
    563  2bbe		       ad 64 42    pushDone   lda	rtemp1+1	; Type of stack entry
    564  2bc1		       91 4b		      sta	(GOSUBSTACK),y	; Store Type of stack entry
    565  2bc3		       c8		      iny		; Next entry
    566  2bc4
    567  2bc4		       84 4d		      sty	GOSUBSTACKPTR	; Save the new stack pointer
    568  2bc6		       ac 63 42 	      ldy	rtemp1
    569  2bc9		       18		      clc
    570  2bca		       60		      rts
    571  2bcb				   pusherr
    572  2bcb		       38		      sec
    573  2bcc		       60		      rts
    574  2bcd							;=====================================================
    575  2bcd							; This pops Top Off gosub call Stack and
    576  2bcd							; places it in CURPTR/CUROFF.
    577  2bcd							; This checks if the type = 1 GOSUB
    578  2bcd							; if not it removes what ever is on the stack
    579  2bcd							; until it finds the next return. Allowing
    580  2bcd							; a return from within a for/next
    581  2bcd							; on exit a contains the type of return from, gosub_rtn, gosub_rtn_value....
    582  2bcd		       8c 63 42    popLN      sty	rtemp1
    583  2bd0		       a4 4d		      ldy	GOSUBSTACKPTR	; Get the Gosub/for stack pointer
    584  2bd2		       a2 03		      ldx	#3	; each stack entry is 3 bytes
    585  2bd4
    586  2bd4				   popContinue
    587  2bd4		       c0 04		      cpy	#4	; if less than 4 on stack then error
    588  2bd6		       90 22		      bcc	poperr	; Process an error
    589  2bd8
    590  2bd8		       88		      dey		; Position to read entry type
    591  2bd9		       b1 4b		      lda	(GOSUBSTACK),y	; get the stack entry type
    592  2bdb		       8d 64 42 	      sta	rtemp1+1	; Save to be returned
    593  2bde		       c9 01		      cmp	#GOSUB_RTN	; Type is a gosub entry
    594  2be0		       f0 04		      beq	popLoop	; Restore the line
    595  2be2		       c9 81		      cmp	#GOSUB_RTN_VALUE	; Also restore the line
    596  2be4		       d0 16		      bne	popSkipEntry	; No then just skip this
    597  2be6
    598  2be6				   popLoop
    599  2be6		       88		      dey
    600  2be7		       ca		      dex
    601  2be8		       b1 4b		      lda	(GOSUBSTACK),y
    602  2bea		       95 4f		      sta	CURPTR,x
    603  2bec		       e0 00		      cpx	#0
    604  2bee		       d0 f6		      bne	popLoop	; Loop until all moved
    605  2bf0
    606  2bf0
    607  2bf0		       84 4d	   PopDone    sty	GOSUBSTACKPTR
    608  2bf2		       ac 63 42 	      ldy	rtemp1
    609  2bf5		       ad 64 42 	      lda	rtemp1+1	; get the type of return
    610  2bf8		       18		      clc
    611  2bf9		       60		      rts
    612  2bfa
    613  2bfa		       38	   poperr     sec
    614  2bfb		       60		      rts
    615  2bfc
    616  2bfc		       88	   popSkipEntry dey
    617  2bfd		       88		      dey
    618  2bfe		       88		      dey
    619  2bff		       4c d4 2b 	      jmp	popContinue
    620  2c02
    621  2c02							;
    622  2c02							;=====================================================
    623  2c02							; This pushes R1 onto the stack
    624  2c02							;
    625  2c02		       8c 63 42    pushR1     sty	rtemp1
    626  2c05		       a4 4a		      ldy	MATHSTACKPTR
    627  2c07		       c0 28		      cpy	#MATHSTACKSIZE<<1
    628  2c09		       b0 ef		      bcs	poperr
    629  2c0b		       a5 54		      lda	R1
    630  2c0d		       91 48		      sta	(MATHSTACK),y
    631  2c0f		       c8		      iny
    632  2c10		       a5 55		      lda	R1+1
    633  2c12		       91 48		      sta	(MATHSTACK),y
    634  2c14		       c8		      iny
    635  2c15		       84 4a		      sty	MATHSTACKPTR
    636  2c17		       ac 63 42 	      ldy	rtemp1
    637  2c1a		       18		      clc
    638  2c1b		       60		      rts
    639  2c1c							;
    640  2c1c							;=====================================================
    641  2c1c							; This pops Top Of Stack and places it in R0.
    642  2c1c							;
    643  2c1c		       8c 63 42    popR0      sty	rtemp1
    644  2c1f		       a4 4a		      ldy	MATHSTACKPTR
    645  2c21		       f0 d7		      beq	poperr
    646  2c23		       88		      dey
    647  2c24		       b1 48		      lda	(MATHSTACK),y
    648  2c26		       85 53		      sta	R0+1
    649  2c28		       88		      dey
    650  2c29		       b1 48		      lda	(MATHSTACK),y
    651  2c2b		       85 52		      sta	R0
    652  2c2d		       84 4a		      sty	MATHSTACKPTR
    653  2c2f		       ac 63 42 	      ldy	rtemp1
    654  2c32		       18		      clc
    655  2c33		       60		      rts
    656  2c34
    657  2c34							;
    658  2c34							;=====================================================
    659  2c34							; This pops TOS and places it in R1.
    660  2c34							;
    661  2c34		       8c 63 42    popR1      sty	rtemp1
    662  2c37		       a4 4a		      ldy	MATHSTACKPTR
    663  2c39		       f0 bf		      beq	poperr
    664  2c3b		       88		      dey
    665  2c3c		       b1 48		      lda	(MATHSTACK),y
    666  2c3e		       85 55		      sta	R1+1
    667  2c40		       88		      dey
    668  2c41		       b1 48		      lda	(MATHSTACK),y
    669  2c43		       85 54		      sta	R1
    670  2c45		       84 4a		      sty	MATHSTACKPTR
    671  2c47		       ac 63 42 	      ldy	rtemp1
    672  2c4a		       60		      rts
    673  2c4b							;
    674  2c4b							;=====================================================
    675  2c4b							; This pops TOS and places it in MQ.
    676  2c4b							;
    677  2c4b		       8c 63 42    popMQ      sty	rtemp1
    678  2c4e		       a4 4a		      ldy	MATHSTACKPTR
    679  2c50		       f0 a8		      beq	poperr
    680  2c52		       88		      dey
    681  2c53		       b1 48		      lda	(MATHSTACK),y
    682  2c55		       85 57		      sta	MQ+1
    683  2c57		       88		      dey
    684  2c58		       b1 48		      lda	(MATHSTACK),y
    685  2c5a		       85 56		      sta	MQ
    686  2c5c		       84 4a		      sty	MATHSTACKPTR
    687  2c5e		       ac 63 42 	      ldy	rtemp1
    688  2c61		       60		      rts
    689  2c62							;
    690  2c62							;=====================================================
    691  2c62							; This assists with multiplication and division by
    692  2c62							; looking at R0 and R1 and saving a flag as to what
    693  2c62							; sign the result will be.  Math is always done on
    694  2c62							; positive numbers, so this converts negative numbers
    695  2c62							; into positives.  On exit, R0 and R1 are both
    696  2c62							; positive.  If the signs were different then 'signs'
    697  2c62							; will be non-zero.
    698  2c62							;
    699  2c62		       a9 00	   SaveSigns  lda	#0
    700  2c64		       8d 62 42 	      sta	sign	;assume positive
    701  2c67		       a5 53		      lda	R0+1	;MSB
    702  2c69		       10 13		      bpl	SaveSigns1
    703  2c6b		       ee 62 42 	      inc	sign	;it's negative
    704  2c6e		       49 ff		      eor	#$ff	;flip bits
    705  2c70		       85 53		      sta	R0+1
    706  2c72		       a5 52		      lda	R0
    707  2c74		       49 ff		      eor	#$ff
    708  2c76		       85 52		      sta	R0
    709  2c78		       e6 52		      inc	R0
    710  2c7a		       d0 02		      bne	SaveSigns1
    711  2c7c		       e6 53		      inc	R0+1
    712  2c7e		       a5 55	   SaveSigns1 lda	R1+1
    713  2c80		       10 1a		      bpl	SaveSigns2
    714  2c82		       48		      pha
    715  2c83		       ad 62 42 	      lda	sign
    716  2c86		       49 01		      eor	#1
    717  2c88		       8d 62 42 	      sta	sign
    718  2c8b		       68		      pla
    719  2c8c		       49 ff		      eor	#$ff	;flip bits
    720  2c8e		       85 55		      sta	R1+1
    721  2c90		       a5 54		      lda	R1
    722  2c92		       49 ff		      eor	#$ff
    723  2c94		       85 54		      sta	R1
    724  2c96		       e6 54		      inc	R1
    725  2c98		       d0 02		      bne	SaveSigns2
    726  2c9a		       e6 55		      inc	R1+1
    727  2c9c		       60	   SaveSigns2 rts
    728  2c9d							;
    729  2c9d							;=====================================================
    730  2c9d							; This looks at the value of 'signs' and will convert
    731  2c9d							; both R0 and R1 to negative if set.
    732  2c9d							;
    733  2c9d				   RestoreSigns
    734  2c9d		       ad 62 42 	      lda	sign
    735  2ca0		       f0 28		      beq	restoresigns2
    736  2ca2							;
    737  2ca2		       a5 52		      lda	R0
    738  2ca4		       d0 02		      bne	restoresigns3
    739  2ca6		       c6 53		      dec	R0+1
    740  2ca8				   restoresigns3
    741  2ca8		       c6 52		      dec	R0
    742  2caa		       a5 52		      lda	R0
    743  2cac		       49 ff		      eor	#$ff
    744  2cae		       85 52		      sta	R0
    745  2cb0		       a5 53		      lda	R0+1
    746  2cb2		       49 ff		      eor	#$ff
    747  2cb4		       85 53		      sta	R0+1
    748  2cb6							;
    749  2cb6		       a5 54		      lda	R1
    750  2cb8		       d0 02		      bne	restoresigns4
    751  2cba		       c6 55		      dec	R1+1
    752  2cbc				   restoresigns4
    753  2cbc		       c6 54		      dec	R1
    754  2cbe		       a5 54		      lda	R1
    755  2cc0		       49 ff		      eor	#$ff
    756  2cc2		       85 54		      sta	R1
    757  2cc4		       a5 55		      lda	R1+1
    758  2cc6		       49 ff		      eor	#$ff
    759  2cc8		       85 55		      sta	R1+1
    760  2cca							;
    761  2cca				   restoresigns2
    762  2cca		       60		      rts
    763  2ccb							;
    764  2ccb							;=====================================================
    765  2ccb							; Skip over spaces.  Returns Y with the offset to
    766  2ccb							; either the last character in the line, or the first
    767  2ccb							; non-space character.
    768  2ccb							;
    769  2ccb
    770  2ccb		       c8	   skipsp2    iny
    771  2ccc		       b1 4f	   SkipSpaces lda	(CURPTR),y
    772  2cce		       f0 04		      beq	Skip3	;end of line
    773  2cd0		       c9 20		      cmp	#SPACE
    774  2cd2		       f0 f7		      beq	skipsp2
    775  2cd4		       60	   Skip3      rts
    776  2cd5							;*********************************************************
    777  2cd5							; Output a CR/LF combination to the console.  Preserves
    778  2cd5							; all registers.
    779  2cd5							;
    780  2cd5		       48	   tbcrlf     pha
    781  2cd6		       a9 0d		      lda	#CR
    782  2cd8		       20 e3 19 	      jsr	VOUTCH
    783  2cdb		       a9 0a		      lda	#LF
    784  2cdd		       20 e3 19 	      jsr	VOUTCH
    785  2ce0		       68		      pla
    786  2ce1		       60		      rts
    787  2ce2							;
    788  2ce2							;=====================================================
    789  2ce2							; Some logic to print the Line of basic code being executed
    790  2ce2		       24 40	   idbgBasic  bit	ILTrace
    791  2ce4		       50 75		      bvc	dbgBasicNone
    792  2ce6		       98		      tya
    793  2ce7		       48		      pha
    794  2ce8		       20 6a 2e 	      jsr	SetOutDebug
    795  2ceb
    796  2ceb		       a5 4f		      lda	CURPTR
    797  2ced		       85 59		      sta	dpl
    798  2cef		       a5 50		      lda	CURPTR+1
    799  2cf1		       85 5a		      sta	dpl+1
    800  2cf3
    801  2cf3		       20 ab 21 	      jsr	PrintProgramLine
    802  2cf6
    803  2cf6		       a5 40		      lda	ILTrace
    804  2cf8		       29 01		      and	#$01	; Check if the Basic debug should be interactive
    805  2cfa		       f0 5a		      beq	dbgBasicDone
    806  2cfc		       20 81 2e 	      jsr	SetInDebug
    807  2cff		       20 13 21 	      jsr	puts
      0  2d02					      db	"Press s - Stop",CR,LF,"d - display Vars",CR,LF,"anything else to step",CR,LF," > ",0
      1  2d02		       50 72 65 73*	      .byte.b	"Press s - Stop",CR,LF,"d - display Vars",CR,LF,"anything else to step",CR,LF," > ",0
    809  2d3f				   dbgBasicLoop
    810  2d3f		       20 e6 19 	      jsr	VGETCH
    811  2d42		       20 d5 2c 	      jsr	CRLF
    812  2d45		       20 a5 2e 	      jsr	SetInDebugEnd
    813  2d48
    814  2d48		       c9 73		      cmp	#'s	; Quit program
    815  2d4a		       f0 12		      beq	dbgBasicStop
    816  2d4c
    817  2d4c		       c9 64		      cmp	#'d	; Display Variables
    818  2d4e		       d0 06		      bne	dbgBasicDone
    819  2d50
    820  2d50		       20 6e 21 	      jsr	PrintAllVars
    821  2d53		       18		      clc
    822  2d54		       90 e9		      bcc	dbgBasicLoop	; Next char
    823  2d56
    824  2d56		       20 98 2e    dbgBasicDone jsr	SetOutDebugEnd
    825  2d59		       68		      pla
    826  2d5a		       a8		      tay
    827  2d5b		       4c b1 02    dbgBasicNone jmp	NextIL
    828  2d5e
    829  2d5e				   dbgBasicStop
    830  2d5e		       20 98 2e 	      jsr	SetOutDebugEnd
    831  2d61		       68		      pla
    832  2d62		       a8		      tay
    833  2d63		       4c 02 06 	      jmp	iFIN
    834  2d66							;
    835  2d66							;=====================================================
    836  2d66							; This is some debug logic which displays the current
    837  2d66							; value of the ILPC and the line buffer.
    838  2d66							;
    839  2d66		       24 40	   dbgLine    bit	ILTrace
    840  2d68		       30 01		      bmi	dbgPrt
    841  2d6a		       60		      rts
    842  2d6b				   dbgPrt
    843  2d6b		       20 6a 2e 	      jsr	SetOutDebug
    844  2d6e		       20 13 21 	      jsr	puts
      0  2d71					      db	"ILPC:",0
      1  2d71		       49 4c 50 43*	      .byte.b	"ILPC:",0
    846  2d77		       a5 44		      lda	ILPC+1
    847  2d79		       20 f6 20 	      jsr	OUTHEX
    848  2d7c		       a5 43		      lda	ILPC
    849  2d7e		       20 f6 20 	      jsr	OUTHEX
    850  2d81		       a9 20		      lda	#SPACE
    851  2d83		       20 e3 19 	      jsr	VOUTCH
    852  2d86
    853  2d86		       a0 00		      ldy	#0
    854  2d88		       b1 43		      lda	(ILPC),y	;Get the il pcode value
    855  2d8a					      if	IL_DEBUG_TEXT
    856  2d8a		       20 f4 18 	      jsr	PrintILText
    857  2d8d				  -	      else
    858  2d8d				  -	      jsr	OUTHEX
    859  2d8d					      endif
    860  2d8d		       20 13 21 	      jsr	puts
      0  2d90					      db	" ILSP:",0
      1  2d90		       20 49 4c 53*	      .byte.b	" ILSP:",0
    862  2d97		       a5 47		      lda	ILSTACKPTR
    863  2d99		       20 f6 20 	      jsr	OUTHEX
    864  2d9c		       a9 20		      lda	#SPACE
    865  2d9e		       20 e3 19 	      jsr	VOUTCH
    866  2da1
    867  2da1							; Display the CURPTR value and offset
    868  2da1							;
    869  2da1		       20 13 21 	      jsr	puts
      0  2da4					      db	", CURPTR: ",0
      1  2da4		       2c 20 43 55*	      .byte.b	", CURPTR: ",0
    871  2daf		       a5 50		      lda	CURPTR+1
    872  2db1		       20 f6 20 	      jsr	OUTHEX
    873  2db4		       a5 4f		      lda	CURPTR
    874  2db6		       20 f6 20 	      jsr	OUTHEX
    875  2db9		       a9 2b		      lda	#'+
    876  2dbb		       20 e3 19 	      jsr	VOUTCH
    877  2dbe		       a5 51		      lda	CUROFF
    878  2dc0		       20 f6 20 	      jsr	OUTHEX
    879  2dc3							;
    880  2dc3		       20 d5 2c 	      jsr	CRLF
    881  2dc6		       20 98 2e 	      jsr	SetOutDebugEnd
    882  2dc9		       20 fc 2d 	      jsr	ILChkRange
    883  2dcc		       b0 02		      bcs	dbgLineErr
    884  2dce		       18		      clc
    885  2dcf		       60		      rts
    886  2dd0
    887  2dd0				   dbgLineErr
    888  2dd0		       20 6a 2e 	      jsr	SetOutDebug
    889  2dd3		       20 13 21 	      jsr	puts
      0  2dd6					      db	"Outside Valid IL Address Range",CR,LF,0
      1  2dd6		       4f 75 74 73*	      .byte.b	"Outside Valid IL Address Range",CR,LF,0
    891  2df7		       20 98 2e 	      jsr	SetOutDebugEnd
    892  2dfa		       38		      sec
    893  2dfb		       60		      rts
    894  2dfc
    895  2dfc		       a5 44	   ILChkRange lda	ILPC+1
    896  2dfe		       c9 31		      cmp	#IL>>8
    897  2e00		       90 18		      bcc	ILBadRange
    898  2e02		       d0 06		      bne	ILChkHigh
    899  2e04
    900  2e04		       a5 43		      lda	ILPC
    901  2e06		       c9 4e		      cmp	#IL&$ff
    902  2e08		       90 10		      bcc	ILBadRange
    903  2e0a
    904  2e0a		       a5 44	   ILChkHigh  lda	ILPC+1
    905  2e0c		       c9 35		      cmp	#ILEND>>8
    906  2e0e		       90 08		      bcc	ILGoodRange
    907  2e10		       d0 08		      bne	ILBadRange
    908  2e12
    909  2e12		       a5 43		      lda	ILPC
    910  2e14		       c9 a7		      cmp	#ILEND&$ff
    911  2e16		       b0 02		      bcs	ILBadRange
    912  2e18
    913  2e18		       18	   ILGoodRange clc
    914  2e19		       60		      rts
    915  2e1a				   ILBadRange
    916  2e1a		       38		      sec
    917  2e1b		       60		      rts
    918  2e1c
    919  2e1c
    920  2e1c							;=====================================================
    921  2e1c							; Set output vector to the console output function
    922  2e1c							;
    923  2e1c				   SetOutConsole
    924  2e1c		       48		      pha
    925  2e1d		       a9 0c		      lda	#OUTCH&$ff
    926  2e1f		       8d ac 35 	      sta	BOutVec
    927  2e22		       a9 f0		      lda	#OUTCH>>8
    928  2e24		       8d ad 35 	      sta	BOutVec+1
    929  2e27		       68		      pla
    930  2e28		       60		      rts
    931  2e29
    932  2e29				   SetInConsole
    933  2e29		       48		      pha
    934  2e2a		       a9 09		      lda	#GETCH&$ff
    935  2e2c		       8d aa 35 	      sta	BInVec
    936  2e2f		       a9 f0		      lda	#GETCH>>8
    937  2e31		       8d ab 35 	      sta	BInVec+1
    938  2e34		       68		      pla
    939  2e35		       60		      rts
    940  2e36
    941  2e36
    942  2e36
    943  2e36							;====================================================
    944  2e36							;Clear the terminal assume it is ansii or vt100
    945  2e36							;
    946  2e36				   iCLEARSCREEN
    947  2e36		       20 13 21 	      jsr	puts
      0  2e39					      db	$1b,'[,'2,'J,$1b,'[,'1,';,'1,'H,0
      1  2e39		       1b 5b 32 4a*	      .byte.b	$1b,'[,'2,'J,$1b,'[,'1,';,'1,'H,0
    949  2e44		       4c b1 02 	      jmp	NextIL
    950  2e47
    951  2e47							;====================================================
    952  2e47							; Push true and false onto math stack
    953  2e47				   pushTrue
    954  2e47		       a9 ff		      lda	#$ff
    955  2e49		       85 52	   pushTF     sta	R0
    956  2e4b		       85 53		      sta	R0+1
    957  2e4d		       20 8a 2b 	      jsr	pushR0
    958  2e50		       60		      rts
    959  2e51		       a9 00	   pushFalse  lda	#0
    960  2e53		       f0 f4		      beq	pushTF
    961  2e55
    962  2e55							;======================================================
    963  2e55							; Copy stack top to R1
    964  2e55				   CopyStackR1
    965  2e55		       98		      tya
    966  2e56		       48		      pha
    967  2e57		       a4 4a		      ldy	MATHSTACKPTR
    968  2e59		       88		      dey
    969  2e5a		       b1 48		      lda	(MATHSTACK),y
    970  2e5c		       85 55		      sta	R1+1
    971  2e5e		       88		      dey
    972  2e5f		       b1 48		      lda	(MATHSTACK),y
    973  2e61		       85 54		      sta	R1
    974  2e63		       68		      pla
    975  2e64		       a8		      tay
    976  2e65		       60		      rts
    977  2e66
    978  2e66
    979  2e66							;====================================================
    980  2e66							;Swap the out debug call for standard calls
    981  2e66		       00 00	   DebugIOSave ds	2
    982  2e68		       00 00	   DebugInSave ds	2
    983  2e6a				   SetOutDebug
    984  2e6a		       ad ac 35 	      lda	BOutVec
    985  2e6d		       8d 66 2e 	      sta	DebugIOSave
    986  2e70		       ad ad 35 	      lda	BOutVec+1
    987  2e73		       8d 67 2e 	      sta	DebugIOSave+1
    988  2e76		       a9 fe		      lda	#OUTDEBUG&$ff	; Put the Debug output
    989  2e78		       8d ac 35 	      sta	BOutVec
    990  2e7b		       a9 2e		      lda	#OUTDEBUG>>8
    991  2e7d		       8d ad 35 	      sta	BOutVec+1
    992  2e80		       60		      rts
    993  2e81				   SetInDebug
    994  2e81		       ad aa 35 	      lda	BInVec
    995  2e84		       8d 68 2e 	      sta	DebugInSave
    996  2e87		       ad ab 35 	      lda	BInVec+1
    997  2e8a		       8d 69 2e 	      sta	DebugInSave+1
    998  2e8d		       a9 02		      lda	#INDEBUG&$ff
    999  2e8f		       8d aa 35 	      sta	BInVec
   1000  2e92		       a9 2f		      lda	#INDEBUG>>8
   1001  2e94		       8d ab 35 	      sta	BInVec+1
   1002  2e97		       60		      rts
   1003  2e98				   SetOutDebugEnd
   1004  2e98		       ad 66 2e 	      lda	DebugIOSave
   1005  2e9b		       8d ac 35 	      sta	BOutVec
   1006  2e9e		       ad 67 2e 	      lda	DebugIOSave+1
   1007  2ea1		       8d ad 35 	      sta	BOutVec+1
   1008  2ea4		       60		      rts
   1009  2ea5				   SetInDebugEnd
   1010  2ea5		       ad 68 2e 	      lda	DebugInSave
   1011  2ea8		       8d aa 35 	      sta	BInVec
   1012  2eab		       ad 69 2e 	      lda	DebugInSave+1
   1013  2eae		       8d ab 35 	      sta	BInVec+1
   1014  2eb1		       60		      rts
   1015  2eb2							;
   1016  2eb2							;====================================================
   1017  2eb2							; Set the input and output terminal address
   1018  2eb2							; The math stack stack byte is the output io slot
   1019  2eb2							; The math stack  is the input io slot
   1020  2eb2
   1021  2eb2				   iSetTerminal
   1022  2eb2		       20 1c 2c 	      jsr	popR0	; Process the output io addresses
   1023  2eb5		       20 df 2e 	      jsr	CalcSlot
   1024  2eb8		       a5 52		      lda	R0
   1025  2eba		       09 01		      ora	#1
   1026  2ebc		       8d ff 2e 	      sta	TerminalOutputPort
   1027  2ebf		       a5 53		      lda	R0+1
   1028  2ec1		       8d 00 2f 	      sta	TerminalOutputPort+1
   1029  2ec4
   1030  2ec4		       20 1c 2c 	      jsr	popR0	; Process the input io address
   1031  2ec7		       20 df 2e 	      jsr	CalcSlot
   1032  2eca		       a5 52		      lda	R0
   1033  2ecc		       8d 03 2f 	      sta	TerminalStatusPort
   1034  2ecf		       09 01		      ora	#1
   1035  2ed1		       8d 0a 2f 	      sta	TerminalInputPort
   1036  2ed4		       a5 53		      lda	R0+1
   1037  2ed6		       8d 0b 2f 	      sta	TerminalInputPort+1
   1038  2ed9		       8d 04 2f 	      sta	TerminalStatusPort+1
   1039  2edc		       4c b1 02 	      jmp	NextIL
   1040  2edf
   1041  2edf							;===================================================
   1042  2edf							; Calculate the slot address the the slot number
   1043  2edf							; R0 contains the slot number 0-255
   1044  2edf
   1045  2edf				   CalcSlot
   1046  2edf		       8a		      txa
   1047  2ee0		       48		      pha
   1048  2ee1
   1049  2ee1		       a2 04		      ldx	#4
   1050  2ee3				   CalcSlotLoop
   1051  2ee3		       18		      clc
   1052  2ee4		       26 52		      rol	R0
   1053  2ee6		       26 53		      rol	R0+1
   1054  2ee8		       ca		      dex
   1055  2ee9		       d0 f8		      bne	CalcSlotLoop
   1056  2eeb
   1057  2eeb		       a9 e0		      lda	#$E0
   1058  2eed		       05 53		      ora	R0+1
   1059  2eef		       85 53		      sta	R0+1
   1060  2ef1		       68		      pla
   1061  2ef2
   1062  2ef2		       aa		      tax
   1063  2ef3		       60		      rts
   1064  2ef4							;
   1065  2ef4							;====================================================
   1066  2ef4							; Output to the Terminal/Debug console
   1067  2ef4							;     x = high address byte
   1068  2ef4							;     y = low address byte
   1069  2ef4							;     a = Terminator for string
   1070  2ef4				   TerminalWrite
   1071  2ef4				   DebugWrite
   1072  2ef4		       20 6a 2e 	      jsr	SetOutDebug
   1073  2ef7		       20 51 21 	      jsr	PrtStr
   1074  2efa		       20 98 2e 	      jsr	SetOutDebugEnd
   1075  2efd		       60		      rts
   1076  2efe
   1077  2efe				   TerminalIOblock
   1078  2efe				   OUTDEBUG
   1079  2efe		       8d		      .byte.b	$8D	; STA
   1080  2eff				   TerminalOutputPort
   1081  2eff		       21 e0	   DEBUGPORT  .word.w	$E021	; Dont check anything just output the byte
   1082  2f01		       60		      RTS
   1083  2f02
   1084  2f02				   TerminalRead
   1085  2f02				   INDEBUG
   1086  2f02		       ad		      .byte.b	$AD	; LDA
   1087  2f03				   TerminalStatusPort
   1088  2f03		       20 e0	   DEBUGPORTSTATUS .word.w	$E020
   1089  2f05
   1090  2f05		       29 01		      and	#$01
   1091  2f07		       f0 f9		      beq	INDEBUG
   1092  2f09
   1093  2f09		       ad		      .byte.b	$AD	; LDA
   1094  2f0a				   TerminalInputPort
   1095  2f0a		       21 e0	   DEBUGPORTIN .word.w	$E021
   1096  2f0c		       60		      rts
   1097  2f0d				   TerminalIOblockEnd
   1098  2f0d							;======================================================================
   1099  2f0d							;Copy Quoted string to buffer, terminate with 0 byte
   1100  2f0d							; R0  Source tring points to tString type
   1101  2f0d							; x is terminator
   1102  2f0d							; R1 points to destinition location
   1103  2f0d							; On exit R0 contains length of copy Plus Term and leading bytes
   1104  2f0d
   1105  2f0d				   qstrcpy
   1106  2f0d		       20 8a 2b 	      jsr	pushR0
   1107  2f10		       20 5d 2f 	      jsr	IncR0	; point past the tString
   1108  2f13		       20 5d 2f 	      jsr	IncR0	; Point Past the opening "
   1109  2f16		       a2 22		      ldx	#'"	; copy Termination
   1110  2f18		       20 32 2f 	      jsr	pstrcpy
   1111  2f1b		       20 5d 2f 	      jsr	IncR0	; point to "
   1112  2f1e		       20 5d 2f 	      jsr	IncR0	; Point to next free byte
   1113  2f21		       20 34 2c 	      jsr	popR1
   1114  2f24		       38		      sec
   1115  2f25		       a5 52		      lda	R0
   1116  2f27		       e5 54		      sbc	R1
   1117  2f29		       85 52		      sta	R0
   1118  2f2b		       a5 53		      lda	R0+1
   1119  2f2d		       e5 55		      sbc	R1+1
   1120  2f2f		       85 53		      sta	R0+1
   1121  2f31		       60		      rts
   1122  2f32
   1123  2f32							;=========================================================================
   1124  2f32							;Copy string from R0 to R1, terminator in x
   1125  2f32							; On exit    R0 contains the length of the copy
   1126  2f32				   pstrcpy
   1127  2f32		       a0 00		      ldy	#0
   1128  2f34		       86 58		      stx	R2
   1129  2f36
   1130  2f36				   strcpyLoop
   1131  2f36		       b1 52		      lda	(R0),y
   1132  2f38		       c5 58		      cmp	R2
   1133  2f3a		       f0 0a		      beq	strcpyDone
   1134  2f3c		       91 54		      sta	(R1),y
   1135  2f3e		       20 5d 2f 	      jsr	IncR0
   1136  2f41		       20 4b 2f 	      jsr	IncR1
   1137  2f44		       90 f0		      bcc	strcpyLoop
   1138  2f46				   strcpyDone
   1139  2f46		       a9 00		      lda	#0
   1140  2f48		       91 54		      sta	(R1),y
   1141  2f4a
   1142  2f4a		       60		      rts
   1143  2f4b
   1144  2f4b							;=========================================================================
   1145  2f4b							; on exit c is set on overflow
   1146  2f4b				   IncR1
   1147  2f4b		       48		      pha
   1148  2f4c		       18		      clc
   1149  2f4d		       a9 01		      lda	#1
   1150  2f4f		       65 54		      adc	R1
   1151  2f51		       85 54		      sta	R1
   1152  2f53		       90 06		      bcc	IncR1Done
   1153  2f55		       a9 00		      lda	#0
   1154  2f57		       65 55		      adc	R1+1
   1155  2f59		       85 55		      sta	R1+1
   1156  2f5b				   IncR1Done
   1157  2f5b		       68		      pla
   1158  2f5c		       60		      rts
   1159  2f5d							;=========================================================================
   1160  2f5d							; on exit c is set on overflow
   1161  2f5d				   IncR0
   1162  2f5d		       48		      pha
   1163  2f5e		       18		      clc
   1164  2f5f		       a9 01		      lda	#1
   1165  2f61		       65 52		      adc	R0
   1166  2f63		       85 52		      sta	R0
   1167  2f65		       90 06		      bcc	IncR0Done
   1168  2f67		       a9 00		      lda	#0
   1169  2f69		       65 53		      adc	R0+1
   1170  2f6b		       85 53		      sta	R0+1
   1171  2f6d				   IncR0Done
   1172  2f6d		       68		      pla
   1173  2f6e		       60		      rts
   1174  2f6f
   1175  2f6f
   1176  2f6f
   1177  2f6f
   1178  2f6f
   1179  2f6f
   1180  2f6f
   1181  2f6f
   1182  2f6f
   1183  2f6f
   1184  2f6f
   1185  2f6f
   1186  2f6f
   1187  2f6f
   1188  2f6f
   1189  2f6f
------- FILE mytb.asm
   2478  2f6f
   2479  2f6f					      if	DISK_ACCESS
------- FILE storage.asm LEVEL 2 PASS 6
      0  2f6f					      include	"storage.asm"
      1  2f6f							;
      2  2f6f							;=====================================================
      3  2f6f							;=====================================================
      4  2f6f							;=====================================================
      5  2f6f							; This file contains the functions for saving and
      6  2f6f							; restoring programs from some sort of mass storage
      7  2f6f							; device.  This particular version is for using the
      8  2f6f							; Corsham Tech SD Card System.
      9  2f6f							;=====================================================
     10  2f6f							;=====================================================
     11  2f6f							;=====================================================
     12  2f6f
     13 U35b8					      seg.u	TBData
     14 U35b8		       00	   diskBufLength ds	1
     15 U35b9		       00	   diskBufOffset ds	1
     16 U35ba		       00 00 00 00*DiskFileName ds	64
     17 U35fa
     18  2f6f					      SEG	Code
     19  2f6f
     20  2f6f							;
     21  2f6f							;=====================================================
     22  2f6f							; Open a file for reading as a program.  The next
     23  2f6f							; thing on the line should be the filename.
     24  2f6f							;
     25  2f6f				   iOPENREAD
     26  2f6f					      if	XKIM || CTMON65
     27  2f6f		       20 89 2f 	      jsr	setFileName	;Set the file name to open
     28  2f72		       20 36 f0 	      jsr	DiskOpenRead	;attempt to open file
     29  2f75		       90 07		      bcc	Ropenok	;branch if opened ok
     30  2f77							;
     31  2f77							; Open failed
     32  2f77							;
     33  2f77		       a2 07	   Rdfail     ldx	#ERR_READ_FAIL
     34  2f79		       a9 00	   Rdfail2    lda	#0
     35  2f7b		       4c 7d 06 	      jmp	iErr2
     36  2f7e							;
     37  2f7e							; Clear counts and offsets so the next read will
     38  2f7e							; cause the file to be read.
     39  2f7e							;
     40  2f7e		       a9 00	   Ropenok    lda	#0
     41  2f80		       8d b9 35 	      sta	diskBufOffset
     42  2f83		       8d b8 35 	      sta	diskBufLength
     43  2f86		       4c b1 02 	      jmp	NextIL
     44  2f89					      endif
     45  2f89
     46  2f89							;===============================================================
     47  2f89							; Set file name
     48  2f89				   setFileName
     49  2f89		       a4 51		      ldy	CUROFF
     50  2f8b		       b1 4f		      lda	(CURPTR),y
     51  2f8d		       c9 a0		      cmp	#tString	;Must be a quoted string
     52  2f8f		       d0 24		      bne	setFileNameNotFound	;Must be a filename
     53  2f91
     54  2f91		       18		      clc
     55  2f92		       98		      tya
     56  2f93		       65 4f		      adc	CURPTR
     57  2f95		       85 52		      sta	R0	;LSB
     58  2f97		       a5 50		      lda	CURPTR+1
     59  2f99		       69 00		      adc	#0
     60  2f9b		       85 53		      sta	R0+1
     61  2f9d		       a9 ba		      lda	#DiskFileName&$ff
     62  2f9f		       85 54		      sta	R1
     63  2fa1		       a9 35		      lda	#DiskFileName>>8
     64  2fa3		       85 55		      sta	R1+1
     65  2fa5		       20 0d 2f 	      jsr	qstrcpy	; on exit R0 contains the total copy length index accross source not dest
     66  2fa8		       a5 52		      lda	R0
     67  2faa		       18		      clc
     68  2fab		       65 51		      adc	CUROFF	; add the current offset
     69  2fad		       85 51		      sta	CUROFF	; Update the buffer pointer after complete
     70  2faf				   ResetFileName
     71  2faf		       a0 ba		      ldy	#DiskFileName&$ff
     72  2fb1		       a2 35		      ldx	#DiskFileName>>8
     73  2fb3		       18		      clc
     74  2fb4		       60		      rts
     75  2fb5
     76  2fb5				   setFileNameNotFound
     77  2fb5		       68		      pla
     78  2fb6		       68		      pla		; remove the return address from the stack
     79  2fb7		       a9 00		      lda	#0
     80  2fb9		       a2 09		      ldx	#ERR_NO_FILENAME
     81  2fbb		       4c 7d 06 	      jmp	iErr2
     82  2fbe
     83  2fbe							;
     84  2fbe							;==============================JUSTLOSTINTIME 08/02/2022========
     85  2fbe							;Remove a file from the disk
     86  2fbe				   iRMFILE
     87  2fbe					      if	XKIM || CTMON65
     88  2fbe		       20 89 2f 	      jsr	setFileName
     89  2fc1		       20 45 f0 	      jsr	DiskRmFile	;attempt to remove file
     90  2fc4		       90 07		      bcc	wrmOk	;branch if removed ok
     91  2fc6		       a9 00		      lda	#0
     92  2fc8		       a2 0a		      ldx	#ERR_FILE_NOT_FOUND
     93  2fca		       4c 7d 06 	      jmp	iErr2
     94  2fcd				   wrmOk
     95  2fcd		       4c b1 02 	      jmp	NextIL
     96  2fd0
     97  2fd0					      endif
     98  2fd0							;
     99  2fd0							;=====================================================
    100  2fd0				   iOPENWRITE
    101  2fd0					      if	XKIM || CTMON65
    102  2fd0		       20 89 2f 	      jsr	setFileName
    103  2fd3		       20 91 29 	      jsr	getILByte	;get the append or create byte
    104  2fd6		       c9 01		      cmp	#1	;create/truncate
    105  2fd8		       d0 06		      bne	iopencont
    106  2fda		       20 45 f0 	      jsr	DiskRmFile	;by default files opened for write are append
    107  2fdd		       20 af 2f 	      jsr	ResetFileName	;point back to the file name
    108  2fe0				   iopencont
    109  2fe0
    110  2fe0		       20 39 f0 	      jsr	DiskOpenWrite	;attempt to open file
    111  2fe3		       90 07		      bcc	Wopenok	;branch if opened ok
    112  2fe5							;
    113  2fe5							; Open failed
    114  2fe5							;
    115  2fe5		       a9 00	   Wdfail     lda	#0
    116  2fe7		       a2 08		      ldx	#ERR_WRITE_FAIL
    117  2fe9		       4c 7d 06 	      jmp	iErr2
    118  2fec							;
    119  2fec		       4c b1 02    Wopenok    jmp	NextIL
    120  2fef					      endif
    121  2fef							;
    122  2fef							;=====================================================
    123  2fef							; Gets a line of input from the disk file and puts it
    124  2fef							; into LINBUF.
    125  2fef							;
    126  2fef							; On exit:
    127  2fef							;    CURPTR points to LINBUF
    128  2fef							;    LINBUF contains the line with 0 at the end.
    129  2fef							;    Y has offset to first non-space character
    130  2fef							;    CURROFF has the same as Y.
    131  2fef							;
    132  2fef				   iDGETLINE
    133  2fef					      if	XKIM || CTMON65
    134  2fef		       a2 d6		      ldx	#LINBUF&$ff
    135  2ff1		       86 4f		      stx	CURPTR
    136  2ff3		       a2 41		      ldx	#LINBUF>>8
    137  2ff5		       86 50		      stx	CURPTR+1
    138  2ff7							;
    139  2ff7		       a2 00		      ldx	#0	;offset
    140  2ff9		       8e 5a 42    iDgetLoop  stx	getlinx
    141  2ffc		       20 67 30 	      jsr	getNextFileByte
    142  2fff		       b0 16		      bcs	iGetEOF
    143  3001		       c9 0d		      cmp	#CR
    144  3003		       f0 0d		      beq	iGetEOL
    145  3005		       c9 0a		      cmp	#LF
    146  3007		       f0 09		      beq	iGetEOL
    147  3009		       ae 5a 42 	      ldx	getlinx
    148  300c		       9d d6 41 	      sta	LINBUF,x
    149  300f		       e8		      inx
    150  3010		       d0 e7		      bne	iDgetLoop
    151  3012							;
    152  3012							; Handle end of line.	If the line has nothing, loop
    153  3012							; back and get another line.
    154  3012							;
    155  3012		       ae 5a 42    iGetEOL    ldx	getlinx	;blank line?
    156  3015		       f0 e2		      beq	iDgetLoop	;yes, ignore it
    157  3017							;
    158  3017							; This can fall through when there is a line, or
    159  3017							; called directly when EOF is encountered.
    160  3017							;
    161  3017		       ae 5a 42    iGetEOF    ldx	getlinx
    162  301a		       a9 00		      lda	#0
    163  301c		       9d d6 41 	      sta	LINBUF,x
    164  301f		       a0 00		      ldy	#0
    165  3021		       20 cc 2c 	      jsr	SkipSpaces
    166  3024		       20 bd 1c 	      jsr	ParseInputLine
    167  3027		       a9 ba		      lda	#TOKENBUFFER&$ff
    168  3029		       85 4f		      sta	CURPTR
    169  302b		       a9 1b		      lda	#TOKENBUFFER>>8
    170  302d		       85 50		      sta	CURPTR+1
    171  302f		       a9 01		      lda	#1
    172  3031		       85 51		      sta	CUROFF
    173  3033		       4c b1 02 	      jmp	NextIL
    174  3036					      endif
    175  3036
    176  3036							;
    177  3036							; THIS IS CALLED TO DISPLAY THE CONTENTS OF THE
    178  3036							; DISK
    179  3036							;
    180  3036				   iDDIR
    181  3036					      if	XKIM || CTMON65
    182  3036		       20 30 f0 	      jsr	DiskDir
    183  3039							;
    184  3039							; Get/Display each entry
    185  3039							;
    186  3039		       a2 35	   DiskDirLoop ldx	#DiskFileName>>8	;pointer to buffer
    187  303b		       a0 ba		      ldy	#DiskFileName&$ff
    188  303d		       20 33 f0 	      jsr	DiskDirNext	;get next entry
    189  3040		       b0 16		      bcs	DiskDirEnd	;carry = end of list
    190  3042		       20 13 21 	      jsr	puts
      0  3045					      db	"   ",0
      1  3045		       20 20 20 00	      .byte.b	"   ",0
    192  3049							; Print the line to the console
    193  3049		       a2 35		      ldx	#DiskFileName>>8	;pointer to buffer
    194  304b		       a0 ba		      ldy	#DiskFileName&$ff
    195  304d		       a5 00		      lda	0
    196  304f		       20 51 21 	      jsr	PrtStr	;else print name
    197  3052		       20 18 f0 	      jsr	crlf
    198  3055
    199  3055		       4c 39 30 	      jmp	DiskDirLoop	;do next entry
    200  3058
    201  3058		       4c b1 02    DiskDirEnd jmp	NextIL
    202  305b					      endif
    203  305b							;
    204  305b							;=====================================================
    205  305b							; Does a LIST to a Disk file.
    206  305b							;
    207  305b				   iDLIST
    208  305b					      if	XKIM || CTMON65
    209  305b		       20 96 30 	      jsr	SetOutDisk
    210  305e		       4c 34 08 	      jmp	iLST2
    211  3061					      endif
    212  3061							;
    213  3061							;=====================================================
    214  3061							; Closes any pending disk file.  Okay to call if there
    215  3061							; is no open file.
    216  3061							;
    217  3061				   iDCLOSE
    218  3061					      if	XKIM || CTMON65
    219  3061		       20 42 f0 	      jsr	DiskClose
    220  3064		       4c b1 02 	      jmp	NextIL
    221  3067					      endif
    222  3067							;
    223  3067							;=====================================================
    224  3067							; This gets the next byte from an open disk file.  If
    225  3067							; there are no more bytes left, this returns C set.
    226  3067							; Else, C is clear and A contains the character.
    227  3067							;
    228  3067				   getNextFileByte
    229  3067					      if	XKIM || CTMON65
    230  3067		       ae b9 35 	      ldx	diskBufOffset
    231  306a		       ec b8 35 	      cpx	diskBufLength
    232  306d		       d0 14		      bne	hasdata	;branch if still data
    233  306f							;
    234  306f							; There is no data left in the buffer, so read a
    235  306f							; block from the SD system.
    236  306f							;
    237  306f		       a9 84		      lda	#BUFFER_SIZE
    238  3071		       a2 df		      ldx	#buffer>>8
    239  3073		       a0 0a		      ldy	#buffer&$ff
    240  3075		       20 3c f0 	      jsr	DiskRead
    241  3078		       b0 12		      bcs	getNextEof
    242  307a							;
    243  307a							; A contains the number of bytes actually read.
    244  307a							;
    245  307a		       8d b8 35 	      sta	diskBufLength	;save length
    246  307d		       c9 00		      cmp	#0	;shouldn't happen
    247  307f		       f0 0b		      beq	getNextEof
    248  3081							;
    249  3081		       a2 00		      ldx	#0
    250  3083		       bd 0a df    hasdata    lda	buffer,x
    251  3086		       e8		      inx
    252  3087		       8e b9 35 	      stx	diskBufOffset
    253  308a		       18		      clc
    254  308b		       60		      rts
    255  308c							;
    256  308c		       a9 00	   getNextEof lda	#0
    257  308e		       8d b9 35 	      sta	diskBufOffset
    258  3091		       8d b8 35 	      sta	diskBufLength
    259  3094		       38		      sec
    260  3095		       60		      rts
    261  3096							;
    262  3096							;=====================================================
    263  3096							; Set output vector to the disk output function
    264  3096							;
    265  3096		       a9 a1	   SetOutDisk lda	#DOUT&$ff
    266  3098		       8d ac 35 	      sta	BOutVec
    267  309b		       a9 30		      lda	#DOUT/256
    268  309d		       8d ad 35 	      sta	BOutVec+1
    269  30a0		       60		      rts
    270  30a1							;
    271  30a1							;=====================================================
    272  30a1							; input a contains charater to write to open file
    273  30a1							; output:
    274  30a1							;	    C flag clear if no error
    275  30a1							;
    276  30a1		       8e ba 35    DOUT       stx	DiskFileName	; Save the x value, fulename not used
    277  30a4		       8c bb 35 	      sty	DiskFileName+1	; Save the y value  filename not actually used
    278  30a7		       8d 0a df 	      sta	buffer	; Store the byte to send into the buffer
    279  30aa		       a9 01		      lda	#1	; set number of bytes to send to 1
    280  30ac		       a0 0a		      ldy	#buffer&$ff	; Load the low order address of buffer to y
    281  30ae		       a2 df		      ldx	#buffer>>8	; Load the high order address of buffer to x
    282  30b0		       20 3f f0 	      jsr	DiskWrite	; Place the character to disk if a file is open
    283  30b3		       ae ba 35 	      ldx	DiskFileName	; Restore the x value that was saved
    284  30b6		       ac bb 35 	      ldy	DiskFileName+1	; Restore the y value saved
    285  30b9		       60		      rts
    286  30ba							;=======================================================
    287  30ba							; output:
    288  30ba							;	  c flag is clear if no error, a contains bytes read
    289  30ba							;	  c flag set Reached eof, a undefined
    290  30ba							;
    291  30ba		       8e ba 35    DIN	      stx	DiskFileName	; Save the x value, filename not used just storage
    292  30bd		       8c bb 35 	      sty	DiskFileName+1	; Save the y value  filename not actually used
    293  30c0		       a9 01		      lda	#1	; set number of bytes to read to 1
    294  30c2		       a0 0a		      ldy	#buffer&$ff	; Load the low order address of buffer to y
    295  30c4		       a2 df		      ldx	#buffer>>8	; Load the high order address of buffer to x
    296  30c6		       20 3c f0 	      jsr	DiskRead
    297  30c9		       ad 0a df 	      lda	buffer	; Get the byte just read
    298  30cc		       ae ba 35 	      ldx	DiskFileName
    299  30cf		       ac bb 35 	      ldy	DiskFileName+1
    300  30d2		       60		      rts
    301  30d3
    302  30d3							;========================================================
    303  30d3							; Dstat / open/close/stat files
    304  30d3				   DSTAT
    305  30d3		       60		      rts
    306  30d4							;========================================================
    307  30d4					      endif
------- FILE mytb.asm
   2481  30d4					      endif
------- FILE IL.inc LEVEL 2 PASS 6
      0  30d4					      include	"IL.inc"
      1  30d4
      2  30d4							;=====================================================
      3  30d4							; IL.inc
      4  30d4							; These are macros for IL instructions
      5  30d4							;
      6  30d4					      mac	dw
      7  30d4					      .word	{0}
      8  30d4					      endm
      9  30d4					      mac	db
     10  30d4					      .byte	{0}
     11  30d4					      endm
     12  30d4					      macro	xinit
     13  30d4					      db	0
     14  30d4					      endm		;reset the il to start clear all
     15  30d4							;
     16  30d4					      macro	done
     17  30d4					      db	1
     18  30d4					      endm		;print an error if not end of line
     19  30d4							;
     20  30d4					      macro	prs
     21  30d4					      db	2
     22  30d4					      endm		;print a quoted string
     23  30d4							;
     24  30d4					      macro	prn
     25  30d4					      db	3
     26  30d4					      endm		;print a number
     27  30d4							;
     28  30d4					      macro	spc
     29  30d4					      db	4
     30  30d4					      endm		;print space til new tabstop
     31  30d4							;
     32  30d4					      macro	nline
     33  30d4					      db	5
     34  30d4					      endm		;print a new line crlf
     35  30d4							;
     36  30d4							; My NXT is a bit different in that it takes one
     37  30d4							; parameter, which is an address.  If the BASIC
     38  30d4							; program is currently running then move to the
     39  30d4							; next line and continue execution.  However, if
     40  30d4							; in direct mode, jump to the specified IL label.
     41  30d4							;
     42  30d4					      macro	nxt
     43  30d4					      db	6
     44  30d4					      dw	{1}	; addr
     45  30d4					      endm		; addr
     46  30d4							;
     47  30d4					      macro	xfer
     48  30d4					      db	7
     49  30d4					      endm
     50  30d4							;
     51  30d4					      macro	sav
     52  30d4					      db	8
     53  30d4					      db	{1}
     54  30d4					      endm
     55  30d4							;
     56  30d4							;  Passed jump if function called, and true false value returned
     57  30d4					      macro	rstr
     58  30d4					      db	9
     59  30d4					      db	({1}-*)-1	;(addr-*)-1
     60  30d4					      db	{2}
     61  30d4					      endm
     62  30d4							;
     63  30d4					      macro	cmpr
     64  30d4					      db	10
     65  30d4					      endm
     66  30d4							;
     67  30d4					      macro	innum
     68  30d4					      db	11
     69  30d4					      endm
     70  30d4							;
     71  30d4					      macro	fin
     72  30d4					      db	12
     73  30d4					      endm
     74  30d4							;
     75  30d4							; ERR is followed by an error number.	The error
     76  30d4							; code is printed along with the line number.
     77  30d4							; Control is passed to the statement set with
     78  30d4							; the ERRGOTO statement.
     79  30d4							;
     80  30d4					      macro	errmsg
     81  30d4					      db	13
     82  30d4					      dw	{1}	;ecode
     83  30d4					      endm		;ecode
     84  30d4							;
     85  30d4					      macro	add
     86  30d4					      db	14
     87  30d4					      endm
     88  30d4							;
     89  30d4					      macro	sub
     90  30d4					      db	15
     91  30d4					      endm
     92  30d4							;
     93  30d4					      macro	neg
     94  30d4					      db	16
     95  30d4					      endm
     96  30d4							;
     97  30d4					      macro	mul
     98  30d4					      db	17
     99  30d4					      endm
    100  30d4							;
    101  30d4					      macro	div
    102  30d4					      db	18
    103  30d4					      endm
    104  30d4							;
    105  30d4					      macro	store
    106  30d4					      db	19
    107  30d4					      endm
    108  30d4							;
    109  30d4					      macro	ind
    110  30d4					      db	20
    111  30d4					      endm
    112  30d4							;
    113  30d4					      macro	lst
    114  30d4					      db	21
    115  30d4					      endm
    116  30d4							;
    117  30d4					      macro	init
    118  30d4					      db	22
    119  30d4					      endm
    120  30d4							;
    121  30d4					      macro	getline
    122  30d4					      db	23
    123  30d4					      endm
    124  30d4							;
    125  30d4					      macro	insert
    126  30d4					      db	24
    127  30d4					      endm
    128  30d4							;
    129  30d4					      macro	rtn
    130  30d4					      db	25
    131  30d4					      endm
    132  30d4							;
    133  30d4					      macro	exit
    134  30d4					      db	26
    135  30d4					      endm
    136  30d4							;
    137  30d4					      macro	lit
    138  30d4					      db	27
    139  30d4					      dw	{1}	;value
    140  30d4					      endm		; value LIT
    141  30d4							;
    142  30d4					      macro	call
    143  30d4					      db	28
    144  30d4					      dw	{1}	;addr
    145  30d4					      endm		;addr
    146  30d4							;
    147  30d4							; IJMP will set the IL PC to the specified value.
    148  30d4							;
    149  30d4					      macro	ijmp
    150  30d4					      db	29
    151  30d4					      dw	{1}	;addr
    152  30d4					      endm		;addr
    153  30d4							;
    154  30d4					      macro	vinit
    155  30d4					      db	30
    156  30d4					      endm
    157  30d4							;
    158  30d4							; ERRGOTO sets the point in the code where the IL
    159  30d4							; interpreter will go after any error.
    160  30d4							;
    161  30d4					      macro	errgoto
    162  30d4					      db	31
    163  30d4					      dw	{1}	;addr
    164  30d4					      endm		;addr
    165  30d4							;
    166  30d4					      macro	tst
    167  30d4					      db	32
    168  30d4					      db	({1}-*)-1	;(addr-*)-1
    169  30d4					      db	{2},0	;string,0
    170  30d4					      endm		;addr,string
    171  30d4							;
    172  30d4					      macro	tstv
    173  30d4					      db	33
    174  30d4					      db	({1}-*)-1	;(addr-*)-1
    175  30d4					      endm		;addr
    176  30d4							;
    177  30d4					      macro	tstl
    178  30d4					      db	34
    179  30d4					      db	({1}-*)-1	;(addr-*)-1
    180  30d4					      endm		;addr
    181  30d4							;
    182  30d4					      macro	tstn
    183  30d4					      db	35
    184  30d4					      db	({1}-*)-1	;(addr-*)-1
    185  30d4					      endm		;addr
    186  30d4							;
    187  30d4							; FREE returns the amount of free RAM on top of
    188  30d4							; the stack.  This is the amount of room the user
    189  30d4							; program has available.
    190  30d4							;
    191  30d4					      macro	free
    192  30d4					      db	36
    193  30d4					      endm
    194  30d4							;
    195  30d4							; RANDOM takes the top item off the stack and
    196  30d4							; replaces it with a random number that is
    197  30d4							; MOD the initial value.  Ie, if the TOS is
    198  30d4							; 42 then RANDOM returns a value from 0 to 41.
    199  30d4							;
    200  30d4					      macro	random
    201  30d4					      db	37
    202  30d4					      endm
    203  30d4							;
    204  30d4							; ABS will replace the top of stack with the
    205  30d4							; absolute value.
    206  30d4							;
    207  30d4					      macro	abs
    208  30d4					      db	38
    209  30d4					      endm
    210  30d4							;
    211  30d4							; OPENREAD opens a file for reading, as in getting
    212  30d4							; statements from it.
    213  30d4							;
    214  30d4					      macro	openread
    215  30d4					      db	39
    216  30d4					      endm
    217  30d4							;
    218  30d4							; OPENWRITE opens a file for writing, as in saving
    219  30d4							; the current program to it.
    220  30d4							;
    221  30d4					      macro	openwrite
    222  30d4					      db	40
    223  30d4					      db	{1}	; 0= append 1 = create/truncate
    224  30d4					      endm
    225  30d4							;
    226  30d4							; DCLOSE closes any open disk file.
    227  30d4							;
    228  30d4					      macro	dclose
    229  30d4					      db	41
    230  30d4					      endm
    231  30d4							;
    232  30d4							; DGETLINE gets one line from the disk file and puts it
    233  30d4							; into LINBUFF.
    234  30d4							;
    235  30d4					      macro	dgetline
    236  30d4					      db	42
    237  30d4					      endm
    238  30d4							;
    239  30d4							; DLIST saves the program to an open disk file.
    240  30d4							;
    241  30d4					      macro	dlist
    242  30d4					      db	43
    243  30d4					      endm
    244  30d4							; DDIR list the current directory
    245  30d4							;
    246  30d4					      macro	ddir
    247  30d4					      db	44
    248  30d4					      endm
    249  30d4
    250  30d4							; RMFILE remove a fle from disk
    251  30d4					      macro	rmfile
    252  30d4					      db	45
    253  30d4					      endm
    254  30d4
    255  30d4							; CLEARSCREEN clear the screen
    256  30d4					      macro	clearscreen
    257  30d4					      db	46
    258  30d4					      endm
    259  30d4							; POKEMEM Poke value into memory
    260  30d4					      macro	pokemem
    261  30d4					      db	47
    262  30d4					      endm
    263  30d4							; PEEKMEM peek at value in memory
    264  30d4					      macro	peekmem
    265  30d4					      db	48
    266  30d4					      endm
    267  30d4							; TSTLET Test if the statement is a let without the keyword let
    268  30d4					      macro	tstlet
    269  30d4					      db	49
    270  30d4					      db	({1}-*)-1	;(addr-*)-1
    271  30d4					      endm		;addr
    272  30d4							; TSTDONE if we reach the end of a statement
    273  30d4					      macro	tstdone
    274  30d4					      db	50
    275  30d4					      db	({1}-*)-1	;(addr-*)-1
    276  30d4					      endm		;addr
    277  30d4							; GETCHAR	get a character from the input line leave it in RO
    278  30d4					      macro	getchar
    279  30d4					      db	51
    280  30d4					      endm
    281  30d4							; PUTCHAR	Put a character to the terminal
    282  30d4					      macro	putchar
    283  30d4					      db	52
    284  30d4					      endm
    285  30d4							; Call		Call a machine function return a to stack
    286  30d4					      macro	callfunc
    287  30d4					      db	53
    288  30d4					      endm
    289  30d4
    290  30d4							; IBRANCH branch if value on stack = 0 false, nextil if value not = zero
    291  30d4					      macro	ibranch
    292  30d4					      db	54
    293  30d4					      endm
    294  30d4
    295  30d4							; TSTSTR	 Tests for the open quote in a string
    296  30d4					      macro	tststr
    297  30d4					      db	55
    298  30d4					      db	({1}-*)-1	;(addr-*)-1
    299  30d4					      endm
    300  30d4							; SETIRQ	Sets the line number to run when an irq happens irq 550
    301  30d4					      macro	setirq
    302  30d4					      db	56
    303  30d4					      endm
    304  30d4
    305  30d4							; TSTIRQ	Test for irq pending,
    306  30d4							;		if so push the IRQ LINE NUMBER into RO, onto stack
    307  30d4					      macro	tstirq
    308  30d4					      db	57
    309  30d4					      db	({1}-*)-1	;(addr-*)-1
    310  30d4					      endm
    311  30d4
    312  30d4							; IRET    return from interupt service
    313  30d4					      macro	iret
    314  30d4					      db	58
    315  30d4					      endm
    316  30d4
    317  30d4							; INSTR   read a string from the input
    318  30d4					      macro	instr
    319  30d4					      db	59
    320  30d4					      endm
    321  30d4
    322  30d4							; MODULO Returns the remainder of the division
    323  30d4					      macro	modulo
    324  30d4					      db	60
    325  30d4					      endm
    326  30d4							; Set a task line
    327  30d4					      macro	taskcreate
    328  30d4					      db	61
    329  30d4					      endm
    330  30d4							; End a task
    331  30d4					      macro	etask
    332  30d4					      db	62
    333  30d4					      endm
    334  30d4							; Skip to next task
    335  30d4					      macro	ntask
    336  30d4					      db	63
    337  30d4					      endm
    338  30d4							; Subscript
    339  30d4					      macro	subscript
    340  30d4					      db	64
    341  30d4					      db	{1}
    342  30d4					      endm
    343  30d4							; KILL Task
    344  30d4					      macro	taskkill
    345  30d4					      db	65
    346  30d4					      endm
    347  30d4							; STAT Task
    348  30d4					      macro	taskstat
    349  30d4					      db	66
    350  30d4					      endm
    351  30d4							;  output value as hex
    352  30d4					      macro	hexprt
    353  30d4					      db	67
    354  30d4					      endm
    355  30d4							;  Read in background has completed
    356  30d4					      macro	readcomplete
    357  30d4					      db	68
    358  30d4					      endm
    359  30d4							;  ReadInput line
    360  30d4					      macro	readstart
    361  30d4					      db	69
    362  30d4					      endm
    363  30d4							; Startio request
    364  30d4					      macro	startio
    365  30d4					      db	70
    366  30d4					      endm
    367  30d4							; Endio
    368  30d4					      macro	endio
    369  30d4					      db	71
    370  30d4					      endm
    371  30d4							; Logical not
    372  30d4					      macro	lognot
    373  30d4					      db	72
    374  30d4					      endm
    375  30d4							; Logical OR
    376  30d4					      macro	logor
    377  30d4					      db	73
    378  30d4					      endm
    379  30d4							;Logical and
    380  30d4					      macro	logand
    381  30d4					      db	74
    382  30d4					      endm
    383  30d4							;Logical XOR
    384  30d4					      macro	logxor
    385  30d4					      db	75
    386  30d4					      endm
    387  30d4							;Wait for task to complete, or list of tasks
    388  30d4					      macro	wtask
    389  30d4					      db	76
    390  30d4					      db	({1}-*)-1	;(addr-*)-1
    391  30d4					      endm
    392  30d4							;Get the current task id
    393  30d4					      MACRO	taskpid
    394  30d4					      db	77
    395  30d4					      endm
    396  30d4							;Trace the basic execution
    397  30d4					      Macro	traceprogram
    398  30d4					      db	78
    399  30d4					      endm
    400  30d4							;Do a basic program Trace
    401  30d4					      Macro	debugbasic
    402  30d4					      db	79
    403  30d4					      endm
    404  30d4
    405  30d4							; Inter Process communications instructions
    406  30d4					      Macro	ipcsend
    407  30d4					      db	80
    408  30d4					      endm
    409  30d4					      Macro	ipcreceive
    410  30d4					      db	81
    411  30d4					      endm
    412  30d4					      Macro	ipccheck
    413  30d4					      db	82
    414  30d4					      endm
    415  30d4					      Macro	ipcio
    416  30d4					      db	83
    417  30d4					      endm
    418  30d4					      Macro	pushmathstack
    419  30d4					      db	84
    420  30d4					      endm
    421  30d4					      Macro	popmathstack
    422  30d4					      db	85
    423  30d4					      endm
    424  30d4					      Macro	savemathstack
    425  30d4					      db	86
    426  30d4					      endm
    427  30d4					      Macro	restoremathstack
    428  30d4					      db	87
    429  30d4					      endm
    430  30d4					      Macro	incparmcount
    431  30d4					      db	88
    432  30d4					      endm
    433  30d4					      Macro	taskgetmathstack
    434  30d4					      db	89
    435  30d4					      endm
    436  30d4					      Macro	taskenable
    437  30d4					      db	90
    438  30d4					      endm
    439  30d4					      Macro	tasksuspend
    440  30d4					      db	91
    441  30d4					      endm
    442  30d4					      Macro	taskputmathptr
    443  30d4					      db	92
    444  30d4					      endm
    445  30d4							; Test for an extension type of variable that allows access to a tasks variables
    446  30d4							; Using  PID!<Var name>
    447  30d4					      Macro	tstvt
    448  30d4					      db	93
    449  30d4					      db	({1}-*)-1	;(addr-*)-1
    450  30d4					      endm
    451  30d4
    452  30d4							; Provide access to R2 for the IL program
    453  30d4					      Macro	setr2
    454  30d4					      db	94
    455  30d4					      db	{1}	; R2 is only one byte
    456  30d4					      endm
    457  30d4
    458  30d4							;Move stack top to temp
    459  30d4					      Macro	stk2tmp
    460  30d4					      db	95
    461  30d4					      endm
    462  30d4
    463  30d4					      Macro	tmp2stk
    464  30d4					      db	96
    465  30d4					      endm
    466  30d4
    467  30d4					      Macro	tstbyte
    468  30d4					      db	97
    469  30d4					      db	({1}-*)-1	; (addr-*)-1 goto if match
    470  30d4					      dw	{2}	; address to check
    471  30d4					      db	{3}	; Value to compare
    472  30d4					      endm
    473  30d4
    474  30d4					      Macro	incvar
    475  30d4					      db	98
    476  30d4					      endm
    477  30d4					      Macro	decvar
    478  30d4					      db	99
    479  30d4					      endm
    480  30d4
    481  30d4					      Macro	slice
    482  30d4					      db	100
    483  30d4					      endm
    484  30d4
    485  30d4					      Macro	tstb
    486  30d4					      db	101
    487  30d4					      db	({1}-*)-1
    488  30d4					      db	{2}
    489  30d4					      endm
    490  30d4
    491  30d4					      Macro	tstw
    492  30d4					      db	102
    493  30d4					      db	({1}-*)-1
    494  30d4					      dw	{2}
    495  30d4					      endm
    496  30d4
    497  30d4					      Macro	ongoto
    498  30d4					      db	103
    499  30d4					      dw	{1}
    500  30d4					      dw	{2}
    501  30d4					      endm
    502  30d4
    503  30d4					      Macro	tstrelop
    504  30d4					      db	104
    505  30d4					      db	({1}-*)-1
    506  30d4					      endm
    507  30d4
    508  30d4					      Macro	repeatline
    509  30d4					      db	105
    510  30d4					      endm
    511  30d4
    512  30d4							; Check for a precompiled branch, will take branch if precompiled value present
    513  30d4					      Macro	tstbranch
    514  30d4					      db	106
    515  30d4					      db	({1}-*)-1
    516  30d4					      endm
    517  30d4
    518  30d4					      Macro	fastxfer
    519  30d4					      db	107
    520  30d4					      endm
    521  30d4
    522  30d4							; Set all io to to a terminal for input output
    523  30d4							; SETTERMINAL outterm,interm	 ; the numbers corrispond to the ct65 slot number each slot id 16 bytes,
    524  30d4							; so 0 = 0, 1 = io address 16, 2 = io address 32 .... etc
    525  30d4					      Macro	setterminal
    526  30d4					      db	108
    527  30d4					      endm
    528  30d4
    529  30d4							;Fetch a single byte from memory
    530  30d4					      Macro	indb
    531  30d4					      db	109
    532  30d4					      endm
    533  30d4
    534  30d4							; Set a block of memory to a fixed value, byte or word
    535  30d4							; Stack must contain destiniation address, length to set in bytes, value {byte of word} to initialize to
    536  30d4					      Macro	setblock
    537  30d4					      db	110
    538  30d4					      db	{1}	; the data type to initialize	tByte or tInteger
    539  30d4					      endm
    540  30d4
    541  30d4							; Copy a block of memory
    542  30d4							; Stack must contain source address, destination address, length in bytes
    543  30d4					      Macro	copyblock
    544  30d4					      db	111
    545  30d4					      endm
    546  30d4
    547  30d4							; Compare one block of memory to another
    548  30d4							; Stack contains Length, Source1 Source 2
    549  30d4							; Place on stack 0 equal, 1 s1>s2, -1 s1 < s2
    550  30d4					      Macro	cmpmem
    551  30d4					      db	112
    552  30d4					      endm
    553  30d4
    554  30d4							; Shift Left and Right
    555  30d4					      Macro	shift
    556  30d4					      db	113
    557  30d4					      db	{1}	; direction  0 = left 1 = right
    558  30d4					      endm
------- FILE mytb.asm
   2483  30d4							;
   2484  30d4				  -	      if	FIXED
   2485  30d4				  -	      org	$1000
   2486  30d4					      endif
------- FILE basic.il LEVEL 2 PASS 6
      0  30d4					      include	"basic.il"
      1  30d4					      seg	Code
      2  30d4							; on goto table
      3  30d4							; format :   first byte is value Base, subtracted from value found
      4  30d4							;	      second byte is the number of entries in the table max is 128... always a limit somewhere... lol
      5  30d4				   BasicStmts
      0  30d4					      db	kBeginKey,(kKeyCount+1)	; Base address of table, length of table
      1  30d4		       01 23		      .byte.b	kBeginKey,(kKeyCount+1)
      0  30d6					      dw	ekLet
      1  30d6		       61 31		      .word.w	ekLet
      0  30d8					      dw	ekInc
      1  30d8		       93 31		      .word.w	ekInc
      0  30da					      dw	ekDec
      1  30da		       a0 31		      .word.w	ekDec
      0  30dc					      dw	ekIreturn
      1  30dc		       ad 31		      .word.w	ekIreturn
      0  30de					      dw	ekIf
      1  30de		       b2 31		      .word.w	ekIf
      0  30e0					      dw	ekThen
      1  30e0		       b8 31		      .word.w	ekThen
      0  30e2					      dw	ekGoto
      1  30e2		       bc 31		      .word.w	ekGoto
      0  30e4					      dw	ekGosub
      1  30e4		       4e 35		      .word.w	ekGosub
      0  30e6					      dw	ekReturn
      1  30e6		       5c 35		      .word.w	ekReturn
      0  30e8					      dw	ekRem
      1  30e8		       d0 31		      .word.w	ekRem
      0  30ea					      dw	ekPrint	; should be entry for print
      1  30ea		       e6 31		      .word.w	ekPrint
      0  30ec					      dw	ekTaske
      1  30ec		       33 32		      .word.w	ekTaske
      0  30ee					      dw	ekTaskn
      1  30ee		       49 32		      .word.w	ekTaskn
      0  30f0					      dw	ekTaskw
      1  30f0		       50 32		      .word.w	ekTaskw
      0  30f2					      dw	ekPoke
      1  30f2		       6b 32		      .word.w	ekPoke
      0  30f4					      dw	ekPutch
      1  30f4		       cd 32		      .word.w	ekPutch
      0  30f6					      dw	ekCls
      1  30f6		       d8 32		      .word.w	ekCls
      0  30f8					      dw	ekInput
      1  30f8		       df 32		      .word.w	ekInput
      0  30fa					      dw	ekEnd
      1  30fa		       08 33		      .word.w	ekEnd
      0  30fc					      dw	ekIrq
      1  30fc		       0c 33		      .word.w	ekIrq
      0  30fe					      dw	ekKill
      1  30fe		       17 33		      .word.w	ekKill
      0  3100					      dw	ekList
      1  3100		       22 33		      .word.w	ekList
      0  3102					      dw	ekRun
      1  3102		       27 33		      .word.w	ekRun
      0  3104					      dw	ekNew
      1  3104		       30 33		      .word.w	ekNew
      0  3106					      dw	ekSlice
      1  3106		       34 33		      .word.w	ekSlice
      0  3108					      dw	ekTrace
      1  3108		       3f 33		      .word.w	ekTrace
      0  310a					      dw	ekExit
      1  310a		       50 33		      .word.w	ekExit
      0  310c					      dw	ekSave
      1  310c		       51 33		      .word.w	ekSave
      0  310e					      dw	ekLoad
      1  310e		       58 33		      .word.w	ekLoad
      0  3110					      dw	ekErase
      1  3110		       68 33		      .word.w	ekErase
      0  3112					      dw	ekDir
      1  3112		       64 33		      .word.w	ekDir
      0  3114					      dw	ekSetTerm
      1  3114		       d6 31		      .word.w	ekSetTerm
      0  3116					      dw	ekSetMemB
      1  3116		       82 32		      .word.w	ekSetMemB
      0  3118					      dw	ekSetMemW
      1  3118		       8e 32		      .word.w	ekSetMemW
      0  311a					      dw	ekCopyMem
      1  311a		       b0 32		      .word.w	ekCopyMem
     42  311c							;
     43  311c							; Logical operators
      0  311c				   BasicLogical db	kOr,3
      1  311c		       25 03		      .byte.b	kOr,3
      0  311e					      dw	ekOr
      1  311e		       a4 33		      .word.w	ekOr
      0  3120					      dw	ekXor
      1  3120		       a9 33		      .word.w	ekXor
      0  3122					      dw	ekAnd
      1  3122		       9f 33		      .word.w	ekAnd
     48  3124
      0  3124				   BasicShift db	kShr,2
      1  3124		       28 02		      .byte.b	kShr,2
      0  3126					      dw	ekShiftRight
      1  3126		       94 33		      .word.w	ekShiftRight
      0  3128					      dw	ekShiftLeft
      1  3128		       8e 33		      .word.w	ekShiftLeft
     52  312a
     53  312a							;functions returning values
     54  312a
      0  312a				   BasicFuncs db	kBeginFunc,kFuncCount
      1  312a		       2a 11		      .byte.b	kBeginFunc,kFuncCount
      0  312c					      dw	ekTrue
      1  312c		       09 34		      .word.w	ekTrue
      0  312e					      dw	ekFalse
      1  312e		       0d 34		      .word.w	ekFalse
      0  3130					      dw	ekFree
      1  3130		       11 34		      .word.w	ekFree
      0  3132					      dw	ekGetch
      1  3132		       19 34		      .word.w	ekGetch
      0  3134					      dw	ekPeek
      1  3134		       47 34		      .word.w	ekPeek
      0  3136					      dw	ekTask
      1  3136		       52 34		      .word.w	ekTask
      0  3138					      dw	ekIpcc
      1  3138		       9e 34		      .word.w	ekIpcc
      0  313a					      dw	ekIpcs
      1  313a		       79 34		      .word.w	ekIpcs
      0  313c					      dw	ekIpcr
      1  313c		       8a 34		      .word.w	ekIpcr
      0  313e					      dw	ekRnd
      1  313e		       a9 34		      .word.w	ekRnd
      0  3140					      dw	ekStat
      1  3140		       c7 34		      .word.w	ekStat
      0  3142					      dw	ekAbs
      1  3142		       bc 34		      .word.w	ekAbs
      0  3144					      dw	ekCall
      1  3144		       d4 34		      .word.w	ekCall
      0  3146					      dw	ekGofn
      1  3146		       55 35		      .word.w	ekGofn
      0  3148					      dw	ekPid
      1  3148		       d2 34		      .word.w	ekPid
      0  314a					      dw	ekAddr
      1  314a		       21 34		      .word.w	ekAddr
      0  314c					      dw	ekCmpMem
      1  314c		       30 34		      .word.w	ekCmpMem
     73  314e							;====================================================
     74  314e							; file constants
     75  314e		       00 00	   OPEN_APPEND equ	0	; append to file
     76  314e		       00 01	   OPEN_CREATE equ	1	; truncate/create file
     77  314e
     78  314e							;=====================================================
     79  314e							; This is the IL of the BASIC (or whatever) language.
     80  314e							; Because of the way macros are implemented by as65,
     81  314e							; labels can't be on the same line as a macro
     82  314e							; invocation, so that's why labels are on separate
     83  314e							; lines.
     84  314e							;
     85  314e		       31 4e	   IL	      equ	*
     86  314e
     87  314e							;THE IL CONTROL SECTION
     88  314e
     89  314e				   START
      0  314e					      INIT		;INITIALIZE
      0  314e					      db	22
      1  314e		       16		      .byte.b	22
      0  314f					      NLINE		;WRITE CRLF
      0  314f					      db	5
      1  314f		       05		      .byte.b	5
      0  3150					      ERRGOTO	CO	;where to go after an error
      0  3150					      db	31
      1  3150		       1f		      .byte.b	31
      0  3151					      dw	CO
      1  3151		       54 31		      .word.w	CO
      0  3153					      VINIT		;clear all variables
      0  3153					      db	30
      1  3153		       1e		      .byte.b	30
     94  3154							;
     95  3154							; This is where we jump to get a line of commands or
     96  3154							; a program from the user.
     97  3154							;
     98  3154				   CO
      0  3154					      GETLINE		;WRITE PROMPT AND GET LINE
      0  3154					      db	23
      1  3154		       17		      .byte.b	23
      0  3155					      TSTL	XEC	;TEST FOR LINE NUMBER
      0  3155					      db	34
      1  3155		       22		      .byte.b	34
      0  3156					      db	(XEC-*)-1
      1  3156		       04		      .byte.b	(XEC-*)-1
      0  3157					      INSERT		;INSERT IT (MAY BE DELETE)
      0  3157					      db	24
      1  3157		       18		      .byte.b	24
      0  3158					      IJMP	CO
      0  3158					      db	29
      1  3158		       1d		      .byte.b	29
      0  3159					      dw	CO
      1  3159		       54 31		      .word.w	CO
    103  315b				   XEC
      0  315b					      XINIT		;INITIALIZE
      0  315b					      db	0
      1  315b		       00		      .byte.b	0
    105  315c							;============================================================================
    106  315c							;STATEMENT EXECUTOR DO not change the NAME as task manager uses this
    107  315c							;
    108  315c				   STMT
      0  315c					      TSTIRQ	notirq	;if it is an irq posted, this will cause transfer to irq handler
      0  315c					      db	57
      1  315c		       39		      .byte.b	57
      0  315d					      db	(notirq-*)-1
      1  315d		       01		      .byte.b	(notirq-*)-1
      0  315e					      DEBUGBASIC		;Check if we are doing a debug for this session
      0  315e					      db	79
      1  315e		       4f		      .byte.b	79
    111  315f
    112  315f							;==========================================================================================
    113  315f							; Process a let statement implied or explicit.
    114  315f							;
    115  315f				   notirq
      0  315f					      TSTLET	DoVector	; Test if Let keyword or a variable
      0  315f					      db	49
      1  315f		       31		      .byte.b	49
      0  3160					      db	(DoVector-*)-1
      1  3160		       2d		      .byte.b	(DoVector-*)-1
    117  3161				   ekLet
      0  3161					      TSTV	DoVector	; Test for variable
      0  3161					      db	33
      1  3161		       21		      .byte.b	33
      0  3162					      db	(DoVector-*)-1
      1  3162		       2b		      .byte.b	(DoVector-*)-1
      0  3163					      CALL	FactVarPtrNoTst	; get a pointer to the variable
      0  3163					      db	28
      1  3163		       1c		      .byte.b	28
      0  3164					      dw	FactVarPtrNoTst
      1  3164		       1d 35		      .word.w	FactVarPtrNoTst
    120  3166
    121  3166				   LETINDEX_ALL
      0  3166					      TSTB	ERRMissingEquals,oEqual	; (This line originally omitted)
      0  3166					      db	101
      1  3166		       65		      .byte.b	101
      0  3167					      db	(ERRMissingEquals-*)-1
      1  3167		       20		      .byte.b	(ERRMissingEquals-*)-1
      0  3168					      db	oEqual
      1  3168		       f2		      .byte.b	oEqual
    123  3169				   LETBE
      0  3169					      TSTBYTE	LETAssignByte,R2,tByte	; Check for a byte conversion
      0  3169					      db	97
      1  3169		       61		      .byte.b	97
      0  316a					      db	(LETAssignByte-*)-1
      1  316a		       10		      .byte.b	(LETAssignByte-*)-1
      0  316b					      dw	R2
      1  316b		       58 00		      .word.w	R2
      0  316d					      db	tByte
      1  316d		       a2		      .byte.b	tByte
      0  316e					      CALL	EXPR	; PLACE EXPR VALUE ON MathSTK
      0  316e					      db	28
      1  316e		       1c		      .byte.b	28
      0  316f					      dw	EXPR
      1  316f		       70 33		      .word.w	EXPR
      0  3171					      DONE		; REPORT ERROR IF NOT NEXT
      0  3171					      db	1
      1  3171		       01		      .byte.b	1
      0  3172					      SETR2	tInteger	; Store an integer type
      0  3172					      db	94
      1  3172		       5e		      .byte.b	94
      0  3173					      db	tInteger
      1  3173		       a4		      .byte.b	tInteger
      0  3174					      STORE		; STORE RESULT at variable address
      0  3174					      db	19
      1  3174		       13		      .byte.b	19
      0  3175					      NXT	CO	; AND SEQUENCE TO NEXT
      0  3175					      db	6
      1  3175		       06		      .byte.b	6
      0  3176					      dw	CO
      1  3176		       54 31		      .word.w	CO
      0  3178					      IJMP	STMT	; Next statement
      0  3178					      db	29
      1  3178		       1d		      .byte.b	29
      0  3179					      dw	STMT
      1  3179		       5c 31		      .word.w	STMT
    131  317b
    132  317b				   LETAssignByte
      0  317b					      CALL	EXPR	; PLACE EXPR VALUE ON MathSTK
      0  317b					      db	28
      1  317b		       1c		      .byte.b	28
      0  317c					      dw	EXPR
      1  317c		       70 33		      .word.w	EXPR
      0  317e					      DONE		; REPORT ERROR IF NOT NEXT
      0  317e					      db	1
      1  317e		       01		      .byte.b	1
      0  317f					      SETR2	tByte	; Set to store a byte value
      0  317f					      db	94
      1  317f		       5e		      .byte.b	94
      0  3180					      db	tByte
      1  3180		       a2		      .byte.b	tByte
      0  3181					      STORE		; STORE RESULT at variable address
      0  3181					      db	19
      1  3181		       13		      .byte.b	19
      0  3182					      NXT	CO	; AND SEQUENCE TO NEXT
      0  3182					      db	6
      1  3182		       06		      .byte.b	6
      0  3183					      dw	CO
      1  3183		       54 31		      .word.w	CO
      0  3185					      IJMP	STMT	; Next statement
      0  3185					      db	29
      1  3185		       1d		      .byte.b	29
      0  3186					      dw	STMT
      1  3186		       5c 31		      .word.w	STMT
    139  3188
    140  3188				   ERRMissingEquals
      0  3188					      ERRMSG	ERR_MISSINGEQUALSIGN	; Missing asignment
      0  3188					      db	13
      1  3188		       0d		      .byte.b	13
      0  3189					      dw	ERR_MISSINGEQUALSIGN
      1  3189		       18 00		      .word.w	ERR_MISSINGEQUALSIGN
    142  318b
    143  318b				   ERRVEC2
      0  318b					      IJMP	UNKNOWN
      0  318b					      db	29
      1  318b		       1d		      .byte.b	29
      0  318c					      dw	UNKNOWN
      1  318c		       6c 33		      .word.w	UNKNOWN
    145  318e							;=============================================================
    146  318e							;Branch on a valid statement start
    147  318e				   DoVector
      0  318e					      OnGoto	BasicStmts,UNKNOWN	; use the table provided if not in table branch to unknown
      0  318e					      db	103
      1  318e		       67		      .byte.b	103
      0  318f					      dw	BasicStmts
      1  318f		       d4 30		      .word.w	BasicStmts
      0  3191					      dw	UNKNOWN
      1  3191		       6c 33		      .word.w	UNKNOWN
    149  3193							;This will never return here!
    150  3193							;=============================================================
    151  3193							; Inc or dec a variable
    152  3193				   ekInc
      0  3193					      TSTV	ERRVEC2	; Verify we have a variable
      0  3193					      db	33
      1  3193		       21		      .byte.b	33
      0  3194					      db	(ERRVEC2-*)-1
      1  3194		       f6		      .byte.b	(ERRVEC2-*)-1
      0  3195					      CALL	FactVarPtrNoTst	; Get a pointer to the memory location to increment
      0  3195					      db	28
      1  3195		       1c		      .byte.b	28
      0  3196					      dw	FactVarPtrNoTst
      1  3196		       1d 35		      .word.w	FactVarPtrNoTst
    155  3198							;	  TSTB	     eDoInc,oBang		    ; Allow to inc or dec other tasks variables
    156  3198							;	  IND					    ; we just got a pid
    157  3198							;	  TSTVT      ERRVEC2			    ; if it is not another variabe then error, Call test var. task
    158  3198				   eDoInc
      0  3198					      INCVAR		; Do the increment of the variable
      0  3198					      db	98
      1  3198		       62		      .byte.b	98
      0  3199					      DONE		; Test for end of line or end of statement ":"
      0  3199					      db	1
      1  3199		       01		      .byte.b	1
      0  319a					      NXT	CO	; Get the next statement, branch CO if end of program
      0  319a					      db	6
      1  319a		       06		      .byte.b	6
      0  319b					      dw	CO
      1  319b		       54 31		      .word.w	CO
      0  319d					      IJMP	STMT	; Process the next statement
      0  319d					      db	29
      1  319d		       1d		      .byte.b	29
      0  319e					      dw	STMT
      1  319e		       5c 31		      .word.w	STMT
    163  31a0							;S1Dec:
    164  31a0							;	  TSTB	     S1Iret,kDec		    ; Dec variable
    165  31a0				   ekDec
      0  31a0					      TSTV	ERRVEC2	; Must be followed by a variable
      0  31a0					      db	33
      1  31a0		       21		      .byte.b	33
      0  31a1					      db	(ERRVEC2-*)-1
      1  31a1		       e9		      .byte.b	(ERRVEC2-*)-1
      0  31a2					      CALL	FactVarPtrNoTst	; Get a pointer to the variable to update
      0  31a2					      db	28
      1  31a2		       1c		      .byte.b	28
      0  31a3					      dw	FactVarPtrNoTst
      1  31a3		       1d 35		      .word.w	FactVarPtrNoTst
    168  31a5							;	  TSTB	     eDoDec,oBang		    ; Allow to inc or dec other tasks variables
    169  31a5							;	  IND					    ; we just got a pid
    170  31a5							;	  TSTVT      ERRVEC2			    ; if it is not another variabe then error, Call test var. task
    171  31a5				   eDoDec
      0  31a5					      DECVAR		; Decrement the actual variable
      0  31a5					      db	99
      1  31a5		       63		      .byte.b	99
      0  31a6					      DONE		; Test if end of line or : statement
      0  31a6					      db	1
      1  31a6		       01		      .byte.b	1
      0  31a7					      NXT	CO	; If at end of program then got the console
      0  31a7					      db	6
      1  31a7		       06		      .byte.b	6
      0  31a8					      dw	CO
      1  31a8		       54 31		      .word.w	CO
      0  31aa					      IJMP	STMT	; Process the next statement of command line
      0  31aa					      db	29
      1  31aa		       1d		      .byte.b	29
      0  31ab					      dw	STMT
      1  31ab		       5c 31		      .word.w	STMT
    176  31ad							;=============================================================================================================================
    177  31ad							; iret or ireturn, Return from interupt process
    178  31ad							;
    179  31ad							;S1Iret:
    180  31ad							;	  TSTB	     S1S1,kIreturn		 ; test return from interupt
    181  31ad							;S1Sa:
    182  31ad				   ekIreturn
      0  31ad					      DONE		; Must be only thing on the line
      0  31ad					      db	1
      1  31ad		       01		      .byte.b	1
      0  31ae					      IRET		; RESTORE LINE NUMBER OF CALL
      0  31ae					      db	58
      1  31ae		       3a		      .byte.b	58
      0  31af					      IJMP	STMT
      0  31af					      db	29
      1  31af		       1d		      .byte.b	29
      0  31b0					      dw	STMT
      1  31b0		       5c 31		      .word.w	STMT
    186  31b2							;==============================================================================================================================
    187  31b2							;Process if statement, if true then process all statements until end of line reached
    188  31b2							;S1S1:
    189  31b2							;	  TSTB	     S1Z,kIf			    ; IF STATEMENT
    190  31b2				   ekIf
      0  31b2					      CALL	EXPR	; GET EXPRESSION rel ops now valid expression 0 false, everything else true
      0  31b2					      db	28
      1  31b2		       1c		      .byte.b	28
      0  31b3					      dw	EXPR
      1  31b3		       70 33		      .word.w	EXPR
      0  31b5					      TSTB	S1W,kThen	; (This line originally omitted) not required
      0  31b5					      db	101
      1  31b5		       65		      .byte.b	101
      0  31b6					      db	(S1W-*)-1
      1  31b6		       01		      .byte.b	(S1W-*)-1
      0  31b7					      db	kThen
      1  31b7		       06		      .byte.b	kThen
    193  31b8				   ekThen
    194  31b8				   S1W
      0  31b8					      IBRANCH		; PERFORM COMPARISON -- PERFORMS NXT IF FALSE calls iBranch
      0  31b8					      db	54
      1  31b8		       36		      .byte.b	54
      0  31b9					      IJMP	STMT
      0  31b9					      db	29
      1  31b9		       1d		      .byte.b	29
      0  31ba					      dw	STMT
      1  31ba		       5c 31		      .word.w	STMT
    197  31bc							;===============================================================================================================================
    198  31bc							; Test for GOTO
    199  31bc							;S1Z:
    200  31bc							;	  TSTB	     S2,kGoto			    ; YES...TO, OR...SUB
    201  31bc							;
    202  31bc				   ekGoto
      0  31bc					      TSTBRANCH	ekGotoCompiled	; test the two byte vector following the goto if zero then normal line lookup
      0  31bc					      db	106
      1  31bc		       6a		      .byte.b	106
      0  31bd					      db	(ekGotoCompiled-*)-1
      1  31bd		       0e		      .byte.b	(ekGotoCompiled-*)-1
    204  31be							; Else we have the address ad just goto that address
      0  31be					      TSTB	ekGotoLine,oPeriod	; If it is a period, then just go to start of this line
      0  31be					      db	101
      1  31be		       65		      .byte.b	101
      0  31bf					      db	(ekGotoLine-*)-1
      1  31bf		       05		      .byte.b	(ekGotoLine-*)-1
      0  31c0					      db	oPeriod
      1  31c0		       e9		      .byte.b	oPeriod
      0  31c1					      REPEATLINE		; Repeat the same line again
      0  31c1					      db	105
      1  31c1		       69		      .byte.b	105
      0  31c2					      IJMP	STMT	; Go do the statement
      0  31c2					      db	29
      1  31c2		       1d		      .byte.b	29
      0  31c3					      dw	STMT
      1  31c3		       5c 31		      .word.w	STMT
    208  31c5
    209  31c5				   ekGotoLine
      0  31c5					      CALL	EXPR	; GET LABEL
      0  31c5					      db	28
      1  31c5		       1c		      .byte.b	28
      0  31c6					      dw	EXPR
      1  31c6		       70 33		      .word.w	EXPR
      0  31c8					      lit	0	; Place indicator for line num on stack
      0  31c8					      db	27
      1  31c8		       1b		      .byte.b	27
      0  31c9					      dw	0
      1  31c9		       00 00		      .word.w	0
      0  31cb					      FASTXFER
      0  31cb					      db	107
      1  31cb		       6b		      .byte.b	107
    213  31cc				   ekGotoCompiled
      0  31cc					      lit	1	; tell it that mempointer on the stack
      0  31cc					      db	27
      1  31cc		       1b		      .byte.b	27
      0  31cd					      dw	1
      1  31cd		       01 00		      .word.w	1
      0  31cf					      FASTXFER		; put top of stack into curptr
      0  31cf					      db	107
      1  31cf		       6b		      .byte.b	107
    216  31d0
    217  31d0
    218  31d0							;==================================================================================================================================
    219  31d0							; Process REM statement
    220  31d0							;
    221  31d0							;S2a:
    222  31d0							;	  TSTB	     S3,kRem			    ; REMark.  Skip rest of line
    223  31d0				   ekRem
      0  31d0					      NXT	CO	; The rest of the line is ignored
      0  31d0					      db	6
      1  31d0		       06		      .byte.b	6
      0  31d1					      dw	CO
      1  31d1		       54 31		      .word.w	CO
      0  31d3					      IJMP	STMT	; Process the next statement
      0  31d3					      db	29
      1  31d3		       1d		      .byte.b	29
      0  31d4					      dw	STMT
      1  31d4		       5c 31		      .word.w	STMT
    226  31d6							;====================================================================================================================================
    227  31d6							; Set the Task input output slot each slot is 16 byte starting at e000
    228  31d6							; so 0,1,...
    229  31d6				   ekSetTerm
      0  31d6					      CALL	EXPR
      0  31d6					      db	28
      1  31d6		       1c		      .byte.b	28
      0  31d7					      dw	EXPR
      1  31d7		       70 33		      .word.w	EXPR
      0  31d9					      TSTB	ERRVEC,oComma
      0  31d9					      db	101
      1  31d9		       65		      .byte.b	101
      0  31da					      db	(ERRVEC-*)-1
      1  31da		       2f		      .byte.b	(ERRVEC-*)-1
      0  31db					      db	oComma
      1  31db		       e2		      .byte.b	oComma
      0  31dc					      CALL	EXPR
      0  31dc					      db	28
      1  31dc		       1c		      .byte.b	28
      0  31dd					      dw	EXPR
      1  31dd		       70 33		      .word.w	EXPR
      0  31df					      SETTERMINAL
      0  31df					      db	108
      1  31df		       6c		      .byte.b	108
      0  31e0					      NXT	CO	;Next statement to execute
      0  31e0					      db	6
      1  31e0		       06		      .byte.b	6
      0  31e1					      dw	CO
      1  31e1		       54 31		      .word.w	CO
      0  31e3					      IJMP	STMT
      0  31e3					      db	29
      1  31e3		       1d		      .byte.b	29
      0  31e4					      dw	STMT
      1  31e4		       5c 31		      .word.w	STMT
    236  31e6							;==================================================================================================================================
    237  31e6							; Print statement
    238  31e6							;
    239  31e6							;S3:
    240  31e6							;	  TSTB	     S8,kPrint			    ; ? or Print symonym for print
    241  31e6				   ekPrint
      0  31e6					      STARTIO		; Lock task until io completes
      0  31e6					      db	70
      1  31e6		       46		      .byte.b	70
    243  31e7				   S4
      0  31e7					      TSTDONE	S4a	; Test if we just want crlf printed
      0  31e7					      db	50
      1  31e7		       32		      .byte.b	50
      0  31e8					      db	(S4a-*)-1
      1  31e8		       03		      .byte.b	(S4a-*)-1
      0  31e9					      IJMP	S6
      0  31e9					      db	29
      1  31e9		       1d		      .byte.b	29
      0  31ea					      dw	S6
      1  31ea		       01 32		      .word.w	S6
    246  31ec
    247  31ec				   S4a
      0  31ec					      TSTB	S7,tString	; TEST FOR QUOTED String
      0  31ec					      db	101
      1  31ec		       65		      .byte.b	101
      0  31ed					      db	(S7-*)-1
      1  31ed		       1f		      .byte.b	(S7-*)-1
      0  31ee					      db	tString
      1  31ee		       a0		      .byte.b	tString
      0  31ef					      PRS		; PRINT STRING
      0  31ef					      db	2
      1  31ef		       02		      .byte.b	2
    250  31f0				   S5
      0  31f0					      TSTB	S6A,oComma	; IS THERE MORE?
      0  31f0					      db	101
      1  31f0		       65		      .byte.b	101
      0  31f1					      db	(S6A-*)-1
      1  31f1		       07		      .byte.b	(S6A-*)-1
      0  31f2					      db	oComma
      1  31f2		       e2		      .byte.b	oComma
      0  31f3					      SPC		; SPACE TO NEXT ZONE
      0  31f3					      db	4
      1  31f3		       04		      .byte.b	4
      0  31f4					      TSTDONE	S4	; Not end of line jump back
      0  31f4					      db	50
      1  31f4		       32		      .byte.b	50
      0  31f5					      db	(S4-*)-1
      1  31f5		       f1		      .byte.b	(S4-*)-1
      0  31f6					      IJMP	S6Z	; YES JUMP BACK
      0  31f6					      db	29
      1  31f6		       1d		      .byte.b	29
      0  31f7					      dw	S6Z
      1  31f7		       03 32		      .word.w	S6Z
    255  31f9
    256  31f9							;
    257  31f9							; If a semicolon, don't do anything.
    258  31f9							;
    259  31f9				   S6A
      0  31f9					      TSTB	S6,oSemiColon	; IF semicolon also check if end of line
      0  31f9					      db	101
      1  31f9		       65		      .byte.b	101
      0  31fa					      db	(S6-*)-1
      1  31fa		       06		      .byte.b	(S6-*)-1
      0  31fb					      db	oSemiColon
      1  31fb		       e3		      .byte.b	oSemiColon
      0  31fc					      TSTDONE	S4	; Jump Back if not end of line
      0  31fc					      db	50
      1  31fc		       32		      .byte.b	50
      0  31fd					      db	(S4-*)-1
      1  31fd		       e9		      .byte.b	(S4-*)-1
      0  31fe					      IJMP	S6Z
      0  31fe					      db	29
      1  31fe		       1d		      .byte.b	29
      0  31ff					      dw	S6Z
      1  31ff		       03 32		      .word.w	S6Z
    263  3201
    264  3201				   S6
    265  3201
      0  3201					      DONE		; ERROR IF CR NOT NEXT
      0  3201					      db	1
      1  3201		       01		      .byte.b	1
      0  3202					      NLINE
      0  3202					      db	5
      1  3202		       05		      .byte.b	5
    268  3203				   S6Z
      0  3203					      ENDIO		; release task io completed
      0  3203					      db	71
      1  3203		       47		      .byte.b	71
      0  3204					      NXT	CO	; exit here if , or ; at end of print
      0  3204					      db	6
      1  3204		       06		      .byte.b	6
      0  3205					      dw	CO
      1  3205		       54 31		      .word.w	CO
      0  3207					      IJMP	STMT
      0  3207					      db	29
      1  3207		       1d		      .byte.b	29
      0  3208					      dw	STMT
      1  3208		       5c 31		      .word.w	STMT
    272  320a							;
    273  320a							; A jump for code too far away for relative branch
    274  320a							;
    275  320a				   ERRVEC
      0  320a					      IJMP	UNKNOWN
      0  320a					      db	29
      1  320a		       1d		      .byte.b	29
      0  320b					      dw	UNKNOWN
      1  320b		       6c 33		      .word.w	UNKNOWN
    277  320d							;
    278  320d							; Get here if there is an expression to print
    279  320d				   S7
      0  320d					      TSTB	S7AUnsigned,oDollar	; Print the value in Hex format
      0  320d					      db	101
      1  320d		       65		      .byte.b	101
      0  320e					      db	(S7AUnsigned-*)-1
      1  320e		       08		      .byte.b	(S7AUnsigned-*)-1
      0  320f					      db	oDollar
      1  320f		       e7		      .byte.b	oDollar
      0  3210					      CALL	EXPR
      0  3210					      db	28
      1  3210		       1c		      .byte.b	28
      0  3211					      dw	EXPR
      1  3211		       70 33		      .word.w	EXPR
      0  3213					      HEXPRT
      0  3213					      db	67
      1  3213		       43		      .byte.b	67
      0  3214					      IJMP	S5
      0  3214					      db	29
      1  3214		       1d		      .byte.b	29
      0  3215					      dw	S5
      1  3215		       f0 31		      .word.w	S5
    284  3217
    285  3217				   S7AUnsigned
    286  3217
      0  3217					      TSTB	S7A,oPercent	; Print the value as an unsigned number
      0  3217					      db	101
      1  3217		       65		      .byte.b	101
      0  3218					      db	(S7A-*)-1
      1  3218		       0a		      .byte.b	(S7A-*)-1
      0  3219					      db	oPercent
      1  3219		       ed		      .byte.b	oPercent
      0  321a					      CALL	EXPR
      0  321a					      db	28
      1  321a		       1c		      .byte.b	28
      0  321b					      dw	EXPR
      1  321b		       70 33		      .word.w	EXPR
      0  321d					      SETR2	tUint
      0  321d					      db	94
      1  321d		       5e		      .byte.b	94
      0  321e					      db	tUint
      1  321e		       a9		      .byte.b	tUint
      0  321f					      PRN
      0  321f					      db	3
      1  321f		       03		      .byte.b	3
      0  3220					      IJMP	S5
      0  3220					      db	29
      1  3220		       1d		      .byte.b	29
      0  3221					      dw	S5
      1  3221		       f0 31		      .word.w	S5
    292  3223
    293  3223				   S7A
    294  3223
      0  3223					      CALL	EXPR
      0  3223					      db	28
      1  3223		       1c		      .byte.b	28
      0  3224					      dw	EXPR
      1  3224		       70 33		      .word.w	EXPR
      0  3226					      TSTB	S7B,oDollar	; Print the value as a single character
      0  3226					      db	101
      1  3226		       65		      .byte.b	101
      0  3227					      db	(S7B-*)-1
      1  3227		       05		      .byte.b	(S7B-*)-1
      0  3228					      db	oDollar
      1  3228		       e7		      .byte.b	oDollar
      0  3229					      PUTCHAR
      0  3229					      db	52
      1  3229		       34		      .byte.b	52
      0  322a					      IJMP	S5
      0  322a					      db	29
      1  322a		       1d		      .byte.b	29
      0  322b					      dw	S5
      1  322b		       f0 31		      .word.w	S5
    299  322d
    300  322d				   S7B
      0  322d					      SETR2	tInteger	; Print the value as a signed number
      0  322d					      db	94
      1  322d		       5e		      .byte.b	94
      0  322e					      db	tInteger
      1  322e		       a4		      .byte.b	tInteger
      0  322f					      PRN		; PRINT IT
      0  322f					      db	3
      1  322f		       03		      .byte.b	3
      0  3230					      IJMP	S5	; IS THERE MORE?
      0  3230					      db	29
      1  3230		       1d		      .byte.b	29
      0  3231					      dw	S5
      1  3231		       f0 31		      .word.w	S5
    304  3233							;
    305  3233							;===========================================================
    306  3233							; PROCESS ALL THE TASK STATEMENTS
    307  3233							;
    308  3233							;S8:
    309  3233							;	  TSTB	      S8G,kTaske		 ; End Task
    310  3233				   ekTaske
      0  3233					      TSTB	S8NoParm,oLeftBracket
      0  3233					      db	101
      1  3233		       65		      .byte.b	101
      0  3234					      db	(S8NoParm-*)-1
      1  3234		       0c		      .byte.b	(S8NoParm-*)-1
      0  3235					      db	oLeftBracket
      1  3235		       e0		      .byte.b	oLeftBracket
      0  3236					      CALL	EXPR
      0  3236					      db	28
      1  3236		       1c		      .byte.b	28
      0  3237					      dw	EXPR
      1  3237		       70 33		      .word.w	EXPR
      0  3239					      TSTB	UNKNOWNLnk,oRightBracket
      0  3239					      db	101
      1  3239		       65		      .byte.b	101
      0  323a					      db	(UNKNOWNLnk-*)-1
      1  323a		       2d		      .byte.b	(UNKNOWNLnk-*)-1
      0  323b					      db	oRightBracket
      1  323b		       e1		      .byte.b	oRightBracket
      0  323c					      ETASK
      0  323c					      db	62
      1  323c		       3e		      .byte.b	62
      0  323d					      DONE
      0  323d					      db	1
      1  323d		       01		      .byte.b	1
      0  323e					      IJMP	STMT
      0  323e					      db	29
      1  323e		       1d		      .byte.b	29
      0  323f					      dw	STMT
      1  323f		       5c 31		      .word.w	STMT
    317  3241				   S8NoParm
      0  3241					      LIT	0
      0  3241					      db	27
      1  3241		       1b		      .byte.b	27
      0  3242					      dw	0
      1  3242		       00 00		      .word.w	0
      0  3244					      ETASK
      0  3244					      db	62
      1  3244		       3e		      .byte.b	62
      0  3245					      DONE		; Must be last thing on a line
      0  3245					      db	1
      1  3245		       01		      .byte.b	1
      0  3246					      IJMP	STMT
      0  3246					      db	29
      1  3246		       1d		      .byte.b	29
      0  3247					      dw	STMT
      1  3247		       5c 31		      .word.w	STMT
    322  3249							;
    323  3249							;===========================================================
    324  3249							; The task gives up the rest of the cycles
    325  3249							;S8G:
    326  3249							;	  TSTB	      S8a,kTaskn	 ;Next task
    327  3249				   ekTaskn
      0  3249					      NTASK
      0  3249					      db	63
      1  3249		       3f		      .byte.b	63
      0  324a					      NXT	CO	;Next statement to execute
      0  324a					      db	6
      1  324a		       06		      .byte.b	6
      0  324b					      dw	CO
      1  324b		       54 31		      .word.w	CO
      0  324d					      IJMP	STMT
      0  324d					      db	29
      1  324d		       1d		      .byte.b	29
      0  324e					      dw	STMT
      1  324e		       5c 31		      .word.w	STMT
    331  3250							;
    332  3250							;===========================================================
    333  3250							; Waits for a task or list of tasks to complete
    334  3250
    335  3250				   ekTaskw
      0  3250					      TSTB	UNKNOWNLnk,oLeftBracket
      0  3250					      db	101
      1  3250		       65		      .byte.b	101
      0  3251					      db	(UNKNOWNLnk-*)-1
      1  3251		       16		      .byte.b	(UNKNOWNLnk-*)-1
      0  3252					      db	oLeftBracket
      1  3252		       e0		      .byte.b	oLeftBracket
    337  3253				   S8TSK
      0  3253					      Call	EXPR	;Gets the PID of task to wait for
      0  3253					      db	28
      1  3253		       1c		      .byte.b	28
      0  3254					      dw	EXPR
      1  3254		       70 33		      .word.w	EXPR
    339  3256				   S8LOOP
      0  3256					      WTASK	S8LOOP	;Chks for the task PID to finish in a loop, gives up time slice if not done
      0  3256					      db	76
      1  3256		       4c		      .byte.b	76
      0  3257					      db	(S8LOOP-*)-1
      1  3257		       fe		      .byte.b	(S8LOOP-*)-1
      0  3258					      TSTB	S8aa,oComma	;Checks for more tasks
      0  3258					      db	101
      1  3258		       65		      .byte.b	101
      0  3259					      db	(S8aa-*)-1
      1  3259		       04		      .byte.b	(S8aa-*)-1
      0  325a					      db	oComma
      1  325a		       e2		      .byte.b	oComma
      0  325b					      IJMP	S8TSK	;Go for the next task number
      0  325b					      db	29
      1  325b		       1d		      .byte.b	29
      0  325c					      dw	S8TSK
      1  325c		       53 32		      .word.w	S8TSK
    343  325e				   S8aa
      0  325e					      TSTB	UNKNOWNLnk,oRightBracket	;end of list
      0  325e					      db	101
      1  325e		       65		      .byte.b	101
      0  325f					      db	(UNKNOWNLnk-*)-1
      1  325f		       08		      .byte.b	(UNKNOWNLnk-*)-1
      0  3260					      db	oRightBracket
      1  3260		       e1		      .byte.b	oRightBracket
      0  3261					      DONE
      0  3261					      db	1
      1  3261		       01		      .byte.b	1
      0  3262					      NXT	CO
      0  3262					      db	6
      1  3262		       06		      .byte.b	6
      0  3263					      dw	CO
      1  3263		       54 31		      .word.w	CO
      0  3265					      IJMP	STMT	;Next Statement
      0  3265					      db	29
      1  3265		       1d		      .byte.b	29
      0  3266					      dw	STMT
      1  3266		       5c 31		      .word.w	STMT
    348  3268
    349  3268
    350  3268
    351  3268				   UNKNOWNLnk
      0  3268					      iJMP	UNKNOWN
      0  3268					      db	29
      1  3268		       1d		      .byte.b	29
      0  3269					      dw	UNKNOWN
      1  3269		       6c 33		      .word.w	UNKNOWN
    353  326b
    354  326b							;
    355  326b							;===========================================================
    356  326b							; Update a memory location with a value
    357  326b							;  Use @[offset] to write a word value to memory
    358  326b							;
    359  326b							;S8a1:
    360  326b							;	  TSTB	      S8b,kPoke 			  ; Poke a value into memory
    361  326b				   ekPoke
      0  326b					      TSTB	UNKNOWNV,oLeftBracket	; opening bracket
      0  326b					      db	101
      1  326b		       65		      .byte.b	101
      0  326c					      db	(UNKNOWNV-*)-1
      1  326c		       9c		      .byte.b	(UNKNOWNV-*)-1
      0  326d					      db	oLeftBracket
      1  326d		       e0		      .byte.b	oLeftBracket
      0  326e					      CALL	EXPR	; Get address to write to
      0  326e					      db	28
      1  326e		       1c		      .byte.b	28
      0  326f					      dw	EXPR
      1  326f		       70 33		      .word.w	EXPR
      0  3271					      TSTB	UNKNOWNV,oComma	; Must have a coma
      0  3271					      db	101
      1  3271		       65		      .byte.b	101
      0  3272					      db	(UNKNOWNV-*)-1
      1  3272		       96		      .byte.b	(UNKNOWNV-*)-1
      0  3273					      db	oComma
      1  3273		       e2		      .byte.b	oComma
      0  3274					      CALL	EXPR	; Get the value to poke
      0  3274					      db	28
      1  3274		       1c		      .byte.b	28
      0  3275					      dw	EXPR
      1  3275		       70 33		      .word.w	EXPR
      0  3277					      TSTB	UNKNOWNV,oRightBracket	; closing bracket
      0  3277					      db	101
      1  3277		       65		      .byte.b	101
      0  3278					      db	(UNKNOWNV-*)-1
      1  3278		       90		      .byte.b	(UNKNOWNV-*)-1
      0  3279					      db	oRightBracket
      1  3279		       e1		      .byte.b	oRightBracket
      0  327a					      POKEMEM
      0  327a					      db	47
      1  327a		       2f		      .byte.b	47
      0  327b					      DONE
      0  327b					      db	1
      1  327b		       01		      .byte.b	1
      0  327c					      NXT	CO	;AND SEQUENCE TO NEXT
      0  327c					      db	6
      1  327c		       06		      .byte.b	6
      0  327d					      dw	CO
      1  327d		       54 31		      .word.w	CO
      0  327f					      IJMP	STMT
      0  327f					      db	29
      1  327f		       1d		      .byte.b	29
      0  3280					      dw	STMT
      1  3280		       5c 31		      .word.w	STMT
    371  3282							;
    372  3282							;================================================================
    373  3282							; Set a block of memory to a value word or byte
    374  3282							; SetMem(Value, Length, Destination)
    375  3282				   ekSetMemB
      0  3282					      CALL	ekSetMem
      0  3282					      db	28
      1  3282		       1c		      .byte.b	28
      0  3283					      dw	ekSetMem
      1  3283		       9a 32		      .word.w	ekSetMem
      0  3285					      SETBLOCK	tByte	; set value as byte
      0  3285					      db	110
      1  3285		       6e		      .byte.b	110
      0  3286					      db	tByte
      1  3286		       a2		      .byte.b	tByte
      0  3287					      DONE
      0  3287					      db	1
      1  3287		       01		      .byte.b	1
      0  3288					      NXT	CO
      0  3288					      db	6
      1  3288		       06		      .byte.b	6
      0  3289					      dw	CO
      1  3289		       54 31		      .word.w	CO
      0  328b					      IJMP	STMT
      0  328b					      db	29
      1  328b		       1d		      .byte.b	29
      0  328c					      dw	STMT
      1  328c		       5c 31		      .word.w	STMT
    381  328e
    382  328e				   ekSetMemW
      0  328e					      CALL	ekSetMem
      0  328e					      db	28
      1  328e		       1c		      .byte.b	28
      0  328f					      dw	ekSetMem
      1  328f		       9a 32		      .word.w	ekSetMem
      0  3291					      SETBLOCK	tInteger	; set value as byte
      0  3291					      db	110
      1  3291		       6e		      .byte.b	110
      0  3292					      db	tInteger
      1  3292		       a4		      .byte.b	tInteger
      0  3293					      DONE
      0  3293					      db	1
      1  3293		       01		      .byte.b	1
      0  3294					      NXT	CO
      0  3294					      db	6
      1  3294		       06		      .byte.b	6
      0  3295					      dw	CO
      1  3295		       54 31		      .word.w	CO
      0  3297					      IJMP	STMT
      0  3297					      db	29
      1  3297		       1d		      .byte.b	29
      0  3298					      dw	STMT
      1  3298		       5c 31		      .word.w	STMT
    388  329a
    389  329a				   ekSetMem
      0  329a					      TSTB	UNKNOWNV,oLeftBracket	; opening bracket
      0  329a					      db	101
      1  329a		       65		      .byte.b	101
      0  329b					      db	(UNKNOWNV-*)-1
      1  329b		       6d		      .byte.b	(UNKNOWNV-*)-1
      0  329c					      db	oLeftBracket
      1  329c		       e0		      .byte.b	oLeftBracket
      0  329d					      CALL	EXPR	; Value to set
      0  329d					      db	28
      1  329d		       1c		      .byte.b	28
      0  329e					      dw	EXPR
      1  329e		       70 33		      .word.w	EXPR
      0  32a0					      TSTB	UNKNOWNV,oComma	; Must have a comma
      0  32a0					      db	101
      1  32a0		       65		      .byte.b	101
      0  32a1					      db	(UNKNOWNV-*)-1
      1  32a1		       67		      .byte.b	(UNKNOWNV-*)-1
      0  32a2					      db	oComma
      1  32a2		       e2		      .byte.b	oComma
      0  32a3					      CALL	EXPR	; Get The Length
      0  32a3					      db	28
      1  32a3		       1c		      .byte.b	28
      0  32a4					      dw	EXPR
      1  32a4		       70 33		      .word.w	EXPR
      0  32a6					      TSTB	UNKNOWNV,oComma	; Must have a comma
      0  32a6					      db	101
      1  32a6		       65		      .byte.b	101
      0  32a7					      db	(UNKNOWNV-*)-1
      1  32a7		       61		      .byte.b	(UNKNOWNV-*)-1
      0  32a8					      db	oComma
      1  32a8		       e2		      .byte.b	oComma
      0  32a9					      CALL	EXPR	; GET the address to start at
      0  32a9					      db	28
      1  32a9		       1c		      .byte.b	28
      0  32aa					      dw	EXPR
      1  32aa		       70 33		      .word.w	EXPR
      0  32ac					      TSTB	UNKNOWNV,oRightBracket	; closing bracket
      0  32ac					      db	101
      1  32ac		       65		      .byte.b	101
      0  32ad					      db	(UNKNOWNV-*)-1
      1  32ad		       5b		      .byte.b	(UNKNOWNV-*)-1
      0  32ae					      db	oRightBracket
      1  32ae		       e1		      .byte.b	oRightBracket
      0  32af					      RTN
      0  32af					      db	25
      1  32af		       19		      .byte.b	25
    398  32b0							;
    399  32b0							;================================================================
    400  32b0							; Copy a block of memory
    401  32b0							; CopyMem(Length, Destination, Source)
    402  32b0				   ekCopyMem
      0  32b0					      TSTB	UNKNOWNV,oLeftBracket	; opening bracket
      0  32b0					      db	101
      1  32b0		       65		      .byte.b	101
      0  32b1					      db	(UNKNOWNV-*)-1
      1  32b1		       57		      .byte.b	(UNKNOWNV-*)-1
      0  32b2					      db	oLeftBracket
      1  32b2		       e0		      .byte.b	oLeftBracket
      0  32b3					      CALL	EXPR	; Length
      0  32b3					      db	28
      1  32b3		       1c		      .byte.b	28
      0  32b4					      dw	EXPR
      1  32b4		       70 33		      .word.w	EXPR
      0  32b6					      TSTB	UNKNOWNV,oComma	; Must have a comma
      0  32b6					      db	101
      1  32b6		       65		      .byte.b	101
      0  32b7					      db	(UNKNOWNV-*)-1
      1  32b7		       51		      .byte.b	(UNKNOWNV-*)-1
      0  32b8					      db	oComma
      1  32b8		       e2		      .byte.b	oComma
      0  32b9					      CALL	EXPR	; Destination
      0  32b9					      db	28
      1  32b9		       1c		      .byte.b	28
      0  32ba					      dw	EXPR
      1  32ba		       70 33		      .word.w	EXPR
      0  32bc					      TSTB	UNKNOWNV,oComma	; Must have a comma
      0  32bc					      db	101
      1  32bc		       65		      .byte.b	101
      0  32bd					      db	(UNKNOWNV-*)-1
      1  32bd		       4b		      .byte.b	(UNKNOWNV-*)-1
      0  32be					      db	oComma
      1  32be		       e2		      .byte.b	oComma
      0  32bf					      CALL	EXPR	; Source
      0  32bf					      db	28
      1  32bf		       1c		      .byte.b	28
      0  32c0					      dw	EXPR
      1  32c0		       70 33		      .word.w	EXPR
      0  32c2					      TSTB	UNKNOWNV,oRightBracket	; closing bracket
      0  32c2					      db	101
      1  32c2		       65		      .byte.b	101
      0  32c3					      db	(UNKNOWNV-*)-1
      1  32c3		       45		      .byte.b	(UNKNOWNV-*)-1
      0  32c4					      db	oRightBracket
      1  32c4		       e1		      .byte.b	oRightBracket
      0  32c5					      COPYBLOCK		; Copy the memory
      0  32c5					      db	111
      1  32c5		       6f		      .byte.b	111
      0  32c6					      DONE
      0  32c6					      db	1
      1  32c6		       01		      .byte.b	1
      0  32c7					      NXT	CO
      0  32c7					      db	6
      1  32c7		       06		      .byte.b	6
      0  32c8					      dw	CO
      1  32c8		       54 31		      .word.w	CO
      0  32ca					      IJMP	STMT
      0  32ca					      db	29
      1  32ca		       1d		      .byte.b	29
      0  32cb					      dw	STMT
      1  32cb		       5c 31		      .word.w	STMT
    414  32cd
    415  32cd							;================================================================
    416  32cd							; Write a single byte to the output device
    417  32cd							;
    418  32cd				   ekPutch
      0  32cd					      CALL	EXPR
      0  32cd					      db	28
      1  32cd		       1c		      .byte.b	28
      0  32ce					      dw	EXPR
      1  32ce		       70 33		      .word.w	EXPR
      0  32d0					      PUTCHAR
      0  32d0					      db	52
      1  32d0		       34		      .byte.b	52
      0  32d1					      DONE
      0  32d1					      db	1
      1  32d1		       01		      .byte.b	1
      0  32d2					      NXT	CO	;AND SEQUENCE TO NEXT
      0  32d2					      db	6
      1  32d2		       06		      .byte.b	6
      0  32d3					      dw	CO
      1  32d3		       54 31		      .word.w	CO
      0  32d5					      IJMP	STMT
      0  32d5					      db	29
      1  32d5		       1d		      .byte.b	29
      0  32d6					      dw	STMT
      1  32d6		       5c 31		      .word.w	STMT
    424  32d8							;================================================================
    425  32d8							; Clear the screen lines
    426  32d8							;  Uses the vt100 control seq, so must be connected to vt100 terminal
    427  32d8							;
    428  32d8				   ekCls
      0  32d8					      CLEARSCREEN
      0  32d8					      db	46
      1  32d8		       2e		      .byte.b	46
      0  32d9					      NXT	CO	;AND SEQUENCE TO NEXT
      0  32d9					      db	6
      1  32d9		       06		      .byte.b	6
      0  32da					      dw	CO
      1  32da		       54 31		      .word.w	CO
      0  32dc					      IJMP	STMT
      0  32dc					      db	29
      1  32dc		       1d		      .byte.b	29
      0  32dd					      dw	STMT
      1  32dd		       5c 31		      .word.w	STMT
    432  32df							;==================================================================
    433  32df							; Get input from the terminal
    434  32df							;   Reads from the currently active input device
    435  32df							;
    436  32df				   ekInput
    437  32df				   S10
      0  32df					      TSTB	S10A,tString	;If there is a string print the prompt
      0  32df					      db	101
      1  32df		       65		      .byte.b	101
      0  32e0					      db	(S10A-*)-1
      1  32e0		       05		      .byte.b	(S10A-*)-1
      0  32e1					      db	tString
      1  32e1		       a0		      .byte.b	tString
      0  32e2					      PRS
      0  32e2					      db	2
      1  32e2		       02		      .byte.b	2
      0  32e3					      TSTB	S10Z,oSemiColon	;Must follow the prompt
      0  32e3					      db	101
      1  32e3		       65		      .byte.b	101
      0  32e4					      db	(S10Z-*)-1
      1  32e4		       19		      .byte.b	(S10Z-*)-1
      0  32e5					      db	oSemiColon
      1  32e5		       e3		      .byte.b	oSemiColon
    441  32e6				   S10A
      0  32e6					      TSTV	UNKNOWN	; GET VAR ADDRESS (Originally CALL VAR = nonexist)
      0  32e6					      db	33
      1  32e6		       21		      .byte.b	33
      0  32e7					      db	(UNKNOWN-*)-1
      1  32e7		       84		      .byte.b	(UNKNOWN-*)-1
      0  32e8					      CALL	FactVarPtrNoTst
      0  32e8					      db	28
      1  32e8		       1c		      .byte.b	28
      0  32e9					      dw	FactVarPtrNoTst
      1  32e9		       1d 35		      .word.w	FactVarPtrNoTst
    444  32eb							;	  TSTB	     S10ACONT,oBang	      ; Print from another task
    445  32eb							;	  IND
    446  32eb							;	  TSTVT      UNKNOWN
    447  32eb
    448  32eb				   S10ACONT
      0  32eb					      TSTB	S10A1,oDollar
      0  32eb					      db	101
      1  32eb		       65		      .byte.b	101
      0  32ec					      db	(S10A1-*)-1
      1  32ec		       07		      .byte.b	(S10A1-*)-1
      0  32ed					      db	oDollar
      1  32ed		       e7		      .byte.b	oDollar
      0  32ee					      INSTR		;Move character From tty to AESTK
      0  32ee					      db	59
      1  32ee		       3b		      .byte.b	59
      0  32ef					      SETR2	tByte
      0  32ef					      db	94
      1  32ef		       5e		      .byte.b	94
      0  32f0					      db	tByte
      1  32f0		       a2		      .byte.b	tByte
      0  32f1					      IJMP	S10A2
      0  32f1					      db	29
      1  32f1		       1d		      .byte.b	29
      0  32f2					      dw	S10A2
      1  32f2		       f7 32		      .word.w	S10A2
    453  32f4				   S10A1
      0  32f4					      INNUM		;MOVE NUMBER FROM TTY TO AESTK
      0  32f4					      db	11
      1  32f4		       0b		      .byte.b	11
      0  32f5					      SETR2	tInteger
      0  32f5					      db	94
      1  32f5		       5e		      .byte.b	94
      0  32f6					      db	tInteger
      1  32f6		       a4		      .byte.b	tInteger
    456  32f7				   S10A2
      0  32f7					      STORE		;STORE IT
      0  32f7					      db	19
      1  32f7		       13		      .byte.b	19
      0  32f8					      TSTB	S11,oComma	;IS THERE MORE?
      0  32f8					      db	101
      1  32f8		       65		      .byte.b	101
      0  32f9					      db	(S11-*)-1
      1  32f9		       07		      .byte.b	(S11-*)-1
      0  32fa					      db	oComma
      1  32fa		       e2		      .byte.b	oComma
      0  32fb					      IJMP	S10	;YES
      0  32fb					      db	29
      1  32fb		       1d		      .byte.b	29
      0  32fc					      dw	S10
      1  32fc		       df 32		      .word.w	S10
    460  32fe				   S10Z
      0  32fe					      iJMP	UNKNOWN
      0  32fe					      db	29
      1  32fe		       1d		      .byte.b	29
      0  32ff					      dw	UNKNOWN
      1  32ff		       6c 33		      .word.w	UNKNOWN
    462  3301				   S11
      0  3301					      DONE		;MUST BE CR
      0  3301					      db	1
      1  3301		       01		      .byte.b	1
      0  3302					      NXT	CO	;SEQUENCE TO NEXT
      0  3302					      db	6
      1  3302		       06		      .byte.b	6
      0  3303					      dw	CO
      1  3303		       54 31		      .word.w	CO
      0  3305					      IJMP	STMT
      0  3305					      db	29
      1  3305		       1d		      .byte.b	29
      0  3306					      dw	STMT
      1  3306		       5c 31		      .word.w	STMT
    466  3308							;=====================================================================
    467  3308							; End of program, return to command line process
    468  3308							; Main Task may also use taske or return to stopped
    469  3308							;
    470  3308				   ekEnd
      0  3308					      FIN
      0  3308					      db	12
      1  3308		       0c		      .byte.b	12
    472  3309				   UNKNOWNV
      0  3309					      IJMP	UNKNOWN
      0  3309					      db	29
      1  3309		       1d		      .byte.b	29
      0  330a					      dw	UNKNOWN
      1  330a		       6c 33		      .word.w	UNKNOWN
    474  330c							;====================================================================
    475  330c							; IRQ <IRQ-HANDLER-Line expression>
    476  330c							;   Specify a line number subroutine to call when an interupt is processed
    477  330c							;   These subroutines must use iret to return.
    478  330c							;
    479  330c				   ekIrq
      0  330c					      CALL	EXPR	;Get the LABEL .. line NUMBER
      0  330c					      db	28
      1  330c		       1c		      .byte.b	28
      0  330d					      dw	EXPR
      1  330d		       70 33		      .word.w	EXPR
      0  330f					      DONE		;must be CR
      0  330f					      db	1
      1  330f		       01		      .byte.b	1
      0  3310					      SETIRQ		;Set the line number now
      0  3310					      db	56
      1  3310		       38		      .byte.b	56
      0  3311					      NXT	CO	;SEQUENCE TO NEXT STATEMENT
      0  3311					      db	6
      1  3311		       06		      .byte.b	6
      0  3312					      dw	CO
      1  3312		       54 31		      .word.w	CO
      0  3314					      IJMP	STMT
      0  3314					      db	29
      1  3314		       1d		      .byte.b	29
      0  3315					      dw	STMT
      1  3315		       5c 31		      .word.w	STMT
    485  3317
    486  3317							;=========================================================================
    487  3317							; KILL PID-expression	 kill a running task
    488  3317							;  ignored of task has already stopped
    489  3317							;
    490  3317				   ekKill
      0  3317					      CALL	EXPR
      0  3317					      db	28
      1  3317		       1c		      .byte.b	28
      0  3318					      dw	EXPR
      1  3318		       70 33		      .word.w	EXPR
      0  331a					      DONE
      0  331a					      db	1
      1  331a		       01		      .byte.b	1
      0  331b					      TASKKILL
      0  331b					      db	65
      1  331b		       41		      .byte.b	65
      0  331c					      NXT	CO
      0  331c					      db	6
      1  331c		       06		      .byte.b	6
      0  331d					      dw	CO
      1  331d		       54 31		      .word.w	CO
      0  331f					      IJMP	STMT
      0  331f					      db	29
      1  331f		       1d		      .byte.b	29
      0  3320					      dw	STMT
      1  3320		       5c 31		      .word.w	STMT
    496  3322
    497  3322							;============================================================================
    498  3322							; List all program lines
    499  3322							;
    500  3322				   ekList
      0  3322					      DONE
      0  3322					      db	1
      1  3322		       01		      .byte.b	1
      0  3323					      LST
      0  3323					      db	21
      1  3323		       15		      .byte.b	21
      0  3324					      IJMP	CO
      0  3324					      db	29
      1  3324		       1d		      .byte.b	29
      0  3325					      dw	CO
      1  3325		       54 31		      .word.w	CO
    504  3327							;=======================================================================
    505  3327							;RUN begin to executed the program in memory
    506  3327							;
    507  3327				   ekRun
      0  3327					      DONE
      0  3327					      db	1
      1  3327		       01		      .byte.b	1
      0  3328					      VINIT		;clear variables compile the line numbers
      0  3328					      db	30
      1  3328		       1e		      .byte.b	30
      0  3329					      LIT	1	;GOTO line 1
      0  3329					      db	27
      1  3329		       1b		      .byte.b	27
      0  332a					      dw	1
      1  332a		       01 00		      .word.w	1
      0  332c					      XFER		;Bob's addition
      0  332c					      db	7
      1  332c		       07		      .byte.b	7
    512  332d							; EXIT
      0  332d					      IJMP	STMT	;and run!
      0  332d					      db	29
      1  332d		       1d		      .byte.b	29
      0  332e					      dw	STMT
      1  332e		       5c 31		      .word.w	STMT
    514  3330							;=========================================================================
    515  3330							;Clear the program memory, delete all proram lines
    516  3330							;
    517  3330				   ekNew
      0  3330					      DONE
      0  3330					      db	1
      1  3330		       01		      .byte.b	1
      0  3331					      IJMP	START
      0  3331					      db	29
      1  3331		       1d		      .byte.b	29
      0  3332					      dw	START
      1  3332		       4e 31		      .word.w	START
    520  3334
    521  3334							;========================================================================
    522  3334							; Slice(slice legth expression)
    523  3334							;   set the length of time between task switches
    524  3334							;
    525  3334				   ekSlice
      0  3334					      CALL	EXPR
      0  3334					      db	28
      1  3334		       1c		      .byte.b	28
      0  3335					      dw	EXPR
      1  3335		       70 33		      .word.w	EXPR
      0  3337					      SLICE
      0  3337					      db	100
      1  3337		       64		      .byte.b	100
      0  3338					      DONE
      0  3338					      db	1
      1  3338		       01		      .byte.b	1
      0  3339					      NXT	CO
      0  3339					      db	6
      1  3339		       06		      .byte.b	6
      0  333a					      dw	CO
      1  333a		       54 31		      .word.w	CO
      0  333c					      IJMP	STMT
      0  333c					      db	29
      1  333c		       1d		      .byte.b	29
      0  333d					      dw	STMT
      1  333d		       5c 31		      .word.w	STMT
    531  333f							;==========================================================================
    532  333f							; Turn off and on the thrace functions
    533  333f							; a debug terminal needs to be available
    534  333f							; Trace( Trace flag expression)
    535  333f							;	128 trace IL code, 64 trace basic code, 1 turn on interactive debug
    536  333f							;	for individual lines of basic code. These can be combined
    537  333f				   ekTrace
      0  333f					      TSTB	UNKNOWN,oLeftBracket	;Are we going to trace
      0  333f					      db	101
      1  333f		       65		      .byte.b	101
      0  3340					      db	(UNKNOWN-*)-1
      1  3340		       2b		      .byte.b	(UNKNOWN-*)-1
      0  3341					      db	oLeftBracket
      1  3341		       e0		      .byte.b	oLeftBracket
      0  3342					      CALL	EXPR
      0  3342					      db	28
      1  3342		       1c		      .byte.b	28
      0  3343					      dw	EXPR
      1  3343		       70 33		      .word.w	EXPR
      0  3345					      TSTB	UNKNOWN,oRightBracket
      0  3345					      db	101
      1  3345		       65		      .byte.b	101
      0  3346					      db	(UNKNOWN-*)-1
      1  3346		       25		      .byte.b	(UNKNOWN-*)-1
      0  3347					      db	oRightBracket
      1  3347		       e1		      .byte.b	oRightBracket
      0  3348					      TRACEPROGRAM
      0  3348					      db	78
      1  3348		       4e		      .byte.b	78
      0  3349					      DONE
      0  3349					      db	1
      1  3349		       01		      .byte.b	1
      0  334a					      NXT	CO
      0  334a					      db	6
      1  334a		       06		      .byte.b	6
      0  334b					      dw	CO
      1  334b		       54 31		      .word.w	CO
      0  334d					      IJMP	STMT
      0  334d					      db	29
      1  334d		       1d		      .byte.b	29
      0  334e					      dw	STMT
      1  334e		       5c 31		      .word.w	STMT
    545  3350							;=====================================================================
    546  3350							; Exit basic to machine monitor
    547  3350							;
    548  3350				   ekExit
      0  3350					      EXIT
      0  3350					      db	26
      1  3350		       1a		      .byte.b	26
    550  3351
    551  3351							;=======================================================================
    552  3351							; Commands related to saving/restoring programs
    553  3351							; to/from mass storage.
    554  3351							;=======================================================================
    555  3351							; Save a program file
    556  3351							;
    557  3351					      if	(XKIM || CTMON65) && DISK_ACCESS
    558  3351
    559  3351				   ekSave
      0  3351					      OPENWRITE	OPEN_CREATE
      0  3351					      db	40
      1  3351		       28		      .byte.b	40
      0  3352					      db	OPEN_CREATE
      1  3352		       01		      .byte.b	OPEN_CREATE
      0  3353					      DLIST
      0  3353					      db	43
      1  3353		       2b		      .byte.b	43
      0  3354					      DCLOSE
      0  3354					      db	41
      1  3354		       29		      .byte.b	41
      0  3355					      IJMP	CO
      0  3355					      db	29
      1  3355		       1d		      .byte.b	29
      0  3356					      dw	CO
      1  3356		       54 31		      .word.w	CO
    564  3358							;=========================================================================
    565  3358							; Load a program file
    566  3358							;
    567  3358				   ekLoad
      0  3358					      OPENREAD
      0  3358					      db	39
      1  3358		       27		      .byte.b	39
    569  3359				   S17CLP
      0  3359					      DGETLINE		;get line from file
      0  3359					      db	42
      1  3359		       2a		      .byte.b	42
      0  335a					      TSTL	S17EOL	;no line num means EOL
      0  335a					      db	34
      1  335a		       22		      .byte.b	34
      0  335b					      db	(S17EOL-*)-1
      1  335b		       04		      .byte.b	(S17EOL-*)-1
      0  335c					      INSERT		;put it into the program
      0  335c					      db	24
      1  335c		       18		      .byte.b	24
      0  335d					      IJMP	S17CLP	;keep going
      0  335d					      db	29
      1  335d		       1d		      .byte.b	29
      0  335e					      dw	S17CLP
      1  335e		       59 33		      .word.w	S17CLP
    574  3360				   S17EOL
      0  3360					      DCLOSE		;close disk file
      0  3360					      db	41
      1  3360		       29		      .byte.b	41
      0  3361					      IJMP	CO	;back to start
      0  3361					      db	29
      1  3361		       1d		      .byte.b	29
      0  3362					      dw	CO
      1  3362		       54 31		      .word.w	CO
    577  3364							;=========================================================================
    578  3364							; Display the directory content
    579  3364							;
    580  3364				   ekDir
      0  3364					      DDIR		;Display the directory content
      0  3364					      db	44
      1  3364		       2c		      .byte.b	44
      0  3365					      IJMP	CO
      0  3365					      db	29
      1  3365		       1d		      .byte.b	29
      0  3366					      dw	CO
      1  3366		       54 31		      .word.w	CO
    583  3368							;=========================================================================
    584  3368							; Erase a file from disk
    585  3368							;
    586  3368				   ekErase
      0  3368					      RMFILE		;Erase the file from the disk
      0  3368					      db	45
      1  3368		       2d		      .byte.b	45
      0  3369					      IJMP	CO
      0  3369					      db	29
      1  3369		       1d		      .byte.b	29
      0  336a					      dw	CO
      1  336a		       54 31		      .word.w	CO
    589  336c
    590  336c					      endif
    591  336c
    592  336c							;===========================================================================
    593  336c							; Else, unknown command.
    594  336c							;
    595  336c				   UNKNOWN
      0  336c					      ENDIO
      0  336c					      db	71
      1  336c		       47		      .byte.b	71
    597  336d
    598  336d				   NotKnownStatement
    599  336d
      0  336d					      ERRMSG	ERR_SYNTAX	;SYNTAX ERROR
      0  336d					      db	13
      1  336d		       0d		      .byte.b	13
      0  336e					      dw	ERR_SYNTAX
      1  336e		       05 00		      .word.w	ERR_SYNTAX
    601  3370
    602  3370							;=======================================================
    603  3370							; Process Expresions, precidence is represented by the
    604  3370							; various call levels
    605  3370							;
      0  3370				   EXPR       TSTB	EXPRNEXT,oLeftBracket
      0  3370					      db	101
      1  3370		       65		      .byte.b	101
      0  3371					      db	(EXPRNEXT-*)-1
      1  3371		       0c		      .byte.b	(EXPRNEXT-*)-1
      0  3372					      db	oLeftBracket
      1  3372		       e0		      .byte.b	oLeftBracket
      0  3373					      Call	EXPR
      0  3373					      db	28
      1  3373		       1c		      .byte.b	28
      0  3374					      dw	EXPR
      1  3374		       70 33		      .word.w	EXPR
      0  3376					      TSTB	ExpectBrace,oRightBracket
      0  3376					      db	101
      1  3376		       65		      .byte.b	101
      0  3377					      db	(ExpectBrace-*)-1
      1  3377		       02		      .byte.b	(ExpectBrace-*)-1
      0  3378					      db	oRightBracket
      1  3378		       e1		      .byte.b	oRightBracket
      0  3379					      RTN
      0  3379					      db	25
      1  3379		       19		      .byte.b	25
    610  337a
    611  337a				   ExpectBrace
      0  337a					      ENDIO
      0  337a					      db	71
      1  337a		       47		      .byte.b	71
      0  337b					      ERRMSG	ERR_CLOSINGBRACKET
      0  337b					      db	13
      1  337b		       0d		      .byte.b	13
      0  337c					      dw	ERR_CLOSINGBRACKET
      1  337c		       17 00		      .word.w	ERR_CLOSINGBRACKET
    614  337e
    615  337e				   EXPRNEXT
      0  337e					      TSTB	EXPRLOGS,kNot
      0  337e					      db	101
      1  337e		       65		      .byte.b	101
      0  337f					      db	(EXPRLOGS-*)-1
      1  337f		       06		      .byte.b	(EXPRLOGS-*)-1
      0  3380					      db	kNot
      1  3380		       24		      .byte.b	kNot
    617  3381				   ekNot
      0  3381					      Call	EXPR
      0  3381					      db	28
      1  3381		       1c		      .byte.b	28
      0  3382					      dw	EXPR
      1  3382		       70 33		      .word.w	EXPR
      0  3384					      LOGNOT
      0  3384					      db	72
      1  3384		       48		      .byte.b	72
      0  3385					      RTN
      0  3385					      db	25
      1  3385		       19		      .byte.b	25
    621  3386
    622  3386
    623  3386							;=========================================================
    624  3386							;Look for logical operators, but does get first part of expression
    625  3386				   EXPRLOGS
      0  3386					      Call	EXPRCMP
      0  3386					      db	28
      1  3386		       1c		      .byte.b	28
      0  3387					      dw	EXPRCMP
      1  3387		       ae 33		      .word.w	EXPRCMP
    627  3389							;=========================================================
    628  3389							;Look for shift left and shift right level
    629  3389				   EXPSHIFT
      0  3389					      OnGoto	BasicShift,EXPRLOGICAL
      0  3389					      db	103
      1  3389		       67		      .byte.b	103
      0  338a					      dw	BasicShift
      1  338a		       24 31		      .word.w	BasicShift
      0  338c					      dw	EXPRLOGICAL
      1  338c		       9a 33		      .word.w	EXPRLOGICAL
    631  338e
    632  338e				   ekShiftLeft
      0  338e					      Call	EXPR
      0  338e					      db	28
      1  338e		       1c		      .byte.b	28
      0  338f					      dw	EXPR
      1  338f		       70 33		      .word.w	EXPR
      0  3391					      SHIFT	0
      0  3391					      db	113
      1  3391		       71		      .byte.b	113
      0  3392					      db	0
      1  3392		       00		      .byte.b	0
      0  3393					      RTN
      0  3393					      db	25
      1  3393		       19		      .byte.b	25
    636  3394
    637  3394				   ekShiftRight
      0  3394					      Call	EXPR
      0  3394					      db	28
      1  3394		       1c		      .byte.b	28
      0  3395					      dw	EXPR
      1  3395		       70 33		      .word.w	EXPR
      0  3397					      SHIFT	1
      0  3397					      db	113
      1  3397		       71		      .byte.b	113
      0  3398					      db	1
      1  3398		       01		      .byte.b	1
      0  3399					      RTN
      0  3399					      db	25
      1  3399		       19		      .byte.b	25
    641  339a
    642  339a							;======================================================================
    643  339a				   EXPRLOGICAL
      0  339a					      OnGoto	BasicLogical,iLOGExit
      0  339a					      db	103
      1  339a		       67		      .byte.b	103
      0  339b					      dw	BasicLogical
      1  339b		       1c 31		      .word.w	BasicLogical
      0  339d					      dw	iLOGExit
      1  339d		       ad 33		      .word.w	iLOGExit
    645  339f				   ekAnd
      0  339f					      Call	EXPR
      0  339f					      db	28
      1  339f		       1c		      .byte.b	28
      0  33a0					      dw	EXPR
      1  33a0		       70 33		      .word.w	EXPR
      0  33a2					      LOGAND
      0  33a2					      db	74
      1  33a2		       4a		      .byte.b	74
      0  33a3					      RTN
      0  33a3					      db	25
      1  33a3		       19		      .byte.b	25
    649  33a4				   ekOr
      0  33a4					      Call	EXPR
      0  33a4					      db	28
      1  33a4		       1c		      .byte.b	28
      0  33a5					      dw	EXPR
      1  33a5		       70 33		      .word.w	EXPR
      0  33a7					      LOGOR
      0  33a7					      db	73
      1  33a7		       49		      .byte.b	73
      0  33a8					      RTN
      0  33a8					      db	25
      1  33a8		       19		      .byte.b	25
    653  33a9				   ekXor
      0  33a9					      Call	EXPR
      0  33a9					      db	28
      1  33a9		       1c		      .byte.b	28
      0  33aa					      dw	EXPR
      1  33aa		       70 33		      .word.w	EXPR
      0  33ac					      LOGXOR
      0  33ac					      db	75
      1  33ac		       4b		      .byte.b	75
    656  33ad				   iLOGExit
      0  33ad					      RTN
      0  33ad					      db	25
      1  33ad		       19		      .byte.b	25
    658  33ae							;========================================================================
    659  33ae							; Process relational operators
    660  33ae							;
    661  33ae				   EXPRCMP
      0  33ae					      Call	EXPR2	; get the left first expression
      0  33ae					      db	28
      1  33ae		       1c		      .byte.b	28
      0  33af					      dw	EXPR2
      1  33af		       b9 33		      .word.w	EXPR2
      0  33b1					      TSTRELOP	iRDone	; Exit level if no rel ops found
      0  33b1					      db	104
      1  33b1		       68		      .byte.b	104
      0  33b2					      db	(iRDone-*)-1
      1  33b2		       05		      .byte.b	(iRDone-*)-1
    664  33b3							;	  TSTB	     iR0,oEqual
    665  33b3							;	  LIT	     2		     ;=
    666  33b3							;	  IJMP	     iRFound
    667  33b3							;iR0:
    668  33b3							;	  TSTB	      iR1,oLessEqual
    669  33b3							;	  LIT	      3 	      ;<=
    670  33b3							;	  IJMP	     iRFound
    671  33b3							;iR1:
    672  33b3							;	  TSTB	     iR3,oNotEqual
    673  33b3							;	  LIT	     5		      ;<>
    674  33b3							;	      IJMP	  iRFound
    675  33b3							;iR3:
    676  33b3							;	  TSTB	     iR4,oLess
    677  33b3							;	  LIT	     1		     ;<
    678  33b3							;	      IJMP	  iRFound
    679  33b3							;iR4:
    680  33b3							;	  TST	     iR5,oGreaterEqual
    681  33b3							;	  LIT	     6		     ;>=
    682  33b3							;	      IJMP	  iRFound
    683  33b3							;iR5:
    684  33b3							;	  TSTB	     iRDone,oGreater
    685  33b3							;	  LIT	     4		     ;>
    686  33b3				   iRFound
      0  33b3					      Call	EXPR	; get the right side of the expression
      0  33b3					      db	28
      1  33b3		       1c		      .byte.b	28
      0  33b4					      dw	EXPR
      1  33b4		       70 33		      .word.w	EXPR
      0  33b6					      CMPR		; Push the value of the true false onto the stack
      0  33b6					      db	10
      1  33b6		       0a		      .byte.b	10
      0  33b7					      RTN
      0  33b7					      db	25
      1  33b7		       19		      .byte.b	25
    690  33b8
    691  33b8				   iRDone
      0  33b8					      RTN
      0  33b8					      db	25
      1  33b8		       19		      .byte.b	25
    693  33b9
    694  33b9				   EXPR2
      0  33b9					      TSTB	E0,oMinus	; Look for leading - to negate term
      0  33b9					      db	101
      1  33b9		       65		      .byte.b	101
      0  33ba					      db	(E0-*)-1
      1  33ba		       08		      .byte.b	(E0-*)-1
      0  33bb					      db	oMinus
      1  33bb		       eb		      .byte.b	oMinus
      0  33bc					      CALL	TERM	; Get value to negate FOR UNARY -.
      0  33bc					      db	28
      1  33bc		       1c		      .byte.b	28
      0  33bd					      dw	TERM
      1  33bd		       df 33		      .word.w	TERM
      0  33bf					      NEG		; Make value negated
      0  33bf					      db	16
      1  33bf		       10		      .byte.b	16
      0  33c0					      IJMP	E1	; We have Left term process operators next
      0  33c0					      db	29
      1  33c0		       1d		      .byte.b	29
      0  33c1					      dw	E1
      1  33c1		       c9 33		      .word.w	E1
    699  33c3				   E0
      0  33c3					      TSTB	E1A,oPlus	; Look for a leading + for value and disgard it if found
      0  33c3					      db	101
      1  33c3		       65		      .byte.b	101
      0  33c4					      db	(E1A-*)-1
      1  33c4		       01		      .byte.b	(E1A-*)-1
      0  33c5					      db	oPlus
      1  33c5		       ea		      .byte.b	oPlus
    701  33c6				   E1A
      0  33c6					      CALL	TERM	; Get the left term if it was not negated
      0  33c6					      db	28
      1  33c6		       1c		      .byte.b	28
      0  33c7					      dw	TERM
      1  33c7		       df 33		      .word.w	TERM
    703  33c9				   E1
      0  33c9					      TST	E2,oPlus	; Check if we are adding left term to something
      0  33c9					      db	32
      1  33c9		       20		      .byte.b	32
      0  33ca					      db	(E2-*)-1
      1  33ca		       09		      .byte.b	(E2-*)-1
      0  33cb					      db	oPlus,0
      1  33cb		       ea 00		      .byte.b	oPlus,0
      0  33cd					      CALL	TERM	; if adding then get the right side term
      0  33cd					      db	28
      1  33cd		       1c		      .byte.b	28
      0  33ce					      dw	TERM
      1  33ce		       df 33		      .word.w	TERM
      0  33d0					      ADD		; Add it to left term
      0  33d0					      db	14
      1  33d0		       0e		      .byte.b	14
      0  33d1					      IJMP	E1	; look for next + or -
      0  33d1					      db	29
      1  33d1		       1d		      .byte.b	29
      0  33d2					      dw	E1
      1  33d2		       c9 33		      .word.w	E1
    708  33d4				   E2
      0  33d4					      TSTB	E3,oMinus	; Check if we are subtractig something
      0  33d4					      db	101
      1  33d4		       65		      .byte.b	101
      0  33d5					      db	(E3-*)-1
      1  33d5		       08		      .byte.b	(E3-*)-1
      0  33d6					      db	oMinus
      1  33d6		       eb		      .byte.b	oMinus
      0  33d7					      CALL	TERM	; get right side to subtract Diffrence
      0  33d7					      db	28
      1  33d7		       1c		      .byte.b	28
      0  33d8					      dw	TERM
      1  33d8		       df 33		      .word.w	TERM
      0  33da					      SUB		; Subtract the value
      0  33da					      db	15
      1  33da		       0f		      .byte.b	15
      0  33db					      IJMP	E1	; Look for next + or -
      0  33db					      db	29
      1  33db		       1d		      .byte.b	29
      0  33dc					      dw	E1
      1  33dc		       c9 33		      .word.w	E1
    713  33de				   E3			; Finish processing the expression
      0  33de					      RTN		; We are finished processing the Expression
      0  33de					      db	25
      1  33de		       19		      .byte.b	25
    715  33df							;
    716  33df							; Get one of the terms of an expression
    717  33df							;
    718  33df				   TERM
      0  33df					      CALL	FACT	; Get a value
      0  33df					      db	28
      1  33df		       1c		      .byte.b	28
      0  33e0					      dw	FACT
      1  33e0		       04 34		      .word.w	FACT
    720  33e2				   T0			; Check for higher precidence operators
      0  33e2					      TSTB	T1,oMultiply	; Check for *
      0  33e2					      db	101
      1  33e2		       65		      .byte.b	101
      0  33e3					      db	(T1-*)-1
      1  33e3		       08		      .byte.b	(T1-*)-1
      0  33e4					      db	oMultiply
      1  33e4		       ee		      .byte.b	oMultiply
      0  33e5					      CALL	FACT	; Get right side of term PRODUCT FACTOR.
      0  33e5					      db	28
      1  33e5		       1c		      .byte.b	28
      0  33e6					      dw	FACT
      1  33e6		       04 34		      .word.w	FACT
      0  33e8					      MUL		; Multiply factors
      0  33e8					      db	17
      1  33e8		       11		      .byte.b	17
      0  33e9					      IJMP	T0	; Check for * or /
      0  33e9					      db	29
      1  33e9		       1d		      .byte.b	29
      0  33ea					      dw	T0
      1  33ea		       e2 33		      .word.w	T0
    725  33ec				   T1
      0  33ec					      TSTB	T2,oDivide	; Check for a division
      0  33ec					      db	101
      1  33ec		       65		      .byte.b	101
      0  33ed					      db	(T2-*)-1
      1  33ed		       08		      .byte.b	(T2-*)-1
      0  33ee					      db	oDivide
      1  33ee		       ec		      .byte.b	oDivide
      0  33ef					      CALL	FACT	; get right side QUOTIENT FACTOR.
      0  33ef					      db	28
      1  33ef		       1c		      .byte.b	28
      0  33f0					      dw	FACT
      1  33f0		       04 34		      .word.w	FACT
      0  33f2					      DIV		; do division
      0  33f2					      db	18
      1  33f2		       12		      .byte.b	18
      0  33f3					      IJMP	T0	; check for more * or /
      0  33f3					      db	29
      1  33f3		       1d		      .byte.b	29
      0  33f4					      dw	T0
      1  33f4		       e2 33		      .word.w	T0
    730  33f6				   T2
      0  33f6					      TSTB	T3,oModulo	; Check for a division
      0  33f6					      db	101
      1  33f6		       65		      .byte.b	101
      0  33f7					      db	(T3-*)-1
      1  33f7		       08		      .byte.b	(T3-*)-1
      0  33f8					      db	oModulo
      1  33f8		       ed		      .byte.b	oModulo
      0  33f9					      CALL	FACT	; get right side QUOTIENT FACTOR.
      0  33f9					      db	28
      1  33f9		       1c		      .byte.b	28
      0  33fa					      dw	FACT
      1  33fa		       04 34		      .word.w	FACT
      0  33fc					      MODULO		; do division for remainder
      0  33fc					      db	60
      1  33fc		       3c		      .byte.b	60
      0  33fd					      IJMP	T0	; check for more * or / or %
      0  33fd					      db	29
      1  33fd		       1d		      .byte.b	29
      0  33fe					      dw	T0
      1  33fe		       e2 33		      .word.w	T0
    735  3400				   T3			; Finish processing the Term
      0  3400					      RTN
      0  3400					      db	25
      1  3400		       19		      .byte.b	25
    737  3401
    738  3401				   UNKNOWNVEC
      0  3401					      IJMP	UNKNOWN
      0  3401					      db	29
      1  3401		       1d		      .byte.b	29
      0  3402					      dw	UNKNOWN
      1  3402		       6c 33		      .word.w	UNKNOWN
    740  3404
    741  3404							;=============================================================================================
    742  3404							; Factor an expression.  Always test for functions
    743  3404							; first or else they'll be confused for variables.
    744  3404							;
    745  3404				   FACT
      0  3404					      OnGoto	BasicFuncs,FactNumber
      0  3404					      db	103
      1  3404		       67		      .byte.b	103
      0  3405					      dw	BasicFuncs
      1  3405		       2a 31		      .word.w	BasicFuncs
      0  3407					      dw	FactNumber
      1  3407		       ed 34		      .word.w	FactNumber
    747  3409
    748  3409							;FACTCONTINUE:
    749  3409							;	  TSTB	     F1AA,kTrue
    750  3409				   ekTrue
      0  3409					      LIT	-1
      0  3409					      db	27
      1  3409		       1b		      .byte.b	27
      0  340a					      dw	-1
      1  340a		       ff ff		      .word.w	-1
      0  340c					      RTN
      0  340c					      db	25
      1  340c		       19		      .byte.b	25
    753  340d							;F1AA:
    754  340d							;	  TSTB	     F1AB,kFalse
    755  340d				   ekFalse
      0  340d					      LIT	0
      0  340d					      db	27
      1  340d		       1b		      .byte.b	27
      0  340e					      dw	0
      1  340e		       00 00		      .word.w	0
      0  3410					      RTN
      0  3410					      db	25
      1  3410		       19		      .byte.b	25
    758  3411							;==================================================================================
    759  3411							; Returns the amount of free SPACE
    760  3411				   ekFree
      0  3411					      TSTB	UNKNOWNVEC,oLeftBracket
      0  3411					      db	101
      1  3411		       65		      .byte.b	101
      0  3412					      db	(UNKNOWNVEC-*)-1
      1  3412		       ee		      .byte.b	(UNKNOWNVEC-*)-1
      0  3413					      db	oLeftBracket
      1  3413		       e0		      .byte.b	oLeftBracket
      0  3414					      TSTB	UNKNOWNVEC,oRightBracket
      0  3414					      db	101
      1  3414		       65		      .byte.b	101
      0  3415					      db	(UNKNOWNVEC-*)-1
      1  3415		       eb		      .byte.b	(UNKNOWNVEC-*)-1
      0  3416					      db	oRightBracket
      1  3416		       e1		      .byte.b	oRightBracket
      0  3417					      FREE
      0  3417					      db	36
      1  3417		       24		      .byte.b	36
      0  3418					      RTN
      0  3418					      db	25
      1  3418		       19		      .byte.b	25
    765  3419							;===================================================================================
    766  3419							; getch() read a character from the input device
    767  3419							;
    768  3419				   ekGetch
      0  3419					      TSTB	UNKNOWNVEC,oLeftBracket
      0  3419					      db	101
      1  3419		       65		      .byte.b	101
      0  341a					      db	(UNKNOWNVEC-*)-1
      1  341a		       e6		      .byte.b	(UNKNOWNVEC-*)-1
      0  341b					      db	oLeftBracket
      1  341b		       e0		      .byte.b	oLeftBracket
      0  341c					      TSTB	UNKNOWNVEC,oRightBracket
      0  341c					      db	101
      1  341c		       65		      .byte.b	101
      0  341d					      db	(UNKNOWNVEC-*)-1
      1  341d		       e3		      .byte.b	(UNKNOWNVEC-*)-1
      0  341e					      db	oRightBracket
      1  341e		       e1		      .byte.b	oRightBracket
      0  341f					      GETCHAR
      0  341f					      db	51
      1  341f		       33		      .byte.b	51
      0  3420					      RTN
      0  3420					      db	25
      1  3420		       19		      .byte.b	25
    773  3421							;
    774  3421							;====================================================================================
    775  3421							; addr(variable definition)
    776  3421							; Returns the address of a variable on top of the stack
    777  3421				   ekAddr
      0  3421					      TSTB	UNKNOWNVEC,oLeftBracket
      0  3421					      db	101
      1  3421		       65		      .byte.b	101
      0  3422					      db	(UNKNOWNVEC-*)-1
      1  3422		       de		      .byte.b	(UNKNOWNVEC-*)-1
      0  3423					      db	oLeftBracket
      1  3423		       e0		      .byte.b	oLeftBracket
      0  3424					      TSTV	ExpectedVariable
      0  3424					      db	33
      1  3424		       21		      .byte.b	33
      0  3425					      db	(ExpectedVariable-*)-1
      1  3425		       07		      .byte.b	(ExpectedVariable-*)-1
      0  3426					      CALL	FactVarPtrNoTst
      0  3426					      db	28
      1  3426		       1c		      .byte.b	28
      0  3427					      dw	FactVarPtrNoTst
      1  3427		       1d 35		      .word.w	FactVarPtrNoTst
      0  3429					      TSTB	UNKNOWNVEC,oRightBracket
      0  3429					      db	101
      1  3429		       65		      .byte.b	101
      0  342a					      db	(UNKNOWNVEC-*)-1
      1  342a		       d6		      .byte.b	(UNKNOWNVEC-*)-1
      0  342b					      db	oRightBracket
      1  342b		       e1		      .byte.b	oRightBracket
      0  342c					      RTN
      0  342c					      db	25
      1  342c		       19		      .byte.b	25
    783  342d
    784  342d				   ExpectedVariable
      0  342d					      ERRMSG	ERR_SYNTAX	;Expected Variable
      0  342d					      db	13
      1  342d		       0d		      .byte.b	13
      0  342e					      dw	ERR_SYNTAX
      1  342e		       05 00		      .word.w	ERR_SYNTAX
    786  3430							;
    787  3430							;================================================================
    788  3430							; Compare a block of memory
    789  3430							; CmpMem(Length, Source 1, Source 2)
    790  3430							; returns on the stack 0 equal, 1 s1>s2, -1 s1<s2
    791  3430				   ekCmpMem
      0  3430					      TSTB	UNKNOWNVEC,oLeftBracket	; opening bracket
      0  3430					      db	101
      1  3430		       65		      .byte.b	101
      0  3431					      db	(UNKNOWNVEC-*)-1
      1  3431		       cf		      .byte.b	(UNKNOWNVEC-*)-1
      0  3432					      db	oLeftBracket
      1  3432		       e0		      .byte.b	oLeftBracket
      0  3433					      CALL	EXPR	; Length
      0  3433					      db	28
      1  3433		       1c		      .byte.b	28
      0  3434					      dw	EXPR
      1  3434		       70 33		      .word.w	EXPR
      0  3436					      TSTB	UNKNOWNVEC,oComma	; Must have a comma
      0  3436					      db	101
      1  3436		       65		      .byte.b	101
      0  3437					      db	(UNKNOWNVEC-*)-1
      1  3437		       c9		      .byte.b	(UNKNOWNVEC-*)-1
      0  3438					      db	oComma
      1  3438		       e2		      .byte.b	oComma
      0  3439					      CALL	EXPR	; Source 1
      0  3439					      db	28
      1  3439		       1c		      .byte.b	28
      0  343a					      dw	EXPR
      1  343a		       70 33		      .word.w	EXPR
      0  343c					      TSTB	UNKNOWNVEC,oComma	; Must have a comma
      0  343c					      db	101
      1  343c		       65		      .byte.b	101
      0  343d					      db	(UNKNOWNVEC-*)-1
      1  343d		       c3		      .byte.b	(UNKNOWNVEC-*)-1
      0  343e					      db	oComma
      1  343e		       e2		      .byte.b	oComma
      0  343f					      CALL	EXPR	; Source 2
      0  343f					      db	28
      1  343f		       1c		      .byte.b	28
      0  3440					      dw	EXPR
      1  3440		       70 33		      .word.w	EXPR
      0  3442					      TSTB	UNKNOWNVEC,oRightBracket	; closing bracket
      0  3442					      db	101
      1  3442		       65		      .byte.b	101
      0  3443					      db	(UNKNOWNVEC-*)-1
      1  3443		       bd		      .byte.b	(UNKNOWNVEC-*)-1
      0  3444					      db	oRightBracket
      1  3444		       e1		      .byte.b	oRightBracket
      0  3445					      CMPMEM		; Compare the memory
      0  3445					      db	112
      1  3445		       70		      .byte.b	112
      0  3446					      RTN
      0  3446					      db	25
      1  3446		       19		      .byte.b	25
    801  3447							;====================================================================================
    802  3447							; peek(mem address) return the value of a byte in memory
    803  3447							; @[offset] return a word value from offset -- see tstv
    804  3447							;
    805  3447							;F1A2:
    806  3447							;	  TSTB	      F2AZ,kPeek		      ;Return a value from memory
    807  3447				   ekPeek
      0  3447					      TSTB	UNKNOWNVEC,oLeftBracket
      0  3447					      db	101
      1  3447		       65		      .byte.b	101
      0  3448					      db	(UNKNOWNVEC-*)-1
      1  3448		       b8		      .byte.b	(UNKNOWNVEC-*)-1
      0  3449					      db	oLeftBracket
      1  3449		       e0		      .byte.b	oLeftBracket
      0  344a					      CALL	EXPR	;Get the address to write to
      0  344a					      db	28
      1  344a		       1c		      .byte.b	28
      0  344b					      dw	EXPR
      1  344b		       70 33		      .word.w	EXPR
      0  344d					      TSTB	UNKNOWNVEC,oRightBracket
      0  344d					      db	101
      1  344d		       65		      .byte.b	101
      0  344e					      db	(UNKNOWNVEC-*)-1
      1  344e		       b2		      .byte.b	(UNKNOWNVEC-*)-1
      0  344f					      db	oRightBracket
      1  344f		       e1		      .byte.b	oRightBracket
      0  3450					      PEEKMEM
      0  3450					      db	48
      1  3450		       30		      .byte.b	48
      0  3451					      RTN
      0  3451					      db	25
      1  3451		       19		      .byte.b	25
    813  3452							;=======================================================================================
    814  3452							; TASK(line-num expr,[Parm1,....]) start a task with or without Parameters
    815  3452							;
    816  3452							;F2AZ:
    817  3452							;	  TSTB	      F2AZ1,kTask		      ;Check if we are setting a task start
    818  3452				   ekTask
      0  3452					      TSTBRANCH	ekTaskCompiled
      0  3452					      db	106
      1  3452		       6a		      .byte.b	106
      0  3453					      db	(ekTaskCompiled-*)-1
      1  3453		       0c		      .byte.b	(ekTaskCompiled-*)-1
      0  3454					      TSTB	UNKNOWNVEC,oLeftBracket
      0  3454					      db	101
      1  3454		       65		      .byte.b	101
      0  3455					      db	(UNKNOWNVEC-*)-1
      1  3455		       ab		      .byte.b	(UNKNOWNVEC-*)-1
      0  3456					      db	oLeftBracket
      1  3456		       e0		      .byte.b	oLeftBracket
      0  3457					      CALL	EXPR	;Get the LABEL .. line NUMBER
      0  3457					      db	28
      1  3457		       1c		      .byte.b	28
      0  3458					      dw	EXPR
      1  3458		       70 33		      .word.w	EXPR
      0  345a					      lit	0
      0  345a					      db	27
      1  345a		       1b		      .byte.b	27
      0  345b					      dw	0
      1  345b		       00 00		      .word.w	0
      0  345d					      iJMP	ekTaskLinenum
      0  345d					      db	29
      1  345d		       1d		      .byte.b	29
      0  345e					      dw	ekTaskLinenum
      1  345e		       63 34		      .word.w	ekTaskLinenum
    824  3460
    825  3460				   ekTaskCompiled
      0  3460					      lit	1
      0  3460					      db	27
      1  3460		       1b		      .byte.b	27
      0  3461					      dw	1
      1  3461		       01 00		      .word.w	1
    827  3463
    828  3463				   ekTaskLinenum
      0  3463					      TASKCREATE		;Allocate the task and initialize it, Suspended
      0  3463					      db	61
      1  3463		       3d		      .byte.b	61
      0  3464					      TSTB	F2AZNoParms,oComma	;Parameters to be passed to task
      0  3464					      db	101
      1  3464		       65		      .byte.b	101
      0  3465					      db	(F2AZNoParms-*)-1
      1  3465		       0e		      .byte.b	(F2AZNoParms-*)-1
      0  3466					      db	oComma
      1  3466		       e2		      .byte.b	oComma
      0  3467					      SAVEMATHSTACK		;Push The mathstack
      0  3467					      db	86
      1  3467		       56		      .byte.b	86
      0  3468					      TASKGETMATHSTACK		;Make the New Task Stack The current stack
      0  3468					      db	89
      1  3468		       59		      .byte.b	89
    833  3469
    834  3469				   F2AZLOOP
      0  3469					      CALL	EXPR
      0  3469					      db	28
      1  3469		       1c		      .byte.b	28
      0  346a					      dw	EXPR
      1  346a		       70 33		      .word.w	EXPR
      0  346c					      TSTB	F2AZEndParm,oComma	;Parameters to be passed tp task
      0  346c					      db	101
      1  346c		       65		      .byte.b	101
      0  346d					      db	(F2AZEndParm-*)-1
      1  346d		       04		      .byte.b	(F2AZEndParm-*)-1
      0  346e					      db	oComma
      1  346e		       e2		      .byte.b	oComma
      0  346f					      IJMP	F2AZLOOP	;check for more
      0  346f					      db	29
      1  346f		       1d		      .byte.b	29
      0  3470					      dw	F2AZLOOP
      1  3470		       69 34		      .word.w	F2AZLOOP
    838  3472
    839  3472				   F2AZEndParm
      0  3472					      RESTOREMATHSTACK		;Back to normal stack
      0  3472					      db	87
      1  3472		       57		      .byte.b	87
      0  3473					      TASKPUTMATHPTR		;Update the tasks stack pointer with parameter count
      0  3473					      db	92
      1  3473		       5c		      .byte.b	92
    842  3474
    843  3474				   F2AZNoParms
      0  3474					      TSTB	UNKNOWNVEC,oRightBracket	;must be )
      0  3474					      db	101
      1  3474		       65		      .byte.b	101
      0  3475					      db	(UNKNOWNVEC-*)-1
      1  3475		       8b		      .byte.b	(UNKNOWNVEC-*)-1
      0  3476					      db	oRightBracket
      1  3476		       e1		      .byte.b	oRightBracket
    845  3477
      0  3477					      TASKENABLE		;Enable the task to execute
      0  3477					      db	90
      1  3477		       5a		      .byte.b	90
    847  3478
      0  3478					      RTN		;Returns the Task number
      0  3478					      db	25
      1  3478		       19		      .byte.b	25
    849  3479							;=========================================================================================
    850  3479							; Check for IPC interproccess instructions
    851  3479							;   IPCS  - Send a message
    852  3479							;
    853  3479							;F2AZ1:
    854  3479							;	  TSTB	      F2AZa,kIpcs		      ;Test if one of the IPC functions
    855  3479				   ekIpcs
      0  3479					      TSTB	UNKNOWNVEC,oLeftBracket	;IPCS - send a message
      0  3479					      db	101
      1  3479		       65		      .byte.b	101
      0  347a					      db	(UNKNOWNVEC-*)-1
      1  347a		       86		      .byte.b	(UNKNOWNVEC-*)-1
      0  347b					      db	oLeftBracket
      1  347b		       e0		      .byte.b	oLeftBracket
      0  347c					      CALL	EXPR	;Get the message value
      0  347c					      db	28
      1  347c		       1c		      .byte.b	28
      0  347d					      dw	EXPR
      1  347d		       70 33		      .word.w	EXPR
      0  347f					      TSTB	UNKNOWNVEC,oComma
      0  347f					      db	101
      1  347f		       65		      .byte.b	101
      0  3480					      db	(UNKNOWNVEC-*)-1
      1  3480		       80		      .byte.b	(UNKNOWNVEC-*)-1
      0  3481					      db	oComma
      1  3481		       e2		      .byte.b	oComma
      0  3482					      CALL	EXPR	;Get pid of task to send to
      0  3482					      db	28
      1  3482		       1c		      .byte.b	28
      0  3483					      dw	EXPR
      1  3483		       70 33		      .word.w	EXPR
      0  3485					      TSTB	UNKNOWNVEC,oRightBracket
      0  3485					      db	101
      1  3485		       65		      .byte.b	101
      0  3486					      db	(UNKNOWNVEC-*)-1
      1  3486		       7a		      .byte.b	(UNKNOWNVEC-*)-1
      0  3487					      db	oRightBracket
      1  3487		       e1		      .byte.b	oRightBracket
      0  3488					      IPCSEND		;Send msg and clear pid msg pending
      0  3488					      db	80
      1  3488		       50		      .byte.b	80
      0  3489					      RTN
      0  3489					      db	25
      1  3489		       19		      .byte.b	25
    863  348a							;================================================================================
    864  348a							; IPCR() --- recieve a message, IPCR(VARIABLE) -- receive msg and return pid in var
    865  348a							;
    866  348a				   ekIpcr
      0  348a					      TSTB	UNKNOWNVEC,oLeftBracket	;IPCS - send a message
      0  348a					      db	101
      1  348a		       65		      .byte.b	101
      0  348b					      db	(UNKNOWNVEC-*)-1
      1  348b		       75		      .byte.b	(UNKNOWNVEC-*)-1
      0  348c					      db	oLeftBracket
      1  348c		       e0		      .byte.b	oLeftBracket
      0  348d					      TSTB	F2AZa1,oRightBracket
      0  348d					      db	101
      1  348d		       65		      .byte.b	101
      0  348e					      db	(F2AZa1-*)-1
      1  348e		       07		      .byte.b	(F2AZa1-*)-1
      0  348f					      db	oRightBracket
      1  348f		       e1		      .byte.b	oRightBracket
      0  3490					      LIT	0	;We dont want the pid returned to us
      0  3490					      db	27
      1  3490		       1b		      .byte.b	27
      0  3491					      dw	0
      1  3491		       00 00		      .word.w	0
      0  3493					      IJMP	ekIpcrComplete
      0  3493					      db	29
      1  3493		       1d		      .byte.b	29
      0  3494					      dw	ekIpcrComplete
      1  3494		       9b 34		      .word.w	ekIpcrComplete
    871  3496				   F2AZa1
      0  3496					      TSTV	UNKNOWNVEC	;must be a variable to return pid of message to
      0  3496					      db	33
      1  3496		       21		      .byte.b	33
      0  3497					      db	(UNKNOWNVEC-*)-1
      1  3497		       69		      .byte.b	(UNKNOWNVEC-*)-1
      0  3498					      TSTB	UNKNOWNVEC,oRightBracket
      0  3498					      db	101
      1  3498		       65		      .byte.b	101
      0  3499					      db	(UNKNOWNVEC-*)-1
      1  3499		       67		      .byte.b	(UNKNOWNVEC-*)-1
      0  349a					      db	oRightBracket
      1  349a		       e1		      .byte.b	oRightBracket
    874  349b
    875  349b				   ekIpcrComplete
      0  349b					      IPCIO		;Set the io bit and exit task till message
      0  349b					      db	83
      1  349b		       53		      .byte.b	83
      0  349c					      IPCRECEIVE		;Get the message
      0  349c					      db	81
      1  349c		       51		      .byte.b	81
      0  349d					      RTN
      0  349d					      db	25
      1  349d		       19		      .byte.b	25
    879  349e							;===============================================================================
    880  349e							; IPCC ---- check if a message is available
    881  349e				   ekIpcc
      0  349e					      TSTB	UNKNOWNVEC,oLeftBracket
      0  349e					      db	101
      1  349e		       65		      .byte.b	101
      0  349f					      db	(UNKNOWNVEC-*)-1
      1  349f		       61		      .byte.b	(UNKNOWNVEC-*)-1
      0  34a0					      db	oLeftBracket
      1  34a0		       e0		      .byte.b	oLeftBracket
      0  34a1					      TSTB	UNKNOWNVEC,oRightBracket
      0  34a1					      db	101
      1  34a1		       65		      .byte.b	101
      0  34a2					      db	(UNKNOWNVEC-*)-1
      1  34a2		       5e		      .byte.b	(UNKNOWNVEC-*)-1
      0  34a3					      db	oRightBracket
      1  34a3		       e1		      .byte.b	oRightBracket
      0  34a4					      IPCCHECK
      0  34a4					      db	82
      1  34a4		       52		      .byte.b	82
      0  34a5					      RTN
      0  34a5					      db	25
      1  34a5		       19		      .byte.b	25
    886  34a6
    887  34a6				   UNKNOWNID
      0  34a6					      IJMP	UNKNOWN
      0  34a6					      db	29
      1  34a6		       1d		      .byte.b	29
      0  34a7					      dw	UNKNOWN
      1  34a7		       6c 33		      .word.w	UNKNOWN
    889  34a9							;============================================================
    890  34a9							; RND() is supposed to have an argument but if none
    891  34a9							; was provided, just assume a large value.
    892  34a9							;
    893  34a9				   ekRnd
      0  34a9					      TSTB	UNKNOWNVEC,oLeftBracket
      0  34a9					      db	101
      1  34a9		       65		      .byte.b	101
      0  34aa					      db	(UNKNOWNVEC-*)-1
      1  34aa		       56		      .byte.b	(UNKNOWNVEC-*)-1
      0  34ab					      db	oLeftBracket
      1  34ab		       e0		      .byte.b	oLeftBracket
      0  34ac					      TSTB	F2A1,oRightBracket
      0  34ac					      db	101
      1  34ac		       65		      .byte.b	101
      0  34ad					      db	(F2A1-*)-1
      1  34ad		       06		      .byte.b	(F2A1-*)-1
      0  34ae					      db	oRightBracket
      1  34ae		       e1		      .byte.b	oRightBracket
      0  34af					      LIT	32766
      0  34af					      db	27
      1  34af		       1b		      .byte.b	27
      0  34b0					      dw	32766
      1  34b0		       fe 7f		      .word.w	32766
      0  34b2					      RANDOM
      0  34b2					      db	37
      1  34b2		       25		      .byte.b	37
      0  34b3					      RTN
      0  34b3					      db	25
      1  34b3		       19		      .byte.b	25
    899  34b4
    900  34b4				   F2A1
      0  34b4					      CALL	EXPR	;GET RANGE
      0  34b4					      db	28
      1  34b4		       1c		      .byte.b	28
      0  34b5					      dw	EXPR
      1  34b5		       70 33		      .word.w	EXPR
      0  34b7					      TSTB	UNKNOWNVEC,oRightBracket
      0  34b7					      db	101
      1  34b7		       65		      .byte.b	101
      0  34b8					      db	(UNKNOWNVEC-*)-1
      1  34b8		       48		      .byte.b	(UNKNOWNVEC-*)-1
      0  34b9					      db	oRightBracket
      1  34b9		       e1		      .byte.b	oRightBracket
      0  34ba					      RANDOM
      0  34ba					      db	37
      1  34ba		       25		      .byte.b	37
      0  34bb					      RTN
      0  34bb					      db	25
      1  34bb		       19		      .byte.b	25
    905  34bc							;==========================================================
    906  34bc							;	Return absolute value of expresion
    907  34bc							;
    908  34bc				   ekAbs
      0  34bc					      TSTB	UNKNOWNVEC,oLeftBracket
      0  34bc					      db	101
      1  34bc		       65		      .byte.b	101
      0  34bd					      db	(UNKNOWNVEC-*)-1
      1  34bd		       43		      .byte.b	(UNKNOWNVEC-*)-1
      0  34be					      db	oLeftBracket
      1  34be		       e0		      .byte.b	oLeftBracket
      0  34bf					      CALL	EXPR	;get value
      0  34bf					      db	28
      1  34bf		       1c		      .byte.b	28
      0  34c0					      dw	EXPR
      1  34c0		       70 33		      .word.w	EXPR
      0  34c2					      TSTB	UNKNOWNVEC,oRightBracket
      0  34c2					      db	101
      1  34c2		       65		      .byte.b	101
      0  34c3					      db	(UNKNOWNVEC-*)-1
      1  34c3		       3d		      .byte.b	(UNKNOWNVEC-*)-1
      0  34c4					      db	oRightBracket
      1  34c4		       e1		      .byte.b	oRightBracket
      0  34c5					      ABS
      0  34c5					      db	38
      1  34c5		       26		      .byte.b	38
      0  34c6					      RTN
      0  34c6					      db	25
      1  34c6		       19		      .byte.b	25
    914  34c7							;============================================================
    915  34c7							;     Return the the status of a task, provide the PID
    916  34c7							;
    917  34c7				   ekStat
      0  34c7					      TSTB	UNKNOWNVEC,oLeftBracket
      0  34c7					      db	101
      1  34c7		       65		      .byte.b	101
      0  34c8					      db	(UNKNOWNVEC-*)-1
      1  34c8		       38		      .byte.b	(UNKNOWNVEC-*)-1
      0  34c9					      db	oLeftBracket
      1  34c9		       e0		      .byte.b	oLeftBracket
      0  34ca					      Call	EXPR
      0  34ca					      db	28
      1  34ca		       1c		      .byte.b	28
      0  34cb					      dw	EXPR
      1  34cb		       70 33		      .word.w	EXPR
      0  34cd					      TSTB	UNKNOWNVEC,oRightBracket
      0  34cd					      db	101
      1  34cd		       65		      .byte.b	101
      0  34ce					      db	(UNKNOWNVEC-*)-1
      1  34ce		       32		      .byte.b	(UNKNOWNVEC-*)-1
      0  34cf					      db	oRightBracket
      1  34cf		       e1		      .byte.b	oRightBracket
      0  34d0					      TASKSTAT
      0  34d0					      db	66
      1  34d0		       42		      .byte.b	66
      0  34d1					      RTN
      0  34d1					      db	25
      1  34d1		       19		      .byte.b	25
    923  34d2							;==============================================================
    924  34d2							; Return the current tasks pid
    925  34d2							;
    926  34d2				   ekPid
      0  34d2					      TASKPID
      0  34d2					      db	77
      1  34d2		       4d		      .byte.b	77
      0  34d3					      RTN
      0  34d3					      db	25
      1  34d3		       19		      .byte.b	25
    929  34d4							;===========================================================================
    930  34d4							; Call a machine function, provide the address to call and optionally
    931  34d4							; the value to be passed in reg A
    932  34d4				   ekCall
      0  34d4					      TSTB	UNKNOWNVEC,oLeftBracket
      0  34d4					      db	101
      1  34d4		       65		      .byte.b	101
      0  34d5					      db	(UNKNOWNVEC-*)-1
      1  34d5		       2b		      .byte.b	(UNKNOWNVEC-*)-1
      0  34d6					      db	oLeftBracket
      1  34d6		       e0		      .byte.b	oLeftBracket
      0  34d7					      CALL	EXPR
      0  34d7					      db	28
      1  34d7		       1c		      .byte.b	28
      0  34d8					      dw	EXPR
      1  34d8		       70 33		      .word.w	EXPR
      0  34da					      TSTB	F2B2A,oComma
      0  34da					      db	101
      1  34da		       65		      .byte.b	101
      0  34db					      db	(F2B2A-*)-1
      1  34db		       09		      .byte.b	(F2B2A-*)-1
      0  34dc					      db	oComma
      1  34dc		       e2		      .byte.b	oComma
      0  34dd					      CALL	EXPR
      0  34dd					      db	28
      1  34dd		       1c		      .byte.b	28
      0  34de					      dw	EXPR
      1  34de		       70 33		      .word.w	EXPR
      0  34e0					      TSTB	UNKNOWNVEC,oRightBracket
      0  34e0					      db	101
      1  34e0		       65		      .byte.b	101
      0  34e1					      db	(UNKNOWNVEC-*)-1
      1  34e1		       1f		      .byte.b	(UNKNOWNVEC-*)-1
      0  34e2					      db	oRightBracket
      1  34e2		       e1		      .byte.b	oRightBracket
      0  34e3					      CALLFUNC
      0  34e3					      db	53
      1  34e3		       35		      .byte.b	53
      0  34e4					      RTN
      0  34e4					      db	25
      1  34e4		       19		      .byte.b	25
    940  34e5							; Run the gosub within this function
    941  34e5				   F2B2A
      0  34e5					      TSTB	UNKNOWNID,oRightBracket
      0  34e5					      db	101
      1  34e5		       65		      .byte.b	101
      0  34e6					      db	(UNKNOWNID-*)-1
      1  34e6		       bf		      .byte.b	(UNKNOWNID-*)-1
      0  34e7					      db	oRightBracket
      1  34e7		       e1		      .byte.b	oRightBracket
      0  34e8					      LIT	0	; No parameter passed so just load zero to A
      0  34e8					      db	27
      1  34e8		       1b		      .byte.b	27
      0  34e9					      dw	0
      1  34e9		       00 00		      .word.w	0
      0  34eb					      CALLFUNC
      0  34eb					      db	53
      1  34eb		       35		      .byte.b	53
      0  34ec					      RTN
      0  34ec					      db	25
      1  34ec		       19		      .byte.b	25
    946  34ed
    947  34ed
    948  34ed							;=================================================================================
    949  34ed							;Check for a number !
    950  34ed							;
    951  34ed				   FactNumber
      0  34ed					      TSTN	FactVariable	;NUMBER, GET ITS VALUE.
      0  34ed					      db	35
      1  34ed		       23		      .byte.b	35
      0  34ee					      db	(FactVariable-*)-1
      1  34ee		       0f		      .byte.b	(FactVariable-*)-1
      0  34ef					      RTN
      0  34ef					      db	25
      1  34ef		       19		      .byte.b	25
    954  34f0
    955  34f0				   FactWithBracket
      0  34f0					      TSTB	F2RTN,oLeftBracket	;PARENTHESIZED EXPR.
      0  34f0					      db	101
      1  34f0		       65		      .byte.b	101
      0  34f1					      db	(F2RTN-*)-1
      1  34f1		       08		      .byte.b	(F2RTN-*)-1
      0  34f2					      db	oLeftBracket
      1  34f2		       e0		      .byte.b	oLeftBracket
      0  34f3					      CALL	EXPR
      0  34f3					      db	28
      1  34f3		       1c		      .byte.b	28
      0  34f4					      dw	EXPR
      1  34f4		       70 33		      .word.w	EXPR
      0  34f6					      TST	F2,oRightBracket
      0  34f6					      db	32
      1  34f6		       20		      .byte.b	32
      0  34f7					      db	(F2-*)-1
      1  34f7		       03		      .byte.b	(F2-*)-1
      0  34f8					      db	oRightBracket,0
      1  34f8		       e1 00		      .byte.b	oRightBracket,0
    959  34fa				   F2RTN
      0  34fa					      RTN
      0  34fa					      db	25
      1  34fa		       19		      .byte.b	25
    961  34fb
    962  34fb				   F2
      0  34fb					      ERRMSG	ERR_SYNTAX	;ERROR.
      0  34fb					      db	13
      1  34fb		       0d		      .byte.b	13
      0  34fc					      dw	ERR_SYNTAX
      1  34fc		       05 00		      .word.w	ERR_SYNTAX
    964  34fe							;
    965  34fe							;=============================================================================
    966  34fe							; See if this is just a simple variable
    967  34fe							;  Allow a subscript for any variable
    968  34fe							;
    969  34fe				   FactVariable
    970  34fe
      0  34fe					      SETR2	tInteger
      0  34fe					      db	94
      1  34fe		       5e		      .byte.b	94
      0  34ff					      db	tInteger
      1  34ff		       a4		      .byte.b	tInteger
      0  3500					      TSTV	FactWithBracket
      0  3500					      db	33
      1  3500		       21		      .byte.b	33
      0  3501					      db	(FactWithBracket-*)-1
      1  3501		       ee		      .byte.b	(FactWithBracket-*)-1
      0  3502					      TSTBYTE	FactFNParm,R2,GOSUB_RTN_VALUE
      0  3502					      db	97
      1  3502		       61		      .byte.b	97
      0  3503					      db	(FactFNParm-*)-1
      1  3503		       0a		      .byte.b	(FactFNParm-*)-1
      0  3504					      dw	R2
      1  3504		       58 00		      .word.w	R2
      0  3506					      db	GOSUB_RTN_VALUE
      1  3506		       81		      .byte.b	GOSUB_RTN_VALUE
      0  3507					      CALL	FactVarPTR
      0  3507					      db	28
      1  3507		       1c		      .byte.b	28
      0  3508					      dw	FactVarPTR
      1  3508		       1d 35		      .word.w	FactVarPTR
      0  350a					      CALL	FactVariableValue
      0  350a					      db	28
      1  350a		       1c		      .byte.b	28
      0  350b					      dw	FactVariableValue
      1  350b		       46 35		      .word.w	FactVariableValue
      0  350d					      RTN
      0  350d					      db	25
      1  350d		       19		      .byte.b	25
    977  350e
    978  350e				   FactFNParm
      0  350e					      TSTB	FactExpectedOpeningBracket,oLeftSQBracket
      0  350e					      db	101
      1  350e		       65		      .byte.b	101
      0  350f					      db	(FactExpectedOpeningBracket-*)-1
      1  350f		       3b		      .byte.b	(FactExpectedOpeningBracket-*)-1
      0  3510					      db	oLeftSQBracket
      1  3510		       e4		      .byte.b	oLeftSQBracket
      0  3511					      CALL	EXPR
      0  3511					      db	28
      1  3511		       1c		      .byte.b	28
      0  3512					      dw	EXPR
      1  3512		       70 33		      .word.w	EXPR
      0  3514					      TSTB	FactMissingRightBracket,oRightSQBracket
      0  3514					      db	101
      1  3514		       65		      .byte.b	101
      0  3515					      db	(FactMissingRightBracket-*)-1
      1  3515		       32		      .byte.b	(FactMissingRightBracket-*)-1
      0  3516					      db	oRightSQBracket
      1  3516		       e5		      .byte.b	oRightSQBracket
      0  3517					      SUBSCRIPT	GOSUB_RTN_VALUE
      0  3517					      db	64
      1  3517		       40		      .byte.b	64
      0  3518					      db	GOSUB_RTN_VALUE
      1  3518		       81		      .byte.b	GOSUB_RTN_VALUE
      0  3519					      SETR2	tInteger
      0  3519					      db	94
      1  3519		       5e		      .byte.b	94
      0  351a					      db	tInteger
      1  351a		       a4		      .byte.b	tInteger
      0  351b					      IND
      0  351b					      db	20
      1  351b		       14		      .byte.b	20
      0  351c					      RTN
      0  351c					      db	25
      1  351c		       19		      .byte.b	25
    986  351d
    987  351d				   FactVarPTR
    988  351d				   FactVarPtrNoTst
      0  351d					      TSTB	F2CLocalTask,oBang
      0  351d					      db	101
      1  351d		       65		      .byte.b	101
      0  351e					      db	(F2CLocalTask-*)-1
      1  351e		       04		      .byte.b	(F2CLocalTask-*)-1
      0  351f					      db	oBang
      1  351f		       e8		      .byte.b	oBang
      0  3520					      IND		; we just got a pid
      0  3520					      db	20
      1  3520		       14		      .byte.b	20
      0  3521					      TSTVT	UNKNOWNID	; if it is not another variabe then error, Call test var. task
      0  3521					      db	93
      1  3521		       5d		      .byte.b	93
      0  3522					      db	(UNKNOWNID-*)-1
      1  3522		       83		      .byte.b	(UNKNOWNID-*)-1
    992  3523
    993  3523				   F2CLocalTask
      0  3523					      SETR2	tInteger	; Sets the default type to integer
      0  3523					      db	94
      1  3523		       5e		      .byte.b	94
      0  3524					      db	tInteger
      1  3524		       a4		      .byte.b	tInteger
      0  3525					      TSTB	F2INTEGER,oDollar	; Check if this will be a byte array @$[index] or a..z$[index] use a byte array
      0  3525					      db	101
      1  3525		       65		      .byte.b	101
      0  3526					      db	(F2INTEGER-*)-1
      1  3526		       11		      .byte.b	(F2INTEGER-*)-1
      0  3527					      db	oDollar
      1  3527		       e7		      .byte.b	oDollar
      0  3528					      SETR2	tByte
      0  3528					      db	94
      1  3528		       5e		      .byte.b	94
      0  3529					      db	tByte
      1  3529		       a2		      .byte.b	tByte
      0  352a					      TSTB	F2PTRLOADED,oLeftSQBracket
      0  352a					      db	101
      1  352a		       65		      .byte.b	101
      0  352b					      db	(F2PTRLOADED-*)-1
      1  352b		       19		      .byte.b	(F2PTRLOADED-*)-1
      0  352c					      db	oLeftSQBracket
      1  352c		       e4		      .byte.b	oLeftSQBracket
      0  352d					      CALL	EXPR
      0  352d					      db	28
      1  352d		       1c		      .byte.b	28
      0  352e					      dw	EXPR
      1  352e		       70 33		      .word.w	EXPR
      0  3530					      TSTB	FactMissingRightBracket,oRightSQBracket
      0  3530					      db	101
      1  3530		       65		      .byte.b	101
      0  3531					      db	(FactMissingRightBracket-*)-1
      1  3531		       16		      .byte.b	(FactMissingRightBracket-*)-1
      0  3532					      db	oRightSQBracket
      1  3532		       e5		      .byte.b	oRightSQBracket
      0  3533					      SUBSCRIPT	tByte	; Byte type array
      0  3533					      db	64
      1  3533		       40		      .byte.b	64
      0  3534					      db	tByte
      1  3534		       a2		      .byte.b	tByte
      0  3535					      SETR2	tByte	; Set byte data type
      0  3535					      db	94
      1  3535		       5e		      .byte.b	94
      0  3536					      db	tByte
      1  3536		       a2		      .byte.b	tByte
      0  3537					      RTN
      0  3537					      db	25
      1  3537		       19		      .byte.b	25
   1003  3538
   1004  3538				   F2INTEGER
      0  3538					      TSTB	F2PTRLOADED,oLeftSQBracket
      0  3538					      db	101
      1  3538		       65		      .byte.b	101
      0  3539					      db	(F2PTRLOADED-*)-1
      1  3539		       0b		      .byte.b	(F2PTRLOADED-*)-1
      0  353a					      db	oLeftSQBracket
      1  353a		       e4		      .byte.b	oLeftSQBracket
      0  353b					      CALL	EXPR
      0  353b					      db	28
      1  353b		       1c		      .byte.b	28
      0  353c					      dw	EXPR
      1  353c		       70 33		      .word.w	EXPR
      0  353e					      TSTB	FactMissingRightBracket,oRightSQBracket
      0  353e					      db	101
      1  353e		       65		      .byte.b	101
      0  353f					      db	(FactMissingRightBracket-*)-1
      1  353f		       08		      .byte.b	(FactMissingRightBracket-*)-1
      0  3540					      db	oRightSQBracket
      1  3540		       e5		      .byte.b	oRightSQBracket
      0  3541					      SUBSCRIPT	tInteger	; Integer type array
      0  3541					      db	64
      1  3541		       40		      .byte.b	64
      0  3542					      db	tInteger
      1  3542		       a4		      .byte.b	tInteger
      0  3543					      SETR2	tInteger	; Set word datatype
      0  3543					      db	94
      1  3543		       5e		      .byte.b	94
      0  3544					      db	tInteger
      1  3544		       a4		      .byte.b	tInteger
   1010  3545				   F2PTRLOADED
      0  3545					      RTN
      0  3545					      db	25
      1  3545		       19		      .byte.b	25
   1012  3546
   1013  3546				   FactVariableValue
      0  3546					      IND		; YES, GET THE VALUE as word
      0  3546					      db	20
      1  3546		       14		      .byte.b	20
      0  3547					      RTN
      0  3547					      db	25
      1  3547		       19		      .byte.b	25
   1016  3548
   1017  3548				   FactMissingRightBracket
      0  3548					      IJMP	ReturnExpectBracket
      0  3548					      db	29
      1  3548		       1d		      .byte.b	29
      0  3549					      dw	ReturnExpectBracket
      1  3549		       7c 35		      .word.w	ReturnExpectBracket
   1019  354b				   FactExpectedOpeningBracket
      0  354b					      ERRMSG	ERR_EXPECTED_OPENING_BRACKET
      0  354b					      db	13
      1  354b		       0d		      .byte.b	13
      0  354c					      dw	ERR_EXPECTED_OPENING_BRACKET
      1  354c		       1a 00		      .word.w	ERR_EXPECTED_OPENING_BRACKET
   1021  354e							;===============================================================================================================================
   1022  354e							;========================= Gosub and function interface ========================================================================
   1023  354e							; Process gosub 1000(Parm1, ...) no return value
   1024  354e							;
   1025  354e				   ekGosub
      0  354e					      CALL	GOSUBSTATEMENT	; Do the gosub
      0  354e					      db	28
      1  354e		       1c		      .byte.b	28
      0  354f					      dw	GOSUBSTATEMENT
      1  354f		       80 35		      .word.w	GOSUBSTATEMENT
      0  3551					      DONE		; ERROR IF CR NOT NEXT
      0  3551					      db	1
      1  3551		       01		      .byte.b	1
      0  3552					      SAV	GOSUB_RTN	; SAVE RETURN LINE
      0  3552					      db	8
      1  3552		       08		      .byte.b	8
      0  3553					      db	GOSUB_RTN
      1  3553		       01		      .byte.b	GOSUB_RTN
      0  3554					      FASTXFER		; AND JUMP to sub rtn
      0  3554					      db	107
      1  3554		       6b		      .byte.b	107
   1030  3555							;
   1031  3555							; End of gosub processing
   1032  3555							;===========================================================================
   1033  3555							; Same as gosub but expects a return value
   1034  3555							;   FN 1000(parm1, ....)  Expects an integer to be returned
   1035  3555							;
   1036  3555				   ekGofn
      0  3555					      Call	GOSUBSTATEMENT
      0  3555					      db	28
      1  3555		       1c		      .byte.b	28
      0  3556					      dw	GOSUBSTATEMENT
      1  3556		       80 35		      .word.w	GOSUBSTATEMENT
      0  3558					      SAV	GOSUB_RTN_VALUE	;SAVE RETURN LINE
      0  3558					      db	8
      1  3558		       08		      .byte.b	8
      0  3559					      db	GOSUB_RTN_VALUE
      1  3559		       81		      .byte.b	GOSUB_RTN_VALUE
      0  355a					      FASTXFER
      0  355a					      db	107
      1  355a		       6b		      .byte.b	107
   1040  355b
   1041  355b				   GOFNRet
      0  355b					      RTN
      0  355b					      db	25
      1  355b		       19		      .byte.b	25
   1043  355c							;===============================================================================================================================
   1044  355c							; Return from a gosub
   1045  355c							;
   1046  355c				   ekReturn
      0  355c					      TSTB	S2NoReturnValue,oLeftBracket	; Check if we will return some value
      0  355c					      db	101
      1  355c		       65		      .byte.b	101
      0  355d					      db	(S2NoReturnValue-*)-1
      1  355d		       11		      .byte.b	(S2NoReturnValue-*)-1
      0  355e					      db	oLeftBracket
      1  355e		       e0		      .byte.b	oLeftBracket
      0  355f					      CALL	EXPR
      0  355f					      db	28
      1  355f		       1c		      .byte.b	28
      0  3560					      dw	EXPR
      1  3560		       70 33		      .word.w	EXPR
      0  3562					      TSTB	ReturnExpectBracket,oRightBracket	; Now a value is on the stack
      0  3562					      db	101
      1  3562		       65		      .byte.b	101
      0  3563					      db	(ReturnExpectBracket-*)-1
      1  3563		       18		      .byte.b	(ReturnExpectBracket-*)-1
      0  3564					      db	oRightBracket
      1  3564		       e1		      .byte.b	oRightBracket
      0  3565					      DONE
      0  3565					      db	1
      1  3565		       01		      .byte.b	1
      0  3566					      RSTR	S2RetFunc,1	; decides if call was a func or statement, branch on func, return value
      0  3566					      db	9
      1  3566		       09		      .byte.b	9
      0  3567					      db	(S2RetFunc-*)-1
      1  3567		       11		      .byte.b	(S2RetFunc-*)-1
      0  3568					      db	1
      1  3568		       01		      .byte.b	1
      0  3569					      NXT	CO	; SEQUENCE TO NEXT STATEMENT
      0  3569					      db	6
      1  3569		       06		      .byte.b	6
      0  356a					      dw	CO
      1  356a		       54 31		      .word.w	CO
      0  356c					      IJMP	STMT	; Process the new statement
      0  356c					      db	29
      1  356c		       1d		      .byte.b	29
      0  356d					      dw	STMT
      1  356d		       5c 31		      .word.w	STMT
   1054  356f
   1055  356f				   S2NoReturnValue
      0  356f					      DONE
      0  356f					      db	1
      1  356f		       01		      .byte.b	1
      0  3570					      RSTR	S2RetFunc,0	; decides if call was a func or statement, branch on func, no return value
      0  3570					      db	9
      1  3570		       09		      .byte.b	9
      0  3571					      db	(S2RetFunc-*)-1
      1  3571		       07		      .byte.b	(S2RetFunc-*)-1
      0  3572					      db	0
      1  3572		       00		      .byte.b	0
      0  3573					      NXT	CO	; SEQUENCE TO NEXT STATEMENT
      0  3573					      db	6
      1  3573		       06		      .byte.b	6
      0  3574					      dw	CO
      1  3574		       54 31		      .word.w	CO
      0  3576					      IJMP	STMT	; Process the new statement
      0  3576					      db	29
      1  3576		       1d		      .byte.b	29
      0  3577					      dw	STMT
      1  3577		       5c 31		      .word.w	STMT
   1060  3579
   1061  3579				   S2RetFunc
      0  3579					      IJMP	GOFNRet	; Back into the Function
      0  3579					      db	29
      1  3579		       1d		      .byte.b	29
      0  357a					      dw	GOFNRet
      1  357a		       5b 35		      .word.w	GOFNRet
   1063  357c
   1064  357c				   ReturnExpectBracket
      0  357c					      ENDIO
      0  357c					      db	71
      1  357c		       47		      .byte.b	71
      0  357d					      ERRMSG	ERR_CLOSINGBRACKET
      0  357d					      db	13
      1  357d		       0d		      .byte.b	13
      0  357e					      dw	ERR_CLOSINGBRACKET
      1  357e		       17 00		      .word.w	ERR_CLOSINGBRACKET
   1067  3580							;
   1068  3580							; End of return from gosub
   1069  3580							;=============================================================
   1070  3580							; Gosub can be both a Function and a Subroutine
   1071  3580				   GOSUBSTATEMENT
      0  3580					      TSTBRANCH	GOSUBCOMPILED	; if the two bytes after gosub are not zero then direct transfer
      0  3580					      db	106
      1  3580		       6a		      .byte.b	106
      0  3581					      db	(GOSUBCOMPILED-*)-1
      1  3581		       0a		      .byte.b	(GOSUBCOMPILED-*)-1
      0  3582					      CALL	EXPR	; GET DESTINATION
      0  3582					      db	28
      1  3582		       1c		      .byte.b	28
      0  3583					      dw	EXPR
      1  3583		       70 33		      .word.w	EXPR
      0  3585					      CALL	GOSUBCONT
      0  3585					      db	28
      1  3585		       1c		      .byte.b	28
      0  3586					      dw	GOSUBCONT
      1  3586		       93 35		      .word.w	GOSUBCONT
      0  3588					      lit	0	; mark as lookup on stack
      0  3588					      db	27
      1  3588		       1b		      .byte.b	27
      0  3589					      dw	0
      1  3589		       00 00		      .word.w	0
      0  358b					      RTN
      0  358b					      db	25
      1  358b		       19		      .byte.b	25
   1077  358c
   1078  358c				   GOSUBCOMPILED
      0  358c					      CALL	GOSUBCONT
      0  358c					      db	28
      1  358c		       1c		      .byte.b	28
      0  358d					      dw	GOSUBCONT
      1  358d		       93 35		      .word.w	GOSUBCONT
      0  358f					      lit	1	;mark as compiled on stack
      0  358f					      db	27
      1  358f		       1b		      .byte.b	27
      0  3590					      dw	1
      1  3590		       01 00		      .word.w	1
      0  3592					      RTN
      0  3592					      db	25
      1  3592		       19		      .byte.b	25
   1082  3593
   1083  3593				   GOSUBCONT
      0  3593					      TSTB	GOSUBDONE,oLeftBracket	;Check if any Parameters If not bracket get out
      0  3593					      db	101
      1  3593		       65		      .byte.b	101
      0  3594					      db	(GOSUBDONE-*)-1
      1  3594		       11		      .byte.b	(GOSUBDONE-*)-1
      0  3595					      db	oLeftBracket
      1  3595		       e0		      .byte.b	oLeftBracket
      0  3596					      STK2TMP		;Transfer stack top to temp, temp gets line to goto
      0  3596					      db	95
      1  3596		       5f		      .byte.b	95
      0  3597					      PUSHMATHSTACK		;Record stack frame for return
      0  3597					      db	84
      1  3597		       54		      .byte.b	84
   1087  3598				   GOSUBLOOP
      0  3598					      CALL	EXPR	; Allows what ever fits onto stack
      0  3598					      db	28
      1  3598		       1c		      .byte.b	28
      0  3599					      dw	EXPR
      1  3599		       70 33		      .word.w	EXPR
      0  359b					      INCPARMCOUNT
      0  359b					      db	88
      1  359b		       58		      .byte.b	88
      0  359c					      TSTB	GOSUBParmDONE,oComma
      0  359c					      db	101
      1  359c		       65		      .byte.b	101
      0  359d					      db	(GOSUBParmDONE-*)-1
      1  359d		       04		      .byte.b	(GOSUBParmDONE-*)-1
      0  359e					      db	oComma
      1  359e		       e2		      .byte.b	oComma
      0  359f					      IJMP	GOSUBLOOP
      0  359f					      db	29
      1  359f		       1d		      .byte.b	29
      0  35a0					      dw	GOSUBLOOP
      1  35a0		       98 35		      .word.w	GOSUBLOOP
   1092  35a2				   GOSUBParmDONE
      0  35a2					      TSTB	ReturnExpectBracket,oRightBracket
      0  35a2					      db	101
      1  35a2		       65		      .byte.b	101
      0  35a3					      db	(ReturnExpectBracket-*)-1
      1  35a3		       d8		      .byte.b	(ReturnExpectBracket-*)-1
      0  35a4					      db	oRightBracket
      1  35a4		       e1		      .byte.b	oRightBracket
      0  35a5					      TMP2STK		; Restore line to goto
      0  35a5					      db	96
      1  35a5		       60		      .byte.b	96
   1095  35a6				   GOSUBDONE
      0  35a6					      RTN
      0  35a6					      db	25
      1  35a6		       19		      .byte.b	25
   1097  35a7
   1098  35a7		       35 a7	   ILEND      equ	*
------- FILE mytb.asm
   2488  35a7		       35 a7	   PROGEND    equ	*
   2489  35a7
   2490  35a7
   2491  35a7							;=====================================================
   2492  35a7							; Define start of non page zero data
   2493 U35fa					      seg.u	TBData
   2494 U35fa
   2495 U35fa							;=====================================================
   2496 U35fa							; These are storage items not in page zero.
   2497 U35fa							;==================================================================================================
   2498 U35fa							; Task Management information
   2499 U35fa							; Tasks may be created by the Task <expr>,<expr>,[<expr>]   Slot number, Cycles per switch command
   2500 U35fa							; Tasks are ended by the Endtask command   This with clear the entry from the task table
   2501 U35fa							; Task switchs happen at the beginning of the next Basic command line
   2502 U35fa							; It will not happen during an input or output operations
   2503 U35fa							; Task switches otherwise are prememtive, The cycle count defaults to 100.
   2504 U35fa							; Task Zero is always the root task, main line program
   2505 U35fa							;
   2506 U35fa							; Layout is repeated for each configured task
   2507 U35fa							; Task Table Byte   use masks follow
   2508 U35fa		       00 00	   TASKINACTIVE equ	%00000000	; Task is inactive
   2509 U35fa		       00 80	   TASKACTIVE equ	%10000000	; Active task
   2510 U35fa		       00 40	   TASKWAITIO equ	%01000000	; Task is waiting for io
   2511 U35fa		       00 01	   TASKWAITIPC equ	%00000001	; Task is waiting for message
   2512 U35fa		       00 02	   TASKRUNPENDING equ	%00000010	; Task Is initialized but suspended
   2513 U35fa
   2514 U35fa		       00	   taskPtr    ds	1	; Current offset into task table CONTEXTLEN modulo entry
   2515 U35fb		       00 00 00 00*taskTable  ds	[TASKCOUNT * CONTEXTLEN]	; Task Table Offset and pointer to Basic code, active flag
   2516 U35fb		       36 f5	   TASKTABLEEND equ	*	; End of task table
   2517 U35fb		       00 fa	   TASKTABLELEN equ	[TASKTABLEEND-taskTable]	; actual length of the task table
   2518 U36f5
   2519 U36f5							;Task Cycle Counter and reset count
   2520 U36f5		       00 00	   taskCurrentCycles ds	2
   2521 U36f7		       00 00	   taskResetValue ds	2
   2522 U36f9		       00	   taskCounter ds	1	; Count of active tasks
   2523 U36fa
   2524 U36fa							;
   2525 U36fa							; Math stack and IL call and Gosub/For-next return stack definitions
   2526 U36fa							;
   2527 U36fa		       36 fa	   STACKSTART equ	*
   2528 U36fa		       00 00 00 00*mathStack  ds	[MATHSTACKSIZE * 2 * TASKCOUNT]	; Stack used for math expressions
   2529 U388a		       00 00 00 00*ilStack    ds	[ILSTACKSIZE * 2 * TASKCOUNT]	; stack used by the IL for calls and returns
   2530 U3c72		       00 00 00 00*gosubStack ds	[GOSUBSTACKSIZE * 4 * TASKCOUNT]	; stack size for gosub stacks
   2531 U3ef2		       00 00 00 00*variableStack ds	[VARIABLESSIZE * 2 * TASKCOUNT]	; Stack of variables, 26 A-Z-task exit code,taskio block stdin,stdout,stdstat,iostatus
   2532 U3ef2		       00 48	   TASKEXITCODE equ	[[VARIABLESSIZE * 2] - 2]	; Offset to exit code location
   2533 U3ef2		       41 d6	   STACKEND   equ	*
   2534 U3ef2		       0a dc	   STACKLEN   equ	STACKEND-STACKSTART	; total space used for stacks
   2535 U41d6							;
   2536 U41d6							;
   2537 U41d6		       00 00 00 00*LINBUF     ds	BUFFER_SIZE
   2538 U425a		       00	   getlinx    ds	1	;temp for x during GetLine functions
   2539 U425b		       00	   printtx    ds	1	;temp X for print funcs
   2540 U425c		       00	   inputNoWait ds	1	;Wait no wait for line buff input
   2541 U425d		       00	   promptChar ds	1	;the character to use for a prompt
   2542 U425e		       00	   diddigit   ds	1	;for leading zero suppression
   2543 U425f		       00	   putsy      ds	1
   2544 U4260		       00 00	   errGoto    ds	2	;where to set ILPC on err
   2545 U4262		       00	   sign       ds	1	;0 = positive, else negative
   2546 U4263		       00 00	   rtemp1     ds	2	;Temp for x and y
   2547 U4265		       00 00	   random     ds	2
   2548 U4267		       00	   tempy      ds	1	;temp y storage
   2549 U4268
   2550 U4268
   2551 U4268							; Moved from page zero as one clock cycle diff gives more space on page zero
   2552 U4268		       00 00	   tempIL     ds	2	;Temp IL programcounter storage
   2553 U426a		       00	   tempIlY    ds	1	;Temp IL Y register storage
   2554 U426b		       00	   offset     ds	1	;IL Offset to next inst when test fails
   2555 U426c		       00	   lineLength ds	1	;Length of current line
   2556 U426d
   2557 U426d		       00	   taskIOPending ds	1	; 1 = pending Set when a task wants to read keyboard/ write to screen
   2558 U426e		       00	   taskRDPending ds	1	; 1 = background read is pending
   2559 U426f
   2560 U426f				  -	      if	XKIM
   2561 U426f				  -buffer     ds	BUFFER_SIZE
   2562 U426f					      endif
   2563 U426f							;
   2564 U426f							; PROGRAMEND is the end of the user's BASIC program.
   2565 U426f							; More precisely, it is one byte past the end.  Or,
   2566 U426f							; it's where the next line added to the end will be
   2567 U426f							; placed.
   2568 U426f							;
   2569 U426f		       00 00	   ProgramStart ds	2	; Start Of usable memory
   2570 U4271		       00 00	   ProgramEnd ds	2	; End of users basic program, Next free byte after end
   2571 U4273		       00 00	   HighMem    ds	2	; highest location
   2572 U4275		       00 00	   UsedMem    ds	2	; size of user program
   2573 U4277		       00 00	   FreeMem    ds	2	; amount of free memory
   2574 U4279							;
   2575 U4279							;=====================================================
   2576 U4279							; This is the start of the user's BASIC program space.
   2577 U4279							;
   2578 U4279							; PERSONAL GOAL: This should be no larger than $0DFF.
   2579 U4279							;		  0200-05FF = 1K
   2580 U4279							;		  0200-09FF = 2K
   2581 U4279							;		  0200-0DFF = 3K
   2582 U4279							;		  0200-11FF = 4K
   2583 U4279							;		  0200-13FF = 4.5K
   2584 U4279							;
   2585 U4279				  -	      if	FIXED
   2586 U4279				  -	      org	$2000
   2587 U4279					      endif
   2588 U4279
   2589 U4279		       42 79	   FreeMemStart equ	*
   2590 U4279							;/*
   2591 U4279							;  if	  CTMON65 || XKIM
   2592 U4279							;	  SEG Code
   2593 U4279							;	  org	  AutoRun
   2594 U4279							;	  dw	  TBasicCold
   2595 U4279							;  endif
   2596 U4279							;*/
   2597 U4279					      end
