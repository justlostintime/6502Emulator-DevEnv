ca65 V2.19 - Git d0f17ba
Main file   : piafun.s
Current file: piafun.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git d0f17ba
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git d0f17ba"
000000r 1               	.setcpu		"65C02"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	on
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.dbg		file, "piafun.c", 1904, 1676857732
000000r 1               	.dbg		file, "/usr/share/cc65/include/stdio.h", 6887, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/stdlib.h", 6885, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/string.h", 5492, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/fcntl.h", 3550, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/errno.h", 5854, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/unistd.h", 4309, 1605895793
000000r 1               	.dbg		file, "../../cc65Integration/include/ctmon65.h", 5258, 1676224656
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.dbg		sym, "printf", "00", extern, "_printf"
000000r 1               	.dbg		sym, "open", "00", extern, "_open"
000000r 1               	.dbg		sym, "__errno", "00", extern, "___errno"
000000r 1               	.dbg		sym, "write", "00", extern, "_write"
000000r 1               	.dbg		sym, "read", "00", extern, "_read"
000000r 1               	.dbg		sym, "GetClock", "00", extern, "_GetClock"
000000r 1               	.dbg		sym, "SetClock", "00", extern, "_SetClock"
000000r 1               	.import		_printf
000000r 1               	.import		_open
000000r 1               	.import		___errno
000000r 1               	.import		_write
000000r 1               	.import		_read
000000r 1               	.import		_GetClock
000000r 1               	.import		_SetClock
000000r 1               	.export		_printDate
000000r 1               	.export		_getclockinfo
000000r 1               	.export		_dayofweek
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _getclockinfo:
000000r 1  07           	.byte	$07
000001r 1               _dayofweek:
000001r 1  rr rr        	.addr	S0001
000003r 1  rr rr        	.addr	S0002
000005r 1  rr rr        	.addr	S0003
000007r 1  rr rr        	.addr	S0004
000009r 1  rr rr        	.addr	S0005
00000Br 1  rr rr        	.addr	S0006
00000Dr 1  rr rr        	.addr	S0007
00000Fr 1               
00000Fr 1               .segment	"RODATA"
000000r 1               
000000r 1               S000D:
000000r 1  52 65 61 64  	.byte	$52,$65,$61,$64,$69,$6E,$67,$20,$6D,$65,$73,$73,$61,$67,$65,$20
000004r 1  69 6E 67 20  
000008r 1  6D 65 73 73  
000010r 1  67 65 74 20  	.byte	$67,$65,$74,$20,$63,$6C,$6F,$63,$6B,$20,$69,$6E,$66,$6F,$20,$6C
000014r 1  63 6C 6F 63  
000018r 1  6B 20 69 6E  
000020r 1  65 6E 67 74  	.byte	$65,$6E,$67,$74,$68,$20,$3D,$25,$64,$2C,$20,$62,$75,$66,$66,$65
000024r 1  68 20 3D 25  
000028r 1  64 2C 20 62  
000030r 1  72 20 61 64  	.byte	$72,$20,$61,$64,$64,$72,$65,$73,$73,$20,$3A,$25,$30,$34,$78,$0A
000034r 1  64 72 65 73  
000038r 1  73 20 3A 25  
000040r 1  00           	.byte	$00
000041r 1               S0012:
000041r 1  4E 6F 77 20  	.byte	$4E,$6F,$77,$20,$64,$6F,$20,$73,$61,$6D,$65,$20,$77,$69,$74,$68
000045r 1  64 6F 20 73  
000049r 1  61 6D 65 20  
000051r 1  20 73 79 73  	.byte	$20,$73,$79,$73,$74,$65,$6D,$20,$66,$75,$6E,$63,$74,$69,$6F,$6E
000055r 1  74 65 6D 20  
000059r 1  66 75 6E 63  
000061r 1  20 62 75 66  	.byte	$20,$62,$75,$66,$66,$65,$72,$20,$61,$64,$64,$72,$65,$73,$73,$20
000065r 1  66 65 72 20  
000069r 1  61 64 64 72  
000071r 1  25 30 34 78  	.byte	$25,$30,$34,$78,$0A,$00
000075r 1  0A 00        
000077r 1               S000B:
000077r 1  53 65 6E 64  	.byte	$53,$65,$6E,$64,$69,$6E,$67,$20,$6D,$65,$73,$73,$61,$67,$65,$20
00007Br 1  69 6E 67 20  
00007Fr 1  6D 65 73 73  
000087r 1  67 65 74 20  	.byte	$67,$65,$74,$20,$63,$6C,$6F,$63,$6B,$20,$69,$6E,$66,$6F,$20,$6C
00008Br 1  63 6C 6F 63  
00008Fr 1  6B 20 69 6E  
000097r 1  65 6E 67 74  	.byte	$65,$6E,$67,$74,$68,$20,$3D,$25,$64,$0A,$00
00009Br 1  68 20 3D 25  
00009Fr 1  64 0A 00     
0000A2r 1               S000A:
0000A2r 1  45 72 72 6F  	.byte	$45,$72,$72,$6F,$72,$20,$6F,$6E,$20,$6F,$70,$65,$6E,$20,$57,$52
0000A6r 1  72 20 6F 6E  
0000AAr 1  20 6F 70 65  
0000B2r 1  3D 25 64 2C  	.byte	$3D,$25,$64,$2C,$20,$45,$72,$72,$6F,$72,$20,$6E,$75,$6D,$62,$65
0000B6r 1  20 45 72 72  
0000BAr 1  6F 72 20 6E  
0000C2r 1  72 20 25 64  	.byte	$72,$20,$25,$64,$0A,$00
0000C6r 1  0A 00        
0000C8r 1               S0014:
0000C8r 1  25 30 32 78  	.byte	$25,$30,$32,$78,$2D,$25,$30,$32,$78,$2D,$25,$30,$32,$78,$25,$30
0000CCr 1  2D 25 30 32  
0000D0r 1  78 2D 25 30  
0000D8r 1  32 78 20 25  	.byte	$32,$78,$20,$25,$30,$32,$78,$3A,$25,$30,$32,$78,$3A,$25,$30,$32
0000DCr 1  30 32 78 3A  
0000E0r 1  25 30 32 78  
0000E8r 1  78 20 25 73  	.byte	$78,$20,$25,$73,$0A,$00
0000ECr 1  0A 00        
0000EEr 1               S0013:
0000EEr 1  4E 6F 77 20  	.byte	$4E,$6F,$77,$20,$6D,$6F,$76,$65,$20,$74,$69,$6D,$65,$20,$61,$6E
0000F2r 1  6D 6F 76 65  
0000F6r 1  20 74 69 6D  
0000FEr 1  64 20 64 61  	.byte	$64,$20,$64,$61,$74,$65,$20,$62,$61,$63,$6B,$20,$69,$6E,$20,$74
000102r 1  74 65 20 62  
000106r 1  61 63 6B 20  
00010Er 1  69 6D 65 0A  	.byte	$69,$6D,$65,$0A,$00
000112r 1  00           
000113r 1               S0009:
000113r 1  6F 70 65 6E  	.byte	$6F,$70,$65,$6E,$20,$72,$65,$61,$64,$2F,$77,$72,$69,$74,$65,$20
000117r 1  20 72 65 61  
00011Br 1  64 2F 77 72  
000123r 1  72 65 74 75  	.byte	$72,$65,$74,$75,$72,$6E,$65,$64,$20,$25,$64,$0A,$00
000127r 1  72 6E 65 64  
00012Br 1  20 25 64 0A  
000130r 1               S000E:
000130r 1  0A 52 65 63  	.byte	$0A,$52,$65,$63,$69,$65,$76,$65,$64,$20,$62,$75,$66,$66,$65,$72
000134r 1  69 65 76 65  
000138r 1  64 20 62 75  
000140r 1  20 25 30 34  	.byte	$20,$25,$30,$34,$78,$3A,$00
000144r 1  78 3A 00     
000147r 1               S000C:
000147r 1  77 72 69 74  	.byte	$77,$72,$69,$74,$65,$20,$72,$65,$74,$75,$72,$6E,$65,$64,$20,$3A
00014Br 1  65 20 72 65  
00014Fr 1  74 75 72 6E  
000157r 1  20 25 64 0A  	.byte	$20,$25,$64,$0A,$00
00015Br 1  00           
00015Cr 1               S0011:
00015Cr 1  72 65 61 64  	.byte	$72,$65,$61,$64,$20,$72,$65,$74,$75,$72,$6E,$65,$64,$20,$3A,$20
000160r 1  20 72 65 74  
000164r 1  75 72 6E 65  
00016Cr 1  25 64 0A 00  	.byte	$25,$64,$0A,$00
000170r 1               S0004:
000170r 1  57 65 64 6E  	.byte	$57,$65,$64,$6E,$65,$73,$64,$61,$79,$00
000174r 1  65 73 64 61  
000178r 1  79 00        
00017Ar 1               S0007:
00017Ar 1  53 61 74 75  	.byte	$53,$61,$74,$75,$72,$64,$61,$79,$00
00017Er 1  72 64 61 79  
000182r 1  00           
000183r 1               S0005:
000183r 1  54 68 75 72  	.byte	$54,$68,$75,$72,$73,$64,$61,$79,$00
000187r 1  73 64 61 79  
00018Br 1  00           
00018Cr 1               S0008:
00018Cr 1  2F 64 65 76  	.byte	$2F,$64,$65,$76,$2F,$70,$69,$6F,$00
000190r 1  2F 70 69 6F  
000194r 1  00           
000195r 1               S0003:
000195r 1  54 75 65 73  	.byte	$54,$75,$65,$73,$64,$61,$79,$00
000199r 1  64 61 79 00  
00019Dr 1               S0002:
00019Dr 1  4D 6F 6E 64  	.byte	$4D,$6F,$6E,$64,$61,$79,$00
0001A1r 1  61 79 00     
0001A4r 1               S0006:
0001A4r 1  46 72 69 64  	.byte	$46,$72,$69,$64,$61,$79,$00
0001A8r 1  61 79 00     
0001ABr 1               S000F:
0001ABr 1  24 25 30 32  	.byte	$24,$25,$30,$32,$58,$2C,$00
0001AFr 1  58 2C 00     
0001B2r 1               S0001:
0001B2r 1  53 75 6E 64  	.byte	$53,$75,$6E,$64,$61,$79,$00
0001B6r 1  61 79 00     
0001B9r 1               S0010	:=	S000D+63
0001B9r 1               
0001B9r 1               ; ---------------------------------------------------------------
0001B9r 1               ; void __near__ printDate (struct clock_info *c)
0001B9r 1               ; ---------------------------------------------------------------
0001B9r 1               
0001B9r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_printDate: near
000000r 1               
000000r 1               	.dbg	func, "printDate", "00", extern, "_printDate"
000000r 1               	.dbg	sym, "c", "00", auto, 0
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; void printDate(struct clock_info *c) {
000000r 1               ;
000000r 1               	.dbg	line, "piafun.c", 71
000000r 1  20 rr rr     	jsr     pushax
000003r 1               ;
000003r 1               ; printf("%02x-%02x-%02x%02x %02x:%02x:%02x %s\n",c->month,c->day,c->century,c->year,c->hour,c->minute,c->second,dayofweek[c->dayofweek]);
000003r 1               ;
000003r 1               	.dbg	line, "piafun.c", 73
000003r 1  A9 rr        	lda     #<(S0014)
000005r 1  A2 rr        	ldx     #>(S0014)
000007r 1  20 rr rr     	jsr     pushax
00000Ar 1  A0 03        	ldy     #$03
00000Cr 1  B1 rr        	lda     (sp),y
00000Er 1  85 rr        	sta     ptr1+1
000010r 1  88           	dey
000011r 1  B1 rr        	lda     (sp),y
000013r 1  85 rr        	sta     ptr1
000015r 1  88           	dey
000016r 1  B1 rr        	lda     (ptr1),y
000018r 1  20 rr rr     	jsr     pusha0
00001Br 1  A0 05        	ldy     #$05
00001Dr 1  B1 rr        	lda     (sp),y
00001Fr 1  85 rr        	sta     ptr1+1
000021r 1  88           	dey
000022r 1  B1 rr        	lda     (sp),y
000024r 1  85 rr        	sta     ptr1
000026r 1  A0 02        	ldy     #$02
000028r 1  B1 rr        	lda     (ptr1),y
00002Ar 1  20 rr rr     	jsr     pusha0
00002Dr 1  A0 07        	ldy     #$07
00002Fr 1  B1 rr        	lda     (sp),y
000031r 1  85 rr        	sta     ptr1+1
000033r 1  88           	dey
000034r 1  B1 rr        	lda     (sp),y
000036r 1  85 rr        	sta     ptr1
000038r 1  A0 03        	ldy     #$03
00003Ar 1  B1 rr        	lda     (ptr1),y
00003Cr 1  20 rr rr     	jsr     pusha0
00003Fr 1  A0 09        	ldy     #$09
000041r 1  B1 rr        	lda     (sp),y
000043r 1  85 rr        	sta     ptr1+1
000045r 1  88           	dey
000046r 1  B1 rr        	lda     (sp),y
000048r 1  85 rr        	sta     ptr1
00004Ar 1  A0 04        	ldy     #$04
00004Cr 1  B1 rr        	lda     (ptr1),y
00004Er 1  20 rr rr     	jsr     pusha0
000051r 1  A0 0B        	ldy     #$0B
000053r 1  B1 rr        	lda     (sp),y
000055r 1  85 rr        	sta     ptr1+1
000057r 1  88           	dey
000058r 1  B1 rr        	lda     (sp),y
00005Ar 1  85 rr        	sta     ptr1
00005Cr 1  A0 05        	ldy     #$05
00005Er 1  B1 rr        	lda     (ptr1),y
000060r 1  20 rr rr     	jsr     pusha0
000063r 1  A0 0D        	ldy     #$0D
000065r 1  B1 rr        	lda     (sp),y
000067r 1  85 rr        	sta     ptr1+1
000069r 1  88           	dey
00006Ar 1  B1 rr        	lda     (sp),y
00006Cr 1  85 rr        	sta     ptr1
00006Er 1  A0 06        	ldy     #$06
000070r 1  B1 rr        	lda     (ptr1),y
000072r 1  20 rr rr     	jsr     pusha0
000075r 1  A0 0F        	ldy     #$0F
000077r 1  B1 rr        	lda     (sp),y
000079r 1  85 rr        	sta     ptr1+1
00007Br 1  88           	dey
00007Cr 1  B1 rr        	lda     (sp),y
00007Er 1  85 rr        	sta     ptr1
000080r 1  A0 07        	ldy     #$07
000082r 1  B1 rr        	lda     (ptr1),y
000084r 1  20 rr rr     	jsr     pusha0
000087r 1  A0 11        	ldy     #$11
000089r 1  B1 rr        	lda     (sp),y
00008Br 1  85 rr        	sta     ptr1+1
00008Dr 1  88           	dey
00008Er 1  B1 rr        	lda     (sp),y
000090r 1  85 rr        	sta     ptr1
000092r 1  A0 08        	ldy     #$08
000094r 1  B1 rr        	lda     (ptr1),y
000096r 1  64 rr        	stz     tmp1
000098r 1  0A           	asl     a
000099r 1  26 rr        	rol     tmp1
00009Br 1  18           	clc
00009Cr 1  69 rr        	adc     #<(_dayofweek)
00009Er 1  85 rr        	sta     ptr1
0000A0r 1  A5 rr        	lda     tmp1
0000A2r 1  69 rr        	adc     #>(_dayofweek)
0000A4r 1  85 rr        	sta     ptr1+1
0000A6r 1  A0 01        	ldy     #$01
0000A8r 1  B1 rr        	lda     (ptr1),y
0000AAr 1  AA           	tax
0000ABr 1  B2 rr        	lda     (ptr1)
0000ADr 1  20 rr rr     	jsr     pushax
0000B0r 1  A0 12        	ldy     #$12
0000B2r 1  20 rr rr     	jsr     _printf
0000B5r 1               ;
0000B5r 1               ; }
0000B5r 1               ;
0000B5r 1               	.dbg	line, "piafun.c", 75
0000B5r 1  4C rr rr     	jmp     incsp2
0000B8r 1               
0000B8r 1               	.dbg	line
0000B8r 1               .endproc
0000B8r 1               
0000B8r 1               ; ---------------------------------------------------------------
0000B8r 1               ; void __near__ main (void)
0000B8r 1               ; ---------------------------------------------------------------
0000B8r 1               
0000B8r 1               .segment	"CODE"
0000B8r 1               
0000B8r 1               .proc	_main: near
0000B8r 1               
0000B8r 1               	.dbg	func, "main", "00", extern, "_main"
0000B8r 1               	.dbg	sym, "buffer", "00", auto, -9
0000B8r 1               	.dbg	sym, "newtime", "00", auto, -18
0000B8r 1               	.dbg	sym, "textbuff", "00", auto, -20
0000B8r 1               	.dbg	sym, "length", "00", auto, -22
0000B8r 1               	.dbg	sym, "i", "00", auto, -24
0000B8r 1               	.dbg	sym, "pio_rdwr", "00", auto, -26
0000B8r 1               
0000B8r 1               .segment	"CODE"
0000B8r 1               
0000B8r 1               ;
0000B8r 1               ; int length = 0, i =0;
0000B8r 1               ;
0000B8r 1               	.dbg	line, "piafun.c", 22
0000B8r 1  A0 14        	ldy     #$14
0000BAr 1  20 rr rr     	jsr     subysp
0000BDr 1  20 rr rr     	jsr     push0
0000C0r 1  20 rr rr     	jsr     push0
0000C3r 1               ;
0000C3r 1               ; pio_rdwr = open("/dev/pio",O_RDWR);
0000C3r 1               ;
0000C3r 1               	.dbg	line, "piafun.c", 26
0000C3r 1  20 rr rr     	jsr     decsp6
0000C6r 1  A9 rr        	lda     #<(S0008)
0000C8r 1  A0 02        	ldy     #$02
0000CAr 1  91 rr        	sta     (sp),y
0000CCr 1  C8           	iny
0000CDr 1  A9 rr        	lda     #>(S0008)
0000CFr 1  91 rr        	sta     (sp),y
0000D1r 1  98           	tya
0000D2r 1  92 rr        	sta     (sp)
0000D4r 1  A0 01        	ldy     #$01
0000D6r 1  A9 00        	lda     #$00
0000D8r 1  91 rr        	sta     (sp),y
0000DAr 1  A0 04        	ldy     #$04
0000DCr 1  20 rr rr     	jsr     _open
0000DFr 1  20 rr rr     	jsr     stax0sp
0000E2r 1               ;
0000E2r 1               ; printf("open read/write returned %d\n",pio_rdwr);
0000E2r 1               ;
0000E2r 1               	.dbg	line, "piafun.c", 28
0000E2r 1  A9 rr        	lda     #<(S0009)
0000E4r 1  A2 rr        	ldx     #>(S0009)
0000E6r 1  20 rr rr     	jsr     pushax
0000E9r 1  A0 05        	ldy     #$05
0000EBr 1  20 rr rr     	jsr     pushwysp
0000EEr 1  A0 04        	ldy     #$04
0000F0r 1  20 rr rr     	jsr     _printf
0000F3r 1               ;
0000F3r 1               ; if (pio_rdwr != 4) {
0000F3r 1               ;
0000F3r 1               	.dbg	line, "piafun.c", 29
0000F3r 1  A0 01        	ldy     #$01
0000F5r 1  B1 rr        	lda     (sp),y
0000F7r 1  D0 06        	bne     L0014
0000F9r 1  B2 rr        	lda     (sp)
0000FBr 1  C9 04        	cmp     #$04
0000FDr 1  F0 1D        	beq     L0002
0000FFr 1               ;
0000FFr 1               ; printf("Error on open WR=%d, Error number %d\n",pio_rdwr,errno);
0000FFr 1               ;
0000FFr 1               	.dbg	line, "piafun.c", 30
0000FFr 1  A9 rr        L0014:	lda     #<(S000A)
000101r 1  A2 rr        	ldx     #>(S000A)
000103r 1  20 rr rr     	jsr     pushax
000106r 1  A0 05        	ldy     #$05
000108r 1  20 rr rr     	jsr     pushwysp
00010Br 1  AD rr rr     	lda     ___errno
00010Er 1  AE rr rr     	ldx     ___errno+1
000111r 1  20 rr rr     	jsr     pushax
000114r 1  A0 06        	ldy     #$06
000116r 1  20 rr rr     	jsr     _printf
000119r 1               ;
000119r 1               ; return;
000119r 1               ;
000119r 1               	.dbg	line, "piafun.c", 31
000119r 1  4C rr rr     	jmp     L0001
00011Cr 1               ;
00011Cr 1               ; printf("Sending message get clock info length =%d\n",sizeof(getclockinfo));
00011Cr 1               ;
00011Cr 1               	.dbg	line, "piafun.c", 34
00011Cr 1  A9 rr        L0002:	lda     #<(S000B)
00011Er 1  A2 rr        	ldx     #>(S000B)
000120r 1  20 rr rr     	jsr     pushax
000123r 1  A9 01        	lda     #$01
000125r 1  20 rr rr     	jsr     pusha0
000128r 1  A0 04        	ldy     #$04
00012Ar 1  20 rr rr     	jsr     _printf
00012Dr 1               ;
00012Dr 1               ; length = write(pio_rdwr, getclockinfo , sizeof(getclockinfo));
00012Dr 1               ;
00012Dr 1               	.dbg	line, "piafun.c", 35
00012Dr 1  20 rr rr     	jsr     decsp4
000130r 1  A0 05        	ldy     #$05
000132r 1  B1 rr        	lda     (sp),y
000134r 1  AA           	tax
000135r 1  88           	dey
000136r 1  B1 rr        	lda     (sp),y
000138r 1  A0 02        	ldy     #$02
00013Ar 1  91 rr        	sta     (sp),y
00013Cr 1  C8           	iny
00013Dr 1  8A           	txa
00013Er 1  91 rr        	sta     (sp),y
000140r 1  A9 rr        	lda     #<(_getclockinfo)
000142r 1  92 rr        	sta     (sp)
000144r 1  A0 01        	ldy     #$01
000146r 1  A9 rr        	lda     #>(_getclockinfo)
000148r 1  91 rr        	sta     (sp),y
00014Ar 1  A2 00        	ldx     #$00
00014Cr 1  98           	tya
00014Dr 1  20 rr rr     	jsr     _write
000150r 1  A0 04        	ldy     #$04
000152r 1  20 rr rr     	jsr     staxysp
000155r 1               ;
000155r 1               ; printf("write returned : %d\n",length);
000155r 1               ;
000155r 1               	.dbg	line, "piafun.c", 36
000155r 1  A9 rr        	lda     #<(S000C)
000157r 1  A2 rr        	ldx     #>(S000C)
000159r 1  20 rr rr     	jsr     pushax
00015Cr 1  A0 09        	ldy     #$09
00015Er 1  20 rr rr     	jsr     pushwysp
000161r 1  A0 04        	ldy     #$04
000163r 1  20 rr rr     	jsr     _printf
000166r 1               ;
000166r 1               ; printf("Reading message get clock info length =%d, buffer address :%04x\n",sizeof(struct clock_info),&buffer);
000166r 1               ;
000166r 1               	.dbg	line, "piafun.c", 37
000166r 1  A9 rr        	lda     #<(S000D)
000168r 1  A2 rr        	ldx     #>(S000D)
00016Ar 1  20 rr rr     	jsr     pushax
00016Dr 1  A9 09        	lda     #$09
00016Fr 1  20 rr rr     	jsr     pusha0
000172r 1  A5 rr        	lda     sp
000174r 1  A6 rr        	ldx     sp+1
000176r 1  18           	clc
000177r 1  69 15        	adc     #$15
000179r 1  90 01        	bcc     L0004
00017Br 1  E8           	inx
00017Cr 1  20 rr rr     L0004:	jsr     pushax
00017Fr 1  A0 06        	ldy     #$06
000181r 1  20 rr rr     	jsr     _printf
000184r 1               ;
000184r 1               ; length = read(pio_rdwr, &buffer, sizeof(buffer));
000184r 1               ;
000184r 1               	.dbg	line, "piafun.c", 38
000184r 1  20 rr rr     	jsr     decsp4
000187r 1  A0 05        	ldy     #$05
000189r 1  B1 rr        	lda     (sp),y
00018Br 1  AA           	tax
00018Cr 1  88           	dey
00018Dr 1  B1 rr        	lda     (sp),y
00018Fr 1  A0 02        	ldy     #$02
000191r 1  91 rr        	sta     (sp),y
000193r 1  C8           	iny
000194r 1  8A           	txa
000195r 1  91 rr        	sta     (sp),y
000197r 1  A5 rr        	lda     sp
000199r 1  A6 rr        	ldx     sp+1
00019Br 1  18           	clc
00019Cr 1  69 15        	adc     #$15
00019Er 1  90 01        	bcc     L0005
0001A0r 1  E8           	inx
0001A1r 1  92 rr        L0005:	sta     (sp)
0001A3r 1  A0 01        	ldy     #$01
0001A5r 1  8A           	txa
0001A6r 1  91 rr        	sta     (sp),y
0001A8r 1  A2 00        	ldx     #$00
0001AAr 1  A9 09        	lda     #$09
0001ACr 1  20 rr rr     	jsr     _read
0001AFr 1  A0 04        	ldy     #$04
0001B1r 1  20 rr rr     	jsr     staxysp
0001B4r 1               ;
0001B4r 1               ; textbuff =(char*)&buffer;
0001B4r 1               ;
0001B4r 1               	.dbg	line, "piafun.c", 40
0001B4r 1  A5 rr        	lda     sp
0001B6r 1  A6 rr        	ldx     sp+1
0001B8r 1  18           	clc
0001B9r 1  69 11        	adc     #$11
0001BBr 1  90 01        	bcc     L0006
0001BDr 1  E8           	inx
0001BEr 1  A0 06        L0006:	ldy     #$06
0001C0r 1  20 rr rr     	jsr     staxysp
0001C3r 1               ;
0001C3r 1               ; printf("\nRecieved buffer %04x:",textbuff);
0001C3r 1               ;
0001C3r 1               	.dbg	line, "piafun.c", 41
0001C3r 1  A9 rr        	lda     #<(S000E)
0001C5r 1  A2 rr        	ldx     #>(S000E)
0001C7r 1  20 rr rr     	jsr     pushax
0001CAr 1  A0 0B        	ldy     #$0B
0001CCr 1  20 rr rr     	jsr     pushwysp
0001CFr 1  A0 04        	ldy     #$04
0001D1r 1  20 rr rr     	jsr     _printf
0001D4r 1               ;
0001D4r 1               ; for (i=0; i < length; i++){
0001D4r 1               ;
0001D4r 1               	.dbg	line, "piafun.c", 42
0001D4r 1  A0 02        	ldy     #$02
0001D6r 1  A9 00        	lda     #$00
0001D8r 1  91 rr        	sta     (sp),y
0001DAr 1  C8           	iny
0001DBr 1  91 rr        	sta     (sp),y
0001DDr 1  A0 03        L0007:	ldy     #$03
0001DFr 1  B1 rr        	lda     (sp),y
0001E1r 1  AA           	tax
0001E2r 1  88           	dey
0001E3r 1  B1 rr        	lda     (sp),y
0001E5r 1  A0 04        	ldy     #$04
0001E7r 1  D1 rr        	cmp     (sp),y
0001E9r 1  8A           	txa
0001EAr 1  C8           	iny
0001EBr 1  F1 rr        	sbc     (sp),y
0001EDr 1  50 02        	bvc     L0013
0001EFr 1  49 80        	eor     #$80
0001F1r 1  10 31        L0013:	bpl     L0008
0001F3r 1               ;
0001F3r 1               ; printf("$%02X,",textbuff[i]);
0001F3r 1               ;
0001F3r 1               	.dbg	line, "piafun.c", 43
0001F3r 1  A9 rr        	lda     #<(S000F)
0001F5r 1  A2 rr        	ldx     #>(S000F)
0001F7r 1  20 rr rr     	jsr     pushax
0001FAr 1  A0 08        	ldy     #$08
0001FCr 1  B1 rr        	lda     (sp),y
0001FEr 1  A0 04        	ldy     #$04
000200r 1  18           	clc
000201r 1  71 rr        	adc     (sp),y
000203r 1  85 rr        	sta     ptr1
000205r 1  A0 09        	ldy     #$09
000207r 1  B1 rr        	lda     (sp),y
000209r 1  A0 05        	ldy     #$05
00020Br 1  71 rr        	adc     (sp),y
00020Dr 1  85 rr        	sta     ptr1+1
00020Fr 1  B2 rr        	lda     (ptr1)
000211r 1  20 rr rr     	jsr     pusha0
000214r 1  A0 04        	ldy     #$04
000216r 1  20 rr rr     	jsr     _printf
000219r 1               ;
000219r 1               ; for (i=0; i < length; i++){
000219r 1               ;
000219r 1               	.dbg	line, "piafun.c", 42
000219r 1  A0 02        	ldy     #$02
00021Br 1  A2 00        	ldx     #$00
00021Dr 1  A9 01        	lda     #$01
00021Fr 1  20 rr rr     	jsr     addeqysp
000222r 1  80 B9        	bra     L0007
000224r 1               ;
000224r 1               ; printf("\n");
000224r 1               ;
000224r 1               	.dbg	line, "piafun.c", 45
000224r 1  A9 rr        L0008:	lda     #<(S0010)
000226r 1  A2 rr        	ldx     #>(S0010)
000228r 1  20 rr rr     	jsr     pushax
00022Br 1  A0 02        	ldy     #$02
00022Dr 1  20 rr rr     	jsr     _printf
000230r 1               ;
000230r 1               ; printf("read returned : %d\n",length);
000230r 1               ;
000230r 1               	.dbg	line, "piafun.c", 47
000230r 1  A9 rr        	lda     #<(S0011)
000232r 1  A2 rr        	ldx     #>(S0011)
000234r 1  20 rr rr     	jsr     pushax
000237r 1  A0 09        	ldy     #$09
000239r 1  20 rr rr     	jsr     pushwysp
00023Cr 1  A0 04        	ldy     #$04
00023Er 1  20 rr rr     	jsr     _printf
000241r 1               ;
000241r 1               ; printDate(&buffer);
000241r 1               ;
000241r 1               	.dbg	line, "piafun.c", 48
000241r 1  A5 rr        	lda     sp
000243r 1  A6 rr        	ldx     sp+1
000245r 1  18           	clc
000246r 1  69 11        	adc     #$11
000248r 1  90 01        	bcc     L000B
00024Ar 1  E8           	inx
00024Br 1  20 rr rr     L000B:	jsr     _printDate
00024Er 1               ;
00024Er 1               ; printf("Now do same with system function buffer address %04x\n",&newtime);
00024Er 1               ;
00024Er 1               	.dbg	line, "piafun.c", 49
00024Er 1  A9 rr        	lda     #<(S0012)
000250r 1  A2 rr        	ldx     #>(S0012)
000252r 1  20 rr rr     	jsr     pushax
000255r 1  A5 rr        	lda     sp
000257r 1  A6 rr        	ldx     sp+1
000259r 1  18           	clc
00025Ar 1  69 0A        	adc     #$0A
00025Cr 1  90 01        	bcc     L000C
00025Er 1  E8           	inx
00025Fr 1  20 rr rr     L000C:	jsr     pushax
000262r 1  A0 04        	ldy     #$04
000264r 1  20 rr rr     	jsr     _printf
000267r 1               ;
000267r 1               ; GetClock(&newtime);
000267r 1               ;
000267r 1               	.dbg	line, "piafun.c", 51
000267r 1  A5 rr        	lda     sp
000269r 1  A6 rr        	ldx     sp+1
00026Br 1  18           	clc
00026Cr 1  69 08        	adc     #$08
00026Er 1  90 01        	bcc     L000D
000270r 1  E8           	inx
000271r 1  20 rr rr     L000D:	jsr     _GetClock
000274r 1               ;
000274r 1               ; printDate(&newtime);
000274r 1               ;
000274r 1               	.dbg	line, "piafun.c", 53
000274r 1  A5 rr        	lda     sp
000276r 1  A6 rr        	ldx     sp+1
000278r 1  18           	clc
000279r 1  69 08        	adc     #$08
00027Br 1  90 01        	bcc     L000E
00027Dr 1  E8           	inx
00027Er 1  20 rr rr     L000E:	jsr     _printDate
000281r 1               ;
000281r 1               ; printf("Now move time and date back in time\n");
000281r 1               ;
000281r 1               	.dbg	line, "piafun.c", 55
000281r 1  A9 rr        	lda     #<(S0013)
000283r 1  A2 rr        	ldx     #>(S0013)
000285r 1  20 rr rr     	jsr     pushax
000288r 1  A0 02        	ldy     #$02
00028Ar 1  20 rr rr     	jsr     _printf
00028Dr 1               ;
00028Dr 1               ; newtime.month   = 0x12;
00028Dr 1               ;
00028Dr 1               	.dbg	line, "piafun.c", 56
00028Dr 1  A9 12        	lda     #$12
00028Fr 1  A0 09        	ldy     #$09
000291r 1  91 rr        	sta     (sp),y
000293r 1               ;
000293r 1               ; newtime.day     = 0x1;
000293r 1               ;
000293r 1               	.dbg	line, "piafun.c", 57
000293r 1  A9 01        	lda     #$01
000295r 1  C8           	iny
000296r 1  91 rr        	sta     (sp),y
000298r 1               ;
000298r 1               ; newtime.century = 0x19;
000298r 1               ;
000298r 1               	.dbg	line, "piafun.c", 58
000298r 1  A9 19        	lda     #$19
00029Ar 1  C8           	iny
00029Br 1  91 rr        	sta     (sp),y
00029Dr 1               ;
00029Dr 1               ; newtime.year    = 0x26;
00029Dr 1               ;
00029Dr 1               	.dbg	line, "piafun.c", 59
00029Dr 1  A9 26        	lda     #$26
00029Fr 1  C8           	iny
0002A0r 1  91 rr        	sta     (sp),y
0002A2r 1               ;
0002A2r 1               ; newtime.hour    = 0x0;
0002A2r 1               ;
0002A2r 1               	.dbg	line, "piafun.c", 60
0002A2r 1  A9 00        	lda     #$00
0002A4r 1  C8           	iny
0002A5r 1  91 rr        	sta     (sp),y
0002A7r 1               ;
0002A7r 1               ; newtime.minute  = 0x1;
0002A7r 1               ;
0002A7r 1               	.dbg	line, "piafun.c", 61
0002A7r 1  1A           	ina
0002A8r 1  C8           	iny
0002A9r 1  91 rr        	sta     (sp),y
0002ABr 1               ;
0002ABr 1               ; newtime.second  = 0x30;
0002ABr 1               ;
0002ABr 1               	.dbg	line, "piafun.c", 62
0002ABr 1  A9 30        	lda     #$30
0002ADr 1  C8           	iny
0002AEr 1  91 rr        	sta     (sp),y
0002B0r 1               ;
0002B0r 1               ; newtime.dayofweek = 0x2;
0002B0r 1               ;
0002B0r 1               	.dbg	line, "piafun.c", 63
0002B0r 1  A9 02        	lda     #$02
0002B2r 1  C8           	iny
0002B3r 1  91 rr        	sta     (sp),y
0002B5r 1               ;
0002B5r 1               ; printDate(&newtime);
0002B5r 1               ;
0002B5r 1               	.dbg	line, "piafun.c", 64
0002B5r 1  A5 rr        	lda     sp
0002B7r 1  A6 rr        	ldx     sp+1
0002B9r 1  18           	clc
0002BAr 1  69 08        	adc     #$08
0002BCr 1  90 01        	bcc     L000F
0002BEr 1  E8           	inx
0002BFr 1  20 rr rr     L000F:	jsr     _printDate
0002C2r 1               ;
0002C2r 1               ; SetClock(&newtime);
0002C2r 1               ;
0002C2r 1               	.dbg	line, "piafun.c", 65
0002C2r 1  A5 rr        	lda     sp
0002C4r 1  A6 rr        	ldx     sp+1
0002C6r 1  18           	clc
0002C7r 1  69 08        	adc     #$08
0002C9r 1  90 01        	bcc     L0010
0002CBr 1  E8           	inx
0002CCr 1  20 rr rr     L0010:	jsr     _SetClock
0002CFr 1               ;
0002CFr 1               ; GetClock(&newtime);
0002CFr 1               ;
0002CFr 1               	.dbg	line, "piafun.c", 66
0002CFr 1  A5 rr        	lda     sp
0002D1r 1  A6 rr        	ldx     sp+1
0002D3r 1  18           	clc
0002D4r 1  69 08        	adc     #$08
0002D6r 1  90 01        	bcc     L0011
0002D8r 1  E8           	inx
0002D9r 1  20 rr rr     L0011:	jsr     _GetClock
0002DCr 1               ;
0002DCr 1               ; printDate(&newtime);
0002DCr 1               ;
0002DCr 1               	.dbg	line, "piafun.c", 67
0002DCr 1  A5 rr        	lda     sp
0002DEr 1  A6 rr        	ldx     sp+1
0002E0r 1  18           	clc
0002E1r 1  69 08        	adc     #$08
0002E3r 1  90 01        	bcc     L0012
0002E5r 1  E8           	inx
0002E6r 1  20 rr rr     L0012:	jsr     _printDate
0002E9r 1               ;
0002E9r 1               ; }
0002E9r 1               ;
0002E9r 1               	.dbg	line, "piafun.c", 69
0002E9r 1  A0 1A        L0001:	ldy     #$1A
0002EBr 1  4C rr rr     	jmp     addysp
0002EEr 1               
0002EEr 1               	.dbg	line
0002EEr 1               .endproc
0002EEr 1               
0002EEr 1               
