ca65 V2.19 - Git 8ac5e2f
Main file   : primes.s
Current file: primes.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git 8ac5e2f
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git 8ac5e2f"
000000r 1               	.setcpu		"65C02"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	on
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.dbg		file, "primes.c", 1744, 1675293725
000000r 1               	.dbg		file, "/usr/share/cc65/include/stdio.h", 6887, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/stdlib.h", 6885, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/string.h", 5492, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/fcntl.h", 3550, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/errno.h", 5854, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/unistd.h", 4309, 1605895793
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.dbg		sym, "stdin", "00", extern, "_stdin"
000000r 1               	.dbg		sym, "stdout", "00", extern, "_stdout"
000000r 1               	.dbg		sym, "fgets", "00", extern, "_fgets"
000000r 1               	.dbg		sym, "fprintf", "00", extern, "_fprintf"
000000r 1               	.dbg		sym, "printf", "00", extern, "_printf"
000000r 1               	.dbg		sym, "malloc", "00", extern, "_malloc"
000000r 1               	.dbg		sym, "atoi", "00", extern, "_atoi"
000000r 1               	.import		_stdin
000000r 1               	.import		_stdout
000000r 1               	.import		_fgets
000000r 1               	.import		_fprintf
000000r 1               	.import		_printf
000000r 1               	.import		_malloc
000000r 1               	.import		_atoi
000000r 1               	.export		_printflags
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"RODATA"
000000r 1               
000000r 1               S0003:
000000r 1  43 6F 6D 70  	.byte	$43,$6F,$6D,$70,$6C,$65,$74,$65,$64,$20,$73,$63,$61,$6E,$0A,$4C
000004r 1  6C 65 74 65  
000008r 1  64 20 73 63  
000010r 1  69 73 74 20  	.byte	$69,$73,$74,$20,$6F,$66,$20,$74,$68,$65,$20,$69,$74,$73,$79,$20
000014r 1  6F 66 20 74  
000018r 1  68 65 20 69  
000020r 1  50 72 69 6D  	.byte	$50,$72,$69,$6D,$65,$73,$20,$3A,$0A,$00
000024r 1  65 73 20 3A  
000028r 1  0A 00        
00002Ar 1               S0001:
00002Ar 1  45 6E 74 65  	.byte	$45,$6E,$74,$65,$72,$20,$74,$68,$65,$20,$6E,$75,$6D,$62,$65,$72
00002Er 1  72 20 74 68  
000032r 1  65 20 6E 75  
00003Ar 1  20 6F 66 20  	.byte	$20,$6F,$66,$20,$70,$72,$69,$6D,$65,$73,$20,$32,$2D,$25,$64,$3A
00003Er 1  70 72 69 6D  
000042r 1  65 73 20 32  
00004Ar 1  3E 00        	.byte	$3E,$00
00004Cr 1               S0002:
00004Cr 1  20 56 61 6C  	.byte	$20,$56,$61,$6C,$75,$65,$20,$6D,$75,$73,$74,$20,$62,$65,$20,$62
000050r 1  75 65 20 6D  
000054r 1  75 73 74 20  
00005Cr 1  65 74 77 65  	.byte	$65,$74,$77,$65,$65,$6E,$20,$32,$20,$61,$6E,$64,$20,$25,$64,$0A
000060r 1  65 6E 20 32  
000064r 1  20 61 6E 64  
00006Cr 1  00           	.byte	$00
00006Dr 1               S0006:
00006Dr 1  0A 54 6F 74  	.byte	$0A,$54,$6F,$74,$61,$6C,$20,$50,$72,$69,$6D,$65,$73,$20,$3D,$20
000071r 1  61 6C 20 50  
000075r 1  72 69 6D 65  
00007Dr 1  25 64 0A 00  	.byte	$25,$64,$0A,$00
000081r 1               S0007:
000081r 1  0A 25 34 64  	.byte	$0A,$25,$34,$64,$20,$3A,$20,$00
000085r 1  20 3A 20 00  
000089r 1               S0004:
000089r 1  0A 3A 3A 20  	.byte	$0A,$3A,$3A,$20,$00
00008Dr 1  00           
00008Er 1               S0005:
00008Er 1  20 25 36 64  	.byte	$20,$25,$36,$64,$00
000092r 1  00           
000093r 1               S0008:
000093r 1  25 31 64 20  	.byte	$25,$31,$64,$20,$00
000097r 1  00           
000098r 1               S0009:
000098r 1  0A 0A 00     	.byte	$0A,$0A,$00
00009Br 1               
00009Br 1               ; ---------------------------------------------------------------
00009Br 1               ; void __near__ printflags (char *flags, int count)
00009Br 1               ; ---------------------------------------------------------------
00009Br 1               
00009Br 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_printflags: near
000000r 1               
000000r 1               	.dbg	func, "printflags", "00", extern, "_printflags"
000000r 1               	.dbg	sym, "flags", "00", auto, 2
000000r 1               	.dbg	sym, "count", "00", auto, 0
000000r 1               	.dbg	sym, "i", "00", auto, -2
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; void printflags(char *flags, int count) {
000000r 1               ;
000000r 1               	.dbg	line, "primes.c", 75
000000r 1  20 rr rr     	jsr     pushax
000003r 1               ;
000003r 1               ; for(i=0;i<count;i++) {
000003r 1               ;
000003r 1               	.dbg	line, "primes.c", 77
000003r 1  20 rr rr     	jsr     decsp2
000006r 1  A9 00        	lda     #$00
000008r 1  92 rr        	sta     (sp)
00000Ar 1  A0 01        	ldy     #$01
00000Cr 1  91 rr        	sta     (sp),y
00000Er 1  20 rr rr     L0002:	jsr     pushw0sp
000011r 1  A0 05        	ldy     #$05
000013r 1  B1 rr        	lda     (sp),y
000015r 1  AA           	tax
000016r 1  88           	dey
000017r 1  B1 rr        	lda     (sp),y
000019r 1  20 rr rr     	jsr     tosicmp
00001Cr 1  10 54        	bpl     L0003
00001Er 1               ;
00001Er 1               ; if( i % 20 == 0) printf("\n%4d : ",i);
00001Er 1               ;
00001Er 1               	.dbg	line, "primes.c", 78
00001Er 1  20 rr rr     	jsr     pushw0sp
000021r 1  A0 00        	ldy     #$00
000023r 1  A2 00        	ldx     #$00
000025r 1  A9 14        	lda     #$14
000027r 1  20 rr rr     	jsr     tosmoda0
00002Ar 1  E0 00        	cpx     #$00
00002Cr 1  D0 15        	bne     L0006
00002Er 1  C9 00        	cmp     #$00
000030r 1  D0 11        	bne     L0006
000032r 1  A9 rr        	lda     #<(S0007)
000034r 1  A2 rr        	ldx     #>(S0007)
000036r 1  20 rr rr     	jsr     pushax
000039r 1  A0 05        	ldy     #$05
00003Br 1  20 rr rr     	jsr     pushwysp
00003Er 1  A0 04        	ldy     #$04
000040r 1  20 rr rr     	jsr     _printf
000043r 1               ;
000043r 1               ; printf("%1d ",flags[i]);
000043r 1               ;
000043r 1               	.dbg	line, "primes.c", 79
000043r 1  A9 rr        L0006:	lda     #<(S0008)
000045r 1  A2 rr        	ldx     #>(S0008)
000047r 1  20 rr rr     	jsr     pushax
00004Ar 1  A0 06        	ldy     #$06
00004Cr 1  B1 rr        	lda     (sp),y
00004Er 1  A0 02        	ldy     #$02
000050r 1  18           	clc
000051r 1  71 rr        	adc     (sp),y
000053r 1  85 rr        	sta     ptr1
000055r 1  A0 07        	ldy     #$07
000057r 1  B1 rr        	lda     (sp),y
000059r 1  A0 03        	ldy     #$03
00005Br 1  71 rr        	adc     (sp),y
00005Dr 1  85 rr        	sta     ptr1+1
00005Fr 1  B2 rr        	lda     (ptr1)
000061r 1  20 rr rr     	jsr     pusha0
000064r 1  A0 04        	ldy     #$04
000066r 1  20 rr rr     	jsr     _printf
000069r 1               ;
000069r 1               ; for(i=0;i<count;i++) {
000069r 1               ;
000069r 1               	.dbg	line, "primes.c", 77
000069r 1  A2 00        	ldx     #$00
00006Br 1  A9 01        	lda     #$01
00006Dr 1  20 rr rr     	jsr     addeq0sp
000070r 1  80 9C        	bra     L0002
000072r 1               ;
000072r 1               ; printf("\n\n");
000072r 1               ;
000072r 1               	.dbg	line, "primes.c", 81
000072r 1  A9 rr        L0003:	lda     #<(S0009)
000074r 1  A2 rr        	ldx     #>(S0009)
000076r 1  20 rr rr     	jsr     pushax
000079r 1  A0 02        	ldy     #$02
00007Br 1  20 rr rr     	jsr     _printf
00007Er 1               ;
00007Er 1               ; }
00007Er 1               ;
00007Er 1               	.dbg	line, "primes.c", 82
00007Er 1  4C rr rr     	jmp     incsp6
000081r 1               
000081r 1               	.dbg	line
000081r 1               .endproc
000081r 1               
000081r 1               ; ---------------------------------------------------------------
000081r 1               ; void __near__ main (void)
000081r 1               ; ---------------------------------------------------------------
000081r 1               
000081r 1               .segment	"CODE"
000081r 1               
000081r 1               .proc	_main: near
000081r 1               
000081r 1               	.dbg	func, "main", "00", extern, "_main"
000081r 1               	.dbg	sym, "buffer", "00", auto, -100
000081r 1               	.dbg	sym, "result", "00", auto, -102
000081r 1               	.dbg	sym, "flags", "00", auto, -104
000081r 1               	.dbg	sym, "flaginit", "00", auto, -106
000081r 1               	.dbg	sym, "count", "00", auto, -108
000081r 1               	.dbg	sym, "i", "00", auto, -110
000081r 1               	.dbg	sym, "halfcount", "00", auto, -112
000081r 1               	.dbg	sym, "a", "00", auto, -114
000081r 1               	.dbg	sym, "b", "00", auto, -116
000081r 1               
000081r 1               .segment	"CODE"
000081r 1               
000081r 1               ;
000081r 1               ; int count = 0,i,halfcount,a,b;
000081r 1               ;
000081r 1               	.dbg	line, "primes.c", 16
000081r 1  A0 6A        	ldy     #$6A
000083r 1  20 rr rr     	jsr     subysp
000086r 1  20 rr rr     	jsr     push0
000089r 1               ;
000089r 1               ; while(count <=0 || count >= MaxPrime) {
000089r 1               ;
000089r 1               	.dbg	line, "primes.c", 18
000089r 1  20 rr rr     	jsr     decsp8
00008Cr 1  4C rr rr     	jmp     L0004
00008Fr 1               ;
00008Fr 1               ; printf("Enter the number of primes 2-%d:>",MaxPrime);
00008Fr 1               ;
00008Fr 1               	.dbg	line, "primes.c", 19
00008Fr 1  A9 rr        L0002:	lda     #<(S0001)
000091r 1  A2 rr        	ldx     #>(S0001)
000093r 1  20 rr rr     	jsr     pushax
000096r 1  A2 4E        	ldx     #$4E
000098r 1  A9 20        	lda     #$20
00009Ar 1  20 rr rr     	jsr     pushax
00009Dr 1  A0 04        	ldy     #$04
00009Fr 1  20 rr rr     	jsr     _printf
0000A2r 1               ;
0000A2r 1               ; result = fgets(buffer,100,stdin);
0000A2r 1               ;
0000A2r 1               	.dbg	line, "primes.c", 20
0000A2r 1  20 rr rr     	jsr     decsp4
0000A5r 1  A5 rr        	lda     sp
0000A7r 1  A6 rr        	ldx     sp+1
0000A9r 1  18           	clc
0000AAr 1  69 14        	adc     #$14
0000ACr 1  90 01        	bcc     L0009
0000AEr 1  E8           	inx
0000AFr 1  A0 02        L0009:	ldy     #$02
0000B1r 1  91 rr        	sta     (sp),y
0000B3r 1  C8           	iny
0000B4r 1  8A           	txa
0000B5r 1  91 rr        	sta     (sp),y
0000B7r 1  A9 64        	lda     #$64
0000B9r 1  92 rr        	sta     (sp)
0000BBr 1  A0 01        	ldy     #$01
0000BDr 1  A9 00        	lda     #$00
0000BFr 1  91 rr        	sta     (sp),y
0000C1r 1  AD rr rr     	lda     _stdin
0000C4r 1  AE rr rr     	ldx     _stdin+1
0000C7r 1  20 rr rr     	jsr     _fgets
0000CAr 1  A0 0E        	ldy     #$0E
0000CCr 1  20 rr rr     	jsr     staxysp
0000CFr 1               ;
0000CFr 1               ; if(result == NULL) continue;
0000CFr 1               ;
0000CFr 1               	.dbg	line, "primes.c", 21
0000CFr 1  E0 00        	cpx     #$00
0000D1r 1  D0 04        	bne     L0035
0000D3r 1  C9 00        	cmp     #$00
0000D5r 1  F0 43        	beq     L0004
0000D7r 1               ;
0000D7r 1               ; count = atoi(buffer);
0000D7r 1               ;
0000D7r 1               	.dbg	line, "primes.c", 22
0000D7r 1  A5 rr        L0035:	lda     sp
0000D9r 1  A6 rr        	ldx     sp+1
0000DBr 1  18           	clc
0000DCr 1  69 10        	adc     #$10
0000DEr 1  90 01        	bcc     L000C
0000E0r 1  E8           	inx
0000E1r 1  20 rr rr     L000C:	jsr     _atoi
0000E4r 1  A0 08        	ldy     #$08
0000E6r 1  20 rr rr     	jsr     staxysp
0000E9r 1               ;
0000E9r 1               ; if (count <= 1 || count > MaxPrime) {
0000E9r 1               ;
0000E9r 1               	.dbg	line, "primes.c", 23
0000E9r 1  C9 02        	cmp     #$02
0000EBr 1  8A           	txa
0000ECr 1  E9 00        	sbc     #$00
0000EEr 1  50 02        	bvc     L000E
0000F0r 1  49 80        	eor     #$80
0000F2r 1  30 13        L000E:	bmi     L0030
0000F4r 1  A0 09        	ldy     #$09
0000F6r 1  B1 rr        	lda     (sp),y
0000F8r 1  AA           	tax
0000F9r 1  88           	dey
0000FAr 1  B1 rr        	lda     (sp),y
0000FCr 1  C9 21        	cmp     #$21
0000FEr 1  8A           	txa
0000FFr 1  E9 4E        	sbc     #$4E
000101r 1  70 02        	bvs     L0010
000103r 1  49 80        	eor     #$80
000105r 1  10 3E        L0010:	bpl     L0003
000107r 1               ;
000107r 1               ; printf(" Value must be between 2 and %d\n",MaxPrime);
000107r 1               ;
000107r 1               	.dbg	line, "primes.c", 24
000107r 1  A9 rr        L0030:	lda     #<(S0002)
000109r 1  A2 rr        	ldx     #>(S0002)
00010Br 1  20 rr rr     	jsr     pushax
00010Er 1  A2 4E        	ldx     #$4E
000110r 1  A9 20        	lda     #$20
000112r 1  20 rr rr     	jsr     pushax
000115r 1  A0 04        	ldy     #$04
000117r 1  20 rr rr     	jsr     _printf
00011Ar 1               ;
00011Ar 1               ; while(count <=0 || count >= MaxPrime) {
00011Ar 1               ;
00011Ar 1               	.dbg	line, "primes.c", 18
00011Ar 1  A0 09        L0004:	ldy     #$09
00011Cr 1  B1 rr        	lda     (sp),y
00011Er 1  AA           	tax
00011Fr 1  88           	dey
000120r 1  B1 rr        	lda     (sp),y
000122r 1  C9 01        	cmp     #$01
000124r 1  8A           	txa
000125r 1  E9 00        	sbc     #$00
000127r 1  50 02        	bvc     L0005
000129r 1  49 80        	eor     #$80
00012Br 1  10 03 4C rr  L0005:	jmi     L0002
00012Fr 1  rr           
000130r 1  C8           	iny
000131r 1  B1 rr        	lda     (sp),y
000133r 1  AA           	tax
000134r 1  88           	dey
000135r 1  B1 rr        	lda     (sp),y
000137r 1  C9 20        	cmp     #$20
000139r 1  8A           	txa
00013Ar 1  E9 4E        	sbc     #$4E
00013Cr 1  70 02        	bvs     L0007
00013Er 1  49 80        	eor     #$80
000140r 1  10 03 4C rr  L0007:	jmi     L0002
000144r 1  rr           
000145r 1               ;
000145r 1               ; count++;
000145r 1               ;
000145r 1               	.dbg	line, "primes.c", 30
000145r 1  A2 00        L0003:	ldx     #$00
000147r 1  A9 01        	lda     #$01
000149r 1  20 rr rr     	jsr     addeqysp
00014Cr 1               ;
00014Cr 1               ; halfcount = count/2;
00014Cr 1               ;
00014Cr 1               	.dbg	line, "primes.c", 31
00014Cr 1  A0 09        	ldy     #$09
00014Er 1  B1 rr        	lda     (sp),y
000150r 1  AA           	tax
000151r 1  88           	dey
000152r 1  B1 rr        	lda     (sp),y
000154r 1  E0 00        	cpx     #$00
000156r 1  10 19        	bpl     L0012
000158r 1  85 rr        	sta     regsave
00015Ar 1  86 rr        	stx     regsave+1
00015Cr 1  E0 FF        	cpx     #$FF
00015Er 1  D0 02        	bne     L0014
000160r 1  C9 FF        	cmp     #$FF
000162r 1  20 rr rr     L0014:	jsr     boolult
000165r 1  4A           	lsr     a
000166r 1  A5 rr        	lda     regsave
000168r 1  A6 rr        	ldx     regsave+1
00016Ar 1  B0 05        	bcs     L0012
00016Cr 1  A2 00        	ldx     #$00
00016Er 1  8A           	txa
00016Fr 1  80 03        	bra     L0013
000171r 1  20 rr rr     L0012:	jsr     asrax1
000174r 1  A0 04        L0013:	ldy     #$04
000176r 1  20 rr rr     	jsr     staxysp
000179r 1               ;
000179r 1               ; flags = malloc(count);
000179r 1               ;
000179r 1               	.dbg	line, "primes.c", 32
000179r 1  A0 09        	ldy     #$09
00017Br 1  B1 rr        	lda     (sp),y
00017Dr 1  AA           	tax
00017Er 1  88           	dey
00017Fr 1  B1 rr        	lda     (sp),y
000181r 1  20 rr rr     	jsr     _malloc
000184r 1  A0 0C        	ldy     #$0C
000186r 1  20 rr rr     	jsr     staxysp
000189r 1               ;
000189r 1               ; flaginit = (int *)&flags[3];
000189r 1               ;
000189r 1               	.dbg	line, "primes.c", 33
000189r 1  18           	clc
00018Ar 1  69 03        	adc     #$03
00018Cr 1  90 01        	bcc     L0015
00018Er 1  E8           	inx
00018Fr 1  A0 0A        L0015:	ldy     #$0A
000191r 1  20 rr rr     	jsr     staxysp
000194r 1               ;
000194r 1               ; for(i=0; i < halfcount; i++) flaginit[i] = 1;
000194r 1               ;
000194r 1               	.dbg	line, "primes.c", 35
000194r 1  A0 06        	ldy     #$06
000196r 1  A9 00        	lda     #$00
000198r 1  91 rr        	sta     (sp),y
00019Ar 1  C8           	iny
00019Br 1  91 rr        	sta     (sp),y
00019Dr 1  A0 07        L0016:	ldy     #$07
00019Fr 1  B1 rr        	lda     (sp),y
0001A1r 1  AA           	tax
0001A2r 1  88           	dey
0001A3r 1  B1 rr        	lda     (sp),y
0001A5r 1  A0 04        	ldy     #$04
0001A7r 1  D1 rr        	cmp     (sp),y
0001A9r 1  8A           	txa
0001AAr 1  C8           	iny
0001ABr 1  F1 rr        	sbc     (sp),y
0001ADr 1  50 02        	bvc     L002C
0001AFr 1  49 80        	eor     #$80
0001B1r 1  10 2B        L002C:	bpl     L0017
0001B3r 1  A0 07        	ldy     #$07
0001B5r 1  B1 rr        	lda     (sp),y
0001B7r 1  85 rr        	sta     tmp1
0001B9r 1  88           	dey
0001BAr 1  B1 rr        	lda     (sp),y
0001BCr 1  0A           	asl     a
0001BDr 1  26 rr        	rol     tmp1
0001BFr 1  18           	clc
0001C0r 1  A0 0A        	ldy     #$0A
0001C2r 1  71 rr        	adc     (sp),y
0001C4r 1  85 rr        	sta     ptr1
0001C6r 1  A5 rr        	lda     tmp1
0001C8r 1  C8           	iny
0001C9r 1  71 rr        	adc     (sp),y
0001CBr 1  85 rr        	sta     ptr1+1
0001CDr 1  A9 01        	lda     #$01
0001CFr 1  92 rr        	sta     (ptr1)
0001D1r 1  A8           	tay
0001D2r 1  3A           	dea
0001D3r 1  91 rr        	sta     (ptr1),y
0001D5r 1  A0 06        	ldy     #$06
0001D7r 1  AA           	tax
0001D8r 1  1A           	ina
0001D9r 1  20 rr rr     	jsr     addeqysp
0001DCr 1  80 BF        	bra     L0016
0001DEr 1               ;
0001DEr 1               ; flags[0]=0;
0001DEr 1               ;
0001DEr 1               	.dbg	line, "primes.c", 36
0001DEr 1  A0 0D        L0017:	ldy     #$0D
0001E0r 1  B1 rr        	lda     (sp),y
0001E2r 1  85 rr        	sta     ptr1+1
0001E4r 1  88           	dey
0001E5r 1  B1 rr        	lda     (sp),y
0001E7r 1  85 rr        	sta     ptr1
0001E9r 1  A9 00        	lda     #$00
0001EBr 1  92 rr        	sta     (ptr1)
0001EDr 1               ;
0001EDr 1               ; flags[1]=0;
0001EDr 1               ;
0001EDr 1               	.dbg	line, "primes.c", 37
0001EDr 1  C8           	iny
0001EEr 1  B1 rr        	lda     (sp),y
0001F0r 1  AA           	tax
0001F1r 1  88           	dey
0001F2r 1  B1 rr        	lda     (sp),y
0001F4r 1  1A           	ina
0001F5r 1  D0 01        	bne     L001A
0001F7r 1  E8           	inx
0001F8r 1  85 rr        L001A:	sta     ptr1
0001FAr 1  86 rr        	stx     ptr1+1
0001FCr 1  A9 00        	lda     #$00
0001FEr 1  92 rr        	sta     (ptr1)
000200r 1               ;
000200r 1               ; flags[2]=1;
000200r 1               ;
000200r 1               	.dbg	line, "primes.c", 38
000200r 1  C8           	iny
000201r 1  B1 rr        	lda     (sp),y
000203r 1  85 rr        	sta     ptr1+1
000205r 1  88           	dey
000206r 1  B1 rr        	lda     (sp),y
000208r 1  85 rr        	sta     ptr1
00020Ar 1  A0 02        	ldy     #$02
00020Cr 1  A9 01        	lda     #$01
00020Er 1  91 rr        	sta     (ptr1),y
000210r 1               ;
000210r 1               ; flags[count]=1;
000210r 1               ;
000210r 1               	.dbg	line, "primes.c", 39
000210r 1  A0 0C        	ldy     #$0C
000212r 1  B1 rr        	lda     (sp),y
000214r 1  A0 08        	ldy     #$08
000216r 1  18           	clc
000217r 1  71 rr        	adc     (sp),y
000219r 1  85 rr        	sta     ptr1
00021Br 1  A0 0D        	ldy     #$0D
00021Dr 1  B1 rr        	lda     (sp),y
00021Fr 1  A0 09        	ldy     #$09
000221r 1  71 rr        	adc     (sp),y
000223r 1  85 rr        	sta     ptr1+1
000225r 1  A9 01        	lda     #$01
000227r 1  92 rr        	sta     (ptr1)
000229r 1               ;
000229r 1               ; for (a = 3; (a+a) < count; a++) {
000229r 1               ;
000229r 1               	.dbg	line, "primes.c", 52
000229r 1  A0 02        	ldy     #$02
00022Br 1  A9 03        	lda     #$03
00022Dr 1  91 rr        	sta     (sp),y
00022Fr 1  A9 00        	lda     #$00
000231r 1  C8           	iny
000232r 1  91 rr        	sta     (sp),y
000234r 1  A0 02        L001C:	ldy     #$02
000236r 1  B1 rr        	lda     (sp),y
000238r 1  18           	clc
000239r 1  71 rr        	adc     (sp),y
00023Br 1  48           	pha
00023Cr 1  C8           	iny
00023Dr 1  B1 rr        	lda     (sp),y
00023Fr 1  71 rr        	adc     (sp),y
000241r 1  AA           	tax
000242r 1  68           	pla
000243r 1  A0 08        	ldy     #$08
000245r 1  D1 rr        	cmp     (sp),y
000247r 1  8A           	txa
000248r 1  C8           	iny
000249r 1  F1 rr        	sbc     (sp),y
00024Br 1  50 02        	bvc     L002D
00024Dr 1  49 80        	eor     #$80
00024Fr 1  10 74        L002D:	bpl     L001D
000251r 1               ;
000251r 1               ; if (flags[a] == 0) continue;
000251r 1               ;
000251r 1               	.dbg	line, "primes.c", 53
000251r 1  A0 0C        	ldy     #$0C
000253r 1  B1 rr        	lda     (sp),y
000255r 1  A0 02        	ldy     #$02
000257r 1  18           	clc
000258r 1  71 rr        	adc     (sp),y
00025Ar 1  85 rr        	sta     ptr1
00025Cr 1  A0 0D        	ldy     #$0D
00025Er 1  B1 rr        	lda     (sp),y
000260r 1  A0 03        	ldy     #$03
000262r 1  71 rr        	adc     (sp),y
000264r 1  85 rr        	sta     ptr1+1
000266r 1  B2 rr        	lda     (ptr1)
000268r 1  F0 4F        	beq     L001E
00026Ar 1               ;
00026Ar 1               ; for (b = a+a; b < count; b += a) flags[b] = 0;
00026Ar 1               ;
00026Ar 1               	.dbg	line, "primes.c", 54
00026Ar 1  88           	dey
00026Br 1  B1 rr        	lda     (sp),y
00026Dr 1  18           	clc
00026Er 1  71 rr        	adc     (sp),y
000270r 1  48           	pha
000271r 1  C8           	iny
000272r 1  B1 rr        	lda     (sp),y
000274r 1  71 rr        	adc     (sp),y
000276r 1  AA           	tax
000277r 1  68           	pla
000278r 1  20 rr rr     	jsr     stax0sp
00027Br 1  A0 01        	ldy     #$01
00027Dr 1  B1 rr        L0032:	lda     (sp),y
00027Fr 1  AA           	tax
000280r 1  B2 rr        	lda     (sp)
000282r 1  A0 08        	ldy     #$08
000284r 1  D1 rr        	cmp     (sp),y
000286r 1  8A           	txa
000287r 1  C8           	iny
000288r 1  F1 rr        	sbc     (sp),y
00028Ar 1  50 02        	bvc     L002E
00028Cr 1  49 80        	eor     #$80
00028Er 1  10 29        L002E:	bpl     L001E
000290r 1  A0 0C        	ldy     #$0C
000292r 1  B1 rr        	lda     (sp),y
000294r 1  18           	clc
000295r 1  72 rr        	adc     (sp)
000297r 1  85 rr        	sta     ptr1
000299r 1  C8           	iny
00029Ar 1  B1 rr        	lda     (sp),y
00029Cr 1  A0 01        	ldy     #$01
00029Er 1  71 rr        	adc     (sp),y
0002A0r 1  85 rr        	sta     ptr1+1
0002A2r 1  A9 00        	lda     #$00
0002A4r 1  92 rr        	sta     (ptr1)
0002A6r 1  C8           	iny
0002A7r 1  B1 rr        	lda     (sp),y
0002A9r 1  18           	clc
0002AAr 1  72 rr        	adc     (sp)
0002ACr 1  92 rr        	sta     (sp)
0002AEr 1  C8           	iny
0002AFr 1  B1 rr        	lda     (sp),y
0002B1r 1  A0 01        	ldy     #$01
0002B3r 1  71 rr        	adc     (sp),y
0002B5r 1  91 rr        	sta     (sp),y
0002B7r 1  80 C4        	bra     L0032
0002B9r 1               ;
0002B9r 1               ; for (a = 3; (a+a) < count; a++) {
0002B9r 1               ;
0002B9r 1               	.dbg	line, "primes.c", 52
0002B9r 1  A0 02        L001E:	ldy     #$02
0002BBr 1  A2 00        	ldx     #$00
0002BDr 1  A9 01        	lda     #$01
0002BFr 1  20 rr rr     	jsr     addeqysp
0002C2r 1  4C rr rr     	jmp     L001C
0002C5r 1               ;
0002C5r 1               ; printf("Completed scan\nList of the itsy Primes :\n");
0002C5r 1               ;
0002C5r 1               	.dbg	line, "primes.c", 57
0002C5r 1  A9 rr        L001D:	lda     #<(S0003)
0002C7r 1  A2 rr        	ldx     #>(S0003)
0002C9r 1  20 rr rr     	jsr     pushax
0002CCr 1  A0 02        	ldy     #$02
0002CEr 1  20 rr rr     	jsr     _printf
0002D1r 1               ;
0002D1r 1               ; a=0;
0002D1r 1               ;
0002D1r 1               	.dbg	line, "primes.c", 60
0002D1r 1  A0 02        	ldy     #$02
0002D3r 1  A9 00        	lda     #$00
0002D5r 1  91 rr        	sta     (sp),y
0002D7r 1  C8           	iny
0002D8r 1  91 rr        	sta     (sp),y
0002DAr 1               ;
0002DAr 1               ; for(b = 0; b<count; b++ ) {
0002DAr 1               ;
0002DAr 1               	.dbg	line, "primes.c", 61
0002DAr 1  92 rr        	sta     (sp)
0002DCr 1  A0 01        	ldy     #$01
0002DEr 1  91 rr        	sta     (sp),y
0002E0r 1  A0 01        L0025:	ldy     #$01
0002E2r 1  B1 rr        	lda     (sp),y
0002E4r 1  AA           	tax
0002E5r 1  B2 rr        	lda     (sp)
0002E7r 1  A0 08        	ldy     #$08
0002E9r 1  D1 rr        	cmp     (sp),y
0002EBr 1  8A           	txa
0002ECr 1  C8           	iny
0002EDr 1  F1 rr        	sbc     (sp),y
0002EFr 1  50 02        	bvc     L002F
0002F1r 1  49 80        	eor     #$80
0002F3r 1  10 73        L002F:	bpl     L0026
0002F5r 1               ;
0002F5r 1               ; if(flags[b] == 1) {
0002F5r 1               ;
0002F5r 1               	.dbg	line, "primes.c", 63
0002F5r 1  A0 0C        	ldy     #$0C
0002F7r 1  B1 rr        	lda     (sp),y
0002F9r 1  18           	clc
0002FAr 1  72 rr        	adc     (sp)
0002FCr 1  85 rr        	sta     ptr1
0002FEr 1  C8           	iny
0002FFr 1  B1 rr        	lda     (sp),y
000301r 1  A0 01        	ldy     #$01
000303r 1  71 rr        	adc     (sp),y
000305r 1  85 rr        	sta     ptr1+1
000307r 1  A2 00        	ldx     #$00
000309r 1  B2 rr        	lda     (ptr1)
00030Br 1  C9 01        	cmp     #$01
00030Dr 1  D0 51        	bne     L0034
00030Fr 1               ;
00030Fr 1               ; if(a%12 == 0) printf("\n:: ");
00030Fr 1               ;
00030Fr 1               	.dbg	line, "primes.c", 64
00030Fr 1  A0 05        	ldy     #$05
000311r 1  20 rr rr     	jsr     pushwysp
000314r 1  A0 00        	ldy     #$00
000316r 1  A2 00        	ldx     #$00
000318r 1  A9 0C        	lda     #$0C
00031Ar 1  20 rr rr     	jsr     tosmoda0
00031Dr 1  E0 00        	cpx     #$00
00031Fr 1  D0 10        	bne     L002A
000321r 1  C9 00        	cmp     #$00
000323r 1  D0 0C        	bne     L002A
000325r 1  A9 rr        	lda     #<(S0004)
000327r 1  A2 rr        	ldx     #>(S0004)
000329r 1  20 rr rr     	jsr     pushax
00032Cr 1  A0 02        	ldy     #$02
00032Er 1  20 rr rr     	jsr     _printf
000331r 1               ;
000331r 1               ; fprintf(stdout," %6d",b);
000331r 1               ;
000331r 1               	.dbg	line, "primes.c", 65
000331r 1  20 rr rr     L002A:	jsr     decsp4
000334r 1  AD rr rr     	lda     _stdout
000337r 1  A0 02        	ldy     #$02
000339r 1  91 rr        	sta     (sp),y
00033Br 1  C8           	iny
00033Cr 1  AD rr rr     	lda     _stdout+1
00033Fr 1  91 rr        	sta     (sp),y
000341r 1  A9 rr        	lda     #<(S0005)
000343r 1  92 rr        	sta     (sp)
000345r 1  A0 01        	ldy     #$01
000347r 1  A9 rr        	lda     #>(S0005)
000349r 1  91 rr        	sta     (sp),y
00034Br 1  A0 07        	ldy     #$07
00034Dr 1  20 rr rr     	jsr     pushwysp
000350r 1  A0 06        	ldy     #$06
000352r 1  20 rr rr     	jsr     _fprintf
000355r 1               ;
000355r 1               ; a++;
000355r 1               ;
000355r 1               	.dbg	line, "primes.c", 66
000355r 1  A0 02        	ldy     #$02
000357r 1  A2 00        	ldx     #$00
000359r 1  A9 01        	lda     #$01
00035Br 1  20 rr rr     	jsr     addeqysp
00035Er 1               ;
00035Er 1               ; for(b = 0; b<count; b++ ) {
00035Er 1               ;
00035Er 1               	.dbg	line, "primes.c", 61
00035Er 1  A2 00        	ldx     #$00
000360r 1  A9 01        L0034:	lda     #$01
000362r 1  20 rr rr     	jsr     addeq0sp
000365r 1  4C rr rr     	jmp     L0025
000368r 1               ;
000368r 1               ; printf("\nTotal Primes = %d\n",a);
000368r 1               ;
000368r 1               	.dbg	line, "primes.c", 71
000368r 1  A9 rr        L0026:	lda     #<(S0006)
00036Ar 1  A2 rr        	ldx     #>(S0006)
00036Cr 1  20 rr rr     	jsr     pushax
00036Fr 1  A0 07        	ldy     #$07
000371r 1  20 rr rr     	jsr     pushwysp
000374r 1  A0 04        	ldy     #$04
000376r 1  20 rr rr     	jsr     _printf
000379r 1               ;
000379r 1               ; }
000379r 1               ;
000379r 1               	.dbg	line, "primes.c", 73
000379r 1  A0 74        	ldy     #$74
00037Br 1  4C rr rr     	jmp     addysp
00037Er 1               
00037Er 1               	.dbg	line
00037Er 1               .endproc
00037Er 1               
00037Er 1               
