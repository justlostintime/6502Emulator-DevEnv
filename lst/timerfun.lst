ca65 V2.19 - Git 544a49c
Main file   : timerfun.s
Current file: timerfun.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.19 - Git 544a49c
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.19 - Git 544a49c"
000000r 1               	.setcpu		"65C02"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	on
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.dbg		file, "timerfun.c", 1161, 1675975247
000000r 1               	.dbg		file, "/usr/share/cc65/include/stdio.h", 6887, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/stdlib.h", 6885, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/string.h", 5492, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/fcntl.h", 3550, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/errno.h", 5854, 1605895793
000000r 1               	.dbg		file, "/usr/share/cc65/include/unistd.h", 4309, 1605895793
000000r 1               	.dbg		file, "../../cc65Integration/include/ctmon65.h", 5154, 1675972372
000000r 1               	.forceimport	__STARTUP__
000000r 1               	.dbg		sym, "printf", "00", extern, "_printf"
000000r 1               	.dbg		sym, "sleep", "00", extern, "_sleep"
000000r 1               	.dbg		sym, "GetClock", "00", extern, "_GetClock"
000000r 1               	.dbg		sym, "init_timer", "00", extern, "_init_timer"
000000r 1               	.dbg		sym, "get_timer", "00", extern, "_get_timer"
000000r 1               	.dbg		sym, "get_timer_tick_length", "00", extern, "_get_timer_tick_length"
000000r 1               	.import		_printf
000000r 1               	.import		_sleep
000000r 1               	.import		_GetClock
000000r 1               	.import		_init_timer
000000r 1               	.import		_get_timer
000000r 1               	.import		_get_timer_tick_length
000000r 1               	.export		_thedatofweek
000000r 1               	.export		_printDateTime
000000r 1               	.export		_main
000000r 1               
000000r 1               .segment	"DATA"
000000r 1               
000000r 1               _thedatofweek:
000000r 1  rr rr        	.addr	S0001
000002r 1  rr rr        	.addr	S0002
000004r 1  rr rr        	.addr	S0003
000006r 1  rr rr        	.addr	S0004
000008r 1  rr rr        	.addr	S0005
00000Ar 1  rr rr        	.addr	S0006
00000Cr 1  rr rr        	.addr	S0007
00000Er 1               
00000Er 1               .segment	"RODATA"
000000r 1               
000000r 1               S0009:
000000r 1  49 6E 69 74  	.byte	$49,$6E,$69,$74,$20,$74,$69,$6D,$65,$72,$20,$72,$65,$74,$75,$72
000004r 1  20 74 69 6D  
000008r 1  65 72 20 72  
000010r 1  6E 65 64 20  	.byte	$6E,$65,$64,$20,$25,$30,$34,$78,$2C,$20,$74,$69,$6D,$65,$6F,$75
000014r 1  25 30 34 78  
000018r 1  2C 20 74 69  
000020r 1  74 20 70 61  	.byte	$74,$20,$70,$61,$72,$6D,$20,$3D,$20,$25,$64,$0A,$00
000024r 1  72 6D 20 3D  
000028r 1  20 25 64 0A  
00002Dr 1               S0008:
00002Dr 1  25 30 32 78  	.byte	$25,$30,$32,$78,$2D,$25,$30,$32,$78,$2D,$25,$30,$32,$78,$25,$30
000031r 1  2D 25 30 32  
000035r 1  78 2D 25 30  
00003Dr 1  32 78 20 25  	.byte	$32,$78,$20,$25,$30,$32,$78,$3A,$25,$30,$32,$78,$3A,$25,$30,$32
000041r 1  30 32 78 3A  
000045r 1  25 30 32 78  
00004Dr 1  78 20 25 73  	.byte	$78,$20,$25,$73,$0A,$00
000051r 1  0A 00        
000053r 1               S000A:
000053r 1  54 69 6D 65  	.byte	$54,$69,$6D,$65,$72,$20,$77,$61,$73,$20,$63,$6F,$72,$72,$65,$63
000057r 1  72 20 77 61  
00005Br 1  73 20 63 6F  
000063r 1  74 6C 79 20  	.byte	$74,$6C,$79,$20,$73,$74,$61,$72,$74,$65,$64,$0A,$00
000067r 1  73 74 61 72  
00006Br 1  74 65 64 0A  
000070r 1               S000D:
000070r 1  25 30 39 6C  	.byte	$25,$30,$39,$6C,$75,$20,$74,$69,$63,$6B,$20,$6C,$65,$6E,$20,$3D
000074r 1  75 20 74 69  
000078r 1  63 6B 20 6C  
000080r 1  20 25 64 20  	.byte	$20,$25,$64,$20,$6D,$73,$0A,$00
000084r 1  6D 73 0A 00  
000088r 1               S000E:
000088r 1  54 69 6D 65  	.byte	$54,$69,$6D,$65,$72,$20,$66,$61,$69,$6C,$65,$64,$20,$74,$6F,$20
00008Cr 1  72 20 66 61  
000090r 1  69 6C 65 64  
000098r 1  73 74 61 72  	.byte	$73,$74,$61,$72,$74,$0A,$00
00009Cr 1  74 0A 00     
00009Fr 1               S000C:
00009Fr 1  43 61 6C 6C  	.byte	$43,$61,$6C,$6C,$20,$67,$65,$74,$5F,$74,$69,$6D,$65,$72,$2E,$2E
0000A3r 1  20 67 65 74  
0000A7r 1  5F 74 69 6D  
0000AFr 1  2E 00        	.byte	$2E,$00
0000B1r 1               S000B:
0000B1r 1  53 6C 65 65  	.byte	$53,$6C,$65,$65,$70,$20,$31,$20,$73,$65,$63,$6F,$6E,$64,$0A,$00
0000B5r 1  70 20 31 20  
0000B9r 1  73 65 63 6F  
0000C1r 1               S000F:
0000C1r 1  43 6F 6D 70  	.byte	$43,$6F,$6D,$70,$6C,$65,$74,$65,$64,$20,$74,$65,$73,$74,$0A,$00
0000C5r 1  6C 65 74 65  
0000C9r 1  64 20 74 65  
0000D1r 1               S0004:
0000D1r 1  57 65 64 6E  	.byte	$57,$65,$64,$6E,$65,$73,$64,$61,$79,$00
0000D5r 1  65 73 64 61  
0000D9r 1  79 00        
0000DBr 1               S0005:
0000DBr 1  54 68 75 72  	.byte	$54,$68,$75,$72,$73,$64,$61,$79,$00
0000DFr 1  73 64 61 79  
0000E3r 1  00           
0000E4r 1               S0007:
0000E4r 1  53 61 74 75  	.byte	$53,$61,$74,$75,$72,$64,$61,$79,$00
0000E8r 1  72 64 61 79  
0000ECr 1  00           
0000EDr 1               S0003:
0000EDr 1  54 75 65 73  	.byte	$54,$75,$65,$73,$64,$61,$79,$00
0000F1r 1  64 61 79 00  
0000F5r 1               S0002:
0000F5r 1  4D 6F 6E 64  	.byte	$4D,$6F,$6E,$64,$61,$79,$00
0000F9r 1  61 79 00     
0000FCr 1               S0006:
0000FCr 1  46 72 69 64  	.byte	$46,$72,$69,$64,$61,$79,$00
000100r 1  61 79 00     
000103r 1               S0001:
000103r 1  53 75 6E 64  	.byte	$53,$75,$6E,$64,$61,$79,$00
000107r 1  61 79 00     
00010Ar 1               
00010Ar 1               ; ---------------------------------------------------------------
00010Ar 1               ; void __near__ printDateTime (void)
00010Ar 1               ; ---------------------------------------------------------------
00010Ar 1               
00010Ar 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_printDateTime: near
000000r 1               
000000r 1               	.dbg	func, "printDateTime", "00", extern, "_printDateTime"
000000r 1               	.dbg	sym, "c", "00", auto, -9
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               ;
000000r 1               ; GetClock(&c);
000000r 1               ;
000000r 1               	.dbg	line, "timerfun.c", 13
000000r 1  A0 09        	ldy     #$09
000002r 1  20 rr rr     	jsr     subysp
000005r 1  A5 rr        	lda     sp
000007r 1  A6 rr        	ldx     sp+1
000009r 1  20 rr rr     	jsr     _GetClock
00000Cr 1               ;
00000Cr 1               ; printf("%02x-%02x-%02x%02x %02x:%02x:%02x %s\n",c.month,c.day,c.century,c.year,c.hour,c.minute,c.second,thedatofweek[c.dayofweek]);
00000Cr 1               ;
00000Cr 1               	.dbg	line, "timerfun.c", 14
00000Cr 1  A9 rr        	lda     #<(S0008)
00000Er 1  A2 rr        	ldx     #>(S0008)
000010r 1  20 rr rr     	jsr     pushax
000013r 1  A0 03        	ldy     #$03
000015r 1  B1 rr        	lda     (sp),y
000017r 1  20 rr rr     	jsr     pusha0
00001Ar 1  A0 06        	ldy     #$06
00001Cr 1  B1 rr        	lda     (sp),y
00001Er 1  20 rr rr     	jsr     pusha0
000021r 1  A0 09        	ldy     #$09
000023r 1  B1 rr        	lda     (sp),y
000025r 1  20 rr rr     	jsr     pusha0
000028r 1  A0 0C        	ldy     #$0C
00002Ar 1  B1 rr        	lda     (sp),y
00002Cr 1  20 rr rr     	jsr     pusha0
00002Fr 1  A0 0F        	ldy     #$0F
000031r 1  B1 rr        	lda     (sp),y
000033r 1  20 rr rr     	jsr     pusha0
000036r 1  A0 12        	ldy     #$12
000038r 1  B1 rr        	lda     (sp),y
00003Ar 1  20 rr rr     	jsr     pusha0
00003Dr 1  A0 15        	ldy     #$15
00003Fr 1  B1 rr        	lda     (sp),y
000041r 1  20 rr rr     	jsr     pusha0
000044r 1  A0 18        	ldy     #$18
000046r 1  B1 rr        	lda     (sp),y
000048r 1  0A           	asl     a
000049r 1  90 03        	bcc     L0003
00004Br 1  A2 01        	ldx     #$01
00004Dr 1  18           	clc
00004Er 1  69 rr        L0003:	adc     #<(_thedatofweek)
000050r 1  85 rr        	sta     ptr1
000052r 1  8A           	txa
000053r 1  69 rr        	adc     #>(_thedatofweek)
000055r 1  85 rr        	sta     ptr1+1
000057r 1  A0 01        	ldy     #$01
000059r 1  B1 rr        	lda     (ptr1),y
00005Br 1  AA           	tax
00005Cr 1  B2 rr        	lda     (ptr1)
00005Er 1  20 rr rr     	jsr     pushax
000061r 1  A0 12        	ldy     #$12
000063r 1  20 rr rr     	jsr     _printf
000066r 1               ;
000066r 1               ; }
000066r 1               ;
000066r 1               	.dbg	line, "timerfun.c", 16
000066r 1  A0 09        	ldy     #$09
000068r 1  4C rr rr     	jmp     addysp
00006Br 1               
00006Br 1               	.dbg	line
00006Br 1               .endproc
00006Br 1               
00006Br 1               ; ---------------------------------------------------------------
00006Br 1               ; void __near__ main (void)
00006Br 1               ; ---------------------------------------------------------------
00006Br 1               
00006Br 1               .segment	"CODE"
00006Br 1               
00006Br 1               .proc	_main: near
00006Br 1               
00006Br 1               	.dbg	func, "main", "00", extern, "_main"
00006Br 1               	.dbg	sym, "currenttime", "00", auto, -4
00006Br 1               	.dbg	sym, "result", "00", auto, -6
00006Br 1               	.dbg	sym, "loops", "00", auto, -8
00006Br 1               
00006Br 1               .segment	"CODE"
00006Br 1               
00006Br 1               ;
00006Br 1               ; unsigned long currenttime = 0;
00006Br 1               ;
00006Br 1               	.dbg	line, "timerfun.c", 19
00006Br 1  20 rr rr     	jsr     pushl0
00006Er 1               ;
00006Er 1               ; int loops = 20;
00006Er 1               ;
00006Er 1               	.dbg	line, "timerfun.c", 21
00006Er 1  20 rr rr     	jsr     decsp2
000071r 1  A9 14        	lda     #$14
000073r 1  20 rr rr     	jsr     pusha0
000076r 1               ;
000076r 1               ; result = init_timer(timer_10ms);
000076r 1               ;
000076r 1               	.dbg	line, "timerfun.c", 22
000076r 1  A9 01        	lda     #$01
000078r 1  20 rr rr     	jsr     _init_timer
00007Br 1  A0 02        	ldy     #$02
00007Dr 1  20 rr rr     	jsr     staxysp
000080r 1               ;
000080r 1               ; printf("Init timer returned %04x, timeout parm = %d\n",result,get_timer_tick_length());
000080r 1               ;
000080r 1               	.dbg	line, "timerfun.c", 23
000080r 1  A9 rr        	lda     #<(S0009)
000082r 1  A2 rr        	ldx     #>(S0009)
000084r 1  20 rr rr     	jsr     pushax
000087r 1  A0 05        	ldy     #$05
000089r 1  B1 rr        	lda     (sp),y
00008Br 1  AA           	tax
00008Cr 1  88           	dey
00008Dr 1  B1 rr        	lda     (sp),y
00008Fr 1  20 rr rr     	jsr     pushax
000092r 1  20 rr rr     	jsr     _get_timer_tick_length
000095r 1  20 rr rr     	jsr     pushax
000098r 1  A0 06        	ldy     #$06
00009Ar 1  20 rr rr     	jsr     _printf
00009Dr 1               ;
00009Dr 1               ; if (result){           // start the timer running
00009Dr 1               ;
00009Dr 1               	.dbg	line, "timerfun.c", 24
00009Dr 1  A0 03        	ldy     #$03
00009Fr 1  B1 rr        	lda     (sp),y
0000A1r 1  88           	dey
0000A2r 1  11 rr        	ora     (sp),y
0000A4r 1  F0 73        	beq     L0002
0000A6r 1               ;
0000A6r 1               ; printf("Timer was correctly started\n");
0000A6r 1               ;
0000A6r 1               	.dbg	line, "timerfun.c", 25
0000A6r 1  A9 rr        	lda     #<(S000A)
0000A8r 1  A2 rr        	ldx     #>(S000A)
0000AAr 1  20 rr rr     	jsr     pushax
0000ADr 1  A0 02        	ldy     #$02
0000AFr 1  20 rr rr     	jsr     _printf
0000B2r 1               ;
0000B2r 1               ; for (loops = 0; loops < 20; loops++) {
0000B2r 1               ;
0000B2r 1               	.dbg	line, "timerfun.c", 26
0000B2r 1  A9 00        	lda     #$00
0000B4r 1  92 rr        	sta     (sp)
0000B6r 1  A0 01        	ldy     #$01
0000B8r 1  91 rr        	sta     (sp),y
0000BAr 1  A0 01        L0003:	ldy     #$01
0000BCr 1  B1 rr        	lda     (sp),y
0000BEr 1  AA           	tax
0000BFr 1  B2 rr        	lda     (sp)
0000C1r 1  C9 14        	cmp     #$14
0000C3r 1  8A           	txa
0000C4r 1  E9 00        	sbc     #$00
0000C6r 1  50 02        	bvc     L0007
0000C8r 1  49 80        	eor     #$80
0000CAr 1  10 59        L0007:	bpl     L0008
0000CCr 1               ;
0000CCr 1               ; printf("Sleep 1 second\n");
0000CCr 1               ;
0000CCr 1               	.dbg	line, "timerfun.c", 27
0000CCr 1  A9 rr        	lda     #<(S000B)
0000CEr 1  A2 rr        	ldx     #>(S000B)
0000D0r 1  20 rr rr     	jsr     pushax
0000D3r 1  A0 02        	ldy     #$02
0000D5r 1  20 rr rr     	jsr     _printf
0000D8r 1               ;
0000D8r 1               ; sleep(1);
0000D8r 1               ;
0000D8r 1               	.dbg	line, "timerfun.c", 28
0000D8r 1  A2 00        	ldx     #$00
0000DAr 1  A9 01        	lda     #$01
0000DCr 1  20 rr rr     	jsr     _sleep
0000DFr 1               ;
0000DFr 1               ; printDateTime();
0000DFr 1               ;
0000DFr 1               	.dbg	line, "timerfun.c", 29
0000DFr 1  20 rr rr     	jsr     _printDateTime
0000E2r 1               ;
0000E2r 1               ; printf("Call get_timer...");
0000E2r 1               ;
0000E2r 1               	.dbg	line, "timerfun.c", 30
0000E2r 1  A9 rr        	lda     #<(S000C)
0000E4r 1  A2 rr        	ldx     #>(S000C)
0000E6r 1  20 rr rr     	jsr     pushax
0000E9r 1  A0 02        	ldy     #$02
0000EBr 1  20 rr rr     	jsr     _printf
0000EEr 1               ;
0000EEr 1               ; currenttime = get_timer();
0000EEr 1               ;
0000EEr 1               	.dbg	line, "timerfun.c", 31
0000EEr 1  20 rr rr     	jsr     _get_timer
0000F1r 1  A0 04        	ldy     #$04
0000F3r 1  20 rr rr     	jsr     steaxysp
0000F6r 1               ;
0000F6r 1               ; printf("%09lu tick len = %d ms\n",currenttime,get_timer_tick_length());
0000F6r 1               ;
0000F6r 1               	.dbg	line, "timerfun.c", 32
0000F6r 1  A9 rr        	lda     #<(S000D)
0000F8r 1  A2 rr        	ldx     #>(S000D)
0000FAr 1  20 rr rr     	jsr     pushax
0000FDr 1  A0 09        	ldy     #$09
0000FFr 1  20 rr rr     	jsr     ldeaxysp
000102r 1  20 rr rr     	jsr     pusheax
000105r 1  20 rr rr     	jsr     _get_timer_tick_length
000108r 1  20 rr rr     	jsr     pushax
00010Br 1  A0 08        	ldy     #$08
00010Dr 1  20 rr rr     	jsr     _printf
000110r 1               ;
000110r 1               ; for (loops = 0; loops < 20; loops++) {
000110r 1               ;
000110r 1               	.dbg	line, "timerfun.c", 26
000110r 1  A2 00        	ldx     #$00
000112r 1  A9 01        	lda     #$01
000114r 1  20 rr rr     	jsr     addeq0sp
000117r 1  80 A1        	bra     L0003
000119r 1               ;
000119r 1               ; printf("Timer failed to start\n");
000119r 1               ;
000119r 1               	.dbg	line, "timerfun.c", 35
000119r 1  A9 rr        L0002:	lda     #<(S000E)
00011Br 1  A2 rr        	ldx     #>(S000E)
00011Dr 1  20 rr rr     	jsr     pushax
000120r 1  A0 02        	ldy     #$02
000122r 1  20 rr rr     	jsr     _printf
000125r 1               ;
000125r 1               ; printf("Completed test\n");
000125r 1               ;
000125r 1               	.dbg	line, "timerfun.c", 37
000125r 1  A9 rr        L0008:	lda     #<(S000F)
000127r 1  A2 rr        	ldx     #>(S000F)
000129r 1  20 rr rr     	jsr     pushax
00012Cr 1  A0 02        	ldy     #$02
00012Er 1  20 rr rr     	jsr     _printf
000131r 1               ;
000131r 1               ; }
000131r 1               ;
000131r 1               	.dbg	line, "timerfun.c", 39
000131r 1  4C rr rr     	jmp     incsp8
000134r 1               
000134r 1               	.dbg	line
000134r 1               .endproc
000134r 1               
000134r 1               
